
// Generated from ./LLVMParser.g4 by ANTLR 4.13.2


#include "LLVMParserVisitor.h"

#include "LLVMParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct LLVMParserStaticData final {
  LLVMParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  LLVMParserStaticData(const LLVMParserStaticData&) = delete;
  LLVMParserStaticData(LLVMParserStaticData&&) = delete;
  LLVMParserStaticData& operator=(const LLVMParserStaticData&) = delete;
  LLVMParserStaticData& operator=(LLVMParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag llvmparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<LLVMParserStaticData> llvmparserParserStaticData = nullptr;

void llvmparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (llvmparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(llvmparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<LLVMParserStaticData>(
    std::vector<std::string>{
      "module", "topLevelEntities", "topLevelEntityList", "topLevelEntity", 
      "sourceFilename", "targetDefinition", "moduleAsm", "typeDef", "comdatDef", 
      "selectionKind", "globalDecl", "globalDef", "optExternallyInitialized", 
      "immutable", "globalAttrs", "globalAttrList", "globalAttr", "indirectSymbolDef", 
      "alias", "functionDecl", "functionDef", "functionHeader", "optGC", 
      "optPrefix", "optPrologue", "optPersonality", "functionBody", "attrGroupDef", 
      "namedMetadataDef", "metadataNodes", "metadataNodeList", "metadataNode", 
      "metadataDef", "optDistinct", "useListOrders", "useListOrderList", 
      "useListOrder", "useListOrderBB", "globalIdent", "localIdent", "labelIdent", 
      "attrGroupID", "comdatName", "metadataName", "metadataID", "llvmType", 
      "concreteNonRecType", "voidType", "intType", "floatType", "floatKind", 
      "mmxType", "optAddrSpace", "addrSpace", "vectorType", "labelType", 
      "tokenType", "metadataType", "arrayType", "structType", "typeList", 
      "opaqueType", "namedType", "value", "inlineAsm", "optSideEffect", 
      "optAlignStack", "optIntelDialect", "constant", "boolConst", "boolLit", 
      "intConst", "intLit", "floatConst", "nullConst", "noneConst", "structConst", 
      "arrayConst", "charArrayConst", "stringLit", "vectorConst", "zeroInitializerConst", 
      "undefConst", "blockAddressConst", "constantExpr", "addExpr", "fAddExpr", 
      "subExpr", "fSubExpr", "mulExpr", "fMulExpr", "uDivExpr", "sDivExpr", 
      "fDivExpr", "uRemExpr", "sRemExpr", "fRemExpr", "shlExpr", "lShrExpr", 
      "ashrExpr", "andExpr", "orExpr", "xorExpr", "extractElementExpr", 
      "insertElementExpr", "shuffleVectorExpr", "extractValueExpr", "insertValueExpr", 
      "getElementPtrExpr", "gepConstIndices", "gepConstIndexList", "gepConstIndex", 
      "optInrange", "truncExpr", "zExtExpr", "sExtExpr", "fPTruncExpr", 
      "fpExtExpr", "fpToUIExpr", "fpToSIExpr", "uiToFPExpr", "siToFPExpr", 
      "ptrToIntExpr", "intToPtrExpr", "bitCastExpr", "addrSpaceCastExpr", 
      "iCmpExpr", "fCmpExpr", "selectExpr", "basicBlockList", "basicBlock", 
      "optLabelIdent", "instructions", "instructionList", "instruction", 
      "valueInstruction", "addInst", "fAddInst", "subInst", "fSubInst", 
      "mulInst", "fMulInst", "uDivInst", "sDivInst", "fDivInst", "uRemInst", 
      "sRemInst", "fRemInst", "shlInst", "lshrInst", "ashrInst", "andInst", 
      "orInst", "xorInst", "extractElementInst", "insertElementInst", "shuffleVectorInst", 
      "extractValueInst", "insertValueInst", "allocaInst", "optInAlloca", 
      "optSwiftError", "loadInst", "storeInst", "fenceInst", "cmpXchgInst", 
      "optWeak", "atomicRMWInst", "binOp", "getElementPtrInst", "truncInst", 
      "zExtInst", "sExtInst", "fpTruncInst", "fpExtInst", "fpToUIInst", 
      "fpToSIInst", "uiToFPInst", "siToFPInst", "ptrToIntInst", "intToPtrInst", 
      "bitCastInst", "addrSpaceCastInst", "iCmpInst", "fCmpInst", "phiInst", 
      "incList", "inc", "selectInst", "callInst", "optTail", "vaArgInst", 
      "landingPadInst", "optCleanup", "clauses", "clauseList", "clause", 
      "catchPadInst", "cleanupPadInst", "terminator", "retTerm", "brTerm", 
      "condBrTerm", "switchTerm", "cases", "caseList", "llvmCase", "indirectBrTerm", 
      "labelList", "label", "invokeTerm", "resumeTerm", "catchSwitchTerm", 
      "catchRetTerm", "cleanupRetTerm", "unreachableTerm", "unwindTarget", 
      "mdTuple", "mdFields", "mdFieldList", "mdField", "metadata", "mdString", 
      "metadataAttachment", "mdNode", "metadataAttachments", "metadataAttachmentList", 
      "optCommaSepMetadataAttachmentList", "commaSepMetadataAttachmentList", 
      "specializedMDNode", "diCompileUnit", "diCompileUnitFields", "diCompileUnitFieldList", 
      "diCompileUnitField", "diFile", "diFileFields", "diFileFieldList", 
      "diFileField", "diBasicType", "diBasicTypeFields", "diBasicTypeFieldList", 
      "diBasicTypeField", "diSubroutineType", "diSubroutineTypeFields", 
      "diSubroutineTypeFieldList", "diSubroutineTypeField", "diDerivedType", 
      "diDerivedTypeFields", "diDerivedTypeFieldList", "diDerivedTypeField", 
      "diCompositeType", "diCompositeTypeFields", "diCompositeTypeFieldList", 
      "diCompositeTypeField", "diSubrange", "diSubrangeFields", "diSubrangeFieldList", 
      "diSubrangeField", "diEnumerator", "diEnumeratorFields", "diEnumeratorFieldList", 
      "diEnumeratorField", "diTemplateTypeParameter", "diTemplateTypeParameterFields", 
      "diTemplateTypeParameterFieldList", "diTemplateTypeParameterField", 
      "diTemplateValueParameter", "diTemplateValueParameterFields", "diTemplateValueParameterFieldList", 
      "diTemplateValueParameterField", "diModule", "diModuleFields", "diModuleFieldList", 
      "diModuleField", "diNamespace", "diNamespaceFields", "diNamespaceFieldList", 
      "diNamespaceField", "diGlobalVariable", "diGlobalVariableFields", 
      "diGlobalVariableFieldList", "diGlobalVariableField", "diSubprogram", 
      "diSubprogramFields", "diSubprogramFieldList", "diSubprogramField", 
      "diLexicalBlock", "diLexicalBlockFields", "diLexicalBlockFieldList", 
      "diLexicalBlockField", "diLexicalBlockFile", "diLexicalBlockFileFields", 
      "diLexicalBlockFileFieldList", "diLexicalBlockFileField", "diLocation", 
      "diLocationFields", "diLocationFieldList", "diLocationField", "diLocalVariable", 
      "diLocalVariableFields", "diLocalVariableFieldList", "diLocalVariableField", 
      "diExpression", "diExpressionFields", "diExpressionFieldList", "diExpressionField", 
      "diGlobalVariableExpression", "diGlobalVariableExpressionFields", 
      "diGlobalVariableExpressionFieldList", "diGlobalVariableExpressionField", 
      "diObjCProperty", "diObjCPropertyFields", "diObjCPropertyFieldList", 
      "diObjCPropertyField", "diImportedEntity", "diImportedEntityFields", 
      "diImportedEntityFieldList", "diImportedEntityField", "diMacro", "diMacroFields", 
      "diMacroFieldList", "diMacroField", "diMacroFile", "diMacroFileFields", 
      "diMacroFileFieldList", "diMacroFileField", "genericDINode", "genericDINodeFields", 
      "genericDINodeFieldList", "genericDINodeField", "fileField", "isOptimizedField", 
      "tagField", "nameField", "sizeField", "alignField", "flagsField", 
      "lineField", "scopeField", "baseTypeField", "offsetField", "templateParamsField", 
      "intOrMDField", "typeField", "linkageNameField", "isLocalField", "isDefinitionField", 
      "declarationField", "columnField", "typeMacinfoField", "checksumkind", 
      "diFlagList", "diFlag", "dwarfAttEncoding", "dwarfCC", "dwarfLang", 
      "dwarfMacinfo", "dwarfOp", "dwarfTag", "dwarfVirtuality", "emissionKind", 
      "typeValues", "typeValueList", "commaSepTypeValueList", "typeValue", 
      "typeConsts", "typeConstList", "typeConst", "alignment", "allocSize", 
      "args", "argList", "arg", "atomicOrdering", "optCallingConv", "callingConv", 
      "optComdat", "comdat", "dereferenceable", "optDLLStorageClass", "dllStorageClass", 
      "optExact", "exceptionArgs", "exceptionArgList", "exceptionArg", "exceptionScope", 
      "fastMathFlags", "fastMathFlagList", "fastMathFlag", "fpred", "funcAttrs", 
      "funcAttrList", "funcAttr", "optInBounds", "indices", "indexList", 
      "index", "iPred", "optLinkage", "linkage", "optExternLinkage", "externLinkage", 
      "operandBundles", "operandBundleList", "operandBundle", "overflowFlags", 
      "overflowFlagList", "overflowFlag", "paramAttrs", "paramAttrList", 
      "paramAttr", "params", "paramList", "param", "optPreemptionSpecifier", 
      "preemptionSpecifier", "returnAttrs", "returnAttrList", "returnAttr", 
      "section", "stackAlignment", "optSyncScope", "threadLocal", "tlsModel", 
      "unnamedAddr", "visibility"
    },
    std::vector<std::string>{
      "", "'<'", "'='", "'>'", "'|'", "','", "'!'", "'...'", "'('", "')'", 
      "'['", "']'", "'{'", "'}'", "'*'", "'acq_rel'", "'acquire'", "'add'", 
      "'addrspace'", "'addrspacecast'", "'afn'", "'alias'", "'align:'", 
      "'align'", "'alignstack'", "'alloca'", "'allocsize'", "'alwaysinline'", 
      "'amdgpu_cs'", "'amdgpu_es'", "'amdgpu_gs'", "'amdgpu_hs'", "'amdgpu_kernel'", 
      "'amdgpu_ls'", "'amdgpu_ps'", "'amdgpu_vs'", "'and'", "'any'", "'anyregcc'", 
      "'appending'", "'arcp'", "'arg:'", "'argmemonly'", "'arm_aapcscc'", 
      "'arm_aapcs_vfpcc'", "'arm_apcscc'", "'ashr'", "'asm'", "'atomic'", 
      "'atomicrmw'", "'attributes:'", "'attributes'", "'available_externally'", 
      "'avr_intrcc'", "'avr_signalcc'", "'baseType:'", "'bitcast'", "'blockaddress'", 
      "'br'", "'builtin'", "'byval'", "'c'", "'call'", "'caller'", "'catch'", 
      "'catchpad'", "'catchret'", "'catchswitch'", "'cc:'", "'cc'", "'ccc'", 
      "'checksum:'", "'checksumkind:'", "'cleanup'", "'cleanuppad'", "'cleanupret'", 
      "'cmpxchg'", "'cold'", "'coldcc'", "'column:'", "'comdat'", "'common'", 
      "'configMacros:'", "'constant'", "'containingType:'", "'contract'", 
      "'convergent'", "'count:'", "'cxx_fast_tlscc'", "'datalayout'", "'debugInfoForProfiling:'", 
      "'declaration:'", "'declare'", "'default'", "'define'", "'dereferenceable'", 
      "'dereferenceable_or_null'", "'!DIBasicType'", "'!DICompileUnit'", 
      "'!DICompositeType'", "'!DIDerivedType'", "'!DIEnumerator'", "'!DIExpression'", 
      "'!DIFile'", "'!DIGlobalVariable'", "'!DIGlobalVariableExpression'", 
      "'!DIImportedEntity'", "'!DILexicalBlock'", "'!DILexicalBlockFile'", 
      "'!DILocalVariable'", "'!DILocation'", "'!DIMacro'", "'!DIMacroFile'", 
      "'!DIModule'", "'!DINamespace'", "'!DIObjCProperty'", "'directory:'", 
      "'discriminator:'", "'distinct'", "'!DISubprogram'", "'!DISubrange'", 
      "'!DISubroutineType'", "'!DITemplateTypeParameter'", "'!DITemplateValueParameter'", 
      "'dllexport'", "'dllimport'", "'double'", "'dso_local'", "'dso_preemptable'", 
      "'dwarfAddressSpace:'", "'dwoId:'", "'elements:'", "'emissionKind:'", 
      "'encoding:'", "'entity:'", "'enums:'", "'eq'", "'exact'", "'exactmatch'", 
      "'exportSymbols:'", "'expr:'", "'external'", "'externally_initialized'", 
      "'extern_weak'", "'extractelement'", "'extractvalue'", "'extraData:'", 
      "'fadd'", "'false'", "'fast'", "'fastcc'", "'fcmp'", "'fdiv'", "'fence'", 
      "'file:'", "'filename:'", "'filter'", "'flags:'", "'float'", "'fmul'", 
      "'fp128'", "'fpext'", "'fptosi'", "'fptoui'", "'fptrunc'", "'frem'", 
      "'from'", "'fsub'", "'FullDebug'", "'gc'", "'!GenericDINode'", "'getelementptr'", 
      "'getter:'", "'ghccc'", "'global'", "'globals:'", "'gnuPubnames:'", 
      "'half'", "'header:'", "'hhvmcc'", "'hhvm_ccc'", "'hidden'", "'icmp'", 
      "'identifier:'", "'ifunc'", "'imports:'", "'inaccessiblememonly'", 
      "'inaccessiblemem_or_argmemonly'", "'inalloca'", "'inbounds'", "'includePath:'", 
      "'indirectbr'", "'initialexec'", "'inlinedAt:'", "'inlinehint'", "'inrange'", 
      "'inreg'", "'insertelement'", "'insertvalue'", "'inteldialect'", "'intel_ocl_bicc'", 
      "'internal'", "'inttoptr'", "'invoke'", "'isDefinition:'", "'isLocal:'", 
      "'isOptimized:'", "'isUnsigned:'", "'isysroot:'", "'jumptable'", "'label'", 
      "'landingpad'", "'language:'", "'largest'", "'line:'", "'LineTablesOnly'", 
      "'linkageName:'", "'linkonce'", "'linkonce_odr'", "'load'", "'localdynamic'", 
      "'localexec'", "'local_unnamed_addr'", "'lowerBound:'", "'lshr'", 
      "'macros:'", "'max'", "'metadata'", "'min'", "'minsize'", "'module'", 
      "'monotonic'", "'msp430_intrcc'", "'mul'", "'musttail'", "'naked'", 
      "'name:'", "'nand'", "'ne'", "'nest'", "'ninf'", "'nnan'", "'noalias'", 
      "'nobuiltin'", "'nocapture'", "'NoDebug'", "'nodes:'", "'noduplicate'", 
      "'noduplicates'", "'noimplicitfloat'", "'noinline'", "'none'", "'nonlazybind'", 
      "'nonnull'", "'norecurse'", "'noredzone'", "'noreturn'", "'notail'", 
      "'nounwind'", "'nsw'", "'nsz'", "'null'", "'nuw'", "'oeq'", "'offset:'", 
      "'oge'", "'ogt'", "'ole'", "'olt'", "'one'", "'opaque'", "'operands:'", 
      "'optnone'", "'optsize'", "'or'", "'ord'", "'personality'", "'phi'", 
      "'ppc_fp128'", "'prefix'", "'preserve_allcc'", "'preserve_mostcc'", 
      "'private'", "'producer:'", "'prologue'", "'protected'", "'ptrtoint'", 
      "'ptx_device'", "'ptx_kernel'", "'readnone'", "'readonly'", "'reassoc'", 
      "'release'", "'resume'", "'ret'", "'retainedTypes:'", "'returned'", 
      "'returns_twice'", "'runtimeLang:'", "'runtimeVersion:'", "'safestack'", 
      "'samesize'", "'sanitize_address'", "'sanitize_hwaddress'", "'sanitize_memory'", 
      "'sanitize_thread'", "'scope:'", "'scopeLine:'", "'sdiv'", "'section'", 
      "'select'", "'seq_cst'", "'setter:'", "'sext'", "'sge'", "'sgt'", 
      "'shl'", "'shufflevector'", "'sideeffect'", "'signext'", "'sitofp'", 
      "'size:'", "'sle'", "'slt'", "'source_filename'", "'speculatable'", 
      "'spir_func'", "'spir_kernel'", "'splitDebugFilename:'", "'splitDebugInlining:'", 
      "'srem'", "'sret'", "'ssp'", "'sspreq'", "'sspstrong'", "'store'", 
      "'strictfp'", "'sub'", "'swiftcc'", "'swifterror'", "'swiftself'", 
      "'switch'", "'syncscope'", "'tag:'", "'tail'", "'target'", "'templateParams:'", 
      "'thisAdjustment:'", "'thread_local'", "'thrownTypes:'", "'to'", "'token'", 
      "'triple'", "'true'", "'trunc'", "'type:'", "'type'", "'types:'", 
      "'udiv'", "'ueq'", "'uge'", "'ugt'", "'uitofp'", "'ule'", "'ult'", 
      "'umax'", "'umin'", "'undef'", "'une'", "'unit:'", "'unnamed_addr'", 
      "'uno'", "'unordered'", "'unreachable'", "'unwind'", "'urem'", "'uselistorder'", 
      "'uselistorder_bb'", "'uwtable'", "'va_arg'", "'value:'", "'var:'", 
      "'variables:'", "'virtualIndex:'", "'virtuality:'", "'void'", "'vtableHolder:'", 
      "'weak'", "'weak_odr'", "'webkit_jscc'", "'win64cc'", "'within'", 
      "'writeonly'", "'x'", "'x86_64_sysvcc'", "'x86_fastcallcc'", "'x86_fp80'", 
      "'x86_intrcc'", "'x86_mmx'", "'x86_regcallcc'", "'x86_stdcallcc'", 
      "'x86_thiscallcc'", "'x86_vectorcallcc'", "'xchg'", "'xor'", "'zeroext'", 
      "'zeroinitializer'", "'zext'", "'volatile'"
    },
    std::vector<std::string>{
      "", "LT", "EQSIGN", "GT", "VDASH", "COMMA", "BANG", "DOTS", "LPAREN", 
      "RPAREN", "LBRACK", "RBRACK", "LBRACE", "RBRACE", "STAR", "ACQ_REL", 
      "ACQUIRE", "ADD", "ADDRSPACE", "ADDRSPACECAST", "AFN", "ALIAS", "ALIGNCOLON", 
      "ALIGN", "ALIGNSTACK", "ALLOCA", "ALLOCSIZE", "ALWAYSINLINE", "AMDGPU_CS", 
      "AMDGPU_ES", "AMDGPU_GS", "AMDGPU_HS", "AMDGPU_KERNEL", "AMDGPU_LS", 
      "AMDGPU_PS", "AMDGPU_VS", "AND", "ANY", "ANYREGCC", "APPENDING", "ARCP", 
      "ARGCOLON", "ARGMEMONLY", "ARM_AAPCSCC", "ARM_AAPCS_VFPCC", "ARM_APCSCC", 
      "ASHR", "ASM", "ATOMIC", "ATOMICRMW", "ATTRIBUTESCOLON", "ATTRIBUTES", 
      "AVAILABLE_EXTERNALLY", "AVR_INTRCC", "AVR_SIGNALCC", "BASETYPECOLON", 
      "BITCAST", "BLOCKADDRESS", "BR", "BUILTIN", "BYVAL", "C", "CALL", 
      "CALLER", "CATCH", "CATCHPAD", "CATCHRET", "CATCHSWITCH", "CCCOLON", 
      "CC", "CCC", "CHECKSUMCOLON", "CHECKSUMKINDCOLON", "CLEANUP", "CLEANUPPAD", 
      "CLEANUPRET", "CMPXCHG", "COLD", "COLDCC", "COLUMNCOLON", "COMDAT", 
      "COMMON", "CONFIGMACROSCOLON", "CONSTANT", "CONTAININGTYPECOLON", 
      "CONTRACT", "CONVERGENT", "COUNTCOLON", "CXX_FAST_TLSCC", "DATALAYOUT", 
      "DEBUGINFOFORPROFILINGCOLON", "DECLARATIONCOLON", "DECLARE", "DEFAULT", 
      "DEFINE", "DEREFERENCEABLE", "DEREFERENCEABLE_OR_NULL", "NOTDIBASICTYPE", 
      "NOTDICOMPILEUNIT", "NOTDICOMPOSITETYPE", "NOTDIDERIVEDTYPE", "NOTDIENUMERATOR", 
      "NOTDIEXPRESSION", "NOTDIFILE", "NOTDIGLOBALVARIABLE", "NOTDIGLOBALVARIABLEEXPRESSION", 
      "NOTDIIMPORTEDENTITY", "NOTDILEXICALBLOCK", "NOTDILEXICALBLOCKFILE", 
      "NOTDILOCALVARIABLE", "NOTDILOCATION", "NOTDIMACRO", "NOTDIMACROFILE", 
      "NOTDIMODULE", "NOTDINAMESPACE", "NOTDIOBJCPROPERTY", "DIRECTORYCOLON", 
      "DISCRIMINATORCOLON", "DISTINCT", "NOTDISUBPROGRAM", "NOTDISUBRANGE", 
      "NOTDISUBROUTINETYPE", "NOTDITEMPLATETYPEPARAMETER", "NOTDITEMPLATEVALUEPARAMETER", 
      "DLLEXPORT", "DLLIMPORT", "DOUBLE", "DSO_LOCAL", "DSO_PREEMPTABLE", 
      "DWARFADDRESSSPACECOLON", "DWOIDCOLON", "ELEMENTSCOLON", "EMISSIONKINDCOLON", 
      "ENCODINGCOLON", "ENTITYCOLON", "ENUMSCOLON", "EQ", "EXACT", "EXACTMATCH", 
      "EXPORTSYMBOLSCOLON", "EXPRCOLON", "EXTERNAL", "EXTERNALLY_INITIALIZED", 
      "EXTERN_WEAK", "EXTRACTELEMENT", "EXTRACTVALUE", "EXTRADATACOLON", 
      "FADD", "FALSE", "FAST", "FASTCC", "FCMP", "FDIV", "FENCE", "FILECOLON", 
      "FILENAMECOLON", "FILTER", "FLAGSCOLON", "FLOAT", "FMUL", "FP128", 
      "FPEXT", "FPTOSI", "FPTOUI", "FPTRUNC", "FREM", "FROM", "FSUB", "FULLDEBUG", 
      "GC", "NOTGENERICDINODE", "GETELEMENTPTR", "GETTERCOLON", "GHCCC", 
      "GLOBAL", "GLOBALSCOLON", "GNUPUBNAMESCOLON", "HALF", "HEADERCOLON", 
      "HHVMCC", "HHVM_CCC", "HIDDEN_VISIB", "ICMP", "IDENTIFIERCOLON", "IFUNC", 
      "IMPORTSCOLON", "INACCESSIBLEMEMONLY", "INACCESSIBLEMEM_OR_ARGMEMONLY", 
      "INALLOCA", "INBOUNDS", "INCLUDEPATHCOLON", "INDIRECTBR", "INITIALEXEC", 
      "INLINEDATCOLON", "INLINEHINT", "INRANGE", "INREG", "INSERTELEMENT", 
      "INSERTVALUE", "INTELDIALECT", "INTEL_OCL_BICC", "INTERNAL", "INTTOPTR", 
      "INVOKE", "ISDEFINITIONCOLON", "ISLOCALCOLON", "ISOPTIMIZEDCOLON", 
      "ISUNSIGNEDCOLON", "ISYSROOTCOLON", "JUMPTABLE", "LABEL", "LANDINGPAD", 
      "LANGUAGECOLON", "LARGEST", "LINECOLON", "LINETABLESONLY", "LINKAGENAMECOLON", 
      "LINKONCE", "LINKONCE_ODR", "LOAD", "LOCALDYNAMIC", "LOCALEXEC", "LOCAL_UNNAMED_ADDR", 
      "LOWERBOUNDCOLON", "LSHR", "MACROSCOLON", "MAX", "METADATA", "MIN", 
      "MINSIZE", "MODULE", "MONOTONIC", "MSP430_INTRCC", "MUL", "MUSTTAIL", 
      "NAKED", "NAMECOLON", "NAND", "NE", "NEST", "NINF", "NNAN", "NOALIAS", 
      "NOBUILTIN", "NOCAPTURE", "NODEBUG", "NODESCOLON", "NODUPLICATE", 
      "NODUPLICATES", "NOIMPLICITFLOAT", "NOINLINE", "NONE", "NONLAZYBIND", 
      "NONNULL", "NORECURSE", "NOREDZONE", "NORETURN", "NOTAIL", "NOUNWIND", 
      "NSW", "NSZ", "NULL", "NUW", "OEQ", "OFFSETCOLON", "OGE", "OGT", "OLE", 
      "OLT", "ONE", "OPAQUE", "OPERANDSCOLON", "OPTNONE", "OPTSIZE", "OR", 
      "ORD", "PERSONALITY", "PHI", "PPC_FP128", "PREFIX", "PRESERVE_ALLCC", 
      "PRESERVE_MOSTCC", "PRIVATE", "PRODUCERCOLON", "PROLOGUE", "PROTECTED", 
      "PTRTOINT", "PTX_DEVICE", "PTX_KERNEL", "READNONE", "READONLY", "REASSOC", 
      "RELEASE", "RESUME", "RET", "RETAINEDTYPESCOLON", "RETURNED", "RETURNS_TWICE", 
      "RUNTIMELANGCOLON", "RUNTIMEVERSIONCOLON", "SAFESTACK", "SAMESIZE", 
      "SANITIZE_ADDRESS", "SANITIZE_HWADDRESS", "SANITIZE_MEMORY", "SANITIZE_THREAD", 
      "SCOPECOLON", "SCOPELINECOLON", "SDIV", "SECTION", "SELECT", "SEQ_CST", 
      "SETTERCOLON", "SEXT", "SGE", "SGT", "SHL", "SHUFFLEVECTOR", "SIDEEFFECT", 
      "SIGNEXT", "SITOFP", "SIZECOLON", "SLE", "SLT", "SOURCE_FILENAME", 
      "SPECULATABLE", "SPIR_FUNC", "SPIR_KERNEL", "SPLITDEBUGFILENAMECOLON", 
      "SPLITDEBUGINLININGCOLON", "SREM", "SRET", "SSP", "SSPREQ", "SSPSTRONG", 
      "STORE", "STRICTFP", "SUB", "SWIFTCC", "SWIFTERROR", "SWIFTSELF", 
      "SWITCH", "SYNCSCOPE", "TAGCOLON", "TAIL", "TARGET", "TEMPLATEPARAMSCOLON", 
      "THISADJUSTMENTCOLON", "THREAD_LOCAL", "THROWNTYPESCOLON", "TO", "TOKEN", 
      "TRIPLE", "TRUE", "TRUNC", "TYPECOLON", "TYPE", "TYPESCOLON", "UDIV", 
      "UEQ", "UGE", "UGT", "UITOFP", "ULE", "ULT", "UMAX", "UMIN", "UNDEF", 
      "UNE", "UNITCOLON", "UNNAMED_ADDR", "UNO", "UNORDERED", "UNREACHABLE", 
      "UNWIND", "UREM", "USELISTORDER", "USELISTORDER_BB", "UWTABLE", "VA_ARG", 
      "VALUECOLON", "VARCOLON", "VARIABLESCOLON", "VIRTUALINDEXCOLON", "VIRTUALITYCOLON", 
      "VOID", "VTABLEHOLDERCOLON", "WEAK", "WEAK_ODR", "WEBKIT_JSCC", "WIN64CC", 
      "WITHIN", "WRITEONLY", "X", "X86_64_SYSVCC", "X86_FASTCALLCC", "X86_FP80", 
      "X86_INTRCC", "X86_MMX", "X86_REGCALLCC", "X86_STDCALLCC", "X86_THISCALLCC", 
      "X86_VECTORCALLCC", "XCHG", "XOR", "ZEROEXT", "ZEROINITIALIZER", "ZEXT", 
      "VOLATILE", "COMMENT", "WHITESPACE", "ATTR_GROUP_ID", "COMDAT_NAME", 
      "METADATA_NAME", "METADATA_ID", "DWARF_TAG", "DWARF_ATT_ENCODING", 
      "DI_FLAG", "DWARF_LANG", "DWARF_CC", "CHECKSUM_KIND", "DWARF_VIRTUALITY", 
      "DWARF_MACINFO", "DWARF_OP", "INT_LIT", "DECIMAL_LIT", "DECIMALS", 
      "FLOAT_LIT", "FRAC_LIT", "SIGN", "SCI_LIT", "FLOAT_HEX_LIT", "STRING_LIT", 
      "QUOTED_STRING", "INT_TYPE", "NAME", "ESCAPE_NAME", "QUOTED_NAME", 
      "ID", "GLOBAL_IDENT", "GLOBAL_NAME", "GLOBAL_ID", "LOCAL_IDENT", "LOCAL_NAME", 
      "LOCAL_ID", "LABEL_IDENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,445,4134,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,
  	7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,
  	7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,
  	7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,
  	7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,
  	7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,
  	7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,
  	7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,
  	7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
  	7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
  	7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,
  	7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,
  	7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,
  	7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,
  	7,254,2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,
  	7,260,2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,
  	7,266,2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,
  	7,272,2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,
  	7,278,2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,
  	7,284,2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,
  	7,290,2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
  	7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,
  	7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,
  	7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,
  	7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,
  	7,320,2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,
  	7,326,2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,
  	7,332,2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,
  	7,338,2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,
  	7,344,2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,
  	7,350,2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,
  	7,356,2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
  	7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,
  	7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,
  	7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,
  	7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,
  	7,386,2,387,7,387,2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,
  	7,392,2,393,7,393,2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,
  	7,398,2,399,7,399,2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,
  	7,404,2,405,7,405,2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,
  	7,410,2,411,7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,
  	7,416,2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,
  	7,422,2,423,7,423,2,424,7,424,2,425,7,425,1,0,1,0,1,1,3,1,856,8,1,1,2,
  	1,2,1,2,1,2,1,2,5,2,863,8,2,10,2,12,2,866,9,2,1,3,1,3,1,3,1,3,1,3,1,3,
  	1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,883,8,3,1,4,1,4,1,4,1,4,1,5,1,
  	5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,897,8,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
  	1,7,1,7,1,7,1,7,1,7,1,7,3,7,913,8,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,
  	1,10,1,10,1,10,1,10,3,10,927,8,10,1,10,1,10,3,10,931,8,10,1,10,3,10,934,
  	8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,3,11,
  	948,8,11,1,11,1,11,3,11,952,8,11,1,11,3,11,955,8,11,1,11,1,11,1,11,1,
  	11,1,11,1,11,1,11,1,11,1,12,3,12,966,8,12,1,13,1,13,1,14,1,14,3,14,972,
  	8,14,1,15,1,15,1,15,1,15,1,15,1,15,5,15,980,8,15,10,15,12,15,983,9,15,
  	1,16,1,16,1,16,1,16,3,16,989,8,16,1,17,1,17,1,17,1,17,1,17,3,17,996,8,
  	17,1,17,1,17,3,17,1000,8,17,1,17,3,17,1003,8,17,1,17,1,17,1,17,1,17,1,
  	17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,1016,8,17,1,17,1,17,3,17,1020,8,
  	17,1,17,3,17,1023,8,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,1031,8,17,1,
  	18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,
  	21,3,21,1048,8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,1059,
  	8,21,1,21,1,21,3,21,1063,8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,
  	3,22,1073,8,22,1,23,1,23,1,23,1,23,3,23,1079,8,23,1,24,1,24,1,24,1,24,
  	3,24,1085,8,24,1,25,1,25,1,25,1,25,3,25,1091,8,25,1,26,1,26,1,26,1,26,
  	1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,
  	1,28,1,29,3,29,1113,8,29,1,30,1,30,1,30,1,30,1,30,1,30,5,30,1121,8,30,
  	10,30,12,30,1124,9,30,1,31,1,31,3,31,1128,8,31,1,32,1,32,1,32,1,32,1,
  	32,1,32,1,32,1,32,1,32,1,32,3,32,1140,8,32,1,33,3,33,1143,8,33,1,34,3,
  	34,1146,8,34,1,35,1,35,1,35,1,35,1,35,5,35,1153,8,35,10,35,12,35,1156,
  	9,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,
  	1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,45,3,45,1193,8,45,1,45,1,45,1,45,
  	1,45,1,45,1,45,1,45,1,45,1,45,5,45,1204,8,45,10,45,12,45,1207,9,45,1,
  	46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1218,8,46,1,47,1,47,1,
  	48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,3,52,1231,8,52,1,53,1,53,1,
  	53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,
  	57,1,58,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
  	59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1272,8,59,1,60,1,60,1,
  	60,1,60,1,60,1,60,5,60,1280,8,60,10,60,12,60,1283,9,60,1,61,1,61,1,62,
  	1,62,1,63,1,63,1,63,3,63,1292,8,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
  	1,64,1,65,3,65,1303,8,65,1,66,3,66,1306,8,66,1,67,3,67,1309,8,67,1,68,
  	1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,
  	1325,8,68,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,
  	1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
  	1,76,1,76,1,76,1,76,3,76,1357,8,76,1,77,1,77,1,77,1,77,1,78,1,78,1,78,
  	1,79,1,79,1,80,1,80,1,80,1,80,1,81,1,81,1,82,1,82,1,83,1,83,1,83,1,83,
  	1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
  	1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
  	1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
  	1,84,3,84,1423,8,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
  	1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,
  	1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
  	1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,
  	1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,
  	1,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,93,1,93,1,93,
  	1,93,1,93,1,93,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
  	1,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,96,1,96,1,96,1,96,
  	1,96,1,96,1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
  	1,97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,99,1,99,1,99,
  	1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,1,100,
  	1,100,1,100,1,100,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,104,1,104,1,104,1,104,1,104,1,104,
  	1,104,1,104,1,104,1,104,1,104,1,104,1,105,1,105,1,105,1,105,1,105,1,105,
  	1,105,1,105,1,105,1,105,1,105,1,105,1,106,1,106,1,106,1,106,1,106,1,106,
  	1,106,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,108,
  	1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,109,3,109,
  	1657,8,109,1,110,1,110,1,110,1,110,1,110,1,110,5,110,1665,8,110,10,110,
  	12,110,1668,9,110,1,111,1,111,1,111,1,111,1,112,3,112,1675,8,112,1,113,
  	1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,114,1,114,1,114,1,114,1,114,
  	1,114,1,114,1,114,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,116,
  	1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,117,1,117,1,117,1,117,1,117,
  	1,117,1,117,1,117,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,119,
  	1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,120,1,120,1,120,1,120,1,120,
  	1,120,1,120,1,120,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,122,
  	1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,123,1,123,1,123,1,123,1,123,
  	1,123,1,123,1,123,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,125,
  	1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,126,1,126,1,126,1,126,1,126,
  	1,126,1,126,1,126,1,126,1,126,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
  	1,127,1,127,1,127,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,
  	1,128,1,128,1,128,1,129,1,129,1,129,1,129,1,129,5,129,1818,8,129,10,129,
  	12,129,1821,9,129,1,130,1,130,1,130,1,130,1,131,3,131,1828,8,131,1,132,
  	3,132,1831,8,132,1,133,1,133,1,133,1,133,1,133,5,133,1838,8,133,10,133,
  	12,133,1841,9,133,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,
  	3,134,1852,8,134,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,
  	1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,
  	1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,
  	1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,
  	1,135,1,135,1,135,3,135,1902,8,135,1,136,1,136,1,136,1,136,1,136,1,136,
  	1,136,1,136,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,138,1,138,
  	1,138,1,138,1,138,1,138,1,138,1,138,1,139,1,139,1,139,1,139,1,139,1,139,
  	1,139,1,139,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,141,1,141,
  	1,141,1,141,1,141,1,141,1,141,1,141,1,142,1,142,1,142,1,142,1,142,1,142,
  	1,142,1,142,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,144,1,144,
  	1,144,1,144,1,144,1,144,1,144,1,144,1,145,1,145,1,145,1,145,1,145,1,145,
  	1,145,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,147,1,147,1,147,1,147,
  	1,147,1,147,1,147,1,147,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,
  	1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,150,1,150,1,150,1,150,
  	1,150,1,150,1,150,1,150,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,152,
  	1,152,1,152,1,152,1,152,1,152,1,152,1,153,1,153,1,153,1,153,1,153,1,153,
  	1,153,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,155,1,155,1,155,
  	1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,156,1,156,1,156,1,156,
  	1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,157,1,157,1,157,1,157,1,157,
  	1,157,1,157,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,
  	1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,
  	1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,
  	1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,
  	1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,
  	1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,
  	1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,
  	1,159,1,159,1,159,1,159,3,159,2166,8,159,1,160,3,160,2169,8,160,1,161,
  	3,161,2172,8,161,1,162,1,162,3,162,2176,8,162,1,162,1,162,1,162,1,162,
  	1,162,1,162,1,162,1,162,3,162,2186,8,162,1,162,1,162,1,162,1,162,1,162,
  	1,162,1,162,1,162,1,162,1,162,1,162,3,162,2199,8,162,1,162,1,162,1,162,
  	1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,3,162,2212,8,162,1,162,
  	1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,3,162,2224,8,162,
  	1,163,1,163,3,163,2228,8,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,
  	1,163,1,163,3,163,2239,8,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,
  	1,163,1,163,1,163,1,163,1,163,3,163,2253,8,163,1,163,1,163,1,163,1,163,
  	1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,3,163,2267,8,163,1,163,
  	1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,3,163,2280,
  	8,163,1,164,1,164,1,164,1,164,1,164,1,165,1,165,1,165,3,165,2290,8,165,
  	1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,
  	1,165,1,166,3,166,2306,8,166,1,167,1,167,3,167,2310,8,167,1,167,1,167,
  	1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,168,1,168,1,169,1,169,
  	1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
  	1,169,1,169,1,169,1,169,3,169,2342,8,169,1,170,1,170,1,170,1,170,1,170,
  	1,170,1,170,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,172,1,172,1,172,
  	1,172,1,172,1,172,1,172,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,174,
  	1,174,1,174,1,174,1,174,1,174,1,174,1,175,1,175,1,175,1,175,1,175,1,175,
  	1,175,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,177,1,177,1,177,1,177,
  	1,177,1,177,1,177,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,179,1,179,
  	1,179,1,179,1,179,1,179,1,179,1,180,1,180,1,180,1,180,1,180,1,180,1,180,
  	1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,182,1,182,1,182,1,182,1,182,
  	1,182,1,182,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,184,1,184,
  	1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,185,1,185,1,185,1,185,1,185,
  	1,186,1,186,1,186,1,186,1,186,1,186,5,186,2463,8,186,10,186,12,186,2466,
  	9,186,1,187,1,187,1,187,1,187,1,187,1,187,1,188,1,188,1,188,1,188,1,188,
  	1,188,1,188,1,188,1,188,1,188,1,188,1,189,1,189,1,189,1,189,1,189,1,189,
  	1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,190,3,190,2500,8,190,
  	1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,192,1,192,1,192,1,192,1,192,
  	1,192,1,193,3,193,2516,8,193,1,194,3,194,2519,8,194,1,195,1,195,1,195,
  	1,195,1,195,5,195,2526,8,195,10,195,12,195,2529,9,195,1,196,1,196,1,196,
  	1,196,1,196,1,196,1,196,1,196,3,196,2539,8,196,1,197,1,197,1,197,1,197,
  	1,197,1,197,1,197,1,197,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,
  	1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,3,199,
  	2568,8,199,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,
  	3,200,2580,8,200,1,200,1,200,1,200,3,200,2585,8,200,1,201,1,201,1,201,
  	1,201,1,201,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
  	1,202,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,
  	1,204,3,204,2615,8,204,1,205,1,205,1,205,1,205,1,205,5,205,2622,8,205,
  	10,205,12,205,2625,9,205,1,206,1,206,1,206,1,206,1,206,1,206,1,207,1,
  	207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,208,1,208,1,208,1,208,
  	1,208,1,208,5,208,2648,8,208,10,208,12,208,2651,9,208,1,209,1,209,1,209,
  	1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,
  	1,210,1,210,1,210,1,210,1,210,1,210,1,211,1,211,1,211,1,211,1,211,1,212,
  	1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,213,1,213,1,213,
  	1,213,1,213,1,213,1,213,1,213,1,214,1,214,1,214,1,214,1,214,1,214,1,214,
  	1,215,1,215,1,215,1,216,1,216,1,216,1,216,1,216,3,216,2712,8,216,1,217,
  	1,217,1,217,1,218,1,218,1,218,1,218,1,218,1,218,3,218,2723,8,218,1,219,
  	1,219,1,219,1,219,1,219,1,219,5,219,2731,8,219,10,219,12,219,2734,9,219,
  	1,220,1,220,3,220,2738,8,220,1,221,1,221,1,221,1,221,1,221,1,221,1,221,
  	3,221,2747,8,221,1,222,1,222,1,222,1,223,1,223,1,223,1,224,1,224,1,224,
  	3,224,2758,8,224,1,225,3,225,2761,8,225,1,226,1,226,1,226,1,226,1,226,
  	5,226,2768,8,226,10,226,12,226,2771,9,226,1,227,1,227,3,227,2775,8,227,
  	1,228,1,228,1,228,1,228,1,228,1,228,5,228,2783,8,228,10,228,12,228,2786,
  	9,228,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
  	1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
  	1,229,1,229,3,229,2813,8,229,1,230,1,230,1,230,1,230,1,230,1,231,3,231,
  	2821,8,231,1,232,1,232,1,232,1,232,1,232,1,232,5,232,2829,8,232,10,232,
  	12,232,2832,9,232,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
  	1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
  	1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,3,233,
  	2866,8,233,1,234,1,234,1,234,1,234,1,234,1,235,3,235,2874,8,235,1,236,
  	1,236,1,236,1,236,1,236,1,236,5,236,2882,8,236,10,236,12,236,2885,9,236,
  	1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,3,237,2895,8,237,1,238,
  	1,238,1,238,1,238,1,238,1,239,3,239,2903,8,239,1,240,1,240,1,240,1,240,
  	1,240,1,240,5,240,2911,8,240,10,240,12,240,2914,9,240,1,241,1,241,1,241,
  	1,241,1,241,1,241,3,241,2922,8,241,1,242,1,242,1,242,1,242,1,242,1,243,
  	3,243,2930,8,243,1,244,1,244,1,244,1,244,1,244,1,244,5,244,2938,8,244,
  	10,244,12,244,2941,9,244,1,245,1,245,1,245,1,245,1,245,3,245,2948,8,245,
  	1,246,1,246,1,246,1,246,1,246,1,247,3,247,2956,8,247,1,248,1,248,1,248,
  	1,248,1,248,1,248,5,248,2964,8,248,10,248,12,248,2967,9,248,1,249,1,249,
  	1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,
  	3,249,2983,8,249,1,250,1,250,1,250,1,250,1,250,1,251,3,251,2991,8,251,
  	1,252,1,252,1,252,1,252,1,252,1,252,5,252,2999,8,252,10,252,12,252,3002,
  	9,252,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,
  	1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,3,253,3025,
  	8,253,1,254,1,254,1,254,1,254,1,254,1,255,3,255,3033,8,255,1,256,1,256,
  	1,256,1,256,1,256,1,256,5,256,3041,8,256,10,256,12,256,3044,9,256,1,257,
  	1,257,1,257,1,257,3,257,3050,8,257,1,258,1,258,1,258,1,258,1,258,1,259,
  	3,259,3058,8,259,1,260,1,260,1,260,1,260,1,260,1,260,5,260,3066,8,260,
  	10,260,12,260,3069,9,260,1,261,1,261,1,261,1,261,1,261,3,261,3076,8,261,
  	1,262,1,262,1,262,1,262,1,262,1,263,3,263,3084,8,263,1,264,1,264,1,264,
  	1,264,1,264,1,264,5,264,3092,8,264,10,264,12,264,3095,9,264,1,265,1,265,
  	3,265,3099,8,265,1,266,1,266,1,266,1,266,1,266,1,267,3,267,3107,8,267,
  	1,268,1,268,1,268,1,268,1,268,1,268,5,268,3115,8,268,10,268,12,268,3118,
  	9,268,1,269,1,269,1,269,1,269,1,269,3,269,3125,8,269,1,270,1,270,1,270,
  	1,270,1,270,1,271,3,271,3133,8,271,1,272,1,272,1,272,1,272,1,272,1,272,
  	5,272,3141,8,272,10,272,12,272,3144,9,272,1,273,1,273,1,273,1,273,1,273,
  	1,273,1,273,1,273,3,273,3154,8,273,1,274,1,274,1,274,1,274,1,274,1,275,
  	3,275,3162,8,275,1,276,1,276,1,276,1,276,1,276,1,276,5,276,3170,8,276,
  	10,276,12,276,3173,9,276,1,277,1,277,1,277,1,277,3,277,3179,8,277,1,278,
  	1,278,1,278,1,278,1,278,1,279,3,279,3187,8,279,1,280,1,280,1,280,1,280,
  	1,280,1,280,5,280,3195,8,280,10,280,12,280,3198,9,280,1,281,1,281,1,281,
  	1,281,1,281,1,281,1,281,1,281,1,281,1,281,3,281,3210,8,281,1,282,1,282,
  	1,282,1,282,1,282,1,283,3,283,3218,8,283,1,284,1,284,1,284,1,284,1,284,
  	1,284,5,284,3226,8,284,10,284,12,284,3229,9,284,1,285,1,285,1,285,1,285,
  	1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,
  	1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,
  	3,285,3259,8,285,1,286,1,286,1,286,1,286,1,286,1,287,3,287,3267,8,287,
  	1,288,1,288,1,288,1,288,1,288,1,288,5,288,3275,8,288,10,288,12,288,3278,
  	9,288,1,289,1,289,1,289,1,289,3,289,3284,8,289,1,290,1,290,1,290,1,290,
  	1,290,1,291,3,291,3292,8,291,1,292,1,292,1,292,1,292,1,292,1,292,5,292,
  	3300,8,292,10,292,12,292,3303,9,292,1,293,1,293,1,293,1,293,3,293,3309,
  	8,293,1,294,1,294,1,294,1,294,1,294,1,295,3,295,3317,8,295,1,296,1,296,
  	1,296,1,296,1,296,1,296,5,296,3325,8,296,10,296,12,296,3328,9,296,1,297,
  	1,297,1,297,1,297,1,297,3,297,3335,8,297,1,298,1,298,1,298,1,298,1,298,
  	1,299,3,299,3343,8,299,1,300,1,300,1,300,1,300,1,300,1,300,5,300,3351,
  	8,300,10,300,12,300,3354,9,300,1,301,1,301,1,301,1,301,1,301,1,301,1,
  	301,1,301,1,301,3,301,3365,8,301,1,302,1,302,1,302,1,302,1,302,1,303,
  	3,303,3373,8,303,1,304,1,304,1,304,1,304,1,304,1,304,5,304,3381,8,304,
  	10,304,12,304,3384,9,304,1,305,1,305,3,305,3388,8,305,1,306,1,306,1,306,
  	1,306,1,306,1,307,3,307,3396,8,307,1,308,1,308,1,308,1,308,1,308,1,308,
  	5,308,3404,8,308,10,308,12,308,3407,9,308,1,309,1,309,1,309,1,309,3,309,
  	3413,8,309,1,310,1,310,1,310,1,310,1,310,1,311,3,311,3421,8,311,1,312,
  	1,312,1,312,1,312,1,312,1,312,5,312,3429,8,312,10,312,12,312,3432,9,312,
  	1,313,1,313,1,313,1,313,1,313,1,313,1,313,1,313,1,313,1,313,3,313,3444,
  	8,313,1,314,1,314,1,314,1,314,1,314,1,315,3,315,3452,8,315,1,316,1,316,
  	1,316,1,316,1,316,1,316,5,316,3460,8,316,10,316,12,316,3463,9,316,1,317,
  	1,317,1,317,1,317,1,317,1,317,1,317,3,317,3472,8,317,1,318,1,318,1,318,
  	1,318,1,318,1,319,3,319,3480,8,319,1,320,1,320,1,320,1,320,1,320,1,320,
  	5,320,3488,8,320,10,320,12,320,3491,9,320,1,321,1,321,1,321,1,321,1,321,
  	3,321,3498,8,321,1,322,1,322,1,322,1,322,1,322,1,323,3,323,3506,8,323,
  	1,324,1,324,1,324,1,324,1,324,1,324,5,324,3514,8,324,10,324,12,324,3517,
  	9,324,1,325,1,325,1,325,1,325,1,325,3,325,3524,8,325,1,326,1,326,1,326,
  	1,326,1,326,1,327,3,327,3532,8,327,1,328,1,328,1,328,1,328,1,328,1,328,
  	5,328,3540,8,328,10,328,12,328,3543,9,328,1,329,1,329,1,329,1,329,1,329,
  	3,329,3550,8,329,1,330,1,330,1,330,1,331,1,331,1,331,1,332,1,332,1,332,
  	1,333,1,333,1,333,1,334,1,334,1,334,1,335,1,335,1,335,1,336,1,336,1,336,
  	1,337,1,337,1,337,1,338,1,338,1,338,1,339,1,339,1,339,1,340,1,340,1,340,
  	1,341,1,341,1,341,1,342,1,342,3,342,3590,8,342,1,343,1,343,1,343,1,344,
  	1,344,1,344,1,345,1,345,1,345,1,346,1,346,1,346,1,347,1,347,1,347,1,348,
  	1,348,1,348,1,349,1,349,1,349,1,350,1,350,1,351,1,351,1,351,1,351,1,351,
  	1,351,5,351,3621,8,351,10,351,12,351,3624,9,351,1,352,1,352,3,352,3628,
  	8,352,1,353,1,353,3,353,3632,8,353,1,354,1,354,3,354,3636,8,354,1,355,
  	1,355,3,355,3640,8,355,1,356,1,356,3,356,3644,8,356,1,357,1,357,1,358,
  	1,358,3,358,3650,8,358,1,359,1,359,3,359,3654,8,359,1,360,1,360,1,360,
  	1,360,3,360,3660,8,360,1,361,3,361,3663,8,361,1,362,1,362,1,362,1,362,
  	1,362,5,362,3670,8,362,10,362,12,362,3673,9,362,1,363,1,363,1,363,1,363,
  	1,363,1,363,5,363,3681,8,363,10,363,12,363,3684,9,363,1,364,1,364,1,364,
  	1,365,3,365,3690,8,365,1,366,1,366,1,366,1,366,1,366,1,366,5,366,3698,
  	8,366,10,366,12,366,3701,9,366,1,367,1,367,1,367,1,368,1,368,1,368,1,
  	369,1,369,1,369,1,369,1,369,1,369,1,369,1,369,1,369,1,369,3,369,3719,
  	8,369,1,370,1,370,1,370,1,370,1,370,1,370,3,370,3727,8,370,1,371,1,371,
  	1,371,1,371,1,371,1,371,5,371,3735,8,371,10,371,12,371,3738,9,371,1,372,
  	1,372,1,372,1,372,1,372,3,372,3745,8,372,1,372,1,372,1,372,1,372,1,372,
  	1,372,3,372,3753,8,372,1,373,1,373,1,374,3,374,3758,8,374,1,375,1,375,
  	1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,
  	1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,
  	1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,
  	1,375,1,375,1,375,3,375,3801,8,375,1,376,3,376,3804,8,376,1,377,1,377,
  	1,377,1,377,1,377,1,377,3,377,3812,8,377,1,378,1,378,1,378,1,378,1,378,
  	1,378,1,378,1,378,3,378,3822,8,378,1,379,3,379,3825,8,379,1,380,1,380,
  	1,381,3,381,3830,8,381,1,382,3,382,3833,8,382,1,383,1,383,1,383,1,383,
  	1,383,1,383,5,383,3841,8,383,10,383,12,383,3844,9,383,1,384,1,384,1,384,
  	1,384,1,384,3,384,3851,8,384,1,384,1,384,1,384,1,384,1,384,3,384,3858,
  	8,384,1,385,1,385,3,385,3862,8,385,1,386,3,386,3865,8,386,1,387,1,387,
  	1,387,1,387,1,387,5,387,3872,8,387,10,387,12,387,3875,9,387,1,388,1,388,
  	1,389,1,389,1,390,3,390,3882,8,390,1,391,1,391,1,391,1,391,1,391,5,391,
  	3889,8,391,10,391,12,391,3892,9,391,1,392,1,392,1,392,1,392,1,392,1,392,
  	1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,
  	1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,
  	1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,
  	1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,3,392,3946,
  	8,392,1,393,3,393,3949,8,393,1,394,1,394,3,394,3953,8,394,1,395,1,395,
  	1,395,1,395,1,395,1,395,5,395,3961,8,395,10,395,12,395,3964,9,395,1,396,
  	1,396,1,397,1,397,1,398,3,398,3971,8,398,1,399,1,399,1,400,3,400,3976,
  	8,400,1,401,1,401,1,402,1,402,1,402,1,402,3,402,3984,8,402,1,403,1,403,
  	1,403,1,403,1,403,5,403,3991,8,403,10,403,12,403,3994,9,403,1,404,1,404,
  	1,404,1,404,1,404,1,405,3,405,4002,8,405,1,406,1,406,1,406,1,406,1,406,
  	5,406,4009,8,406,10,406,12,406,4012,9,406,1,407,1,407,1,408,3,408,4017,
  	8,408,1,409,1,409,1,409,1,409,1,409,5,409,4024,8,409,10,409,12,409,4027,
  	9,409,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,
  	1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,3,410,4048,8,410,1,411,
  	1,411,1,411,1,411,1,411,1,411,3,411,4056,8,411,1,412,1,412,1,412,1,412,
  	1,412,1,412,5,412,4064,8,412,10,412,12,412,4067,9,412,1,413,1,413,1,413,
  	1,413,1,413,1,413,1,413,3,413,4076,8,413,1,414,3,414,4079,8,414,1,415,
  	1,415,1,416,3,416,4084,8,416,1,417,1,417,1,417,1,417,1,417,5,417,4091,
  	8,417,10,417,12,417,4094,9,417,1,418,1,418,1,418,1,418,1,418,1,418,1,
  	418,1,418,3,418,4104,8,418,1,419,1,419,1,419,1,420,1,420,1,420,1,420,
  	1,420,1,421,1,421,1,421,1,421,3,421,4118,8,421,1,422,1,422,1,422,1,422,
  	1,422,1,422,3,422,4126,8,422,1,423,1,423,1,424,1,424,1,425,1,425,1,425,
  	0,55,4,30,60,70,90,120,220,258,266,372,390,410,416,438,452,456,464,472,
  	480,488,496,504,512,520,528,536,544,552,560,568,576,584,592,600,608,616,
  	624,632,640,648,656,702,724,726,732,742,766,774,782,790,806,812,818,824,
  	834,426,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
  	44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
  	90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
  	128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
  	164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
  	200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
  	236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,
  	272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,
  	308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,
  	344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,
  	380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,
  	416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,
  	452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,
  	488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,518,520,522,
  	524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,554,556,558,
  	560,562,564,566,568,570,572,574,576,578,580,582,584,586,588,590,592,594,
  	596,598,600,602,604,606,608,610,612,614,616,618,620,622,624,626,628,630,
  	632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,666,
  	668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,698,700,702,
  	704,706,708,710,712,714,716,718,720,722,724,726,728,730,732,734,736,738,
  	740,742,744,746,748,750,752,754,756,758,760,762,764,766,768,770,772,774,
  	776,778,780,782,784,786,788,790,792,794,796,798,800,802,804,806,808,810,
  	812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,842,844,846,
  	848,850,0,19,5,0,37,37,138,138,213,213,248,248,301,301,2,0,83,83,174,
  	174,2,0,21,21,184,184,6,0,126,126,158,158,160,160,177,177,278,278,396,
  	396,2,0,148,148,353,353,9,0,17,17,36,36,226,226,228,228,237,237,274,274,
  	337,337,365,366,403,404,3,0,234,234,257,257,344,344,5,0,15,16,231,231,
  	292,292,311,311,372,372,1,0,124,125,7,0,20,20,40,40,85,85,149,149,240,
  	241,260,260,291,291,9,0,148,148,263,263,265,269,275,275,353,353,359,361,
  	363,364,368,368,371,371,6,0,136,136,238,238,314,315,322,323,360,361,363,
  	364,7,0,39,39,52,52,81,81,201,201,217,218,282,282,387,388,2,0,141,141,
  	143,143,2,0,259,259,262,262,1,0,127,128,2,0,192,192,220,221,2,0,222,222,
  	370,370,3,0,93,93,181,181,285,285,4326,0,852,1,0,0,0,2,855,1,0,0,0,4,
  	857,1,0,0,0,6,882,1,0,0,0,8,884,1,0,0,0,10,896,1,0,0,0,12,898,1,0,0,0,
  	14,912,1,0,0,0,16,914,1,0,0,0,18,919,1,0,0,0,20,921,1,0,0,0,22,942,1,
  	0,0,0,24,965,1,0,0,0,26,967,1,0,0,0,28,971,1,0,0,0,30,973,1,0,0,0,32,
  	988,1,0,0,0,34,1030,1,0,0,0,36,1032,1,0,0,0,38,1034,1,0,0,0,40,1039,1,
  	0,0,0,42,1045,1,0,0,0,44,1072,1,0,0,0,46,1078,1,0,0,0,48,1084,1,0,0,0,
  	50,1090,1,0,0,0,52,1092,1,0,0,0,54,1097,1,0,0,0,56,1104,1,0,0,0,58,1112,
  	1,0,0,0,60,1114,1,0,0,0,62,1127,1,0,0,0,64,1139,1,0,0,0,66,1142,1,0,0,
  	0,68,1145,1,0,0,0,70,1147,1,0,0,0,72,1157,1,0,0,0,74,1165,1,0,0,0,76,
  	1174,1,0,0,0,78,1176,1,0,0,0,80,1178,1,0,0,0,82,1180,1,0,0,0,84,1182,
  	1,0,0,0,86,1184,1,0,0,0,88,1186,1,0,0,0,90,1192,1,0,0,0,92,1217,1,0,0,
  	0,94,1219,1,0,0,0,96,1221,1,0,0,0,98,1223,1,0,0,0,100,1225,1,0,0,0,102,
  	1227,1,0,0,0,104,1230,1,0,0,0,106,1232,1,0,0,0,108,1237,1,0,0,0,110,1243,
  	1,0,0,0,112,1245,1,0,0,0,114,1247,1,0,0,0,116,1249,1,0,0,0,118,1271,1,
  	0,0,0,120,1273,1,0,0,0,122,1284,1,0,0,0,124,1286,1,0,0,0,126,1291,1,0,
  	0,0,128,1293,1,0,0,0,130,1302,1,0,0,0,132,1305,1,0,0,0,134,1308,1,0,0,
  	0,136,1324,1,0,0,0,138,1326,1,0,0,0,140,1328,1,0,0,0,142,1330,1,0,0,0,
  	144,1332,1,0,0,0,146,1334,1,0,0,0,148,1336,1,0,0,0,150,1338,1,0,0,0,152,
  	1356,1,0,0,0,154,1358,1,0,0,0,156,1362,1,0,0,0,158,1365,1,0,0,0,160,1367,
  	1,0,0,0,162,1371,1,0,0,0,164,1373,1,0,0,0,166,1375,1,0,0,0,168,1422,1,
  	0,0,0,170,1424,1,0,0,0,172,1434,1,0,0,0,174,1443,1,0,0,0,176,1453,1,0,
  	0,0,178,1462,1,0,0,0,180,1472,1,0,0,0,182,1481,1,0,0,0,184,1491,1,0,0,
  	0,186,1501,1,0,0,0,188,1510,1,0,0,0,190,1519,1,0,0,0,192,1528,1,0,0,0,
  	194,1537,1,0,0,0,196,1547,1,0,0,0,198,1557,1,0,0,0,200,1567,1,0,0,0,202,
  	1576,1,0,0,0,204,1585,1,0,0,0,206,1594,1,0,0,0,208,1603,1,0,0,0,210,1615,
  	1,0,0,0,212,1627,1,0,0,0,214,1634,1,0,0,0,216,1644,1,0,0,0,218,1656,1,
  	0,0,0,220,1658,1,0,0,0,222,1669,1,0,0,0,224,1674,1,0,0,0,226,1676,1,0,
  	0,0,228,1684,1,0,0,0,230,1692,1,0,0,0,232,1700,1,0,0,0,234,1708,1,0,0,
  	0,236,1716,1,0,0,0,238,1724,1,0,0,0,240,1732,1,0,0,0,242,1740,1,0,0,0,
  	244,1748,1,0,0,0,246,1756,1,0,0,0,248,1764,1,0,0,0,250,1772,1,0,0,0,252,
  	1780,1,0,0,0,254,1790,1,0,0,0,256,1800,1,0,0,0,258,1812,1,0,0,0,260,1822,
  	1,0,0,0,262,1827,1,0,0,0,264,1830,1,0,0,0,266,1832,1,0,0,0,268,1851,1,
  	0,0,0,270,1901,1,0,0,0,272,1903,1,0,0,0,274,1911,1,0,0,0,276,1919,1,0,
  	0,0,278,1927,1,0,0,0,280,1935,1,0,0,0,282,1943,1,0,0,0,284,1951,1,0,0,
  	0,286,1959,1,0,0,0,288,1967,1,0,0,0,290,1975,1,0,0,0,292,1982,1,0,0,0,
  	294,1989,1,0,0,0,296,1997,1,0,0,0,298,2005,1,0,0,0,300,2013,1,0,0,0,302,
  	2021,1,0,0,0,304,2028,1,0,0,0,306,2035,1,0,0,0,308,2042,1,0,0,0,310,2050,
  	1,0,0,0,312,2061,1,0,0,0,314,2072,1,0,0,0,316,2079,1,0,0,0,318,2165,1,
  	0,0,0,320,2168,1,0,0,0,322,2171,1,0,0,0,324,2223,1,0,0,0,326,2279,1,0,
  	0,0,328,2281,1,0,0,0,330,2286,1,0,0,0,332,2305,1,0,0,0,334,2307,1,0,0,
  	0,336,2321,1,0,0,0,338,2341,1,0,0,0,340,2343,1,0,0,0,342,2350,1,0,0,0,
  	344,2357,1,0,0,0,346,2364,1,0,0,0,348,2371,1,0,0,0,350,2378,1,0,0,0,352,
  	2385,1,0,0,0,354,2392,1,0,0,0,356,2399,1,0,0,0,358,2406,1,0,0,0,360,2413,
  	1,0,0,0,362,2420,1,0,0,0,364,2427,1,0,0,0,366,2434,1,0,0,0,368,2442,1,
  	0,0,0,370,2451,1,0,0,0,372,2456,1,0,0,0,374,2467,1,0,0,0,376,2473,1,0,
  	0,0,378,2484,1,0,0,0,380,2499,1,0,0,0,382,2501,1,0,0,0,384,2508,1,0,0,
  	0,386,2515,1,0,0,0,388,2518,1,0,0,0,390,2520,1,0,0,0,392,2538,1,0,0,0,
  	394,2540,1,0,0,0,396,2548,1,0,0,0,398,2567,1,0,0,0,400,2584,1,0,0,0,402,
  	2586,1,0,0,0,404,2591,1,0,0,0,406,2602,1,0,0,0,408,2614,1,0,0,0,410,2616,
  	1,0,0,0,412,2626,1,0,0,0,414,2632,1,0,0,0,416,2641,1,0,0,0,418,2652,1,
  	0,0,0,420,2655,1,0,0,0,422,2673,1,0,0,0,424,2678,1,0,0,0,426,2688,1,0,
  	0,0,428,2696,1,0,0,0,430,2703,1,0,0,0,432,2711,1,0,0,0,434,2713,1,0,0,
  	0,436,2722,1,0,0,0,438,2724,1,0,0,0,440,2737,1,0,0,0,442,2746,1,0,0,0,
  	444,2748,1,0,0,0,446,2751,1,0,0,0,448,2757,1,0,0,0,450,2760,1,0,0,0,452,
  	2762,1,0,0,0,454,2774,1,0,0,0,456,2776,1,0,0,0,458,2812,1,0,0,0,460,2814,
  	1,0,0,0,462,2820,1,0,0,0,464,2822,1,0,0,0,466,2865,1,0,0,0,468,2867,1,
  	0,0,0,470,2873,1,0,0,0,472,2875,1,0,0,0,474,2894,1,0,0,0,476,2896,1,0,
  	0,0,478,2902,1,0,0,0,480,2904,1,0,0,0,482,2921,1,0,0,0,484,2923,1,0,0,
  	0,486,2929,1,0,0,0,488,2931,1,0,0,0,490,2947,1,0,0,0,492,2949,1,0,0,0,
  	494,2955,1,0,0,0,496,2957,1,0,0,0,498,2982,1,0,0,0,500,2984,1,0,0,0,502,
  	2990,1,0,0,0,504,2992,1,0,0,0,506,3024,1,0,0,0,508,3026,1,0,0,0,510,3032,
  	1,0,0,0,512,3034,1,0,0,0,514,3049,1,0,0,0,516,3051,1,0,0,0,518,3057,1,
  	0,0,0,520,3059,1,0,0,0,522,3075,1,0,0,0,524,3077,1,0,0,0,526,3083,1,0,
  	0,0,528,3085,1,0,0,0,530,3098,1,0,0,0,532,3100,1,0,0,0,534,3106,1,0,0,
  	0,536,3108,1,0,0,0,538,3124,1,0,0,0,540,3126,1,0,0,0,542,3132,1,0,0,0,
  	544,3134,1,0,0,0,546,3153,1,0,0,0,548,3155,1,0,0,0,550,3161,1,0,0,0,552,
  	3163,1,0,0,0,554,3178,1,0,0,0,556,3180,1,0,0,0,558,3186,1,0,0,0,560,3188,
  	1,0,0,0,562,3209,1,0,0,0,564,3211,1,0,0,0,566,3217,1,0,0,0,568,3219,1,
  	0,0,0,570,3258,1,0,0,0,572,3260,1,0,0,0,574,3266,1,0,0,0,576,3268,1,0,
  	0,0,578,3283,1,0,0,0,580,3285,1,0,0,0,582,3291,1,0,0,0,584,3293,1,0,0,
  	0,586,3308,1,0,0,0,588,3310,1,0,0,0,590,3316,1,0,0,0,592,3318,1,0,0,0,
  	594,3334,1,0,0,0,596,3336,1,0,0,0,598,3342,1,0,0,0,600,3344,1,0,0,0,602,
  	3364,1,0,0,0,604,3366,1,0,0,0,606,3372,1,0,0,0,608,3374,1,0,0,0,610,3387,
  	1,0,0,0,612,3389,1,0,0,0,614,3395,1,0,0,0,616,3397,1,0,0,0,618,3412,1,
  	0,0,0,620,3414,1,0,0,0,622,3420,1,0,0,0,624,3422,1,0,0,0,626,3443,1,0,
  	0,0,628,3445,1,0,0,0,630,3451,1,0,0,0,632,3453,1,0,0,0,634,3471,1,0,0,
  	0,636,3473,1,0,0,0,638,3479,1,0,0,0,640,3481,1,0,0,0,642,3497,1,0,0,0,
  	644,3499,1,0,0,0,646,3505,1,0,0,0,648,3507,1,0,0,0,650,3523,1,0,0,0,652,
  	3525,1,0,0,0,654,3531,1,0,0,0,656,3533,1,0,0,0,658,3549,1,0,0,0,660,3551,
  	1,0,0,0,662,3554,1,0,0,0,664,3557,1,0,0,0,666,3560,1,0,0,0,668,3563,1,
  	0,0,0,670,3566,1,0,0,0,672,3569,1,0,0,0,674,3572,1,0,0,0,676,3575,1,0,
  	0,0,678,3578,1,0,0,0,680,3581,1,0,0,0,682,3584,1,0,0,0,684,3589,1,0,0,
  	0,686,3591,1,0,0,0,688,3594,1,0,0,0,690,3597,1,0,0,0,692,3600,1,0,0,0,
  	694,3603,1,0,0,0,696,3606,1,0,0,0,698,3609,1,0,0,0,700,3612,1,0,0,0,702,
  	3614,1,0,0,0,704,3627,1,0,0,0,706,3631,1,0,0,0,708,3635,1,0,0,0,710,3639,
  	1,0,0,0,712,3643,1,0,0,0,714,3645,1,0,0,0,716,3649,1,0,0,0,718,3653,1,
  	0,0,0,720,3659,1,0,0,0,722,3662,1,0,0,0,724,3664,1,0,0,0,726,3674,1,0,
  	0,0,728,3685,1,0,0,0,730,3689,1,0,0,0,732,3691,1,0,0,0,734,3702,1,0,0,
  	0,736,3705,1,0,0,0,738,3718,1,0,0,0,740,3726,1,0,0,0,742,3728,1,0,0,0,
  	744,3752,1,0,0,0,746,3754,1,0,0,0,748,3757,1,0,0,0,750,3800,1,0,0,0,752,
  	3803,1,0,0,0,754,3811,1,0,0,0,756,3821,1,0,0,0,758,3824,1,0,0,0,760,3826,
  	1,0,0,0,762,3829,1,0,0,0,764,3832,1,0,0,0,766,3834,1,0,0,0,768,3857,1,
  	0,0,0,770,3861,1,0,0,0,772,3864,1,0,0,0,774,3866,1,0,0,0,776,3876,1,0,
  	0,0,778,3878,1,0,0,0,780,3881,1,0,0,0,782,3883,1,0,0,0,784,3945,1,0,0,
  	0,786,3948,1,0,0,0,788,3952,1,0,0,0,790,3954,1,0,0,0,792,3965,1,0,0,0,
  	794,3967,1,0,0,0,796,3970,1,0,0,0,798,3972,1,0,0,0,800,3975,1,0,0,0,802,
  	3977,1,0,0,0,804,3983,1,0,0,0,806,3985,1,0,0,0,808,3995,1,0,0,0,810,4001,
  	1,0,0,0,812,4003,1,0,0,0,814,4013,1,0,0,0,816,4016,1,0,0,0,818,4018,1,
  	0,0,0,820,4047,1,0,0,0,822,4055,1,0,0,0,824,4057,1,0,0,0,826,4075,1,0,
  	0,0,828,4078,1,0,0,0,830,4080,1,0,0,0,832,4083,1,0,0,0,834,4085,1,0,0,
  	0,836,4103,1,0,0,0,838,4105,1,0,0,0,840,4108,1,0,0,0,842,4117,1,0,0,0,
  	844,4125,1,0,0,0,846,4127,1,0,0,0,848,4129,1,0,0,0,850,4131,1,0,0,0,852,
  	853,3,2,1,0,853,1,1,0,0,0,854,856,3,4,2,0,855,854,1,0,0,0,855,856,1,0,
  	0,0,856,3,1,0,0,0,857,858,6,2,-1,0,858,859,3,6,3,0,859,864,1,0,0,0,860,
  	861,10,1,0,0,861,863,3,6,3,0,862,860,1,0,0,0,863,866,1,0,0,0,864,862,
  	1,0,0,0,864,865,1,0,0,0,865,5,1,0,0,0,866,864,1,0,0,0,867,883,3,8,4,0,
  	868,883,3,10,5,0,869,883,3,12,6,0,870,883,3,14,7,0,871,883,3,16,8,0,872,
  	883,3,20,10,0,873,883,3,22,11,0,874,883,3,34,17,0,875,883,3,38,19,0,876,
  	883,3,40,20,0,877,883,3,54,27,0,878,883,3,56,28,0,879,883,3,64,32,0,880,
  	883,3,72,36,0,881,883,3,74,37,0,882,867,1,0,0,0,882,868,1,0,0,0,882,869,
  	1,0,0,0,882,870,1,0,0,0,882,871,1,0,0,0,882,872,1,0,0,0,882,873,1,0,0,
  	0,882,874,1,0,0,0,882,875,1,0,0,0,882,876,1,0,0,0,882,877,1,0,0,0,882,
  	878,1,0,0,0,882,879,1,0,0,0,882,880,1,0,0,0,882,881,1,0,0,0,883,7,1,0,
  	0,0,884,885,5,324,0,0,885,886,5,2,0,0,886,887,3,158,79,0,887,9,1,0,0,
  	0,888,889,5,345,0,0,889,890,5,89,0,0,890,891,5,2,0,0,891,897,3,158,79,
  	0,892,893,5,345,0,0,893,894,5,352,0,0,894,895,5,2,0,0,895,897,3,158,79,
  	0,896,888,1,0,0,0,896,892,1,0,0,0,897,11,1,0,0,0,898,899,5,230,0,0,899,
  	900,5,47,0,0,900,901,3,158,79,0,901,13,1,0,0,0,902,903,3,78,39,0,903,
  	904,5,2,0,0,904,905,5,356,0,0,905,906,3,122,61,0,906,913,1,0,0,0,907,
  	908,3,78,39,0,908,909,5,2,0,0,909,910,5,356,0,0,910,911,3,90,45,0,911,
  	913,1,0,0,0,912,902,1,0,0,0,912,907,1,0,0,0,913,15,1,0,0,0,914,915,3,
  	84,42,0,915,916,5,2,0,0,916,917,5,80,0,0,917,918,3,18,9,0,918,17,1,0,
  	0,0,919,920,7,0,0,0,920,19,1,0,0,0,921,922,3,76,38,0,922,923,5,2,0,0,
  	923,924,3,802,401,0,924,926,3,828,414,0,925,927,3,850,425,0,926,925,1,
  	0,0,0,926,927,1,0,0,0,927,928,1,0,0,0,928,930,3,758,379,0,929,931,3,844,
  	422,0,930,929,1,0,0,0,930,931,1,0,0,0,931,933,1,0,0,0,932,934,3,848,424,
  	0,933,932,1,0,0,0,933,934,1,0,0,0,934,935,1,0,0,0,935,936,3,104,52,0,
  	936,937,3,24,12,0,937,938,3,26,13,0,938,939,3,90,45,0,939,940,3,28,14,
  	0,940,941,3,780,390,0,941,21,1,0,0,0,942,943,3,76,38,0,943,944,5,2,0,
  	0,944,945,3,796,398,0,945,947,3,828,414,0,946,948,3,850,425,0,947,946,
  	1,0,0,0,947,948,1,0,0,0,948,949,1,0,0,0,949,951,3,758,379,0,950,952,3,
  	844,422,0,951,950,1,0,0,0,951,952,1,0,0,0,952,954,1,0,0,0,953,955,3,848,
  	424,0,954,953,1,0,0,0,954,955,1,0,0,0,955,956,1,0,0,0,956,957,3,104,52,
  	0,957,958,3,24,12,0,958,959,3,26,13,0,959,960,3,90,45,0,960,961,3,136,
  	68,0,961,962,3,28,14,0,962,963,3,780,390,0,963,23,1,0,0,0,964,966,5,142,
  	0,0,965,964,1,0,0,0,965,966,1,0,0,0,966,25,1,0,0,0,967,968,7,1,0,0,968,
  	27,1,0,0,0,969,970,5,5,0,0,970,972,3,30,15,0,971,969,1,0,0,0,971,972,
  	1,0,0,0,972,29,1,0,0,0,973,974,6,15,-1,0,974,975,3,32,16,0,975,981,1,
  	0,0,0,976,977,10,1,0,0,977,978,5,5,0,0,978,980,3,32,16,0,979,976,1,0,
  	0,0,980,983,1,0,0,0,981,979,1,0,0,0,981,982,1,0,0,0,982,31,1,0,0,0,983,
  	981,1,0,0,0,984,989,3,838,419,0,985,989,3,754,377,0,986,989,3,736,368,
  	0,987,989,3,446,223,0,988,984,1,0,0,0,988,985,1,0,0,0,988,986,1,0,0,0,
  	988,987,1,0,0,0,989,33,1,0,0,0,990,991,3,76,38,0,991,992,5,2,0,0,992,
  	993,3,802,401,0,993,995,3,828,414,0,994,996,3,850,425,0,995,994,1,0,0,
  	0,995,996,1,0,0,0,996,997,1,0,0,0,997,999,3,758,379,0,998,1000,3,844,
  	422,0,999,998,1,0,0,0,999,1000,1,0,0,0,1000,1002,1,0,0,0,1001,1003,3,
  	848,424,0,1002,1001,1,0,0,0,1002,1003,1,0,0,0,1003,1004,1,0,0,0,1004,
  	1005,3,36,18,0,1005,1006,3,90,45,0,1006,1007,5,5,0,0,1007,1008,3,90,45,
  	0,1008,1009,3,136,68,0,1009,1031,1,0,0,0,1010,1011,3,76,38,0,1011,1012,
  	5,2,0,0,1012,1013,3,796,398,0,1013,1015,3,828,414,0,1014,1016,3,850,425,
  	0,1015,1014,1,0,0,0,1015,1016,1,0,0,0,1016,1017,1,0,0,0,1017,1019,3,758,
  	379,0,1018,1020,3,844,422,0,1019,1018,1,0,0,0,1019,1020,1,0,0,0,1020,
  	1022,1,0,0,0,1021,1023,3,848,424,0,1022,1021,1,0,0,0,1022,1023,1,0,0,
  	0,1023,1024,1,0,0,0,1024,1025,3,36,18,0,1025,1026,3,90,45,0,1026,1027,
  	5,5,0,0,1027,1028,3,90,45,0,1028,1029,3,136,68,0,1029,1031,1,0,0,0,1030,
  	990,1,0,0,0,1030,1010,1,0,0,0,1031,35,1,0,0,0,1032,1033,7,2,0,0,1033,
  	37,1,0,0,0,1034,1035,5,92,0,0,1035,1036,3,450,225,0,1036,1037,3,800,400,
  	0,1037,1038,3,42,21,0,1038,39,1,0,0,0,1039,1040,5,94,0,0,1040,1041,3,
  	796,398,0,1041,1042,3,42,21,0,1042,1043,3,450,225,0,1043,1044,3,52,26,
  	0,1044,41,1,0,0,0,1045,1047,3,828,414,0,1046,1048,3,850,425,0,1047,1046,
  	1,0,0,0,1047,1048,1,0,0,0,1048,1049,1,0,0,0,1049,1050,3,758,379,0,1050,
  	1051,3,748,374,0,1051,1052,3,832,416,0,1052,1053,3,90,45,0,1053,1054,
  	3,76,38,0,1054,1055,5,8,0,0,1055,1056,3,822,411,0,1056,1058,5,9,0,0,1057,
  	1059,3,848,424,0,1058,1057,1,0,0,0,1058,1059,1,0,0,0,1059,1060,1,0,0,
  	0,1060,1062,3,780,390,0,1061,1063,3,838,419,0,1062,1061,1,0,0,0,1062,
  	1063,1,0,0,0,1063,1064,1,0,0,0,1064,1065,3,752,376,0,1065,1066,3,44,22,
  	0,1066,1067,3,46,23,0,1067,1068,3,48,24,0,1068,1069,3,50,25,0,1069,43,
  	1,0,0,0,1070,1071,5,169,0,0,1071,1073,3,158,79,0,1072,1070,1,0,0,0,1072,
  	1073,1,0,0,0,1073,45,1,0,0,0,1074,1075,5,279,0,0,1075,1076,3,90,45,0,
  	1076,1077,3,136,68,0,1077,1079,1,0,0,0,1078,1074,1,0,0,0,1078,1079,1,
  	0,0,0,1079,47,1,0,0,0,1080,1081,5,284,0,0,1081,1082,3,90,45,0,1082,1083,
  	3,136,68,0,1083,1085,1,0,0,0,1084,1080,1,0,0,0,1084,1085,1,0,0,0,1085,
  	49,1,0,0,0,1086,1087,5,276,0,0,1087,1088,3,90,45,0,1088,1089,3,136,68,
  	0,1089,1091,1,0,0,0,1090,1086,1,0,0,0,1090,1091,1,0,0,0,1091,51,1,0,0,
  	0,1092,1093,5,12,0,0,1093,1094,3,258,129,0,1094,1095,3,68,34,0,1095,1096,
  	5,13,0,0,1096,53,1,0,0,0,1097,1098,5,51,0,0,1098,1099,3,82,41,0,1099,
  	1100,5,2,0,0,1100,1101,5,12,0,0,1101,1102,3,780,390,0,1102,1103,5,13,
  	0,0,1103,55,1,0,0,0,1104,1105,3,86,43,0,1105,1106,5,2,0,0,1106,1107,5,
  	6,0,0,1107,1108,5,12,0,0,1108,1109,3,58,29,0,1109,1110,5,13,0,0,1110,
  	57,1,0,0,0,1111,1113,3,60,30,0,1112,1111,1,0,0,0,1112,1113,1,0,0,0,1113,
  	59,1,0,0,0,1114,1115,6,30,-1,0,1115,1116,3,62,31,0,1116,1122,1,0,0,0,
  	1117,1118,10,1,0,0,1118,1119,5,5,0,0,1119,1121,3,62,31,0,1120,1117,1,
  	0,0,0,1121,1124,1,0,0,0,1122,1120,1,0,0,0,1122,1123,1,0,0,0,1123,61,1,
  	0,0,0,1124,1122,1,0,0,0,1125,1128,3,88,44,0,1126,1128,3,604,302,0,1127,
  	1125,1,0,0,0,1127,1126,1,0,0,0,1128,63,1,0,0,0,1129,1130,3,88,44,0,1130,
  	1131,5,2,0,0,1131,1132,3,66,33,0,1132,1133,3,434,217,0,1133,1140,1,0,
  	0,0,1134,1135,3,88,44,0,1135,1136,5,2,0,0,1136,1137,3,66,33,0,1137,1138,
  	3,458,229,0,1138,1140,1,0,0,0,1139,1129,1,0,0,0,1139,1134,1,0,0,0,1140,
  	65,1,0,0,0,1141,1143,5,118,0,0,1142,1141,1,0,0,0,1142,1143,1,0,0,0,1143,
  	67,1,0,0,0,1144,1146,3,70,35,0,1145,1144,1,0,0,0,1145,1146,1,0,0,0,1146,
  	69,1,0,0,0,1147,1148,6,35,-1,0,1148,1149,3,72,36,0,1149,1154,1,0,0,0,
  	1150,1151,10,1,0,0,1151,1153,3,72,36,0,1152,1150,1,0,0,0,1153,1156,1,
  	0,0,0,1154,1152,1,0,0,0,1154,1155,1,0,0,0,1155,71,1,0,0,0,1156,1154,1,
  	0,0,0,1157,1158,5,376,0,0,1158,1159,3,90,45,0,1159,1160,3,126,63,0,1160,
  	1161,5,5,0,0,1161,1162,5,12,0,0,1162,1163,3,790,395,0,1163,1164,5,13,
  	0,0,1164,73,1,0,0,0,1165,1166,5,377,0,0,1166,1167,3,76,38,0,1167,1168,
  	5,5,0,0,1168,1169,3,78,39,0,1169,1170,5,5,0,0,1170,1171,5,12,0,0,1171,
  	1172,3,790,395,0,1172,1173,5,13,0,0,1173,75,1,0,0,0,1174,1175,5,439,0,
  	0,1175,77,1,0,0,0,1176,1177,5,442,0,0,1177,79,1,0,0,0,1178,1179,5,445,
  	0,0,1179,81,1,0,0,0,1180,1181,5,411,0,0,1181,83,1,0,0,0,1182,1183,5,412,
  	0,0,1183,85,1,0,0,0,1184,1185,5,413,0,0,1185,87,1,0,0,0,1186,1187,5,414,
  	0,0,1187,89,1,0,0,0,1188,1189,6,45,-1,0,1189,1193,3,94,47,0,1190,1193,
  	3,92,46,0,1191,1193,3,114,57,0,1192,1188,1,0,0,0,1192,1190,1,0,0,0,1192,
  	1191,1,0,0,0,1193,1205,1,0,0,0,1194,1195,10,3,0,0,1195,1196,5,8,0,0,1196,
  	1197,3,822,411,0,1197,1198,5,9,0,0,1198,1204,1,0,0,0,1199,1200,10,1,0,
  	0,1200,1201,3,104,52,0,1201,1202,5,14,0,0,1202,1204,1,0,0,0,1203,1194,
  	1,0,0,0,1203,1199,1,0,0,0,1204,1207,1,0,0,0,1205,1203,1,0,0,0,1205,1206,
  	1,0,0,0,1206,91,1,0,0,0,1207,1205,1,0,0,0,1208,1218,3,96,48,0,1209,1218,
  	3,98,49,0,1210,1218,3,108,54,0,1211,1218,3,110,55,0,1212,1218,3,116,58,
  	0,1213,1218,3,118,59,0,1214,1218,3,124,62,0,1215,1218,3,102,51,0,1216,
  	1218,3,112,56,0,1217,1208,1,0,0,0,1217,1209,1,0,0,0,1217,1210,1,0,0,0,
  	1217,1211,1,0,0,0,1217,1212,1,0,0,0,1217,1213,1,0,0,0,1217,1214,1,0,0,
  	0,1217,1215,1,0,0,0,1217,1216,1,0,0,0,1218,93,1,0,0,0,1219,1220,5,385,
  	0,0,1220,95,1,0,0,0,1221,1222,5,434,0,0,1222,97,1,0,0,0,1223,1224,3,100,
  	50,0,1224,99,1,0,0,0,1225,1226,7,3,0,0,1226,101,1,0,0,0,1227,1228,5,398,
  	0,0,1228,103,1,0,0,0,1229,1231,3,106,53,0,1230,1229,1,0,0,0,1230,1231,
  	1,0,0,0,1231,105,1,0,0,0,1232,1233,5,18,0,0,1233,1234,5,8,0,0,1234,1235,
  	5,424,0,0,1235,1236,5,9,0,0,1236,107,1,0,0,0,1237,1238,5,1,0,0,1238,1239,
  	5,424,0,0,1239,1240,5,393,0,0,1240,1241,3,90,45,0,1241,1242,5,3,0,0,1242,
  	109,1,0,0,0,1243,1244,5,210,0,0,1244,111,1,0,0,0,1245,1246,5,351,0,0,
  	1246,113,1,0,0,0,1247,1248,5,227,0,0,1248,115,1,0,0,0,1249,1250,5,10,
  	0,0,1250,1251,5,424,0,0,1251,1252,5,393,0,0,1252,1253,3,90,45,0,1253,
  	1254,5,11,0,0,1254,117,1,0,0,0,1255,1256,5,12,0,0,1256,1272,5,13,0,0,
  	1257,1258,5,12,0,0,1258,1259,3,120,60,0,1259,1260,5,13,0,0,1260,1272,
  	1,0,0,0,1261,1262,5,1,0,0,1262,1263,5,12,0,0,1263,1264,5,13,0,0,1264,
  	1272,5,3,0,0,1265,1266,5,1,0,0,1266,1267,5,12,0,0,1267,1268,3,120,60,
  	0,1268,1269,5,13,0,0,1269,1270,5,3,0,0,1270,1272,1,0,0,0,1271,1255,1,
  	0,0,0,1271,1257,1,0,0,0,1271,1261,1,0,0,0,1271,1265,1,0,0,0,1272,119,
  	1,0,0,0,1273,1274,6,60,-1,0,1274,1275,3,90,45,0,1275,1281,1,0,0,0,1276,
  	1277,10,1,0,0,1277,1278,5,5,0,0,1278,1280,3,90,45,0,1279,1276,1,0,0,0,
  	1280,1283,1,0,0,0,1281,1279,1,0,0,0,1281,1282,1,0,0,0,1282,121,1,0,0,
  	0,1283,1281,1,0,0,0,1284,1285,5,270,0,0,1285,123,1,0,0,0,1286,1287,3,
  	78,39,0,1287,125,1,0,0,0,1288,1292,3,136,68,0,1289,1292,3,78,39,0,1290,
  	1292,3,128,64,0,1291,1288,1,0,0,0,1291,1289,1,0,0,0,1291,1290,1,0,0,0,
  	1292,127,1,0,0,0,1293,1294,5,47,0,0,1294,1295,3,130,65,0,1295,1296,3,
  	132,66,0,1296,1297,3,134,67,0,1297,1298,3,158,79,0,1298,1299,5,5,0,0,
  	1299,1300,3,158,79,0,1300,129,1,0,0,0,1301,1303,5,318,0,0,1302,1301,1,
  	0,0,0,1302,1303,1,0,0,0,1303,131,1,0,0,0,1304,1306,5,24,0,0,1305,1304,
  	1,0,0,0,1305,1306,1,0,0,0,1306,133,1,0,0,0,1307,1309,5,199,0,0,1308,1307,
  	1,0,0,0,1308,1309,1,0,0,0,1309,135,1,0,0,0,1310,1325,3,138,69,0,1311,
  	1325,3,142,71,0,1312,1325,3,146,73,0,1313,1325,3,148,74,0,1314,1325,3,
  	150,75,0,1315,1325,3,152,76,0,1316,1325,3,154,77,0,1317,1325,3,156,78,
  	0,1318,1325,3,160,80,0,1319,1325,3,162,81,0,1320,1325,3,76,38,0,1321,
  	1325,3,164,82,0,1322,1325,3,166,83,0,1323,1325,3,168,84,0,1324,1310,1,
  	0,0,0,1324,1311,1,0,0,0,1324,1312,1,0,0,0,1324,1313,1,0,0,0,1324,1314,
  	1,0,0,0,1324,1315,1,0,0,0,1324,1316,1,0,0,0,1324,1317,1,0,0,0,1324,1318,
  	1,0,0,0,1324,1319,1,0,0,0,1324,1320,1,0,0,0,1324,1321,1,0,0,0,1324,1322,
  	1,0,0,0,1324,1323,1,0,0,0,1325,137,1,0,0,0,1326,1327,3,140,70,0,1327,
  	139,1,0,0,0,1328,1329,7,4,0,0,1329,141,1,0,0,0,1330,1331,5,424,0,0,1331,
  	143,1,0,0,0,1332,1333,5,424,0,0,1333,145,1,0,0,0,1334,1335,5,427,0,0,
  	1335,147,1,0,0,0,1336,1337,5,261,0,0,1337,149,1,0,0,0,1338,1339,5,251,
  	0,0,1339,151,1,0,0,0,1340,1341,5,12,0,0,1341,1357,5,13,0,0,1342,1343,
  	5,12,0,0,1343,1344,3,732,366,0,1344,1345,5,13,0,0,1345,1357,1,0,0,0,1346,
  	1347,5,1,0,0,1347,1348,5,12,0,0,1348,1349,5,13,0,0,1349,1357,5,3,0,0,
  	1350,1351,5,1,0,0,1351,1352,5,12,0,0,1352,1353,3,732,366,0,1353,1354,
  	5,13,0,0,1354,1355,5,3,0,0,1355,1357,1,0,0,0,1356,1340,1,0,0,0,1356,1342,
  	1,0,0,0,1356,1346,1,0,0,0,1356,1350,1,0,0,0,1357,153,1,0,0,0,1358,1359,
  	5,10,0,0,1359,1360,3,730,365,0,1360,1361,5,11,0,0,1361,155,1,0,0,0,1362,
  	1363,5,61,0,0,1363,1364,3,158,79,0,1364,157,1,0,0,0,1365,1366,5,432,0,
  	0,1366,159,1,0,0,0,1367,1368,5,1,0,0,1368,1369,3,730,365,0,1369,1370,
  	5,3,0,0,1370,161,1,0,0,0,1371,1372,5,406,0,0,1372,163,1,0,0,0,1373,1374,
  	5,367,0,0,1374,165,1,0,0,0,1375,1376,5,57,0,0,1376,1377,5,8,0,0,1377,
  	1378,3,76,38,0,1378,1379,5,5,0,0,1379,1380,3,78,39,0,1380,1381,5,9,0,
  	0,1381,167,1,0,0,0,1382,1423,3,170,85,0,1383,1423,3,172,86,0,1384,1423,
  	3,174,87,0,1385,1423,3,176,88,0,1386,1423,3,178,89,0,1387,1423,3,180,
  	90,0,1388,1423,3,182,91,0,1389,1423,3,184,92,0,1390,1423,3,186,93,0,1391,
  	1423,3,188,94,0,1392,1423,3,190,95,0,1393,1423,3,192,96,0,1394,1423,3,
  	194,97,0,1395,1423,3,196,98,0,1396,1423,3,198,99,0,1397,1423,3,200,100,
  	0,1398,1423,3,202,101,0,1399,1423,3,204,102,0,1400,1423,3,206,103,0,1401,
  	1423,3,208,104,0,1402,1423,3,210,105,0,1403,1423,3,212,106,0,1404,1423,
  	3,214,107,0,1405,1423,3,216,108,0,1406,1423,3,226,113,0,1407,1423,3,228,
  	114,0,1408,1423,3,230,115,0,1409,1423,3,232,116,0,1410,1423,3,234,117,
  	0,1411,1423,3,236,118,0,1412,1423,3,238,119,0,1413,1423,3,240,120,0,1414,
  	1423,3,242,121,0,1415,1423,3,244,122,0,1416,1423,3,246,123,0,1417,1423,
  	3,248,124,0,1418,1423,3,250,125,0,1419,1423,3,252,126,0,1420,1423,3,254,
  	127,0,1421,1423,3,256,128,0,1422,1382,1,0,0,0,1422,1383,1,0,0,0,1422,
  	1384,1,0,0,0,1422,1385,1,0,0,0,1422,1386,1,0,0,0,1422,1387,1,0,0,0,1422,
  	1388,1,0,0,0,1422,1389,1,0,0,0,1422,1390,1,0,0,0,1422,1391,1,0,0,0,1422,
  	1392,1,0,0,0,1422,1393,1,0,0,0,1422,1394,1,0,0,0,1422,1395,1,0,0,0,1422,
  	1396,1,0,0,0,1422,1397,1,0,0,0,1422,1398,1,0,0,0,1422,1399,1,0,0,0,1422,
  	1400,1,0,0,0,1422,1401,1,0,0,0,1422,1402,1,0,0,0,1422,1403,1,0,0,0,1422,
  	1404,1,0,0,0,1422,1405,1,0,0,0,1422,1406,1,0,0,0,1422,1407,1,0,0,0,1422,
  	1408,1,0,0,0,1422,1409,1,0,0,0,1422,1410,1,0,0,0,1422,1411,1,0,0,0,1422,
  	1412,1,0,0,0,1422,1413,1,0,0,0,1422,1414,1,0,0,0,1422,1415,1,0,0,0,1422,
  	1416,1,0,0,0,1422,1417,1,0,0,0,1422,1418,1,0,0,0,1422,1419,1,0,0,0,1422,
  	1420,1,0,0,0,1422,1421,1,0,0,0,1423,169,1,0,0,0,1424,1425,5,17,0,0,1425,
  	1426,3,810,405,0,1426,1427,5,8,0,0,1427,1428,3,90,45,0,1428,1429,3,136,
  	68,0,1429,1430,5,5,0,0,1430,1431,3,90,45,0,1431,1432,3,136,68,0,1432,
  	1433,5,9,0,0,1433,171,1,0,0,0,1434,1435,5,147,0,0,1435,1436,5,8,0,0,1436,
  	1437,3,90,45,0,1437,1438,3,136,68,0,1438,1439,5,5,0,0,1439,1440,3,90,
  	45,0,1440,1441,3,136,68,0,1441,1442,5,9,0,0,1442,173,1,0,0,0,1443,1444,
  	5,337,0,0,1444,1445,3,810,405,0,1445,1446,5,8,0,0,1446,1447,3,90,45,0,
  	1447,1448,3,136,68,0,1448,1449,5,5,0,0,1449,1450,3,90,45,0,1450,1451,
  	3,136,68,0,1451,1452,5,9,0,0,1452,175,1,0,0,0,1453,1454,5,167,0,0,1454,
  	1455,5,8,0,0,1455,1456,3,90,45,0,1456,1457,3,136,68,0,1457,1458,5,5,0,
  	0,1458,1459,3,90,45,0,1459,1460,3,136,68,0,1460,1461,5,9,0,0,1461,177,
  	1,0,0,0,1462,1463,5,233,0,0,1463,1464,3,810,405,0,1464,1465,5,8,0,0,1465,
  	1466,3,90,45,0,1466,1467,3,136,68,0,1467,1468,5,5,0,0,1468,1469,3,90,
  	45,0,1469,1470,3,136,68,0,1470,1471,5,9,0,0,1471,179,1,0,0,0,1472,1473,
  	5,159,0,0,1473,1474,5,8,0,0,1474,1475,3,90,45,0,1475,1476,3,136,68,0,
  	1476,1477,5,5,0,0,1477,1478,3,90,45,0,1478,1479,3,136,68,0,1479,1480,
  	5,9,0,0,1480,181,1,0,0,0,1481,1482,5,358,0,0,1482,1483,3,762,381,0,1483,
  	1484,5,8,0,0,1484,1485,3,90,45,0,1485,1486,3,136,68,0,1486,1487,5,5,0,
  	0,1487,1488,3,90,45,0,1488,1489,3,136,68,0,1489,1490,5,9,0,0,1490,183,
  	1,0,0,0,1491,1492,5,308,0,0,1492,1493,3,762,381,0,1493,1494,5,8,0,0,1494,
  	1495,3,90,45,0,1495,1496,3,136,68,0,1496,1497,5,5,0,0,1497,1498,3,90,
  	45,0,1498,1499,3,136,68,0,1499,1500,5,9,0,0,1500,185,1,0,0,0,1501,1502,
  	5,152,0,0,1502,1503,5,8,0,0,1503,1504,3,90,45,0,1504,1505,3,136,68,0,
  	1505,1506,5,5,0,0,1506,1507,3,90,45,0,1507,1508,3,136,68,0,1508,1509,
  	5,9,0,0,1509,187,1,0,0,0,1510,1511,5,375,0,0,1511,1512,5,8,0,0,1512,1513,
  	3,90,45,0,1513,1514,3,136,68,0,1514,1515,5,5,0,0,1515,1516,3,90,45,0,
  	1516,1517,3,136,68,0,1517,1518,5,9,0,0,1518,189,1,0,0,0,1519,1520,5,330,
  	0,0,1520,1521,5,8,0,0,1521,1522,3,90,45,0,1522,1523,3,136,68,0,1523,1524,
  	5,5,0,0,1524,1525,3,90,45,0,1525,1526,3,136,68,0,1526,1527,5,9,0,0,1527,
  	191,1,0,0,0,1528,1529,5,165,0,0,1529,1530,5,8,0,0,1530,1531,3,90,45,0,
  	1531,1532,3,136,68,0,1532,1533,5,5,0,0,1533,1534,3,90,45,0,1534,1535,
  	3,136,68,0,1535,1536,5,9,0,0,1536,193,1,0,0,0,1537,1538,5,316,0,0,1538,
  	1539,3,810,405,0,1539,1540,5,8,0,0,1540,1541,3,90,45,0,1541,1542,3,136,
  	68,0,1542,1543,5,5,0,0,1543,1544,3,90,45,0,1544,1545,3,136,68,0,1545,
  	1546,5,9,0,0,1546,195,1,0,0,0,1547,1548,5,224,0,0,1548,1549,3,762,381,
  	0,1549,1550,5,8,0,0,1550,1551,3,90,45,0,1551,1552,3,136,68,0,1552,1553,
  	5,5,0,0,1553,1554,3,90,45,0,1554,1555,3,136,68,0,1555,1556,5,9,0,0,1556,
  	197,1,0,0,0,1557,1558,5,46,0,0,1558,1559,3,762,381,0,1559,1560,5,8,0,
  	0,1560,1561,3,90,45,0,1561,1562,3,136,68,0,1562,1563,5,5,0,0,1563,1564,
  	3,90,45,0,1564,1565,3,136,68,0,1565,1566,5,9,0,0,1566,199,1,0,0,0,1567,
  	1568,5,36,0,0,1568,1569,5,8,0,0,1569,1570,3,90,45,0,1570,1571,3,136,68,
  	0,1571,1572,5,5,0,0,1572,1573,3,90,45,0,1573,1574,3,136,68,0,1574,1575,
  	5,9,0,0,1575,201,1,0,0,0,1576,1577,5,274,0,0,1577,1578,5,8,0,0,1578,1579,
  	3,90,45,0,1579,1580,3,136,68,0,1580,1581,5,5,0,0,1581,1582,3,90,45,0,
  	1582,1583,3,136,68,0,1583,1584,5,9,0,0,1584,203,1,0,0,0,1585,1586,5,404,
  	0,0,1586,1587,5,8,0,0,1587,1588,3,90,45,0,1588,1589,3,136,68,0,1589,1590,
  	5,5,0,0,1590,1591,3,90,45,0,1591,1592,3,136,68,0,1592,1593,5,9,0,0,1593,
  	205,1,0,0,0,1594,1595,5,144,0,0,1595,1596,5,8,0,0,1596,1597,3,90,45,0,
  	1597,1598,3,136,68,0,1598,1599,5,5,0,0,1599,1600,3,90,45,0,1600,1601,
  	3,136,68,0,1601,1602,5,9,0,0,1602,207,1,0,0,0,1603,1604,5,197,0,0,1604,
  	1605,5,8,0,0,1605,1606,3,90,45,0,1606,1607,3,136,68,0,1607,1608,5,5,0,
  	0,1608,1609,3,90,45,0,1609,1610,3,136,68,0,1610,1611,5,5,0,0,1611,1612,
  	3,90,45,0,1612,1613,3,136,68,0,1613,1614,5,9,0,0,1614,209,1,0,0,0,1615,
  	1616,5,317,0,0,1616,1617,5,8,0,0,1617,1618,3,90,45,0,1618,1619,3,136,
  	68,0,1619,1620,5,5,0,0,1620,1621,3,90,45,0,1621,1622,3,136,68,0,1622,
  	1623,5,5,0,0,1623,1624,3,90,45,0,1624,1625,3,136,68,0,1625,1626,5,9,0,
  	0,1626,211,1,0,0,0,1627,1628,5,145,0,0,1628,1629,5,8,0,0,1629,1630,3,
  	90,45,0,1630,1631,3,136,68,0,1631,1632,3,788,394,0,1632,1633,5,9,0,0,
  	1633,213,1,0,0,0,1634,1635,5,198,0,0,1635,1636,5,8,0,0,1636,1637,3,90,
  	45,0,1637,1638,3,136,68,0,1638,1639,5,5,0,0,1639,1640,3,90,45,0,1640,
  	1641,3,136,68,0,1641,1642,3,788,394,0,1642,1643,5,9,0,0,1643,215,1,0,
  	0,0,1644,1645,5,171,0,0,1645,1646,3,786,393,0,1646,1647,5,8,0,0,1647,
  	1648,3,90,45,0,1648,1649,5,5,0,0,1649,1650,3,90,45,0,1650,1651,3,136,
  	68,0,1651,1652,5,5,0,0,1652,1653,3,218,109,0,1653,1654,5,9,0,0,1654,217,
  	1,0,0,0,1655,1657,3,220,110,0,1656,1655,1,0,0,0,1656,1657,1,0,0,0,1657,
  	219,1,0,0,0,1658,1659,6,110,-1,0,1659,1660,3,222,111,0,1660,1666,1,0,
  	0,0,1661,1662,10,1,0,0,1662,1663,5,5,0,0,1663,1665,3,222,111,0,1664,1661,
  	1,0,0,0,1665,1668,1,0,0,0,1666,1664,1,0,0,0,1666,1667,1,0,0,0,1667,221,
  	1,0,0,0,1668,1666,1,0,0,0,1669,1670,3,224,112,0,1670,1671,3,90,45,0,1671,
  	1672,3,136,68,0,1672,223,1,0,0,0,1673,1675,5,195,0,0,1674,1673,1,0,0,
  	0,1674,1675,1,0,0,0,1675,225,1,0,0,0,1676,1677,5,354,0,0,1677,1678,5,
  	8,0,0,1678,1679,3,90,45,0,1679,1680,3,136,68,0,1680,1681,5,350,0,0,1681,
  	1682,3,90,45,0,1682,1683,5,9,0,0,1683,227,1,0,0,0,1684,1685,5,407,0,0,
  	1685,1686,5,8,0,0,1686,1687,3,90,45,0,1687,1688,3,136,68,0,1688,1689,
  	5,350,0,0,1689,1690,3,90,45,0,1690,1691,5,9,0,0,1691,229,1,0,0,0,1692,
  	1693,5,313,0,0,1693,1694,5,8,0,0,1694,1695,3,90,45,0,1695,1696,3,136,
  	68,0,1696,1697,5,350,0,0,1697,1698,3,90,45,0,1698,1699,5,9,0,0,1699,231,
  	1,0,0,0,1700,1701,5,164,0,0,1701,1702,5,8,0,0,1702,1703,3,90,45,0,1703,
  	1704,3,136,68,0,1704,1705,5,350,0,0,1705,1706,3,90,45,0,1706,1707,5,9,
  	0,0,1707,233,1,0,0,0,1708,1709,5,161,0,0,1709,1710,5,8,0,0,1710,1711,
  	3,90,45,0,1711,1712,3,136,68,0,1712,1713,5,350,0,0,1713,1714,3,90,45,
  	0,1714,1715,5,9,0,0,1715,235,1,0,0,0,1716,1717,5,163,0,0,1717,1718,5,
  	8,0,0,1718,1719,3,90,45,0,1719,1720,3,136,68,0,1720,1721,5,350,0,0,1721,
  	1722,3,90,45,0,1722,1723,5,9,0,0,1723,237,1,0,0,0,1724,1725,5,162,0,0,
  	1725,1726,5,8,0,0,1726,1727,3,90,45,0,1727,1728,3,136,68,0,1728,1729,
  	5,350,0,0,1729,1730,3,90,45,0,1730,1731,5,9,0,0,1731,239,1,0,0,0,1732,
  	1733,5,362,0,0,1733,1734,5,8,0,0,1734,1735,3,90,45,0,1735,1736,3,136,
  	68,0,1736,1737,5,350,0,0,1737,1738,3,90,45,0,1738,1739,5,9,0,0,1739,241,
  	1,0,0,0,1740,1741,5,320,0,0,1741,1742,5,8,0,0,1742,1743,3,90,45,0,1743,
  	1744,3,136,68,0,1744,1745,5,350,0,0,1745,1746,3,90,45,0,1746,1747,5,9,
  	0,0,1747,243,1,0,0,0,1748,1749,5,286,0,0,1749,1750,5,8,0,0,1750,1751,
  	3,90,45,0,1751,1752,3,136,68,0,1752,1753,5,350,0,0,1753,1754,3,90,45,
  	0,1754,1755,5,9,0,0,1755,245,1,0,0,0,1756,1757,5,202,0,0,1757,1758,5,
  	8,0,0,1758,1759,3,90,45,0,1759,1760,3,136,68,0,1760,1761,5,350,0,0,1761,
  	1762,3,90,45,0,1762,1763,5,9,0,0,1763,247,1,0,0,0,1764,1765,5,56,0,0,
  	1765,1766,5,8,0,0,1766,1767,3,90,45,0,1767,1768,3,136,68,0,1768,1769,
  	5,350,0,0,1769,1770,3,90,45,0,1770,1771,5,9,0,0,1771,249,1,0,0,0,1772,
  	1773,5,19,0,0,1773,1774,5,8,0,0,1774,1775,3,90,45,0,1775,1776,3,136,68,
  	0,1776,1777,5,350,0,0,1777,1778,3,90,45,0,1778,1779,5,9,0,0,1779,251,
  	1,0,0,0,1780,1781,5,182,0,0,1781,1782,3,794,397,0,1782,1783,5,8,0,0,1783,
  	1784,3,90,45,0,1784,1785,3,136,68,0,1785,1786,5,5,0,0,1786,1787,3,90,
  	45,0,1787,1788,3,136,68,0,1788,1789,5,9,0,0,1789,253,1,0,0,0,1790,1791,
  	5,151,0,0,1791,1792,3,778,389,0,1792,1793,5,8,0,0,1793,1794,3,90,45,0,
  	1794,1795,3,136,68,0,1795,1796,5,5,0,0,1796,1797,3,90,45,0,1797,1798,
  	3,136,68,0,1798,1799,5,9,0,0,1799,255,1,0,0,0,1800,1801,5,310,0,0,1801,
  	1802,5,8,0,0,1802,1803,3,90,45,0,1803,1804,3,136,68,0,1804,1805,5,5,0,
  	0,1805,1806,3,90,45,0,1806,1807,3,136,68,0,1807,1808,5,5,0,0,1808,1809,
  	3,90,45,0,1809,1810,3,136,68,0,1810,1811,5,9,0,0,1811,257,1,0,0,0,1812,
  	1813,6,129,-1,0,1813,1814,3,260,130,0,1814,1819,1,0,0,0,1815,1816,10,
  	1,0,0,1816,1818,3,260,130,0,1817,1815,1,0,0,0,1818,1821,1,0,0,0,1819,
  	1817,1,0,0,0,1819,1820,1,0,0,0,1820,259,1,0,0,0,1821,1819,1,0,0,0,1822,
  	1823,3,262,131,0,1823,1824,3,264,132,0,1824,1825,3,398,199,0,1825,261,
  	1,0,0,0,1826,1828,3,80,40,0,1827,1826,1,0,0,0,1827,1828,1,0,0,0,1828,
  	263,1,0,0,0,1829,1831,3,266,133,0,1830,1829,1,0,0,0,1830,1831,1,0,0,0,
  	1831,265,1,0,0,0,1832,1833,6,133,-1,0,1833,1834,3,268,134,0,1834,1839,
  	1,0,0,0,1835,1836,10,1,0,0,1836,1838,3,268,134,0,1837,1835,1,0,0,0,1838,
  	1841,1,0,0,0,1839,1837,1,0,0,0,1839,1840,1,0,0,0,1840,267,1,0,0,0,1841,
  	1839,1,0,0,0,1842,1852,3,326,163,0,1843,1852,3,328,164,0,1844,1852,3,
  	330,165,0,1845,1852,3,334,167,0,1846,1847,3,78,39,0,1847,1848,5,2,0,0,
  	1848,1849,3,270,135,0,1849,1852,1,0,0,0,1850,1852,3,270,135,0,1851,1842,
  	1,0,0,0,1851,1843,1,0,0,0,1851,1844,1,0,0,0,1851,1845,1,0,0,0,1851,1846,
  	1,0,0,0,1851,1850,1,0,0,0,1852,269,1,0,0,0,1853,1902,3,272,136,0,1854,
  	1902,3,274,137,0,1855,1902,3,276,138,0,1856,1902,3,278,139,0,1857,1902,
  	3,280,140,0,1858,1902,3,282,141,0,1859,1902,3,284,142,0,1860,1902,3,286,
  	143,0,1861,1902,3,288,144,0,1862,1902,3,290,145,0,1863,1902,3,292,146,
  	0,1864,1902,3,294,147,0,1865,1902,3,296,148,0,1866,1902,3,298,149,0,1867,
  	1902,3,300,150,0,1868,1902,3,302,151,0,1869,1902,3,304,152,0,1870,1902,
  	3,306,153,0,1871,1902,3,308,154,0,1872,1902,3,310,155,0,1873,1902,3,312,
  	156,0,1874,1902,3,314,157,0,1875,1902,3,316,158,0,1876,1902,3,318,159,
  	0,1877,1902,3,324,162,0,1878,1902,3,338,169,0,1879,1902,3,340,170,0,1880,
  	1902,3,342,171,0,1881,1902,3,344,172,0,1882,1902,3,346,173,0,1883,1902,
  	3,348,174,0,1884,1902,3,350,175,0,1885,1902,3,352,176,0,1886,1902,3,354,
  	177,0,1887,1902,3,356,178,0,1888,1902,3,358,179,0,1889,1902,3,360,180,
  	0,1890,1902,3,362,181,0,1891,1902,3,364,182,0,1892,1902,3,366,183,0,1893,
  	1902,3,368,184,0,1894,1902,3,370,185,0,1895,1902,3,376,188,0,1896,1902,
  	3,378,189,0,1897,1902,3,382,191,0,1898,1902,3,384,192,0,1899,1902,3,394,
  	197,0,1900,1902,3,396,198,0,1901,1853,1,0,0,0,1901,1854,1,0,0,0,1901,
  	1855,1,0,0,0,1901,1856,1,0,0,0,1901,1857,1,0,0,0,1901,1858,1,0,0,0,1901,
  	1859,1,0,0,0,1901,1860,1,0,0,0,1901,1861,1,0,0,0,1901,1862,1,0,0,0,1901,
  	1863,1,0,0,0,1901,1864,1,0,0,0,1901,1865,1,0,0,0,1901,1866,1,0,0,0,1901,
  	1867,1,0,0,0,1901,1868,1,0,0,0,1901,1869,1,0,0,0,1901,1870,1,0,0,0,1901,
  	1871,1,0,0,0,1901,1872,1,0,0,0,1901,1873,1,0,0,0,1901,1874,1,0,0,0,1901,
  	1875,1,0,0,0,1901,1876,1,0,0,0,1901,1877,1,0,0,0,1901,1878,1,0,0,0,1901,
  	1879,1,0,0,0,1901,1880,1,0,0,0,1901,1881,1,0,0,0,1901,1882,1,0,0,0,1901,
  	1883,1,0,0,0,1901,1884,1,0,0,0,1901,1885,1,0,0,0,1901,1886,1,0,0,0,1901,
  	1887,1,0,0,0,1901,1888,1,0,0,0,1901,1889,1,0,0,0,1901,1890,1,0,0,0,1901,
  	1891,1,0,0,0,1901,1892,1,0,0,0,1901,1893,1,0,0,0,1901,1894,1,0,0,0,1901,
  	1895,1,0,0,0,1901,1896,1,0,0,0,1901,1897,1,0,0,0,1901,1898,1,0,0,0,1901,
  	1899,1,0,0,0,1901,1900,1,0,0,0,1902,271,1,0,0,0,1903,1904,5,17,0,0,1904,
  	1905,3,810,405,0,1905,1906,3,90,45,0,1906,1907,3,126,63,0,1907,1908,5,
  	5,0,0,1908,1909,3,126,63,0,1909,1910,3,454,227,0,1910,273,1,0,0,0,1911,
  	1912,5,147,0,0,1912,1913,3,772,386,0,1913,1914,3,90,45,0,1914,1915,3,
  	126,63,0,1915,1916,5,5,0,0,1916,1917,3,126,63,0,1917,1918,3,454,227,0,
  	1918,275,1,0,0,0,1919,1920,5,337,0,0,1920,1921,3,810,405,0,1921,1922,
  	3,90,45,0,1922,1923,3,126,63,0,1923,1924,5,5,0,0,1924,1925,3,126,63,0,
  	1925,1926,3,454,227,0,1926,277,1,0,0,0,1927,1928,5,167,0,0,1928,1929,
  	3,772,386,0,1929,1930,3,90,45,0,1930,1931,3,126,63,0,1931,1932,5,5,0,
  	0,1932,1933,3,126,63,0,1933,1934,3,454,227,0,1934,279,1,0,0,0,1935,1936,
  	5,233,0,0,1936,1937,3,810,405,0,1937,1938,3,90,45,0,1938,1939,3,126,63,
  	0,1939,1940,5,5,0,0,1940,1941,3,126,63,0,1941,1942,3,454,227,0,1942,281,
  	1,0,0,0,1943,1944,5,159,0,0,1944,1945,3,772,386,0,1945,1946,3,90,45,0,
  	1946,1947,3,126,63,0,1947,1948,5,5,0,0,1948,1949,3,126,63,0,1949,1950,
  	3,454,227,0,1950,283,1,0,0,0,1951,1952,5,358,0,0,1952,1953,3,762,381,
  	0,1953,1954,3,90,45,0,1954,1955,3,126,63,0,1955,1956,5,5,0,0,1956,1957,
  	3,126,63,0,1957,1958,3,454,227,0,1958,285,1,0,0,0,1959,1960,5,308,0,0,
  	1960,1961,3,762,381,0,1961,1962,3,90,45,0,1962,1963,3,126,63,0,1963,1964,
  	5,5,0,0,1964,1965,3,126,63,0,1965,1966,3,454,227,0,1966,287,1,0,0,0,1967,
  	1968,5,152,0,0,1968,1969,3,772,386,0,1969,1970,3,90,45,0,1970,1971,3,
  	126,63,0,1971,1972,5,5,0,0,1972,1973,3,126,63,0,1973,1974,3,454,227,0,
  	1974,289,1,0,0,0,1975,1976,5,375,0,0,1976,1977,3,90,45,0,1977,1978,3,
  	126,63,0,1978,1979,5,5,0,0,1979,1980,3,126,63,0,1980,1981,3,454,227,0,
  	1981,291,1,0,0,0,1982,1983,5,330,0,0,1983,1984,3,90,45,0,1984,1985,3,
  	126,63,0,1985,1986,5,5,0,0,1986,1987,3,126,63,0,1987,1988,3,454,227,0,
  	1988,293,1,0,0,0,1989,1990,5,165,0,0,1990,1991,3,772,386,0,1991,1992,
  	3,90,45,0,1992,1993,3,126,63,0,1993,1994,5,5,0,0,1994,1995,3,126,63,0,
  	1995,1996,3,454,227,0,1996,295,1,0,0,0,1997,1998,5,316,0,0,1998,1999,
  	3,810,405,0,1999,2000,3,90,45,0,2000,2001,3,126,63,0,2001,2002,5,5,0,
  	0,2002,2003,3,126,63,0,2003,2004,3,454,227,0,2004,297,1,0,0,0,2005,2006,
  	5,224,0,0,2006,2007,3,762,381,0,2007,2008,3,90,45,0,2008,2009,3,126,63,
  	0,2009,2010,5,5,0,0,2010,2011,3,126,63,0,2011,2012,3,454,227,0,2012,299,
  	1,0,0,0,2013,2014,5,46,0,0,2014,2015,3,762,381,0,2015,2016,3,90,45,0,
  	2016,2017,3,126,63,0,2017,2018,5,5,0,0,2018,2019,3,126,63,0,2019,2020,
  	3,454,227,0,2020,301,1,0,0,0,2021,2022,5,36,0,0,2022,2023,3,90,45,0,2023,
  	2024,3,126,63,0,2024,2025,5,5,0,0,2025,2026,3,126,63,0,2026,2027,3,454,
  	227,0,2027,303,1,0,0,0,2028,2029,5,274,0,0,2029,2030,3,90,45,0,2030,2031,
  	3,126,63,0,2031,2032,5,5,0,0,2032,2033,3,126,63,0,2033,2034,3,454,227,
  	0,2034,305,1,0,0,0,2035,2036,5,404,0,0,2036,2037,3,90,45,0,2037,2038,
  	3,126,63,0,2038,2039,5,5,0,0,2039,2040,3,126,63,0,2040,2041,3,454,227,
  	0,2041,307,1,0,0,0,2042,2043,5,144,0,0,2043,2044,3,90,45,0,2044,2045,
  	3,126,63,0,2045,2046,5,5,0,0,2046,2047,3,90,45,0,2047,2048,3,126,63,0,
  	2048,2049,3,454,227,0,2049,309,1,0,0,0,2050,2051,5,197,0,0,2051,2052,
  	3,90,45,0,2052,2053,3,126,63,0,2053,2054,5,5,0,0,2054,2055,3,90,45,0,
  	2055,2056,3,126,63,0,2056,2057,5,5,0,0,2057,2058,3,90,45,0,2058,2059,
  	3,126,63,0,2059,2060,3,454,227,0,2060,311,1,0,0,0,2061,2062,5,317,0,0,
  	2062,2063,3,90,45,0,2063,2064,3,126,63,0,2064,2065,5,5,0,0,2065,2066,
  	3,90,45,0,2066,2067,3,126,63,0,2067,2068,5,5,0,0,2068,2069,3,90,45,0,
  	2069,2070,3,126,63,0,2070,2071,3,454,227,0,2071,313,1,0,0,0,2072,2073,
  	5,145,0,0,2073,2074,3,90,45,0,2074,2075,3,126,63,0,2075,2076,5,5,0,0,
  	2076,2077,3,790,395,0,2077,2078,3,454,227,0,2078,315,1,0,0,0,2079,2080,
  	5,198,0,0,2080,2081,3,90,45,0,2081,2082,3,126,63,0,2082,2083,5,5,0,0,
  	2083,2084,3,90,45,0,2084,2085,3,126,63,0,2085,2086,5,5,0,0,2086,2087,
  	3,790,395,0,2087,2088,3,454,227,0,2088,317,1,0,0,0,2089,2090,5,25,0,0,
  	2090,2091,3,320,160,0,2091,2092,3,322,161,0,2092,2093,3,90,45,0,2093,
  	2094,3,454,227,0,2094,2166,1,0,0,0,2095,2096,5,25,0,0,2096,2097,3,320,
  	160,0,2097,2098,3,322,161,0,2098,2099,3,90,45,0,2099,2100,5,5,0,0,2100,
  	2101,3,736,368,0,2101,2102,3,454,227,0,2102,2166,1,0,0,0,2103,2104,5,
  	25,0,0,2104,2105,3,320,160,0,2105,2106,3,322,161,0,2106,2107,3,90,45,
  	0,2107,2108,5,5,0,0,2108,2109,3,90,45,0,2109,2110,3,126,63,0,2110,2111,
  	3,454,227,0,2111,2166,1,0,0,0,2112,2113,5,25,0,0,2113,2114,3,320,160,
  	0,2114,2115,3,322,161,0,2115,2116,3,90,45,0,2116,2117,5,5,0,0,2117,2118,
  	3,90,45,0,2118,2119,3,126,63,0,2119,2120,5,5,0,0,2120,2121,3,736,368,
  	0,2121,2122,3,454,227,0,2122,2166,1,0,0,0,2123,2124,5,25,0,0,2124,2125,
  	3,320,160,0,2125,2126,3,322,161,0,2126,2127,3,90,45,0,2127,2128,5,5,0,
  	0,2128,2129,3,106,53,0,2129,2130,3,454,227,0,2130,2166,1,0,0,0,2131,2132,
  	5,25,0,0,2132,2133,3,320,160,0,2133,2134,3,322,161,0,2134,2135,3,90,45,
  	0,2135,2136,5,5,0,0,2136,2137,3,736,368,0,2137,2138,5,5,0,0,2138,2139,
  	3,106,53,0,2139,2140,3,454,227,0,2140,2166,1,0,0,0,2141,2142,5,25,0,0,
  	2142,2143,3,320,160,0,2143,2144,3,322,161,0,2144,2145,3,90,45,0,2145,
  	2146,5,5,0,0,2146,2147,3,90,45,0,2147,2148,3,126,63,0,2148,2149,5,5,0,
  	0,2149,2150,3,106,53,0,2150,2151,3,454,227,0,2151,2166,1,0,0,0,2152,2153,
  	5,25,0,0,2153,2154,3,320,160,0,2154,2155,3,322,161,0,2155,2156,3,90,45,
  	0,2156,2157,5,5,0,0,2157,2158,3,90,45,0,2158,2159,3,126,63,0,2159,2160,
  	5,5,0,0,2160,2161,3,736,368,0,2161,2162,5,5,0,0,2162,2163,3,106,53,0,
  	2163,2164,3,454,227,0,2164,2166,1,0,0,0,2165,2089,1,0,0,0,2165,2095,1,
  	0,0,0,2165,2103,1,0,0,0,2165,2112,1,0,0,0,2165,2123,1,0,0,0,2165,2131,
  	1,0,0,0,2165,2141,1,0,0,0,2165,2152,1,0,0,0,2166,319,1,0,0,0,2167,2169,
  	5,188,0,0,2168,2167,1,0,0,0,2168,2169,1,0,0,0,2169,321,1,0,0,0,2170,2172,
  	5,339,0,0,2171,2170,1,0,0,0,2171,2172,1,0,0,0,2172,323,1,0,0,0,2173,2175,
  	5,219,0,0,2174,2176,5,408,0,0,2175,2174,1,0,0,0,2175,2176,1,0,0,0,2176,
  	2177,1,0,0,0,2177,2178,3,90,45,0,2178,2179,5,5,0,0,2179,2180,3,90,45,
  	0,2180,2181,3,126,63,0,2181,2182,3,454,227,0,2182,2224,1,0,0,0,2183,2185,
  	5,219,0,0,2184,2186,5,408,0,0,2185,2184,1,0,0,0,2185,2186,1,0,0,0,2186,
  	2187,1,0,0,0,2187,2188,3,90,45,0,2188,2189,5,5,0,0,2189,2190,3,90,45,
  	0,2190,2191,3,126,63,0,2191,2192,5,5,0,0,2192,2193,3,736,368,0,2193,2194,
  	3,454,227,0,2194,2224,1,0,0,0,2195,2196,5,219,0,0,2196,2198,5,48,0,0,
  	2197,2199,5,408,0,0,2198,2197,1,0,0,0,2198,2199,1,0,0,0,2199,2200,1,0,
  	0,0,2200,2201,3,90,45,0,2201,2202,5,5,0,0,2202,2203,3,90,45,0,2203,2204,
  	3,126,63,0,2204,2205,3,842,421,0,2205,2206,3,746,373,0,2206,2207,3,454,
  	227,0,2207,2224,1,0,0,0,2208,2209,5,219,0,0,2209,2211,5,48,0,0,2210,2212,
  	5,408,0,0,2211,2210,1,0,0,0,2211,2212,1,0,0,0,2212,2213,1,0,0,0,2213,
  	2214,3,90,45,0,2214,2215,5,5,0,0,2215,2216,3,90,45,0,2216,2217,3,126,
  	63,0,2217,2218,3,842,421,0,2218,2219,3,746,373,0,2219,2220,5,5,0,0,2220,
  	2221,3,736,368,0,2221,2222,3,454,227,0,2222,2224,1,0,0,0,2223,2173,1,
  	0,0,0,2223,2183,1,0,0,0,2223,2195,1,0,0,0,2223,2208,1,0,0,0,2224,325,
  	1,0,0,0,2225,2227,5,335,0,0,2226,2228,5,408,0,0,2227,2226,1,0,0,0,2227,
  	2228,1,0,0,0,2228,2229,1,0,0,0,2229,2230,3,90,45,0,2230,2231,3,126,63,
  	0,2231,2232,5,5,0,0,2232,2233,3,90,45,0,2233,2234,3,126,63,0,2234,2235,
  	3,454,227,0,2235,2280,1,0,0,0,2236,2238,5,335,0,0,2237,2239,5,408,0,0,
  	2238,2237,1,0,0,0,2238,2239,1,0,0,0,2239,2240,1,0,0,0,2240,2241,3,90,
  	45,0,2241,2242,3,126,63,0,2242,2243,5,5,0,0,2243,2244,3,90,45,0,2244,
  	2245,3,126,63,0,2245,2246,5,5,0,0,2246,2247,3,736,368,0,2247,2248,3,454,
  	227,0,2248,2280,1,0,0,0,2249,2250,5,335,0,0,2250,2252,5,48,0,0,2251,2253,
  	5,408,0,0,2252,2251,1,0,0,0,2252,2253,1,0,0,0,2253,2254,1,0,0,0,2254,
  	2255,3,90,45,0,2255,2256,3,126,63,0,2256,2257,5,5,0,0,2257,2258,3,90,
  	45,0,2258,2259,3,126,63,0,2259,2260,3,842,421,0,2260,2261,3,746,373,0,
  	2261,2262,3,454,227,0,2262,2280,1,0,0,0,2263,2264,5,335,0,0,2264,2266,
  	5,48,0,0,2265,2267,5,408,0,0,2266,2265,1,0,0,0,2266,2267,1,0,0,0,2267,
  	2268,1,0,0,0,2268,2269,3,90,45,0,2269,2270,3,126,63,0,2270,2271,5,5,0,
  	0,2271,2272,3,90,45,0,2272,2273,3,126,63,0,2273,2274,3,842,421,0,2274,
  	2275,3,746,373,0,2275,2276,5,5,0,0,2276,2277,3,736,368,0,2277,2278,3,
  	454,227,0,2278,2280,1,0,0,0,2279,2225,1,0,0,0,2279,2236,1,0,0,0,2279,
  	2249,1,0,0,0,2279,2263,1,0,0,0,2280,327,1,0,0,0,2281,2282,5,153,0,0,2282,
  	2283,3,842,421,0,2283,2284,3,746,373,0,2284,2285,3,454,227,0,2285,329,
  	1,0,0,0,2286,2287,5,76,0,0,2287,2289,3,332,166,0,2288,2290,5,408,0,0,
  	2289,2288,1,0,0,0,2289,2290,1,0,0,0,2290,2291,1,0,0,0,2291,2292,3,90,
  	45,0,2292,2293,3,126,63,0,2293,2294,5,5,0,0,2294,2295,3,90,45,0,2295,
  	2296,3,126,63,0,2296,2297,5,5,0,0,2297,2298,3,90,45,0,2298,2299,3,126,
  	63,0,2299,2300,3,842,421,0,2300,2301,3,746,373,0,2301,2302,3,746,373,
  	0,2302,2303,3,454,227,0,2303,331,1,0,0,0,2304,2306,5,387,0,0,2305,2304,
  	1,0,0,0,2305,2306,1,0,0,0,2306,333,1,0,0,0,2307,2309,5,49,0,0,2308,2310,
  	5,408,0,0,2309,2308,1,0,0,0,2309,2310,1,0,0,0,2310,2311,1,0,0,0,2311,
  	2312,3,336,168,0,2312,2313,3,90,45,0,2313,2314,3,126,63,0,2314,2315,5,
  	5,0,0,2315,2316,3,90,45,0,2316,2317,3,126,63,0,2317,2318,3,842,421,0,
  	2318,2319,3,746,373,0,2319,2320,3,454,227,0,2320,335,1,0,0,0,2321,2322,
  	7,5,0,0,2322,337,1,0,0,0,2323,2324,5,171,0,0,2324,2325,3,786,393,0,2325,
  	2326,3,90,45,0,2326,2327,5,5,0,0,2327,2328,3,90,45,0,2328,2329,3,126,
  	63,0,2329,2330,3,454,227,0,2330,2342,1,0,0,0,2331,2332,5,171,0,0,2332,
  	2333,3,786,393,0,2333,2334,3,90,45,0,2334,2335,5,5,0,0,2335,2336,3,90,
  	45,0,2336,2337,3,126,63,0,2337,2338,5,5,0,0,2338,2339,3,726,363,0,2339,
  	2340,3,454,227,0,2340,2342,1,0,0,0,2341,2323,1,0,0,0,2341,2331,1,0,0,
  	0,2342,339,1,0,0,0,2343,2344,5,354,0,0,2344,2345,3,90,45,0,2345,2346,
  	3,126,63,0,2346,2347,5,350,0,0,2347,2348,3,90,45,0,2348,2349,3,454,227,
  	0,2349,341,1,0,0,0,2350,2351,5,407,0,0,2351,2352,3,90,45,0,2352,2353,
  	3,126,63,0,2353,2354,5,350,0,0,2354,2355,3,90,45,0,2355,2356,3,454,227,
  	0,2356,343,1,0,0,0,2357,2358,5,313,0,0,2358,2359,3,90,45,0,2359,2360,
  	3,126,63,0,2360,2361,5,350,0,0,2361,2362,3,90,45,0,2362,2363,3,454,227,
  	0,2363,345,1,0,0,0,2364,2365,5,164,0,0,2365,2366,3,90,45,0,2366,2367,
  	3,126,63,0,2367,2368,5,350,0,0,2368,2369,3,90,45,0,2369,2370,3,454,227,
  	0,2370,347,1,0,0,0,2371,2372,5,161,0,0,2372,2373,3,90,45,0,2373,2374,
  	3,126,63,0,2374,2375,5,350,0,0,2375,2376,3,90,45,0,2376,2377,3,454,227,
  	0,2377,349,1,0,0,0,2378,2379,5,163,0,0,2379,2380,3,90,45,0,2380,2381,
  	3,126,63,0,2381,2382,5,350,0,0,2382,2383,3,90,45,0,2383,2384,3,454,227,
  	0,2384,351,1,0,0,0,2385,2386,5,162,0,0,2386,2387,3,90,45,0,2387,2388,
  	3,126,63,0,2388,2389,5,350,0,0,2389,2390,3,90,45,0,2390,2391,3,454,227,
  	0,2391,353,1,0,0,0,2392,2393,5,362,0,0,2393,2394,3,90,45,0,2394,2395,
  	3,126,63,0,2395,2396,5,350,0,0,2396,2397,3,90,45,0,2397,2398,3,454,227,
  	0,2398,355,1,0,0,0,2399,2400,5,320,0,0,2400,2401,3,90,45,0,2401,2402,
  	3,126,63,0,2402,2403,5,350,0,0,2403,2404,3,90,45,0,2404,2405,3,454,227,
  	0,2405,357,1,0,0,0,2406,2407,5,286,0,0,2407,2408,3,90,45,0,2408,2409,
  	3,126,63,0,2409,2410,5,350,0,0,2410,2411,3,90,45,0,2411,2412,3,454,227,
  	0,2412,359,1,0,0,0,2413,2414,5,202,0,0,2414,2415,3,90,45,0,2415,2416,
  	3,126,63,0,2416,2417,5,350,0,0,2417,2418,3,90,45,0,2418,2419,3,454,227,
  	0,2419,361,1,0,0,0,2420,2421,5,56,0,0,2421,2422,3,90,45,0,2422,2423,3,
  	126,63,0,2423,2424,5,350,0,0,2424,2425,3,90,45,0,2425,2426,3,454,227,
  	0,2426,363,1,0,0,0,2427,2428,5,19,0,0,2428,2429,3,90,45,0,2429,2430,3,
  	126,63,0,2430,2431,5,350,0,0,2431,2432,3,90,45,0,2432,2433,3,454,227,
  	0,2433,365,1,0,0,0,2434,2435,5,182,0,0,2435,2436,3,794,397,0,2436,2437,
  	3,90,45,0,2437,2438,3,126,63,0,2438,2439,5,5,0,0,2439,2440,3,126,63,0,
  	2440,2441,3,454,227,0,2441,367,1,0,0,0,2442,2443,5,151,0,0,2443,2444,
  	3,772,386,0,2444,2445,3,778,389,0,2445,2446,3,90,45,0,2446,2447,3,126,
  	63,0,2447,2448,5,5,0,0,2448,2449,3,126,63,0,2449,2450,3,454,227,0,2450,
  	369,1,0,0,0,2451,2452,5,277,0,0,2452,2453,3,90,45,0,2453,2454,3,372,186,
  	0,2454,2455,3,454,227,0,2455,371,1,0,0,0,2456,2457,6,186,-1,0,2457,2458,
  	3,374,187,0,2458,2464,1,0,0,0,2459,2460,10,1,0,0,2460,2461,5,5,0,0,2461,
  	2463,3,374,187,0,2462,2459,1,0,0,0,2463,2466,1,0,0,0,2464,2462,1,0,0,
  	0,2464,2465,1,0,0,0,2465,373,1,0,0,0,2466,2464,1,0,0,0,2467,2468,5,10,
  	0,0,2468,2469,3,126,63,0,2469,2470,5,5,0,0,2470,2471,3,78,39,0,2471,2472,
  	5,11,0,0,2472,375,1,0,0,0,2473,2474,5,310,0,0,2474,2475,3,90,45,0,2475,
  	2476,3,126,63,0,2476,2477,5,5,0,0,2477,2478,3,90,45,0,2478,2479,3,126,
  	63,0,2479,2480,5,5,0,0,2480,2481,3,90,45,0,2481,2482,3,126,63,0,2482,
  	2483,3,454,227,0,2483,377,1,0,0,0,2484,2485,3,380,190,0,2485,2486,5,62,
  	0,0,2486,2487,3,772,386,0,2487,2488,3,748,374,0,2488,2489,3,832,416,0,
  	2489,2490,3,90,45,0,2490,2491,3,126,63,0,2491,2492,5,8,0,0,2492,2493,
  	3,740,370,0,2493,2494,5,9,0,0,2494,2495,3,780,390,0,2495,2496,3,804,402,
  	0,2496,2497,3,454,227,0,2497,379,1,0,0,0,2498,2500,7,6,0,0,2499,2498,
  	1,0,0,0,2499,2500,1,0,0,0,2500,381,1,0,0,0,2501,2502,5,379,0,0,2502,2503,
  	3,90,45,0,2503,2504,3,126,63,0,2504,2505,5,5,0,0,2505,2506,3,90,45,0,
  	2506,2507,3,454,227,0,2507,383,1,0,0,0,2508,2509,5,211,0,0,2509,2510,
  	3,90,45,0,2510,2511,3,386,193,0,2511,2512,3,388,194,0,2512,2513,3,454,
  	227,0,2513,385,1,0,0,0,2514,2516,5,73,0,0,2515,2514,1,0,0,0,2515,2516,
  	1,0,0,0,2516,387,1,0,0,0,2517,2519,3,390,195,0,2518,2517,1,0,0,0,2518,
  	2519,1,0,0,0,2519,389,1,0,0,0,2520,2521,6,195,-1,0,2521,2522,3,392,196,
  	0,2522,2527,1,0,0,0,2523,2524,10,1,0,0,2524,2526,3,392,196,0,2525,2523,
  	1,0,0,0,2526,2529,1,0,0,0,2527,2525,1,0,0,0,2527,2528,1,0,0,0,2528,391,
  	1,0,0,0,2529,2527,1,0,0,0,2530,2531,5,64,0,0,2531,2532,3,90,45,0,2532,
  	2533,3,126,63,0,2533,2539,1,0,0,0,2534,2535,5,156,0,0,2535,2536,3,90,
  	45,0,2536,2537,3,154,77,0,2537,2539,1,0,0,0,2538,2530,1,0,0,0,2538,2534,
  	1,0,0,0,2539,393,1,0,0,0,2540,2541,5,65,0,0,2541,2542,5,391,0,0,2542,
  	2543,3,78,39,0,2543,2544,5,10,0,0,2544,2545,3,764,382,0,2545,2546,5,11,
  	0,0,2546,2547,3,454,227,0,2547,395,1,0,0,0,2548,2549,5,74,0,0,2549,2550,
  	5,391,0,0,2550,2551,3,770,385,0,2551,2552,5,10,0,0,2552,2553,3,764,382,
  	0,2553,2554,5,11,0,0,2554,2555,3,454,227,0,2555,397,1,0,0,0,2556,2568,
  	3,400,200,0,2557,2568,3,402,201,0,2558,2568,3,404,202,0,2559,2568,3,406,
  	203,0,2560,2568,3,414,207,0,2561,2568,3,420,210,0,2562,2568,3,422,211,
  	0,2563,2568,3,424,212,0,2564,2568,3,426,213,0,2565,2568,3,428,214,0,2566,
  	2568,3,430,215,0,2567,2556,1,0,0,0,2567,2557,1,0,0,0,2567,2558,1,0,0,
  	0,2567,2559,1,0,0,0,2567,2560,1,0,0,0,2567,2561,1,0,0,0,2567,2562,1,0,
  	0,0,2567,2563,1,0,0,0,2567,2564,1,0,0,0,2567,2565,1,0,0,0,2567,2566,1,
  	0,0,0,2568,399,1,0,0,0,2569,2570,5,294,0,0,2570,2571,3,94,47,0,2571,2572,
  	3,454,227,0,2572,2585,1,0,0,0,2573,2579,5,294,0,0,2574,2575,3,90,45,0,
  	2575,2576,3,104,52,0,2576,2577,5,14,0,0,2577,2580,1,0,0,0,2578,2580,3,
  	92,46,0,2579,2574,1,0,0,0,2579,2578,1,0,0,0,2580,2581,1,0,0,0,2581,2582,
  	3,126,63,0,2582,2583,3,454,227,0,2583,2585,1,0,0,0,2584,2569,1,0,0,0,
  	2584,2573,1,0,0,0,2585,401,1,0,0,0,2586,2587,5,58,0,0,2587,2588,3,110,
  	55,0,2588,2589,3,78,39,0,2589,2590,3,454,227,0,2590,403,1,0,0,0,2591,
  	2592,5,58,0,0,2592,2593,3,96,48,0,2593,2594,3,126,63,0,2594,2595,5,5,
  	0,0,2595,2596,3,110,55,0,2596,2597,3,78,39,0,2597,2598,5,5,0,0,2598,2599,
  	3,110,55,0,2599,2600,3,78,39,0,2600,2601,3,454,227,0,2601,405,1,0,0,0,
  	2602,2603,5,341,0,0,2603,2604,3,90,45,0,2604,2605,3,126,63,0,2605,2606,
  	5,5,0,0,2606,2607,3,110,55,0,2607,2608,3,78,39,0,2608,2609,5,10,0,0,2609,
  	2610,3,408,204,0,2610,2611,5,11,0,0,2611,2612,3,454,227,0,2612,407,1,
  	0,0,0,2613,2615,3,410,205,0,2614,2613,1,0,0,0,2614,2615,1,0,0,0,2615,
  	409,1,0,0,0,2616,2617,6,205,-1,0,2617,2618,3,412,206,0,2618,2623,1,0,
  	0,0,2619,2620,10,1,0,0,2620,2622,3,412,206,0,2621,2619,1,0,0,0,2622,2625,
  	1,0,0,0,2623,2621,1,0,0,0,2623,2624,1,0,0,0,2624,411,1,0,0,0,2625,2623,
  	1,0,0,0,2626,2627,3,90,45,0,2627,2628,3,142,71,0,2628,2629,5,5,0,0,2629,
  	2630,3,110,55,0,2630,2631,3,78,39,0,2631,413,1,0,0,0,2632,2633,5,191,
  	0,0,2633,2634,3,90,45,0,2634,2635,3,126,63,0,2635,2636,5,5,0,0,2636,2637,
  	5,10,0,0,2637,2638,3,416,208,0,2638,2639,5,11,0,0,2639,2640,3,454,227,
  	0,2640,415,1,0,0,0,2641,2642,6,208,-1,0,2642,2643,3,418,209,0,2643,2649,
  	1,0,0,0,2644,2645,10,1,0,0,2645,2646,5,5,0,0,2646,2648,3,418,209,0,2647,
  	2644,1,0,0,0,2648,2651,1,0,0,0,2649,2647,1,0,0,0,2649,2650,1,0,0,0,2650,
  	417,1,0,0,0,2651,2649,1,0,0,0,2652,2653,3,110,55,0,2653,2654,3,78,39,
  	0,2654,419,1,0,0,0,2655,2656,5,203,0,0,2656,2657,3,748,374,0,2657,2658,
  	3,832,416,0,2658,2659,3,90,45,0,2659,2660,3,126,63,0,2660,2661,5,8,0,
  	0,2661,2662,3,740,370,0,2662,2663,5,9,0,0,2663,2664,3,780,390,0,2664,
  	2665,3,804,402,0,2665,2666,5,350,0,0,2666,2667,3,110,55,0,2667,2668,3,
  	78,39,0,2668,2669,5,374,0,0,2669,2670,3,110,55,0,2670,2671,3,78,39,0,
  	2671,2672,3,454,227,0,2672,421,1,0,0,0,2673,2674,5,293,0,0,2674,2675,
  	3,90,45,0,2675,2676,3,126,63,0,2676,2677,3,454,227,0,2677,423,1,0,0,0,
  	2678,2679,5,67,0,0,2679,2680,5,391,0,0,2680,2681,3,770,385,0,2681,2682,
  	5,10,0,0,2682,2683,3,416,208,0,2683,2684,5,11,0,0,2684,2685,5,374,0,0,
  	2685,2686,3,432,216,0,2686,2687,3,454,227,0,2687,425,1,0,0,0,2688,2689,
  	5,66,0,0,2689,2690,5,166,0,0,2690,2691,3,126,63,0,2691,2692,5,350,0,0,
  	2692,2693,3,110,55,0,2693,2694,3,78,39,0,2694,2695,3,454,227,0,2695,427,
  	1,0,0,0,2696,2697,5,75,0,0,2697,2698,5,166,0,0,2698,2699,3,126,63,0,2699,
  	2700,5,374,0,0,2700,2701,3,432,216,0,2701,2702,3,454,227,0,2702,429,1,
  	0,0,0,2703,2704,5,373,0,0,2704,2705,3,454,227,0,2705,431,1,0,0,0,2706,
  	2707,5,350,0,0,2707,2712,5,63,0,0,2708,2709,3,110,55,0,2709,2710,3,78,
  	39,0,2710,2712,1,0,0,0,2711,2706,1,0,0,0,2711,2708,1,0,0,0,2712,433,1,
  	0,0,0,2713,2714,5,6,0,0,2714,2715,3,436,218,0,2715,435,1,0,0,0,2716,2717,
  	5,12,0,0,2717,2723,5,13,0,0,2718,2719,5,12,0,0,2719,2720,3,438,219,0,
  	2720,2721,5,13,0,0,2721,2723,1,0,0,0,2722,2716,1,0,0,0,2722,2718,1,0,
  	0,0,2723,437,1,0,0,0,2724,2725,6,219,-1,0,2725,2726,3,440,220,0,2726,
  	2732,1,0,0,0,2727,2728,10,1,0,0,2728,2729,5,5,0,0,2729,2731,3,440,220,
  	0,2730,2727,1,0,0,0,2731,2734,1,0,0,0,2732,2730,1,0,0,0,2732,2733,1,0,
  	0,0,2733,439,1,0,0,0,2734,2732,1,0,0,0,2735,2738,5,261,0,0,2736,2738,
  	3,442,221,0,2737,2735,1,0,0,0,2737,2736,1,0,0,0,2738,441,1,0,0,0,2739,
  	2740,3,90,45,0,2740,2741,3,126,63,0,2741,2747,1,0,0,0,2742,2747,3,444,
  	222,0,2743,2747,3,434,217,0,2744,2747,3,88,44,0,2745,2747,3,458,229,0,
  	2746,2739,1,0,0,0,2746,2742,1,0,0,0,2746,2743,1,0,0,0,2746,2744,1,0,0,
  	0,2746,2745,1,0,0,0,2747,443,1,0,0,0,2748,2749,5,6,0,0,2749,2750,3,158,
  	79,0,2750,445,1,0,0,0,2751,2752,3,86,43,0,2752,2753,3,448,224,0,2753,
  	447,1,0,0,0,2754,2758,3,434,217,0,2755,2758,3,88,44,0,2756,2758,3,458,
  	229,0,2757,2754,1,0,0,0,2757,2755,1,0,0,0,2757,2756,1,0,0,0,2758,449,
  	1,0,0,0,2759,2761,3,452,226,0,2760,2759,1,0,0,0,2760,2761,1,0,0,0,2761,
  	451,1,0,0,0,2762,2763,6,226,-1,0,2763,2764,3,446,223,0,2764,2769,1,0,
  	0,0,2765,2766,10,1,0,0,2766,2768,3,446,223,0,2767,2765,1,0,0,0,2768,2771,
  	1,0,0,0,2769,2767,1,0,0,0,2769,2770,1,0,0,0,2770,453,1,0,0,0,2771,2769,
  	1,0,0,0,2772,2773,5,5,0,0,2773,2775,3,456,228,0,2774,2772,1,0,0,0,2774,
  	2775,1,0,0,0,2775,455,1,0,0,0,2776,2777,6,228,-1,0,2777,2778,3,446,223,
  	0,2778,2784,1,0,0,0,2779,2780,10,1,0,0,2780,2781,5,5,0,0,2781,2783,3,
  	446,223,0,2782,2779,1,0,0,0,2783,2786,1,0,0,0,2784,2782,1,0,0,0,2784,
  	2785,1,0,0,0,2785,457,1,0,0,0,2786,2784,1,0,0,0,2787,2813,3,460,230,0,
  	2788,2813,3,468,234,0,2789,2813,3,476,238,0,2790,2813,3,484,242,0,2791,
  	2813,3,492,246,0,2792,2813,3,500,250,0,2793,2813,3,508,254,0,2794,2813,
  	3,516,258,0,2795,2813,3,524,262,0,2796,2813,3,532,266,0,2797,2813,3,540,
  	270,0,2798,2813,3,548,274,0,2799,2813,3,556,278,0,2800,2813,3,564,282,
  	0,2801,2813,3,572,286,0,2802,2813,3,580,290,0,2803,2813,3,588,294,0,2804,
  	2813,3,596,298,0,2805,2813,3,604,302,0,2806,2813,3,612,306,0,2807,2813,
  	3,620,310,0,2808,2813,3,628,314,0,2809,2813,3,636,318,0,2810,2813,3,644,
  	322,0,2811,2813,3,652,326,0,2812,2787,1,0,0,0,2812,2788,1,0,0,0,2812,
  	2789,1,0,0,0,2812,2790,1,0,0,0,2812,2791,1,0,0,0,2812,2792,1,0,0,0,2812,
  	2793,1,0,0,0,2812,2794,1,0,0,0,2812,2795,1,0,0,0,2812,2796,1,0,0,0,2812,
  	2797,1,0,0,0,2812,2798,1,0,0,0,2812,2799,1,0,0,0,2812,2800,1,0,0,0,2812,
  	2801,1,0,0,0,2812,2802,1,0,0,0,2812,2803,1,0,0,0,2812,2804,1,0,0,0,2812,
  	2805,1,0,0,0,2812,2806,1,0,0,0,2812,2807,1,0,0,0,2812,2808,1,0,0,0,2812,
  	2809,1,0,0,0,2812,2810,1,0,0,0,2812,2811,1,0,0,0,2813,459,1,0,0,0,2814,
  	2815,5,98,0,0,2815,2816,5,8,0,0,2816,2817,3,462,231,0,2817,2818,5,9,0,
  	0,2818,461,1,0,0,0,2819,2821,3,464,232,0,2820,2819,1,0,0,0,2820,2821,
  	1,0,0,0,2821,463,1,0,0,0,2822,2823,6,232,-1,0,2823,2824,3,466,233,0,2824,
  	2830,1,0,0,0,2825,2826,10,1,0,0,2826,2827,5,5,0,0,2827,2829,3,466,233,
  	0,2828,2825,1,0,0,0,2829,2832,1,0,0,0,2830,2828,1,0,0,0,2830,2831,1,0,
  	0,0,2831,465,1,0,0,0,2832,2830,1,0,0,0,2833,2834,5,212,0,0,2834,2866,
  	3,710,355,0,2835,2866,3,660,330,0,2836,2837,5,283,0,0,2837,2866,3,158,
  	79,0,2838,2866,3,662,331,0,2839,2840,5,157,0,0,2840,2866,3,158,79,0,2841,
  	2842,5,299,0,0,2842,2866,3,144,72,0,2843,2844,5,328,0,0,2844,2866,3,158,
  	79,0,2845,2846,5,132,0,0,2846,2866,3,720,360,0,2847,2848,5,135,0,0,2848,
  	2866,3,440,220,0,2849,2850,5,295,0,0,2850,2866,3,440,220,0,2851,2852,
  	5,175,0,0,2852,2866,3,440,220,0,2853,2854,5,185,0,0,2854,2866,3,440,220,
  	0,2855,2856,5,225,0,0,2856,2866,3,440,220,0,2857,2858,5,130,0,0,2858,
  	2866,3,144,72,0,2859,2860,5,329,0,0,2860,2866,3,140,70,0,2861,2862,5,
  	90,0,0,2862,2866,3,140,70,0,2863,2864,5,176,0,0,2864,2866,3,140,70,0,
  	2865,2833,1,0,0,0,2865,2835,1,0,0,0,2865,2836,1,0,0,0,2865,2838,1,0,0,
  	0,2865,2839,1,0,0,0,2865,2841,1,0,0,0,2865,2843,1,0,0,0,2865,2845,1,0,
  	0,0,2865,2847,1,0,0,0,2865,2849,1,0,0,0,2865,2851,1,0,0,0,2865,2853,1,
  	0,0,0,2865,2855,1,0,0,0,2865,2857,1,0,0,0,2865,2859,1,0,0,0,2865,2861,
  	1,0,0,0,2865,2863,1,0,0,0,2866,467,1,0,0,0,2867,2868,5,103,0,0,2868,2869,
  	5,8,0,0,2869,2870,3,470,235,0,2870,2871,5,9,0,0,2871,469,1,0,0,0,2872,
  	2874,3,472,236,0,2873,2872,1,0,0,0,2873,2874,1,0,0,0,2874,471,1,0,0,0,
  	2875,2876,6,236,-1,0,2876,2877,3,474,237,0,2877,2883,1,0,0,0,2878,2879,
  	10,1,0,0,2879,2880,5,5,0,0,2880,2882,3,474,237,0,2881,2878,1,0,0,0,2882,
  	2885,1,0,0,0,2883,2881,1,0,0,0,2883,2884,1,0,0,0,2884,473,1,0,0,0,2885,
  	2883,1,0,0,0,2886,2887,5,155,0,0,2887,2895,3,158,79,0,2888,2889,5,116,
  	0,0,2889,2895,3,158,79,0,2890,2891,5,72,0,0,2891,2895,3,700,350,0,2892,
  	2893,5,71,0,0,2893,2895,3,158,79,0,2894,2886,1,0,0,0,2894,2888,1,0,0,
  	0,2894,2890,1,0,0,0,2894,2892,1,0,0,0,2895,475,1,0,0,0,2896,2897,5,97,
  	0,0,2897,2898,5,8,0,0,2898,2899,3,478,239,0,2899,2900,5,9,0,0,2900,477,
  	1,0,0,0,2901,2903,3,480,240,0,2902,2901,1,0,0,0,2902,2903,1,0,0,0,2903,
  	479,1,0,0,0,2904,2905,6,240,-1,0,2905,2906,3,482,241,0,2906,2912,1,0,
  	0,0,2907,2908,10,1,0,0,2908,2909,5,5,0,0,2909,2911,3,482,241,0,2910,2907,
  	1,0,0,0,2911,2914,1,0,0,0,2912,2910,1,0,0,0,2912,2913,1,0,0,0,2913,481,
  	1,0,0,0,2914,2912,1,0,0,0,2915,2922,3,664,332,0,2916,2922,3,666,333,0,
  	2917,2922,3,668,334,0,2918,2922,3,670,335,0,2919,2920,5,133,0,0,2920,
  	2922,3,706,353,0,2921,2915,1,0,0,0,2921,2916,1,0,0,0,2921,2917,1,0,0,
  	0,2921,2918,1,0,0,0,2921,2919,1,0,0,0,2922,483,1,0,0,0,2923,2924,5,121,
  	0,0,2924,2925,5,8,0,0,2925,2926,3,486,243,0,2926,2927,5,9,0,0,2927,485,
  	1,0,0,0,2928,2930,3,488,244,0,2929,2928,1,0,0,0,2929,2930,1,0,0,0,2930,
  	487,1,0,0,0,2931,2932,6,244,-1,0,2932,2933,3,490,245,0,2933,2939,1,0,
  	0,0,2934,2935,10,1,0,0,2935,2936,5,5,0,0,2936,2938,3,490,245,0,2937,2934,
  	1,0,0,0,2938,2941,1,0,0,0,2939,2937,1,0,0,0,2939,2940,1,0,0,0,2940,489,
  	1,0,0,0,2941,2939,1,0,0,0,2942,2948,3,672,336,0,2943,2944,5,68,0,0,2944,
  	2948,3,708,354,0,2945,2946,5,357,0,0,2946,2948,3,440,220,0,2947,2942,
  	1,0,0,0,2947,2943,1,0,0,0,2947,2945,1,0,0,0,2948,491,1,0,0,0,2949,2950,
  	5,100,0,0,2950,2951,5,8,0,0,2951,2952,3,494,247,0,2952,2953,5,9,0,0,2953,
  	493,1,0,0,0,2954,2956,3,496,248,0,2955,2954,1,0,0,0,2955,2956,1,0,0,0,
  	2956,495,1,0,0,0,2957,2958,6,248,-1,0,2958,2959,3,498,249,0,2959,2965,
  	1,0,0,0,2960,2961,10,1,0,0,2961,2962,5,5,0,0,2962,2964,3,498,249,0,2963,
  	2960,1,0,0,0,2964,2967,1,0,0,0,2965,2963,1,0,0,0,2965,2966,1,0,0,0,2966,
  	497,1,0,0,0,2967,2965,1,0,0,0,2968,2983,3,664,332,0,2969,2983,3,666,333,
  	0,2970,2983,3,676,338,0,2971,2983,3,660,330,0,2972,2983,3,674,337,0,2973,
  	2983,3,678,339,0,2974,2983,3,668,334,0,2975,2983,3,670,335,0,2976,2983,
  	3,680,340,0,2977,2983,3,672,336,0,2978,2979,5,146,0,0,2979,2983,3,440,
  	220,0,2980,2981,5,129,0,0,2981,2983,3,144,72,0,2982,2968,1,0,0,0,2982,
  	2969,1,0,0,0,2982,2970,1,0,0,0,2982,2971,1,0,0,0,2982,2972,1,0,0,0,2982,
  	2973,1,0,0,0,2982,2974,1,0,0,0,2982,2975,1,0,0,0,2982,2976,1,0,0,0,2982,
  	2977,1,0,0,0,2982,2978,1,0,0,0,2982,2980,1,0,0,0,2983,499,1,0,0,0,2984,
  	2985,5,99,0,0,2985,2986,5,8,0,0,2986,2987,3,502,251,0,2987,2988,5,9,0,
  	0,2988,501,1,0,0,0,2989,2991,3,504,252,0,2990,2989,1,0,0,0,2990,2991,
  	1,0,0,0,2991,503,1,0,0,0,2992,2993,6,252,-1,0,2993,2994,3,506,253,0,2994,
  	3000,1,0,0,0,2995,2996,10,1,0,0,2996,2997,5,5,0,0,2997,2999,3,506,253,
  	0,2998,2995,1,0,0,0,2999,3002,1,0,0,0,3000,2998,1,0,0,0,3000,3001,1,0,
  	0,0,3001,505,1,0,0,0,3002,3000,1,0,0,0,3003,3025,3,664,332,0,3004,3025,
  	3,666,333,0,3005,3025,3,676,338,0,3006,3025,3,660,330,0,3007,3025,3,674,
  	337,0,3008,3025,3,678,339,0,3009,3025,3,668,334,0,3010,3025,3,670,335,
  	0,3011,3025,3,680,340,0,3012,3025,3,672,336,0,3013,3014,5,131,0,0,3014,
  	3025,3,440,220,0,3015,3016,5,298,0,0,3016,3025,3,710,355,0,3017,3018,
  	5,386,0,0,3018,3025,3,440,220,0,3019,3025,3,682,341,0,3020,3021,5,183,
  	0,0,3021,3025,3,158,79,0,3022,3023,5,117,0,0,3023,3025,3,440,220,0,3024,
  	3003,1,0,0,0,3024,3004,1,0,0,0,3024,3005,1,0,0,0,3024,3006,1,0,0,0,3024,
  	3007,1,0,0,0,3024,3008,1,0,0,0,3024,3009,1,0,0,0,3024,3010,1,0,0,0,3024,
  	3011,1,0,0,0,3024,3012,1,0,0,0,3024,3013,1,0,0,0,3024,3015,1,0,0,0,3024,
  	3017,1,0,0,0,3024,3019,1,0,0,0,3024,3020,1,0,0,0,3024,3022,1,0,0,0,3025,
  	507,1,0,0,0,3026,3027,5,120,0,0,3027,3028,5,8,0,0,3028,3029,3,510,255,
  	0,3029,3030,5,9,0,0,3030,509,1,0,0,0,3031,3033,3,512,256,0,3032,3031,
  	1,0,0,0,3032,3033,1,0,0,0,3033,511,1,0,0,0,3034,3035,6,256,-1,0,3035,
  	3036,3,514,257,0,3036,3042,1,0,0,0,3037,3038,10,1,0,0,3038,3039,5,5,0,
  	0,3039,3041,3,514,257,0,3040,3037,1,0,0,0,3041,3044,1,0,0,0,3042,3040,
  	1,0,0,0,3042,3043,1,0,0,0,3043,513,1,0,0,0,3044,3042,1,0,0,0,3045,3046,
  	5,87,0,0,3046,3050,3,684,342,0,3047,3048,5,223,0,0,3048,3050,3,144,72,
  	0,3049,3045,1,0,0,0,3049,3047,1,0,0,0,3050,515,1,0,0,0,3051,3052,5,101,
  	0,0,3052,3053,5,8,0,0,3053,3054,3,518,259,0,3054,3055,5,9,0,0,3055,517,
  	1,0,0,0,3056,3058,3,520,260,0,3057,3056,1,0,0,0,3057,3058,1,0,0,0,3058,
  	519,1,0,0,0,3059,3060,6,260,-1,0,3060,3061,3,522,261,0,3061,3067,1,0,
  	0,0,3062,3063,10,1,0,0,3063,3064,5,5,0,0,3064,3066,3,522,261,0,3065,3062,
  	1,0,0,0,3066,3069,1,0,0,0,3067,3065,1,0,0,0,3067,3068,1,0,0,0,3068,521,
  	1,0,0,0,3069,3067,1,0,0,0,3070,3076,3,666,333,0,3071,3072,5,380,0,0,3072,
  	3076,3,144,72,0,3073,3074,5,207,0,0,3074,3076,3,140,70,0,3075,3070,1,
  	0,0,0,3075,3071,1,0,0,0,3075,3073,1,0,0,0,3076,523,1,0,0,0,3077,3078,
  	5,122,0,0,3078,3079,5,8,0,0,3079,3080,3,526,263,0,3080,3081,5,9,0,0,3081,
  	525,1,0,0,0,3082,3084,3,528,264,0,3083,3082,1,0,0,0,3083,3084,1,0,0,0,
  	3084,527,1,0,0,0,3085,3086,6,264,-1,0,3086,3087,3,530,265,0,3087,3093,
  	1,0,0,0,3088,3089,10,1,0,0,3089,3090,5,5,0,0,3090,3092,3,530,265,0,3091,
  	3088,1,0,0,0,3092,3095,1,0,0,0,3093,3091,1,0,0,0,3093,3094,1,0,0,0,3094,
  	529,1,0,0,0,3095,3093,1,0,0,0,3096,3099,3,666,333,0,3097,3099,3,686,343,
  	0,3098,3096,1,0,0,0,3098,3097,1,0,0,0,3099,531,1,0,0,0,3100,3101,5,123,
  	0,0,3101,3102,5,8,0,0,3102,3103,3,534,267,0,3103,3104,5,9,0,0,3104,533,
  	1,0,0,0,3105,3107,3,536,268,0,3106,3105,1,0,0,0,3106,3107,1,0,0,0,3107,
  	535,1,0,0,0,3108,3109,6,268,-1,0,3109,3110,3,538,269,0,3110,3116,1,0,
  	0,0,3111,3112,10,1,0,0,3112,3113,5,5,0,0,3113,3115,3,538,269,0,3114,3111,
  	1,0,0,0,3115,3118,1,0,0,0,3116,3114,1,0,0,0,3116,3117,1,0,0,0,3117,537,
  	1,0,0,0,3118,3116,1,0,0,0,3119,3125,3,664,332,0,3120,3125,3,666,333,0,
  	3121,3125,3,686,343,0,3122,3123,5,380,0,0,3123,3125,3,440,220,0,3124,
  	3119,1,0,0,0,3124,3120,1,0,0,0,3124,3121,1,0,0,0,3124,3122,1,0,0,0,3125,
  	539,1,0,0,0,3126,3127,5,113,0,0,3127,3128,5,8,0,0,3128,3129,3,542,271,
  	0,3129,3130,5,9,0,0,3130,541,1,0,0,0,3131,3133,3,544,272,0,3132,3131,
  	1,0,0,0,3132,3133,1,0,0,0,3133,543,1,0,0,0,3134,3135,6,272,-1,0,3135,
  	3136,3,546,273,0,3136,3142,1,0,0,0,3137,3138,10,1,0,0,3138,3139,5,5,0,
  	0,3139,3141,3,546,273,0,3140,3137,1,0,0,0,3141,3144,1,0,0,0,3142,3140,
  	1,0,0,0,3142,3143,1,0,0,0,3143,545,1,0,0,0,3144,3142,1,0,0,0,3145,3154,
  	3,676,338,0,3146,3154,3,666,333,0,3147,3148,5,82,0,0,3148,3154,3,158,
  	79,0,3149,3150,5,190,0,0,3150,3154,3,158,79,0,3151,3152,5,208,0,0,3152,
  	3154,3,158,79,0,3153,3145,1,0,0,0,3153,3146,1,0,0,0,3153,3147,1,0,0,0,
  	3153,3149,1,0,0,0,3153,3151,1,0,0,0,3154,547,1,0,0,0,3155,3156,5,114,
  	0,0,3156,3157,5,8,0,0,3157,3158,3,550,275,0,3158,3159,5,9,0,0,3159,549,
  	1,0,0,0,3160,3162,3,552,276,0,3161,3160,1,0,0,0,3161,3162,1,0,0,0,3162,
  	551,1,0,0,0,3163,3164,6,276,-1,0,3164,3165,3,554,277,0,3165,3171,1,0,
  	0,0,3166,3167,10,1,0,0,3167,3168,5,5,0,0,3168,3170,3,554,277,0,3169,3166,
  	1,0,0,0,3170,3173,1,0,0,0,3171,3169,1,0,0,0,3171,3172,1,0,0,0,3172,553,
  	1,0,0,0,3173,3171,1,0,0,0,3174,3179,3,676,338,0,3175,3179,3,666,333,0,
  	3176,3177,5,139,0,0,3177,3179,3,140,70,0,3178,3174,1,0,0,0,3178,3175,
  	1,0,0,0,3178,3176,1,0,0,0,3179,555,1,0,0,0,3180,3181,5,104,0,0,3181,3182,
  	5,8,0,0,3182,3183,3,558,279,0,3183,3184,5,9,0,0,3184,557,1,0,0,0,3185,
  	3187,3,560,280,0,3186,3185,1,0,0,0,3186,3187,1,0,0,0,3187,559,1,0,0,0,
  	3188,3189,6,280,-1,0,3189,3190,3,562,281,0,3190,3196,1,0,0,0,3191,3192,
  	10,1,0,0,3192,3193,5,5,0,0,3193,3195,3,562,281,0,3194,3191,1,0,0,0,3195,
  	3198,1,0,0,0,3196,3194,1,0,0,0,3196,3197,1,0,0,0,3197,561,1,0,0,0,3198,
  	3196,1,0,0,0,3199,3210,3,666,333,0,3200,3210,3,676,338,0,3201,3210,3,
  	688,344,0,3202,3210,3,660,330,0,3203,3210,3,674,337,0,3204,3210,3,686,
  	343,0,3205,3210,3,690,345,0,3206,3210,3,692,346,0,3207,3210,3,694,347,
  	0,3208,3210,3,670,335,0,3209,3199,1,0,0,0,3209,3200,1,0,0,0,3209,3201,
  	1,0,0,0,3209,3202,1,0,0,0,3209,3203,1,0,0,0,3209,3204,1,0,0,0,3209,3205,
  	1,0,0,0,3209,3206,1,0,0,0,3209,3207,1,0,0,0,3209,3208,1,0,0,0,3210,563,
  	1,0,0,0,3211,3212,5,119,0,0,3212,3213,5,8,0,0,3213,3214,3,566,283,0,3214,
  	3215,5,9,0,0,3215,565,1,0,0,0,3216,3218,3,568,284,0,3217,3216,1,0,0,0,
  	3217,3218,1,0,0,0,3218,567,1,0,0,0,3219,3220,6,284,-1,0,3220,3221,3,570,
  	285,0,3221,3227,1,0,0,0,3222,3223,10,1,0,0,3223,3224,5,5,0,0,3224,3226,
  	3,570,285,0,3225,3222,1,0,0,0,3226,3229,1,0,0,0,3227,3225,1,0,0,0,3227,
  	3228,1,0,0,0,3228,569,1,0,0,0,3229,3227,1,0,0,0,3230,3259,3,666,333,0,
  	3231,3259,3,676,338,0,3232,3259,3,688,344,0,3233,3259,3,660,330,0,3234,
  	3259,3,674,337,0,3235,3259,3,686,343,0,3236,3259,3,690,345,0,3237,3259,
  	3,692,346,0,3238,3239,5,307,0,0,3239,3259,3,144,72,0,3240,3241,5,84,0,
  	0,3241,3259,3,440,220,0,3242,3243,5,384,0,0,3243,3259,3,718,359,0,3244,
  	3245,5,383,0,0,3245,3259,3,144,72,0,3246,3247,5,347,0,0,3247,3259,3,144,
  	72,0,3248,3259,3,672,336,0,3249,3259,3,662,331,0,3250,3251,5,369,0,0,
  	3251,3259,3,440,220,0,3252,3259,3,682,341,0,3253,3259,3,694,347,0,3254,
  	3255,5,382,0,0,3255,3259,3,440,220,0,3256,3257,5,349,0,0,3257,3259,3,
  	440,220,0,3258,3230,1,0,0,0,3258,3231,1,0,0,0,3258,3232,1,0,0,0,3258,
  	3233,1,0,0,0,3258,3234,1,0,0,0,3258,3235,1,0,0,0,3258,3236,1,0,0,0,3258,
  	3237,1,0,0,0,3258,3238,1,0,0,0,3258,3240,1,0,0,0,3258,3242,1,0,0,0,3258,
  	3244,1,0,0,0,3258,3246,1,0,0,0,3258,3248,1,0,0,0,3258,3249,1,0,0,0,3258,
  	3250,1,0,0,0,3258,3252,1,0,0,0,3258,3253,1,0,0,0,3258,3254,1,0,0,0,3258,
  	3256,1,0,0,0,3259,571,1,0,0,0,3260,3261,5,107,0,0,3261,3262,5,8,0,0,3262,
  	3263,3,574,287,0,3263,3264,5,9,0,0,3264,573,1,0,0,0,3265,3267,3,576,288,
  	0,3266,3265,1,0,0,0,3266,3267,1,0,0,0,3267,575,1,0,0,0,3268,3269,6,288,
  	-1,0,3269,3270,3,578,289,0,3270,3276,1,0,0,0,3271,3272,10,1,0,0,3272,
  	3273,5,5,0,0,3273,3275,3,578,289,0,3274,3271,1,0,0,0,3275,3278,1,0,0,
  	0,3276,3274,1,0,0,0,3276,3277,1,0,0,0,3277,577,1,0,0,0,3278,3276,1,0,
  	0,0,3279,3284,3,676,338,0,3280,3284,3,660,330,0,3281,3284,3,674,337,0,
  	3282,3284,3,696,348,0,3283,3279,1,0,0,0,3283,3280,1,0,0,0,3283,3281,1,
  	0,0,0,3283,3282,1,0,0,0,3284,579,1,0,0,0,3285,3286,5,108,0,0,3286,3287,
  	5,8,0,0,3287,3288,3,582,291,0,3288,3289,5,9,0,0,3289,581,1,0,0,0,3290,
  	3292,3,584,292,0,3291,3290,1,0,0,0,3291,3292,1,0,0,0,3292,583,1,0,0,0,
  	3293,3294,6,292,-1,0,3294,3295,3,586,293,0,3295,3301,1,0,0,0,3296,3297,
  	10,1,0,0,3297,3298,5,5,0,0,3298,3300,3,586,293,0,3299,3296,1,0,0,0,3300,
  	3303,1,0,0,0,3301,3299,1,0,0,0,3301,3302,1,0,0,0,3302,585,1,0,0,0,3303,
  	3301,1,0,0,0,3304,3309,3,676,338,0,3305,3309,3,660,330,0,3306,3307,5,
  	117,0,0,3307,3309,3,144,72,0,3308,3304,1,0,0,0,3308,3305,1,0,0,0,3308,
  	3306,1,0,0,0,3309,587,1,0,0,0,3310,3311,5,110,0,0,3311,3312,5,8,0,0,3312,
  	3313,3,590,295,0,3313,3314,5,9,0,0,3314,589,1,0,0,0,3315,3317,3,592,296,
  	0,3316,3315,1,0,0,0,3316,3317,1,0,0,0,3317,591,1,0,0,0,3318,3319,6,296,
  	-1,0,3319,3320,3,594,297,0,3320,3326,1,0,0,0,3321,3322,10,1,0,0,3322,
  	3323,5,5,0,0,3323,3325,3,594,297,0,3324,3321,1,0,0,0,3325,3328,1,0,0,
  	0,3326,3324,1,0,0,0,3326,3327,1,0,0,0,3327,593,1,0,0,0,3328,3326,1,0,
  	0,0,3329,3335,3,674,337,0,3330,3335,3,696,348,0,3331,3335,3,676,338,0,
  	3332,3333,5,193,0,0,3333,3335,3,440,220,0,3334,3329,1,0,0,0,3334,3330,
  	1,0,0,0,3334,3331,1,0,0,0,3334,3332,1,0,0,0,3335,595,1,0,0,0,3336,3337,
  	5,109,0,0,3337,3338,5,8,0,0,3338,3339,3,598,299,0,3339,3340,5,9,0,0,3340,
  	597,1,0,0,0,3341,3343,3,600,300,0,3342,3341,1,0,0,0,3342,3343,1,0,0,0,
  	3343,599,1,0,0,0,3344,3345,6,300,-1,0,3345,3346,3,602,301,0,3346,3352,
  	1,0,0,0,3347,3348,10,1,0,0,3348,3349,5,5,0,0,3349,3351,3,602,301,0,3350,
  	3347,1,0,0,0,3351,3354,1,0,0,0,3352,3350,1,0,0,0,3352,3353,1,0,0,0,3353,
  	601,1,0,0,0,3354,3352,1,0,0,0,3355,3365,3,666,333,0,3356,3357,5,41,0,
  	0,3357,3365,3,144,72,0,3358,3365,3,676,338,0,3359,3365,3,660,330,0,3360,
  	3365,3,674,337,0,3361,3365,3,686,343,0,3362,3365,3,672,336,0,3363,3365,
  	3,670,335,0,3364,3355,1,0,0,0,3364,3356,1,0,0,0,3364,3358,1,0,0,0,3364,
  	3359,1,0,0,0,3364,3360,1,0,0,0,3364,3361,1,0,0,0,3364,3362,1,0,0,0,3364,
  	3363,1,0,0,0,3365,603,1,0,0,0,3366,3367,5,102,0,0,3367,3368,5,8,0,0,3368,
  	3369,3,606,303,0,3369,3370,5,9,0,0,3370,605,1,0,0,0,3371,3373,3,608,304,
  	0,3372,3371,1,0,0,0,3372,3373,1,0,0,0,3373,607,1,0,0,0,3374,3375,6,304,
  	-1,0,3375,3376,3,610,305,0,3376,3382,1,0,0,0,3377,3378,10,1,0,0,3378,
  	3379,5,5,0,0,3379,3381,3,610,305,0,3380,3377,1,0,0,0,3381,3384,1,0,0,
  	0,3382,3380,1,0,0,0,3382,3383,1,0,0,0,3383,609,1,0,0,0,3384,3382,1,0,
  	0,0,3385,3388,5,424,0,0,3386,3388,3,714,357,0,3387,3385,1,0,0,0,3387,
  	3386,1,0,0,0,3388,611,1,0,0,0,3389,3390,5,105,0,0,3390,3391,5,8,0,0,3391,
  	3392,3,614,307,0,3392,3393,5,9,0,0,3393,613,1,0,0,0,3394,3396,3,616,308,
  	0,3395,3394,1,0,0,0,3395,3396,1,0,0,0,3396,615,1,0,0,0,3397,3398,6,308,
  	-1,0,3398,3399,3,618,309,0,3399,3405,1,0,0,0,3400,3401,10,1,0,0,3401,
  	3402,5,5,0,0,3402,3404,3,618,309,0,3403,3400,1,0,0,0,3404,3407,1,0,0,
  	0,3405,3403,1,0,0,0,3405,3406,1,0,0,0,3406,617,1,0,0,0,3407,3405,1,0,
  	0,0,3408,3409,5,381,0,0,3409,3413,3,440,220,0,3410,3411,5,140,0,0,3411,
  	3413,3,440,220,0,3412,3408,1,0,0,0,3412,3410,1,0,0,0,3413,619,1,0,0,0,
  	3414,3415,5,115,0,0,3415,3416,5,8,0,0,3416,3417,3,622,311,0,3417,3418,
  	5,9,0,0,3418,621,1,0,0,0,3419,3421,3,624,312,0,3420,3419,1,0,0,0,3420,
  	3421,1,0,0,0,3421,623,1,0,0,0,3422,3423,6,312,-1,0,3423,3424,3,626,313,
  	0,3424,3430,1,0,0,0,3425,3426,10,1,0,0,3426,3427,5,5,0,0,3427,3429,3,
  	626,313,0,3428,3425,1,0,0,0,3429,3432,1,0,0,0,3430,3428,1,0,0,0,3430,
  	3431,1,0,0,0,3431,625,1,0,0,0,3432,3430,1,0,0,0,3433,3444,3,666,333,0,
  	3434,3444,3,660,330,0,3435,3444,3,674,337,0,3436,3437,5,312,0,0,3437,
  	3444,3,158,79,0,3438,3439,5,172,0,0,3439,3444,3,158,79,0,3440,3441,5,
  	50,0,0,3441,3444,3,144,72,0,3442,3444,3,686,343,0,3443,3433,1,0,0,0,3443,
  	3434,1,0,0,0,3443,3435,1,0,0,0,3443,3436,1,0,0,0,3443,3438,1,0,0,0,3443,
  	3440,1,0,0,0,3443,3442,1,0,0,0,3444,627,1,0,0,0,3445,3446,5,106,0,0,3446,
  	3447,5,8,0,0,3447,3448,3,630,315,0,3448,3449,5,9,0,0,3449,629,1,0,0,0,
  	3450,3452,3,632,316,0,3451,3450,1,0,0,0,3451,3452,1,0,0,0,3452,631,1,
  	0,0,0,3453,3454,6,316,-1,0,3454,3455,3,634,317,0,3455,3461,1,0,0,0,3456,
  	3457,10,1,0,0,3457,3458,5,5,0,0,3458,3460,3,634,317,0,3459,3456,1,0,0,
  	0,3460,3463,1,0,0,0,3461,3459,1,0,0,0,3461,3462,1,0,0,0,3462,633,1,0,
  	0,0,3463,3461,1,0,0,0,3464,3472,3,664,332,0,3465,3472,3,676,338,0,3466,
  	3467,5,134,0,0,3467,3472,3,440,220,0,3468,3472,3,660,330,0,3469,3472,
  	3,674,337,0,3470,3472,3,666,333,0,3471,3464,1,0,0,0,3471,3465,1,0,0,0,
  	3471,3466,1,0,0,0,3471,3468,1,0,0,0,3471,3469,1,0,0,0,3471,3470,1,0,0,
  	0,3472,635,1,0,0,0,3473,3474,5,111,0,0,3474,3475,5,8,0,0,3475,3476,3,
  	638,319,0,3476,3477,5,9,0,0,3477,637,1,0,0,0,3478,3480,3,640,320,0,3479,
  	3478,1,0,0,0,3479,3480,1,0,0,0,3480,639,1,0,0,0,3481,3482,6,320,-1,0,
  	3482,3483,3,642,321,0,3483,3489,1,0,0,0,3484,3485,10,1,0,0,3485,3486,
  	5,5,0,0,3486,3488,3,642,321,0,3487,3484,1,0,0,0,3488,3491,1,0,0,0,3489,
  	3487,1,0,0,0,3489,3490,1,0,0,0,3490,641,1,0,0,0,3491,3489,1,0,0,0,3492,
  	3498,3,698,349,0,3493,3498,3,674,337,0,3494,3498,3,666,333,0,3495,3496,
  	5,380,0,0,3496,3498,3,158,79,0,3497,3492,1,0,0,0,3497,3493,1,0,0,0,3497,
  	3494,1,0,0,0,3497,3495,1,0,0,0,3498,643,1,0,0,0,3499,3500,5,112,0,0,3500,
  	3501,5,8,0,0,3501,3502,3,646,323,0,3502,3503,5,9,0,0,3503,645,1,0,0,0,
  	3504,3506,3,648,324,0,3505,3504,1,0,0,0,3505,3506,1,0,0,0,3506,647,1,
  	0,0,0,3507,3508,6,324,-1,0,3508,3509,3,650,325,0,3509,3515,1,0,0,0,3510,
  	3511,10,1,0,0,3511,3512,5,5,0,0,3512,3514,3,650,325,0,3513,3510,1,0,0,
  	0,3514,3517,1,0,0,0,3515,3513,1,0,0,0,3515,3516,1,0,0,0,3516,649,1,0,
  	0,0,3517,3515,1,0,0,0,3518,3524,3,698,349,0,3519,3524,3,674,337,0,3520,
  	3524,3,660,330,0,3521,3522,5,246,0,0,3522,3524,3,440,220,0,3523,3518,
  	1,0,0,0,3523,3519,1,0,0,0,3523,3520,1,0,0,0,3523,3521,1,0,0,0,3524,651,
  	1,0,0,0,3525,3526,5,170,0,0,3526,3527,5,8,0,0,3527,3528,3,654,327,0,3528,
  	3529,5,9,0,0,3529,653,1,0,0,0,3530,3532,3,656,328,0,3531,3530,1,0,0,0,
  	3531,3532,1,0,0,0,3532,655,1,0,0,0,3533,3534,6,328,-1,0,3534,3535,3,658,
  	329,0,3535,3541,1,0,0,0,3536,3537,10,1,0,0,3537,3538,5,5,0,0,3538,3540,
  	3,658,329,0,3539,3536,1,0,0,0,3540,3543,1,0,0,0,3541,3539,1,0,0,0,3541,
  	3542,1,0,0,0,3542,657,1,0,0,0,3543,3541,1,0,0,0,3544,3550,3,664,332,0,
  	3545,3546,5,178,0,0,3546,3550,3,158,79,0,3547,3548,5,271,0,0,3548,3550,
  	3,436,218,0,3549,3544,1,0,0,0,3549,3545,1,0,0,0,3549,3547,1,0,0,0,3550,
  	659,1,0,0,0,3551,3552,5,154,0,0,3552,3553,3,440,220,0,3553,661,1,0,0,
  	0,3554,3555,5,206,0,0,3555,3556,3,140,70,0,3556,663,1,0,0,0,3557,3558,
  	5,343,0,0,3558,3559,3,716,358,0,3559,665,1,0,0,0,3560,3561,5,236,0,0,
  	3561,3562,3,158,79,0,3562,667,1,0,0,0,3563,3564,5,321,0,0,3564,3565,3,
  	144,72,0,3565,669,1,0,0,0,3566,3567,5,22,0,0,3567,3568,3,144,72,0,3568,
  	671,1,0,0,0,3569,3570,5,157,0,0,3570,3571,3,702,351,0,3571,673,1,0,0,
  	0,3572,3573,5,214,0,0,3573,3574,3,144,72,0,3574,675,1,0,0,0,3575,3576,
  	5,306,0,0,3576,3577,3,440,220,0,3577,677,1,0,0,0,3578,3579,5,55,0,0,3579,
  	3580,3,440,220,0,3580,679,1,0,0,0,3581,3582,5,264,0,0,3582,3583,3,144,
  	72,0,3583,681,1,0,0,0,3584,3585,5,346,0,0,3585,3586,3,440,220,0,3586,
  	683,1,0,0,0,3587,3590,5,424,0,0,3588,3590,3,440,220,0,3589,3587,1,0,0,
  	0,3589,3588,1,0,0,0,3590,685,1,0,0,0,3591,3592,5,355,0,0,3592,3593,3,
  	440,220,0,3593,687,1,0,0,0,3594,3595,5,216,0,0,3595,3596,3,158,79,0,3596,
  	689,1,0,0,0,3597,3598,5,205,0,0,3598,3599,3,140,70,0,3599,691,1,0,0,0,
  	3600,3601,5,204,0,0,3601,3602,3,140,70,0,3602,693,1,0,0,0,3603,3604,5,
  	91,0,0,3604,3605,3,440,220,0,3605,695,1,0,0,0,3606,3607,5,79,0,0,3607,
  	3608,3,144,72,0,3608,697,1,0,0,0,3609,3610,5,355,0,0,3610,3611,3,712,
  	356,0,3611,699,1,0,0,0,3612,3613,5,420,0,0,3613,701,1,0,0,0,3614,3615,
  	6,351,-1,0,3615,3616,3,704,352,0,3616,3622,1,0,0,0,3617,3618,10,1,0,0,
  	3618,3619,5,4,0,0,3619,3621,3,704,352,0,3620,3617,1,0,0,0,3621,3624,1,
  	0,0,0,3622,3620,1,0,0,0,3622,3623,1,0,0,0,3623,703,1,0,0,0,3624,3622,
  	1,0,0,0,3625,3628,3,144,72,0,3626,3628,5,417,0,0,3627,3625,1,0,0,0,3627,
  	3626,1,0,0,0,3628,705,1,0,0,0,3629,3632,3,144,72,0,3630,3632,5,416,0,
  	0,3631,3629,1,0,0,0,3631,3630,1,0,0,0,3632,707,1,0,0,0,3633,3636,3,144,
  	72,0,3634,3636,5,419,0,0,3635,3633,1,0,0,0,3635,3634,1,0,0,0,3636,709,
  	1,0,0,0,3637,3640,3,144,72,0,3638,3640,5,418,0,0,3639,3637,1,0,0,0,3639,
  	3638,1,0,0,0,3640,711,1,0,0,0,3641,3644,3,144,72,0,3642,3644,5,422,0,
  	0,3643,3641,1,0,0,0,3643,3642,1,0,0,0,3644,713,1,0,0,0,3645,3646,5,423,
  	0,0,3646,715,1,0,0,0,3647,3650,3,144,72,0,3648,3650,5,415,0,0,3649,3647,
  	1,0,0,0,3649,3648,1,0,0,0,3650,717,1,0,0,0,3651,3654,3,144,72,0,3652,
  	3654,5,421,0,0,3653,3651,1,0,0,0,3653,3652,1,0,0,0,3654,719,1,0,0,0,3655,
  	3660,3,144,72,0,3656,3660,5,168,0,0,3657,3660,5,215,0,0,3658,3660,5,245,
  	0,0,3659,3655,1,0,0,0,3659,3656,1,0,0,0,3659,3657,1,0,0,0,3659,3658,1,
  	0,0,0,3660,721,1,0,0,0,3661,3663,3,724,362,0,3662,3661,1,0,0,0,3662,3663,
  	1,0,0,0,3663,723,1,0,0,0,3664,3665,6,362,-1,0,3665,3666,3,728,364,0,3666,
  	3671,1,0,0,0,3667,3668,10,1,0,0,3668,3670,3,728,364,0,3669,3667,1,0,0,
  	0,3670,3673,1,0,0,0,3671,3669,1,0,0,0,3671,3672,1,0,0,0,3672,725,1,0,
  	0,0,3673,3671,1,0,0,0,3674,3675,6,363,-1,0,3675,3676,3,728,364,0,3676,
  	3682,1,0,0,0,3677,3678,10,1,0,0,3678,3679,5,5,0,0,3679,3681,3,728,364,
  	0,3680,3677,1,0,0,0,3681,3684,1,0,0,0,3682,3680,1,0,0,0,3682,3683,1,0,
  	0,0,3683,727,1,0,0,0,3684,3682,1,0,0,0,3685,3686,3,90,45,0,3686,3687,
  	3,126,63,0,3687,729,1,0,0,0,3688,3690,3,732,366,0,3689,3688,1,0,0,0,3689,
  	3690,1,0,0,0,3690,731,1,0,0,0,3691,3692,6,366,-1,0,3692,3693,3,734,367,
  	0,3693,3699,1,0,0,0,3694,3695,10,1,0,0,3695,3696,5,5,0,0,3696,3698,3,
  	734,367,0,3697,3694,1,0,0,0,3698,3701,1,0,0,0,3699,3697,1,0,0,0,3699,
  	3700,1,0,0,0,3700,733,1,0,0,0,3701,3699,1,0,0,0,3702,3703,3,90,45,0,3703,
  	3704,3,136,68,0,3704,735,1,0,0,0,3705,3706,5,23,0,0,3706,3707,5,424,0,
  	0,3707,737,1,0,0,0,3708,3709,5,26,0,0,3709,3710,5,8,0,0,3710,3711,5,424,
  	0,0,3711,3719,5,9,0,0,3712,3713,5,26,0,0,3713,3714,5,8,0,0,3714,3715,
  	5,424,0,0,3715,3716,5,5,0,0,3716,3717,5,424,0,0,3717,3719,5,9,0,0,3718,
  	3708,1,0,0,0,3718,3712,1,0,0,0,3719,739,1,0,0,0,3720,3727,5,7,0,0,3721,
  	3727,3,742,371,0,3722,3723,3,742,371,0,3723,3724,5,5,0,0,3724,3725,5,
  	7,0,0,3725,3727,1,0,0,0,3726,3720,1,0,0,0,3726,3721,1,0,0,0,3726,3722,
  	1,0,0,0,3726,3727,1,0,0,0,3727,741,1,0,0,0,3728,3729,6,371,-1,0,3729,
  	3730,3,744,372,0,3730,3736,1,0,0,0,3731,3732,10,1,0,0,3732,3733,5,5,0,
  	0,3733,3735,3,744,372,0,3734,3731,1,0,0,0,3735,3738,1,0,0,0,3736,3734,
  	1,0,0,0,3736,3737,1,0,0,0,3737,743,1,0,0,0,3738,3736,1,0,0,0,3739,3740,
  	3,90,45,0,3740,3741,3,104,52,0,3741,3742,5,14,0,0,3742,3745,1,0,0,0,3743,
  	3745,3,92,46,0,3744,3739,1,0,0,0,3744,3743,1,0,0,0,3745,3746,1,0,0,0,
  	3746,3747,3,816,408,0,3747,3748,3,126,63,0,3748,3753,1,0,0,0,3749,3750,
  	3,114,57,0,3750,3751,3,442,221,0,3751,3753,1,0,0,0,3752,3744,1,0,0,0,
  	3752,3749,1,0,0,0,3753,745,1,0,0,0,3754,3755,7,7,0,0,3755,747,1,0,0,0,
  	3756,3758,3,750,375,0,3757,3756,1,0,0,0,3757,3758,1,0,0,0,3758,749,1,
  	0,0,0,3759,3801,5,28,0,0,3760,3801,5,29,0,0,3761,3801,5,30,0,0,3762,3801,
  	5,31,0,0,3763,3801,5,32,0,0,3764,3801,5,33,0,0,3765,3801,5,34,0,0,3766,
  	3801,5,35,0,0,3767,3801,5,38,0,0,3768,3801,5,44,0,0,3769,3801,5,43,0,
  	0,3770,3801,5,45,0,0,3771,3801,5,53,0,0,3772,3801,5,54,0,0,3773,3801,
  	5,70,0,0,3774,3801,5,78,0,0,3775,3801,5,88,0,0,3776,3801,5,150,0,0,3777,
  	3801,5,173,0,0,3778,3801,5,180,0,0,3779,3801,5,179,0,0,3780,3801,5,200,
  	0,0,3781,3801,5,232,0,0,3782,3801,5,280,0,0,3783,3801,5,281,0,0,3784,
  	3801,5,287,0,0,3785,3801,5,288,0,0,3786,3801,5,326,0,0,3787,3801,5,327,
  	0,0,3788,3801,5,338,0,0,3789,3801,5,389,0,0,3790,3801,5,390,0,0,3791,
  	3801,5,394,0,0,3792,3801,5,395,0,0,3793,3801,5,397,0,0,3794,3801,5,399,
  	0,0,3795,3801,5,400,0,0,3796,3801,5,401,0,0,3797,3801,5,402,0,0,3798,
  	3799,5,69,0,0,3799,3801,5,424,0,0,3800,3759,1,0,0,0,3800,3760,1,0,0,0,
  	3800,3761,1,0,0,0,3800,3762,1,0,0,0,3800,3763,1,0,0,0,3800,3764,1,0,0,
  	0,3800,3765,1,0,0,0,3800,3766,1,0,0,0,3800,3767,1,0,0,0,3800,3768,1,0,
  	0,0,3800,3769,1,0,0,0,3800,3770,1,0,0,0,3800,3771,1,0,0,0,3800,3772,1,
  	0,0,0,3800,3773,1,0,0,0,3800,3774,1,0,0,0,3800,3775,1,0,0,0,3800,3776,
  	1,0,0,0,3800,3777,1,0,0,0,3800,3778,1,0,0,0,3800,3779,1,0,0,0,3800,3780,
  	1,0,0,0,3800,3781,1,0,0,0,3800,3782,1,0,0,0,3800,3783,1,0,0,0,3800,3784,
  	1,0,0,0,3800,3785,1,0,0,0,3800,3786,1,0,0,0,3800,3787,1,0,0,0,3800,3788,
  	1,0,0,0,3800,3789,1,0,0,0,3800,3790,1,0,0,0,3800,3791,1,0,0,0,3800,3792,
  	1,0,0,0,3800,3793,1,0,0,0,3800,3794,1,0,0,0,3800,3795,1,0,0,0,3800,3796,
  	1,0,0,0,3800,3797,1,0,0,0,3800,3798,1,0,0,0,3801,751,1,0,0,0,3802,3804,
  	3,754,377,0,3803,3802,1,0,0,0,3803,3804,1,0,0,0,3804,753,1,0,0,0,3805,
  	3812,5,80,0,0,3806,3807,5,80,0,0,3807,3808,5,8,0,0,3808,3809,3,84,42,
  	0,3809,3810,5,9,0,0,3810,3812,1,0,0,0,3811,3805,1,0,0,0,3811,3806,1,0,
  	0,0,3812,755,1,0,0,0,3813,3814,5,95,0,0,3814,3815,5,8,0,0,3815,3816,5,
  	424,0,0,3816,3822,5,9,0,0,3817,3818,5,96,0,0,3818,3819,5,8,0,0,3819,3820,
  	5,424,0,0,3820,3822,5,9,0,0,3821,3813,1,0,0,0,3821,3817,1,0,0,0,3822,
  	757,1,0,0,0,3823,3825,3,760,380,0,3824,3823,1,0,0,0,3824,3825,1,0,0,0,
  	3825,759,1,0,0,0,3826,3827,7,8,0,0,3827,761,1,0,0,0,3828,3830,5,137,0,
  	0,3829,3828,1,0,0,0,3829,3830,1,0,0,0,3830,763,1,0,0,0,3831,3833,3,766,
  	383,0,3832,3831,1,0,0,0,3832,3833,1,0,0,0,3833,765,1,0,0,0,3834,3835,
  	6,383,-1,0,3835,3836,3,768,384,0,3836,3842,1,0,0,0,3837,3838,10,1,0,0,
  	3838,3839,5,5,0,0,3839,3841,3,768,384,0,3840,3837,1,0,0,0,3841,3844,1,
  	0,0,0,3842,3840,1,0,0,0,3842,3843,1,0,0,0,3843,767,1,0,0,0,3844,3842,
  	1,0,0,0,3845,3846,3,90,45,0,3846,3847,3,104,52,0,3847,3848,5,14,0,0,3848,
  	3851,1,0,0,0,3849,3851,3,92,46,0,3850,3845,1,0,0,0,3850,3849,1,0,0,0,
  	3851,3852,1,0,0,0,3852,3853,3,126,63,0,3853,3858,1,0,0,0,3854,3855,3,
  	114,57,0,3855,3856,3,442,221,0,3856,3858,1,0,0,0,3857,3850,1,0,0,0,3857,
  	3854,1,0,0,0,3858,769,1,0,0,0,3859,3862,3,150,75,0,3860,3862,3,78,39,
  	0,3861,3859,1,0,0,0,3861,3860,1,0,0,0,3862,771,1,0,0,0,3863,3865,3,774,
  	387,0,3864,3863,1,0,0,0,3864,3865,1,0,0,0,3865,773,1,0,0,0,3866,3867,
  	6,387,-1,0,3867,3868,3,776,388,0,3868,3873,1,0,0,0,3869,3870,10,1,0,0,
  	3870,3872,3,776,388,0,3871,3869,1,0,0,0,3872,3875,1,0,0,0,3873,3871,1,
  	0,0,0,3873,3874,1,0,0,0,3874,775,1,0,0,0,3875,3873,1,0,0,0,3876,3877,
  	7,9,0,0,3877,777,1,0,0,0,3878,3879,7,10,0,0,3879,779,1,0,0,0,3880,3882,
  	3,782,391,0,3881,3880,1,0,0,0,3881,3882,1,0,0,0,3882,781,1,0,0,0,3883,
  	3884,6,391,-1,0,3884,3885,3,784,392,0,3885,3890,1,0,0,0,3886,3887,10,
  	1,0,0,3887,3889,3,784,392,0,3888,3886,1,0,0,0,3889,3892,1,0,0,0,3890,
  	3888,1,0,0,0,3890,3891,1,0,0,0,3891,783,1,0,0,0,3892,3890,1,0,0,0,3893,
  	3946,3,82,41,0,3894,3895,5,23,0,0,3895,3896,5,2,0,0,3896,3946,5,424,0,
  	0,3897,3898,5,24,0,0,3898,3899,5,2,0,0,3899,3946,5,424,0,0,3900,3946,
  	3,736,368,0,3901,3946,3,738,369,0,3902,3946,3,840,420,0,3903,3946,3,158,
  	79,0,3904,3905,3,158,79,0,3905,3906,5,2,0,0,3906,3907,3,158,79,0,3907,
  	3946,1,0,0,0,3908,3946,5,27,0,0,3909,3946,5,42,0,0,3910,3946,5,59,0,0,
  	3911,3946,5,77,0,0,3912,3946,5,86,0,0,3913,3946,5,187,0,0,3914,3946,5,
  	186,0,0,3915,3946,5,194,0,0,3916,3946,5,209,0,0,3917,3946,5,229,0,0,3918,
  	3946,5,235,0,0,3919,3946,5,243,0,0,3920,3946,5,247,0,0,3921,3946,5,249,
  	0,0,3922,3946,5,250,0,0,3923,3946,5,252,0,0,3924,3946,5,254,0,0,3925,
  	3946,5,255,0,0,3926,3946,5,256,0,0,3927,3946,5,258,0,0,3928,3946,5,272,
  	0,0,3929,3946,5,273,0,0,3930,3946,5,289,0,0,3931,3946,5,290,0,0,3932,
  	3946,5,297,0,0,3933,3946,5,300,0,0,3934,3946,5,302,0,0,3935,3946,5,303,
  	0,0,3936,3946,5,304,0,0,3937,3946,5,305,0,0,3938,3946,5,325,0,0,3939,
  	3946,5,332,0,0,3940,3946,5,333,0,0,3941,3946,5,334,0,0,3942,3946,5,336,
  	0,0,3943,3946,5,378,0,0,3944,3946,5,392,0,0,3945,3893,1,0,0,0,3945,3894,
  	1,0,0,0,3945,3897,1,0,0,0,3945,3900,1,0,0,0,3945,3901,1,0,0,0,3945,3902,
  	1,0,0,0,3945,3903,1,0,0,0,3945,3904,1,0,0,0,3945,3908,1,0,0,0,3945,3909,
  	1,0,0,0,3945,3910,1,0,0,0,3945,3911,1,0,0,0,3945,3912,1,0,0,0,3945,3913,
  	1,0,0,0,3945,3914,1,0,0,0,3945,3915,1,0,0,0,3945,3916,1,0,0,0,3945,3917,
  	1,0,0,0,3945,3918,1,0,0,0,3945,3919,1,0,0,0,3945,3920,1,0,0,0,3945,3921,
  	1,0,0,0,3945,3922,1,0,0,0,3945,3923,1,0,0,0,3945,3924,1,0,0,0,3945,3925,
  	1,0,0,0,3945,3926,1,0,0,0,3945,3927,1,0,0,0,3945,3928,1,0,0,0,3945,3929,
  	1,0,0,0,3945,3930,1,0,0,0,3945,3931,1,0,0,0,3945,3932,1,0,0,0,3945,3933,
  	1,0,0,0,3945,3934,1,0,0,0,3945,3935,1,0,0,0,3945,3936,1,0,0,0,3945,3937,
  	1,0,0,0,3945,3938,1,0,0,0,3945,3939,1,0,0,0,3945,3940,1,0,0,0,3945,3941,
  	1,0,0,0,3945,3942,1,0,0,0,3945,3943,1,0,0,0,3945,3944,1,0,0,0,3946,785,
  	1,0,0,0,3947,3949,5,189,0,0,3948,3947,1,0,0,0,3948,3949,1,0,0,0,3949,
  	787,1,0,0,0,3950,3951,5,5,0,0,3951,3953,3,790,395,0,3952,3950,1,0,0,0,
  	3952,3953,1,0,0,0,3953,789,1,0,0,0,3954,3955,6,395,-1,0,3955,3956,3,792,
  	396,0,3956,3962,1,0,0,0,3957,3958,10,1,0,0,3958,3959,5,5,0,0,3959,3961,
  	3,792,396,0,3960,3957,1,0,0,0,3961,3964,1,0,0,0,3962,3960,1,0,0,0,3962,
  	3963,1,0,0,0,3963,791,1,0,0,0,3964,3962,1,0,0,0,3965,3966,5,424,0,0,3966,
  	793,1,0,0,0,3967,3968,7,11,0,0,3968,795,1,0,0,0,3969,3971,3,798,399,0,
  	3970,3969,1,0,0,0,3970,3971,1,0,0,0,3971,797,1,0,0,0,3972,3973,7,12,0,
  	0,3973,799,1,0,0,0,3974,3976,3,802,401,0,3975,3974,1,0,0,0,3975,3976,
  	1,0,0,0,3976,801,1,0,0,0,3977,3978,7,13,0,0,3978,803,1,0,0,0,3979,3980,
  	5,10,0,0,3980,3981,3,806,403,0,3981,3982,5,11,0,0,3982,3984,1,0,0,0,3983,
  	3979,1,0,0,0,3983,3984,1,0,0,0,3984,805,1,0,0,0,3985,3986,6,403,-1,0,
  	3986,3987,3,808,404,0,3987,3992,1,0,0,0,3988,3989,10,1,0,0,3989,3991,
  	3,808,404,0,3990,3988,1,0,0,0,3991,3994,1,0,0,0,3992,3990,1,0,0,0,3992,
  	3993,1,0,0,0,3993,807,1,0,0,0,3994,3992,1,0,0,0,3995,3996,3,158,79,0,
  	3996,3997,5,8,0,0,3997,3998,3,722,361,0,3998,3999,5,9,0,0,3999,809,1,
  	0,0,0,4000,4002,3,812,406,0,4001,4000,1,0,0,0,4001,4002,1,0,0,0,4002,
  	811,1,0,0,0,4003,4004,6,406,-1,0,4004,4005,3,814,407,0,4005,4010,1,0,
  	0,0,4006,4007,10,1,0,0,4007,4009,3,814,407,0,4008,4006,1,0,0,0,4009,4012,
  	1,0,0,0,4010,4008,1,0,0,0,4010,4011,1,0,0,0,4011,813,1,0,0,0,4012,4010,
  	1,0,0,0,4013,4014,7,14,0,0,4014,815,1,0,0,0,4015,4017,3,818,409,0,4016,
  	4015,1,0,0,0,4016,4017,1,0,0,0,4017,817,1,0,0,0,4018,4019,6,409,-1,0,
  	4019,4020,3,820,410,0,4020,4025,1,0,0,0,4021,4022,10,1,0,0,4022,4024,
  	3,820,410,0,4023,4021,1,0,0,0,4024,4027,1,0,0,0,4025,4023,1,0,0,0,4025,
  	4026,1,0,0,0,4026,819,1,0,0,0,4027,4025,1,0,0,0,4028,4048,3,736,368,0,
  	4029,4048,3,756,378,0,4030,4048,3,158,79,0,4031,4048,5,60,0,0,4032,4048,
  	5,188,0,0,4033,4048,5,196,0,0,4034,4048,5,239,0,0,4035,4048,5,242,0,0,
  	4036,4048,5,244,0,0,4037,4048,5,253,0,0,4038,4048,5,289,0,0,4039,4048,
  	5,290,0,0,4040,4048,5,296,0,0,4041,4048,5,319,0,0,4042,4048,5,331,0,0,
  	4043,4048,5,339,0,0,4044,4048,5,340,0,0,4045,4048,5,392,0,0,4046,4048,
  	5,405,0,0,4047,4028,1,0,0,0,4047,4029,1,0,0,0,4047,4030,1,0,0,0,4047,
  	4031,1,0,0,0,4047,4032,1,0,0,0,4047,4033,1,0,0,0,4047,4034,1,0,0,0,4047,
  	4035,1,0,0,0,4047,4036,1,0,0,0,4047,4037,1,0,0,0,4047,4038,1,0,0,0,4047,
  	4039,1,0,0,0,4047,4040,1,0,0,0,4047,4041,1,0,0,0,4047,4042,1,0,0,0,4047,
  	4043,1,0,0,0,4047,4044,1,0,0,0,4047,4045,1,0,0,0,4047,4046,1,0,0,0,4048,
  	821,1,0,0,0,4049,4056,5,7,0,0,4050,4056,3,824,412,0,4051,4052,3,824,412,
  	0,4052,4053,5,5,0,0,4053,4054,5,7,0,0,4054,4056,1,0,0,0,4055,4049,1,0,
  	0,0,4055,4050,1,0,0,0,4055,4051,1,0,0,0,4055,4056,1,0,0,0,4056,823,1,
  	0,0,0,4057,4058,6,412,-1,0,4058,4059,3,826,413,0,4059,4065,1,0,0,0,4060,
  	4061,10,1,0,0,4061,4062,5,5,0,0,4062,4064,3,826,413,0,4063,4060,1,0,0,
  	0,4064,4067,1,0,0,0,4065,4063,1,0,0,0,4065,4066,1,0,0,0,4066,825,1,0,
  	0,0,4067,4065,1,0,0,0,4068,4069,3,90,45,0,4069,4070,3,816,408,0,4070,
  	4076,1,0,0,0,4071,4072,3,90,45,0,4072,4073,3,816,408,0,4073,4074,3,78,
  	39,0,4074,4076,1,0,0,0,4075,4068,1,0,0,0,4075,4071,1,0,0,0,4076,827,1,
  	0,0,0,4077,4079,3,830,415,0,4078,4077,1,0,0,0,4078,4079,1,0,0,0,4079,
  	829,1,0,0,0,4080,4081,7,15,0,0,4081,831,1,0,0,0,4082,4084,3,834,417,0,
  	4083,4082,1,0,0,0,4083,4084,1,0,0,0,4084,833,1,0,0,0,4085,4086,6,417,
  	-1,0,4086,4087,3,836,418,0,4087,4092,1,0,0,0,4088,4089,10,1,0,0,4089,
  	4091,3,836,418,0,4090,4088,1,0,0,0,4091,4094,1,0,0,0,4092,4090,1,0,0,
  	0,4092,4093,1,0,0,0,4093,835,1,0,0,0,4094,4092,1,0,0,0,4095,4104,3,736,
  	368,0,4096,4104,3,756,378,0,4097,4104,3,158,79,0,4098,4104,5,196,0,0,
  	4099,4104,5,242,0,0,4100,4104,5,253,0,0,4101,4104,5,319,0,0,4102,4104,
  	5,405,0,0,4103,4095,1,0,0,0,4103,4096,1,0,0,0,4103,4097,1,0,0,0,4103,
  	4098,1,0,0,0,4103,4099,1,0,0,0,4103,4100,1,0,0,0,4103,4101,1,0,0,0,4103,
  	4102,1,0,0,0,4104,837,1,0,0,0,4105,4106,5,309,0,0,4106,4107,5,432,0,0,
  	4107,839,1,0,0,0,4108,4109,5,24,0,0,4109,4110,5,8,0,0,4110,4111,5,424,
  	0,0,4111,4112,5,9,0,0,4112,841,1,0,0,0,4113,4114,5,342,0,0,4114,4115,
  	5,8,0,0,4115,4116,5,432,0,0,4116,4118,5,9,0,0,4117,4113,1,0,0,0,4117,
  	4118,1,0,0,0,4118,843,1,0,0,0,4119,4126,5,348,0,0,4120,4121,5,348,0,0,
  	4121,4122,5,8,0,0,4122,4123,3,846,423,0,4123,4124,5,9,0,0,4124,4126,1,
  	0,0,0,4125,4119,1,0,0,0,4125,4120,1,0,0,0,4126,845,1,0,0,0,4127,4128,
  	7,16,0,0,4128,847,1,0,0,0,4129,4130,7,17,0,0,4130,849,1,0,0,0,4131,4132,
  	7,18,0,0,4132,851,1,0,0,0,232,855,864,882,896,912,926,930,933,947,951,
  	954,965,971,981,988,995,999,1002,1015,1019,1022,1030,1047,1058,1062,1072,
  	1078,1084,1090,1112,1122,1127,1139,1142,1145,1154,1192,1203,1205,1217,
  	1230,1271,1281,1291,1302,1305,1308,1324,1356,1422,1656,1666,1674,1819,
  	1827,1830,1839,1851,1901,2165,2168,2171,2175,2185,2198,2211,2223,2227,
  	2238,2252,2266,2279,2289,2305,2309,2341,2464,2499,2515,2518,2527,2538,
  	2567,2579,2584,2614,2623,2649,2711,2722,2732,2737,2746,2757,2760,2769,
  	2774,2784,2812,2820,2830,2865,2873,2883,2894,2902,2912,2921,2929,2939,
  	2947,2955,2965,2982,2990,3000,3024,3032,3042,3049,3057,3067,3075,3083,
  	3093,3098,3106,3116,3124,3132,3142,3153,3161,3171,3178,3186,3196,3209,
  	3217,3227,3258,3266,3276,3283,3291,3301,3308,3316,3326,3334,3342,3352,
  	3364,3372,3382,3387,3395,3405,3412,3420,3430,3443,3451,3461,3471,3479,
  	3489,3497,3505,3515,3523,3531,3541,3549,3589,3622,3627,3631,3635,3639,
  	3643,3649,3653,3659,3662,3671,3682,3689,3699,3718,3726,3736,3744,3752,
  	3757,3800,3803,3811,3821,3824,3829,3832,3842,3850,3857,3861,3864,3873,
  	3881,3890,3945,3948,3952,3962,3970,3975,3983,3992,4001,4010,4016,4025,
  	4047,4055,4065,4075,4078,4083,4092,4103,4117,4125
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  llvmparserParserStaticData = std::move(staticData);
}

}

LLVMParser::LLVMParser(TokenStream *input) : LLVMParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

LLVMParser::LLVMParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  LLVMParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *llvmparserParserStaticData->atn, llvmparserParserStaticData->decisionToDFA, llvmparserParserStaticData->sharedContextCache, options);
}

LLVMParser::~LLVMParser() {
  delete _interpreter;
}

const atn::ATN& LLVMParser::getATN() const {
  return *llvmparserParserStaticData->atn;
}

std::string LLVMParser::getGrammarFileName() const {
  return "LLVMParser.g4";
}

const std::vector<std::string>& LLVMParser::getRuleNames() const {
  return llvmparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& LLVMParser::getVocabulary() const {
  return llvmparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView LLVMParser::getSerializedATN() const {
  return llvmparserParserStaticData->serializedATN;
}


//----------------- ModuleContext ------------------------------------------------------------------

LLVMParser::ModuleContext::ModuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::TopLevelEntitiesContext* LLVMParser::ModuleContext::topLevelEntities() {
  return getRuleContext<LLVMParser::TopLevelEntitiesContext>(0);
}


size_t LLVMParser::ModuleContext::getRuleIndex() const {
  return LLVMParser::RuleModule;
}


std::any LLVMParser::ModuleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitModule(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ModuleContext* LLVMParser::module() {
  ModuleContext *_localctx = _tracker.createInstance<ModuleContext>(_ctx, getState());
  enterRule(_localctx, 0, LLVMParser::RuleModule);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(852);
    topLevelEntities();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TopLevelEntitiesContext ------------------------------------------------------------------

LLVMParser::TopLevelEntitiesContext::TopLevelEntitiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::TopLevelEntityListContext* LLVMParser::TopLevelEntitiesContext::topLevelEntityList() {
  return getRuleContext<LLVMParser::TopLevelEntityListContext>(0);
}


size_t LLVMParser::TopLevelEntitiesContext::getRuleIndex() const {
  return LLVMParser::RuleTopLevelEntities;
}


std::any LLVMParser::TopLevelEntitiesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitTopLevelEntities(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::TopLevelEntitiesContext* LLVMParser::topLevelEntities() {
  TopLevelEntitiesContext *_localctx = _tracker.createInstance<TopLevelEntitiesContext>(_ctx, getState());
  enterRule(_localctx, 2, LLVMParser::RuleTopLevelEntities);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(855);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 10995116277761) != 0) || _la == LLVMParser::MODULE || ((((_la - 324) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 324)) & 13510798884208641) != 0) || ((((_la - 412) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 412)) & 1207959559) != 0)) {
      setState(854);
      topLevelEntityList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TopLevelEntityListContext ------------------------------------------------------------------

LLVMParser::TopLevelEntityListContext::TopLevelEntityListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::TopLevelEntityContext* LLVMParser::TopLevelEntityListContext::topLevelEntity() {
  return getRuleContext<LLVMParser::TopLevelEntityContext>(0);
}

LLVMParser::TopLevelEntityListContext* LLVMParser::TopLevelEntityListContext::topLevelEntityList() {
  return getRuleContext<LLVMParser::TopLevelEntityListContext>(0);
}


size_t LLVMParser::TopLevelEntityListContext::getRuleIndex() const {
  return LLVMParser::RuleTopLevelEntityList;
}


std::any LLVMParser::TopLevelEntityListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitTopLevelEntityList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::TopLevelEntityListContext* LLVMParser::topLevelEntityList() {
   return topLevelEntityList(0);
}

LLVMParser::TopLevelEntityListContext* LLVMParser::topLevelEntityList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::TopLevelEntityListContext *_localctx = _tracker.createInstance<TopLevelEntityListContext>(_ctx, parentState);
  LLVMParser::TopLevelEntityListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 4;
  enterRecursionRule(_localctx, 4, LLVMParser::RuleTopLevelEntityList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(858);
    topLevelEntity();
    _ctx->stop = _input->LT(-1);
    setState(864);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<TopLevelEntityListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleTopLevelEntityList);
        setState(860);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(861);
        topLevelEntity(); 
      }
      setState(866);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TopLevelEntityContext ------------------------------------------------------------------

LLVMParser::TopLevelEntityContext::TopLevelEntityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::SourceFilenameContext* LLVMParser::TopLevelEntityContext::sourceFilename() {
  return getRuleContext<LLVMParser::SourceFilenameContext>(0);
}

LLVMParser::TargetDefinitionContext* LLVMParser::TopLevelEntityContext::targetDefinition() {
  return getRuleContext<LLVMParser::TargetDefinitionContext>(0);
}

LLVMParser::ModuleAsmContext* LLVMParser::TopLevelEntityContext::moduleAsm() {
  return getRuleContext<LLVMParser::ModuleAsmContext>(0);
}

LLVMParser::TypeDefContext* LLVMParser::TopLevelEntityContext::typeDef() {
  return getRuleContext<LLVMParser::TypeDefContext>(0);
}

LLVMParser::ComdatDefContext* LLVMParser::TopLevelEntityContext::comdatDef() {
  return getRuleContext<LLVMParser::ComdatDefContext>(0);
}

LLVMParser::GlobalDeclContext* LLVMParser::TopLevelEntityContext::globalDecl() {
  return getRuleContext<LLVMParser::GlobalDeclContext>(0);
}

LLVMParser::GlobalDefContext* LLVMParser::TopLevelEntityContext::globalDef() {
  return getRuleContext<LLVMParser::GlobalDefContext>(0);
}

LLVMParser::IndirectSymbolDefContext* LLVMParser::TopLevelEntityContext::indirectSymbolDef() {
  return getRuleContext<LLVMParser::IndirectSymbolDefContext>(0);
}

LLVMParser::FunctionDeclContext* LLVMParser::TopLevelEntityContext::functionDecl() {
  return getRuleContext<LLVMParser::FunctionDeclContext>(0);
}

LLVMParser::FunctionDefContext* LLVMParser::TopLevelEntityContext::functionDef() {
  return getRuleContext<LLVMParser::FunctionDefContext>(0);
}

LLVMParser::AttrGroupDefContext* LLVMParser::TopLevelEntityContext::attrGroupDef() {
  return getRuleContext<LLVMParser::AttrGroupDefContext>(0);
}

LLVMParser::NamedMetadataDefContext* LLVMParser::TopLevelEntityContext::namedMetadataDef() {
  return getRuleContext<LLVMParser::NamedMetadataDefContext>(0);
}

LLVMParser::MetadataDefContext* LLVMParser::TopLevelEntityContext::metadataDef() {
  return getRuleContext<LLVMParser::MetadataDefContext>(0);
}

LLVMParser::UseListOrderContext* LLVMParser::TopLevelEntityContext::useListOrder() {
  return getRuleContext<LLVMParser::UseListOrderContext>(0);
}

LLVMParser::UseListOrderBBContext* LLVMParser::TopLevelEntityContext::useListOrderBB() {
  return getRuleContext<LLVMParser::UseListOrderBBContext>(0);
}


size_t LLVMParser::TopLevelEntityContext::getRuleIndex() const {
  return LLVMParser::RuleTopLevelEntity;
}


std::any LLVMParser::TopLevelEntityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitTopLevelEntity(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::TopLevelEntityContext* LLVMParser::topLevelEntity() {
  TopLevelEntityContext *_localctx = _tracker.createInstance<TopLevelEntityContext>(_ctx, getState());
  enterRule(_localctx, 6, LLVMParser::RuleTopLevelEntity);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(882);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(867);
      sourceFilename();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(868);
      targetDefinition();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(869);
      moduleAsm();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(870);
      typeDef();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(871);
      comdatDef();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(872);
      globalDecl();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(873);
      globalDef();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(874);
      indirectSymbolDef();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(875);
      functionDecl();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(876);
      functionDef();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(877);
      attrGroupDef();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(878);
      namedMetadataDef();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(879);
      metadataDef();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(880);
      useListOrder();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(881);
      useListOrderBB();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SourceFilenameContext ------------------------------------------------------------------

LLVMParser::SourceFilenameContext::SourceFilenameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::SourceFilenameContext::SOURCE_FILENAME() {
  return getToken(LLVMParser::SOURCE_FILENAME, 0);
}

tree::TerminalNode* LLVMParser::SourceFilenameContext::EQSIGN() {
  return getToken(LLVMParser::EQSIGN, 0);
}

LLVMParser::StringLitContext* LLVMParser::SourceFilenameContext::stringLit() {
  return getRuleContext<LLVMParser::StringLitContext>(0);
}


size_t LLVMParser::SourceFilenameContext::getRuleIndex() const {
  return LLVMParser::RuleSourceFilename;
}


std::any LLVMParser::SourceFilenameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitSourceFilename(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::SourceFilenameContext* LLVMParser::sourceFilename() {
  SourceFilenameContext *_localctx = _tracker.createInstance<SourceFilenameContext>(_ctx, getState());
  enterRule(_localctx, 8, LLVMParser::RuleSourceFilename);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(884);
    match(LLVMParser::SOURCE_FILENAME);
    setState(885);
    match(LLVMParser::EQSIGN);
    setState(886);
    stringLit();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TargetDefinitionContext ------------------------------------------------------------------

LLVMParser::TargetDefinitionContext::TargetDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::TargetDefinitionContext::TARGET() {
  return getToken(LLVMParser::TARGET, 0);
}

tree::TerminalNode* LLVMParser::TargetDefinitionContext::DATALAYOUT() {
  return getToken(LLVMParser::DATALAYOUT, 0);
}

tree::TerminalNode* LLVMParser::TargetDefinitionContext::EQSIGN() {
  return getToken(LLVMParser::EQSIGN, 0);
}

LLVMParser::StringLitContext* LLVMParser::TargetDefinitionContext::stringLit() {
  return getRuleContext<LLVMParser::StringLitContext>(0);
}

tree::TerminalNode* LLVMParser::TargetDefinitionContext::TRIPLE() {
  return getToken(LLVMParser::TRIPLE, 0);
}


size_t LLVMParser::TargetDefinitionContext::getRuleIndex() const {
  return LLVMParser::RuleTargetDefinition;
}


std::any LLVMParser::TargetDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitTargetDefinition(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::TargetDefinitionContext* LLVMParser::targetDefinition() {
  TargetDefinitionContext *_localctx = _tracker.createInstance<TargetDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 10, LLVMParser::RuleTargetDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(896);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(888);
      match(LLVMParser::TARGET);
      setState(889);
      match(LLVMParser::DATALAYOUT);
      setState(890);
      match(LLVMParser::EQSIGN);
      setState(891);
      stringLit();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(892);
      match(LLVMParser::TARGET);
      setState(893);
      match(LLVMParser::TRIPLE);
      setState(894);
      match(LLVMParser::EQSIGN);
      setState(895);
      stringLit();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleAsmContext ------------------------------------------------------------------

LLVMParser::ModuleAsmContext::ModuleAsmContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ModuleAsmContext::MODULE() {
  return getToken(LLVMParser::MODULE, 0);
}

tree::TerminalNode* LLVMParser::ModuleAsmContext::ASM() {
  return getToken(LLVMParser::ASM, 0);
}

LLVMParser::StringLitContext* LLVMParser::ModuleAsmContext::stringLit() {
  return getRuleContext<LLVMParser::StringLitContext>(0);
}


size_t LLVMParser::ModuleAsmContext::getRuleIndex() const {
  return LLVMParser::RuleModuleAsm;
}


std::any LLVMParser::ModuleAsmContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitModuleAsm(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ModuleAsmContext* LLVMParser::moduleAsm() {
  ModuleAsmContext *_localctx = _tracker.createInstance<ModuleAsmContext>(_ctx, getState());
  enterRule(_localctx, 12, LLVMParser::RuleModuleAsm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(898);
    match(LLVMParser::MODULE);
    setState(899);
    match(LLVMParser::ASM);
    setState(900);
    stringLit();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeDefContext ------------------------------------------------------------------

LLVMParser::TypeDefContext::TypeDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::LocalIdentContext* LLVMParser::TypeDefContext::localIdent() {
  return getRuleContext<LLVMParser::LocalIdentContext>(0);
}

tree::TerminalNode* LLVMParser::TypeDefContext::EQSIGN() {
  return getToken(LLVMParser::EQSIGN, 0);
}

tree::TerminalNode* LLVMParser::TypeDefContext::TYPE() {
  return getToken(LLVMParser::TYPE, 0);
}

LLVMParser::OpaqueTypeContext* LLVMParser::TypeDefContext::opaqueType() {
  return getRuleContext<LLVMParser::OpaqueTypeContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::TypeDefContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}


size_t LLVMParser::TypeDefContext::getRuleIndex() const {
  return LLVMParser::RuleTypeDef;
}


std::any LLVMParser::TypeDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitTypeDef(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::TypeDefContext* LLVMParser::typeDef() {
  TypeDefContext *_localctx = _tracker.createInstance<TypeDefContext>(_ctx, getState());
  enterRule(_localctx, 14, LLVMParser::RuleTypeDef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(912);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(902);
      localIdent();
      setState(903);
      match(LLVMParser::EQSIGN);
      setState(904);
      match(LLVMParser::TYPE);
      setState(905);
      opaqueType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(907);
      localIdent();
      setState(908);
      match(LLVMParser::EQSIGN);
      setState(909);
      match(LLVMParser::TYPE);
      setState(910);
      llvmType(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComdatDefContext ------------------------------------------------------------------

LLVMParser::ComdatDefContext::ComdatDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::ComdatNameContext* LLVMParser::ComdatDefContext::comdatName() {
  return getRuleContext<LLVMParser::ComdatNameContext>(0);
}

tree::TerminalNode* LLVMParser::ComdatDefContext::EQSIGN() {
  return getToken(LLVMParser::EQSIGN, 0);
}

tree::TerminalNode* LLVMParser::ComdatDefContext::COMDAT() {
  return getToken(LLVMParser::COMDAT, 0);
}

LLVMParser::SelectionKindContext* LLVMParser::ComdatDefContext::selectionKind() {
  return getRuleContext<LLVMParser::SelectionKindContext>(0);
}


size_t LLVMParser::ComdatDefContext::getRuleIndex() const {
  return LLVMParser::RuleComdatDef;
}


std::any LLVMParser::ComdatDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitComdatDef(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ComdatDefContext* LLVMParser::comdatDef() {
  ComdatDefContext *_localctx = _tracker.createInstance<ComdatDefContext>(_ctx, getState());
  enterRule(_localctx, 16, LLVMParser::RuleComdatDef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(914);
    comdatName();
    setState(915);
    match(LLVMParser::EQSIGN);
    setState(916);
    match(LLVMParser::COMDAT);
    setState(917);
    selectionKind();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectionKindContext ------------------------------------------------------------------

LLVMParser::SelectionKindContext::SelectionKindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::SelectionKindContext::ANY() {
  return getToken(LLVMParser::ANY, 0);
}

tree::TerminalNode* LLVMParser::SelectionKindContext::EXACTMATCH() {
  return getToken(LLVMParser::EXACTMATCH, 0);
}

tree::TerminalNode* LLVMParser::SelectionKindContext::LARGEST() {
  return getToken(LLVMParser::LARGEST, 0);
}

tree::TerminalNode* LLVMParser::SelectionKindContext::NODUPLICATES() {
  return getToken(LLVMParser::NODUPLICATES, 0);
}

tree::TerminalNode* LLVMParser::SelectionKindContext::SAMESIZE() {
  return getToken(LLVMParser::SAMESIZE, 0);
}


size_t LLVMParser::SelectionKindContext::getRuleIndex() const {
  return LLVMParser::RuleSelectionKind;
}


std::any LLVMParser::SelectionKindContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitSelectionKind(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::SelectionKindContext* LLVMParser::selectionKind() {
  SelectionKindContext *_localctx = _tracker.createInstance<SelectionKindContext>(_ctx, getState());
  enterRule(_localctx, 18, LLVMParser::RuleSelectionKind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(919);
    _la = _input->LA(1);
    if (!(_la == LLVMParser::ANY || _la == LLVMParser::EXACTMATCH || _la == LLVMParser::LARGEST

    || _la == LLVMParser::NODUPLICATES || _la == LLVMParser::SAMESIZE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlobalDeclContext ------------------------------------------------------------------

LLVMParser::GlobalDeclContext::GlobalDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::GlobalIdentContext* LLVMParser::GlobalDeclContext::globalIdent() {
  return getRuleContext<LLVMParser::GlobalIdentContext>(0);
}

tree::TerminalNode* LLVMParser::GlobalDeclContext::EQSIGN() {
  return getToken(LLVMParser::EQSIGN, 0);
}

LLVMParser::ExternLinkageContext* LLVMParser::GlobalDeclContext::externLinkage() {
  return getRuleContext<LLVMParser::ExternLinkageContext>(0);
}

LLVMParser::OptPreemptionSpecifierContext* LLVMParser::GlobalDeclContext::optPreemptionSpecifier() {
  return getRuleContext<LLVMParser::OptPreemptionSpecifierContext>(0);
}

LLVMParser::OptDLLStorageClassContext* LLVMParser::GlobalDeclContext::optDLLStorageClass() {
  return getRuleContext<LLVMParser::OptDLLStorageClassContext>(0);
}

LLVMParser::OptAddrSpaceContext* LLVMParser::GlobalDeclContext::optAddrSpace() {
  return getRuleContext<LLVMParser::OptAddrSpaceContext>(0);
}

LLVMParser::OptExternallyInitializedContext* LLVMParser::GlobalDeclContext::optExternallyInitialized() {
  return getRuleContext<LLVMParser::OptExternallyInitializedContext>(0);
}

LLVMParser::ImmutableContext* LLVMParser::GlobalDeclContext::immutable() {
  return getRuleContext<LLVMParser::ImmutableContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::GlobalDeclContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::GlobalAttrsContext* LLVMParser::GlobalDeclContext::globalAttrs() {
  return getRuleContext<LLVMParser::GlobalAttrsContext>(0);
}

LLVMParser::FuncAttrsContext* LLVMParser::GlobalDeclContext::funcAttrs() {
  return getRuleContext<LLVMParser::FuncAttrsContext>(0);
}

LLVMParser::VisibilityContext* LLVMParser::GlobalDeclContext::visibility() {
  return getRuleContext<LLVMParser::VisibilityContext>(0);
}

LLVMParser::ThreadLocalContext* LLVMParser::GlobalDeclContext::threadLocal() {
  return getRuleContext<LLVMParser::ThreadLocalContext>(0);
}

LLVMParser::UnnamedAddrContext* LLVMParser::GlobalDeclContext::unnamedAddr() {
  return getRuleContext<LLVMParser::UnnamedAddrContext>(0);
}


size_t LLVMParser::GlobalDeclContext::getRuleIndex() const {
  return LLVMParser::RuleGlobalDecl;
}


std::any LLVMParser::GlobalDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitGlobalDecl(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::GlobalDeclContext* LLVMParser::globalDecl() {
  GlobalDeclContext *_localctx = _tracker.createInstance<GlobalDeclContext>(_ctx, getState());
  enterRule(_localctx, 20, LLVMParser::RuleGlobalDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(921);
    globalIdent();
    setState(922);
    match(LLVMParser::EQSIGN);
    setState(923);
    externLinkage();
    setState(924);
    optPreemptionSpecifier();
    setState(926);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::DEFAULT || _la == LLVMParser::HIDDEN_VISIB || _la == LLVMParser::PROTECTED) {
      setState(925);
      visibility();
    }
    setState(928);
    optDLLStorageClass();
    setState(930);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::THREAD_LOCAL) {
      setState(929);
      threadLocal();
    }
    setState(933);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::LOCAL_UNNAMED_ADDR || _la == LLVMParser::UNNAMED_ADDR) {
      setState(932);
      unnamedAddr();
    }
    setState(935);
    optAddrSpace();
    setState(936);
    optExternallyInitialized();
    setState(937);
    immutable();
    setState(938);
    llvmType(0);
    setState(939);
    globalAttrs();
    setState(940);
    funcAttrs();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlobalDefContext ------------------------------------------------------------------

LLVMParser::GlobalDefContext::GlobalDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::GlobalIdentContext* LLVMParser::GlobalDefContext::globalIdent() {
  return getRuleContext<LLVMParser::GlobalIdentContext>(0);
}

tree::TerminalNode* LLVMParser::GlobalDefContext::EQSIGN() {
  return getToken(LLVMParser::EQSIGN, 0);
}

LLVMParser::OptLinkageContext* LLVMParser::GlobalDefContext::optLinkage() {
  return getRuleContext<LLVMParser::OptLinkageContext>(0);
}

LLVMParser::OptPreemptionSpecifierContext* LLVMParser::GlobalDefContext::optPreemptionSpecifier() {
  return getRuleContext<LLVMParser::OptPreemptionSpecifierContext>(0);
}

LLVMParser::OptDLLStorageClassContext* LLVMParser::GlobalDefContext::optDLLStorageClass() {
  return getRuleContext<LLVMParser::OptDLLStorageClassContext>(0);
}

LLVMParser::OptAddrSpaceContext* LLVMParser::GlobalDefContext::optAddrSpace() {
  return getRuleContext<LLVMParser::OptAddrSpaceContext>(0);
}

LLVMParser::OptExternallyInitializedContext* LLVMParser::GlobalDefContext::optExternallyInitialized() {
  return getRuleContext<LLVMParser::OptExternallyInitializedContext>(0);
}

LLVMParser::ImmutableContext* LLVMParser::GlobalDefContext::immutable() {
  return getRuleContext<LLVMParser::ImmutableContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::GlobalDefContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::ConstantContext* LLVMParser::GlobalDefContext::constant() {
  return getRuleContext<LLVMParser::ConstantContext>(0);
}

LLVMParser::GlobalAttrsContext* LLVMParser::GlobalDefContext::globalAttrs() {
  return getRuleContext<LLVMParser::GlobalAttrsContext>(0);
}

LLVMParser::FuncAttrsContext* LLVMParser::GlobalDefContext::funcAttrs() {
  return getRuleContext<LLVMParser::FuncAttrsContext>(0);
}

LLVMParser::VisibilityContext* LLVMParser::GlobalDefContext::visibility() {
  return getRuleContext<LLVMParser::VisibilityContext>(0);
}

LLVMParser::ThreadLocalContext* LLVMParser::GlobalDefContext::threadLocal() {
  return getRuleContext<LLVMParser::ThreadLocalContext>(0);
}

LLVMParser::UnnamedAddrContext* LLVMParser::GlobalDefContext::unnamedAddr() {
  return getRuleContext<LLVMParser::UnnamedAddrContext>(0);
}


size_t LLVMParser::GlobalDefContext::getRuleIndex() const {
  return LLVMParser::RuleGlobalDef;
}


std::any LLVMParser::GlobalDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitGlobalDef(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::GlobalDefContext* LLVMParser::globalDef() {
  GlobalDefContext *_localctx = _tracker.createInstance<GlobalDefContext>(_ctx, getState());
  enterRule(_localctx, 22, LLVMParser::RuleGlobalDef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(942);
    globalIdent();
    setState(943);
    match(LLVMParser::EQSIGN);
    setState(944);
    optLinkage();
    setState(945);
    optPreemptionSpecifier();
    setState(947);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::DEFAULT || _la == LLVMParser::HIDDEN_VISIB || _la == LLVMParser::PROTECTED) {
      setState(946);
      visibility();
    }
    setState(949);
    optDLLStorageClass();
    setState(951);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::THREAD_LOCAL) {
      setState(950);
      threadLocal();
    }
    setState(954);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::LOCAL_UNNAMED_ADDR || _la == LLVMParser::UNNAMED_ADDR) {
      setState(953);
      unnamedAddr();
    }
    setState(956);
    optAddrSpace();
    setState(957);
    optExternallyInitialized();
    setState(958);
    immutable();
    setState(959);
    llvmType(0);
    setState(960);
    constant();
    setState(961);
    globalAttrs();
    setState(962);
    funcAttrs();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptExternallyInitializedContext ------------------------------------------------------------------

LLVMParser::OptExternallyInitializedContext::OptExternallyInitializedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OptExternallyInitializedContext::EXTERNALLY_INITIALIZED() {
  return getToken(LLVMParser::EXTERNALLY_INITIALIZED, 0);
}


size_t LLVMParser::OptExternallyInitializedContext::getRuleIndex() const {
  return LLVMParser::RuleOptExternallyInitialized;
}


std::any LLVMParser::OptExternallyInitializedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptExternallyInitialized(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptExternallyInitializedContext* LLVMParser::optExternallyInitialized() {
  OptExternallyInitializedContext *_localctx = _tracker.createInstance<OptExternallyInitializedContext>(_ctx, getState());
  enterRule(_localctx, 24, LLVMParser::RuleOptExternallyInitialized);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(965);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::EXTERNALLY_INITIALIZED) {
      setState(964);
      match(LLVMParser::EXTERNALLY_INITIALIZED);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImmutableContext ------------------------------------------------------------------

LLVMParser::ImmutableContext::ImmutableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ImmutableContext::CONSTANT() {
  return getToken(LLVMParser::CONSTANT, 0);
}

tree::TerminalNode* LLVMParser::ImmutableContext::GLOBAL() {
  return getToken(LLVMParser::GLOBAL, 0);
}


size_t LLVMParser::ImmutableContext::getRuleIndex() const {
  return LLVMParser::RuleImmutable;
}


std::any LLVMParser::ImmutableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitImmutable(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ImmutableContext* LLVMParser::immutable() {
  ImmutableContext *_localctx = _tracker.createInstance<ImmutableContext>(_ctx, getState());
  enterRule(_localctx, 26, LLVMParser::RuleImmutable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(967);
    _la = _input->LA(1);
    if (!(_la == LLVMParser::CONSTANT || _la == LLVMParser::GLOBAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlobalAttrsContext ------------------------------------------------------------------

LLVMParser::GlobalAttrsContext::GlobalAttrsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::GlobalAttrsContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::GlobalAttrListContext* LLVMParser::GlobalAttrsContext::globalAttrList() {
  return getRuleContext<LLVMParser::GlobalAttrListContext>(0);
}


size_t LLVMParser::GlobalAttrsContext::getRuleIndex() const {
  return LLVMParser::RuleGlobalAttrs;
}


std::any LLVMParser::GlobalAttrsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitGlobalAttrs(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::GlobalAttrsContext* LLVMParser::globalAttrs() {
  GlobalAttrsContext *_localctx = _tracker.createInstance<GlobalAttrsContext>(_ctx, getState());
  enterRule(_localctx, 28, LLVMParser::RuleGlobalAttrs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(971);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
    case 1: {
      setState(969);
      match(LLVMParser::COMMA);
      setState(970);
      globalAttrList(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlobalAttrListContext ------------------------------------------------------------------

LLVMParser::GlobalAttrListContext::GlobalAttrListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::GlobalAttrContext* LLVMParser::GlobalAttrListContext::globalAttr() {
  return getRuleContext<LLVMParser::GlobalAttrContext>(0);
}

LLVMParser::GlobalAttrListContext* LLVMParser::GlobalAttrListContext::globalAttrList() {
  return getRuleContext<LLVMParser::GlobalAttrListContext>(0);
}

tree::TerminalNode* LLVMParser::GlobalAttrListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::GlobalAttrListContext::getRuleIndex() const {
  return LLVMParser::RuleGlobalAttrList;
}


std::any LLVMParser::GlobalAttrListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitGlobalAttrList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::GlobalAttrListContext* LLVMParser::globalAttrList() {
   return globalAttrList(0);
}

LLVMParser::GlobalAttrListContext* LLVMParser::globalAttrList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::GlobalAttrListContext *_localctx = _tracker.createInstance<GlobalAttrListContext>(_ctx, parentState);
  LLVMParser::GlobalAttrListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 30;
  enterRecursionRule(_localctx, 30, LLVMParser::RuleGlobalAttrList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(974);
    globalAttr();
    _ctx->stop = _input->LT(-1);
    setState(981);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<GlobalAttrListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleGlobalAttrList);
        setState(976);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(977);
        match(LLVMParser::COMMA);
        setState(978);
        globalAttr(); 
      }
      setState(983);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- GlobalAttrContext ------------------------------------------------------------------

LLVMParser::GlobalAttrContext::GlobalAttrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::SectionContext* LLVMParser::GlobalAttrContext::section() {
  return getRuleContext<LLVMParser::SectionContext>(0);
}

LLVMParser::ComdatContext* LLVMParser::GlobalAttrContext::comdat() {
  return getRuleContext<LLVMParser::ComdatContext>(0);
}

LLVMParser::AlignmentContext* LLVMParser::GlobalAttrContext::alignment() {
  return getRuleContext<LLVMParser::AlignmentContext>(0);
}

LLVMParser::MetadataAttachmentContext* LLVMParser::GlobalAttrContext::metadataAttachment() {
  return getRuleContext<LLVMParser::MetadataAttachmentContext>(0);
}


size_t LLVMParser::GlobalAttrContext::getRuleIndex() const {
  return LLVMParser::RuleGlobalAttr;
}


std::any LLVMParser::GlobalAttrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitGlobalAttr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::GlobalAttrContext* LLVMParser::globalAttr() {
  GlobalAttrContext *_localctx = _tracker.createInstance<GlobalAttrContext>(_ctx, getState());
  enterRule(_localctx, 32, LLVMParser::RuleGlobalAttr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(988);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::SECTION: {
        enterOuterAlt(_localctx, 1);
        setState(984);
        section();
        break;
      }

      case LLVMParser::COMDAT: {
        enterOuterAlt(_localctx, 2);
        setState(985);
        comdat();
        break;
      }

      case LLVMParser::ALIGN: {
        enterOuterAlt(_localctx, 3);
        setState(986);
        alignment();
        break;
      }

      case LLVMParser::METADATA_NAME: {
        enterOuterAlt(_localctx, 4);
        setState(987);
        metadataAttachment();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndirectSymbolDefContext ------------------------------------------------------------------

LLVMParser::IndirectSymbolDefContext::IndirectSymbolDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::GlobalIdentContext* LLVMParser::IndirectSymbolDefContext::globalIdent() {
  return getRuleContext<LLVMParser::GlobalIdentContext>(0);
}

tree::TerminalNode* LLVMParser::IndirectSymbolDefContext::EQSIGN() {
  return getToken(LLVMParser::EQSIGN, 0);
}

LLVMParser::ExternLinkageContext* LLVMParser::IndirectSymbolDefContext::externLinkage() {
  return getRuleContext<LLVMParser::ExternLinkageContext>(0);
}

LLVMParser::OptPreemptionSpecifierContext* LLVMParser::IndirectSymbolDefContext::optPreemptionSpecifier() {
  return getRuleContext<LLVMParser::OptPreemptionSpecifierContext>(0);
}

LLVMParser::OptDLLStorageClassContext* LLVMParser::IndirectSymbolDefContext::optDLLStorageClass() {
  return getRuleContext<LLVMParser::OptDLLStorageClassContext>(0);
}

LLVMParser::AliasContext* LLVMParser::IndirectSymbolDefContext::alias() {
  return getRuleContext<LLVMParser::AliasContext>(0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::IndirectSymbolDefContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::IndirectSymbolDefContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

tree::TerminalNode* LLVMParser::IndirectSymbolDefContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::ConstantContext* LLVMParser::IndirectSymbolDefContext::constant() {
  return getRuleContext<LLVMParser::ConstantContext>(0);
}

LLVMParser::VisibilityContext* LLVMParser::IndirectSymbolDefContext::visibility() {
  return getRuleContext<LLVMParser::VisibilityContext>(0);
}

LLVMParser::ThreadLocalContext* LLVMParser::IndirectSymbolDefContext::threadLocal() {
  return getRuleContext<LLVMParser::ThreadLocalContext>(0);
}

LLVMParser::UnnamedAddrContext* LLVMParser::IndirectSymbolDefContext::unnamedAddr() {
  return getRuleContext<LLVMParser::UnnamedAddrContext>(0);
}

LLVMParser::OptLinkageContext* LLVMParser::IndirectSymbolDefContext::optLinkage() {
  return getRuleContext<LLVMParser::OptLinkageContext>(0);
}


size_t LLVMParser::IndirectSymbolDefContext::getRuleIndex() const {
  return LLVMParser::RuleIndirectSymbolDef;
}


std::any LLVMParser::IndirectSymbolDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitIndirectSymbolDef(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::IndirectSymbolDefContext* LLVMParser::indirectSymbolDef() {
  IndirectSymbolDefContext *_localctx = _tracker.createInstance<IndirectSymbolDefContext>(_ctx, getState());
  enterRule(_localctx, 34, LLVMParser::RuleIndirectSymbolDef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1030);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(990);
      globalIdent();
      setState(991);
      match(LLVMParser::EQSIGN);
      setState(992);
      externLinkage();
      setState(993);
      optPreemptionSpecifier();
      setState(995);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LLVMParser::DEFAULT || _la == LLVMParser::HIDDEN_VISIB || _la == LLVMParser::PROTECTED) {
        setState(994);
        visibility();
      }
      setState(997);
      optDLLStorageClass();
      setState(999);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LLVMParser::THREAD_LOCAL) {
        setState(998);
        threadLocal();
      }
      setState(1002);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LLVMParser::LOCAL_UNNAMED_ADDR || _la == LLVMParser::UNNAMED_ADDR) {
        setState(1001);
        unnamedAddr();
      }
      setState(1004);
      alias();
      setState(1005);
      llvmType(0);
      setState(1006);
      match(LLVMParser::COMMA);
      setState(1007);
      llvmType(0);
      setState(1008);
      constant();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1010);
      globalIdent();
      setState(1011);
      match(LLVMParser::EQSIGN);
      setState(1012);
      optLinkage();
      setState(1013);
      optPreemptionSpecifier();
      setState(1015);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LLVMParser::DEFAULT || _la == LLVMParser::HIDDEN_VISIB || _la == LLVMParser::PROTECTED) {
        setState(1014);
        visibility();
      }
      setState(1017);
      optDLLStorageClass();
      setState(1019);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LLVMParser::THREAD_LOCAL) {
        setState(1018);
        threadLocal();
      }
      setState(1022);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LLVMParser::LOCAL_UNNAMED_ADDR || _la == LLVMParser::UNNAMED_ADDR) {
        setState(1021);
        unnamedAddr();
      }
      setState(1024);
      alias();
      setState(1025);
      llvmType(0);
      setState(1026);
      match(LLVMParser::COMMA);
      setState(1027);
      llvmType(0);
      setState(1028);
      constant();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AliasContext ------------------------------------------------------------------

LLVMParser::AliasContext::AliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::AliasContext::ALIAS() {
  return getToken(LLVMParser::ALIAS, 0);
}

tree::TerminalNode* LLVMParser::AliasContext::IFUNC() {
  return getToken(LLVMParser::IFUNC, 0);
}


size_t LLVMParser::AliasContext::getRuleIndex() const {
  return LLVMParser::RuleAlias;
}


std::any LLVMParser::AliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitAlias(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::AliasContext* LLVMParser::alias() {
  AliasContext *_localctx = _tracker.createInstance<AliasContext>(_ctx, getState());
  enterRule(_localctx, 36, LLVMParser::RuleAlias);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1032);
    _la = _input->LA(1);
    if (!(_la == LLVMParser::ALIAS || _la == LLVMParser::IFUNC)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionDeclContext ------------------------------------------------------------------

LLVMParser::FunctionDeclContext::FunctionDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FunctionDeclContext::DECLARE() {
  return getToken(LLVMParser::DECLARE, 0);
}

LLVMParser::MetadataAttachmentsContext* LLVMParser::FunctionDeclContext::metadataAttachments() {
  return getRuleContext<LLVMParser::MetadataAttachmentsContext>(0);
}

LLVMParser::OptExternLinkageContext* LLVMParser::FunctionDeclContext::optExternLinkage() {
  return getRuleContext<LLVMParser::OptExternLinkageContext>(0);
}

LLVMParser::FunctionHeaderContext* LLVMParser::FunctionDeclContext::functionHeader() {
  return getRuleContext<LLVMParser::FunctionHeaderContext>(0);
}


size_t LLVMParser::FunctionDeclContext::getRuleIndex() const {
  return LLVMParser::RuleFunctionDecl;
}


std::any LLVMParser::FunctionDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFunctionDecl(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FunctionDeclContext* LLVMParser::functionDecl() {
  FunctionDeclContext *_localctx = _tracker.createInstance<FunctionDeclContext>(_ctx, getState());
  enterRule(_localctx, 38, LLVMParser::RuleFunctionDecl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1034);
    match(LLVMParser::DECLARE);
    setState(1035);
    metadataAttachments();
    setState(1036);
    optExternLinkage();
    setState(1037);
    functionHeader();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionDefContext ------------------------------------------------------------------

LLVMParser::FunctionDefContext::FunctionDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FunctionDefContext::DEFINE() {
  return getToken(LLVMParser::DEFINE, 0);
}

LLVMParser::OptLinkageContext* LLVMParser::FunctionDefContext::optLinkage() {
  return getRuleContext<LLVMParser::OptLinkageContext>(0);
}

LLVMParser::FunctionHeaderContext* LLVMParser::FunctionDefContext::functionHeader() {
  return getRuleContext<LLVMParser::FunctionHeaderContext>(0);
}

LLVMParser::MetadataAttachmentsContext* LLVMParser::FunctionDefContext::metadataAttachments() {
  return getRuleContext<LLVMParser::MetadataAttachmentsContext>(0);
}

LLVMParser::FunctionBodyContext* LLVMParser::FunctionDefContext::functionBody() {
  return getRuleContext<LLVMParser::FunctionBodyContext>(0);
}


size_t LLVMParser::FunctionDefContext::getRuleIndex() const {
  return LLVMParser::RuleFunctionDef;
}


std::any LLVMParser::FunctionDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFunctionDef(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FunctionDefContext* LLVMParser::functionDef() {
  FunctionDefContext *_localctx = _tracker.createInstance<FunctionDefContext>(_ctx, getState());
  enterRule(_localctx, 40, LLVMParser::RuleFunctionDef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1039);
    match(LLVMParser::DEFINE);
    setState(1040);
    optLinkage();
    setState(1041);
    functionHeader();
    setState(1042);
    metadataAttachments();
    setState(1043);
    functionBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionHeaderContext ------------------------------------------------------------------

LLVMParser::FunctionHeaderContext::FunctionHeaderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::OptPreemptionSpecifierContext* LLVMParser::FunctionHeaderContext::optPreemptionSpecifier() {
  return getRuleContext<LLVMParser::OptPreemptionSpecifierContext>(0);
}

LLVMParser::OptDLLStorageClassContext* LLVMParser::FunctionHeaderContext::optDLLStorageClass() {
  return getRuleContext<LLVMParser::OptDLLStorageClassContext>(0);
}

LLVMParser::OptCallingConvContext* LLVMParser::FunctionHeaderContext::optCallingConv() {
  return getRuleContext<LLVMParser::OptCallingConvContext>(0);
}

LLVMParser::ReturnAttrsContext* LLVMParser::FunctionHeaderContext::returnAttrs() {
  return getRuleContext<LLVMParser::ReturnAttrsContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::FunctionHeaderContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::GlobalIdentContext* LLVMParser::FunctionHeaderContext::globalIdent() {
  return getRuleContext<LLVMParser::GlobalIdentContext>(0);
}

tree::TerminalNode* LLVMParser::FunctionHeaderContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::ParamsContext* LLVMParser::FunctionHeaderContext::params() {
  return getRuleContext<LLVMParser::ParamsContext>(0);
}

tree::TerminalNode* LLVMParser::FunctionHeaderContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}

LLVMParser::FuncAttrsContext* LLVMParser::FunctionHeaderContext::funcAttrs() {
  return getRuleContext<LLVMParser::FuncAttrsContext>(0);
}

LLVMParser::OptComdatContext* LLVMParser::FunctionHeaderContext::optComdat() {
  return getRuleContext<LLVMParser::OptComdatContext>(0);
}

LLVMParser::OptGCContext* LLVMParser::FunctionHeaderContext::optGC() {
  return getRuleContext<LLVMParser::OptGCContext>(0);
}

LLVMParser::OptPrefixContext* LLVMParser::FunctionHeaderContext::optPrefix() {
  return getRuleContext<LLVMParser::OptPrefixContext>(0);
}

LLVMParser::OptPrologueContext* LLVMParser::FunctionHeaderContext::optPrologue() {
  return getRuleContext<LLVMParser::OptPrologueContext>(0);
}

LLVMParser::OptPersonalityContext* LLVMParser::FunctionHeaderContext::optPersonality() {
  return getRuleContext<LLVMParser::OptPersonalityContext>(0);
}

LLVMParser::VisibilityContext* LLVMParser::FunctionHeaderContext::visibility() {
  return getRuleContext<LLVMParser::VisibilityContext>(0);
}

LLVMParser::UnnamedAddrContext* LLVMParser::FunctionHeaderContext::unnamedAddr() {
  return getRuleContext<LLVMParser::UnnamedAddrContext>(0);
}

LLVMParser::SectionContext* LLVMParser::FunctionHeaderContext::section() {
  return getRuleContext<LLVMParser::SectionContext>(0);
}


size_t LLVMParser::FunctionHeaderContext::getRuleIndex() const {
  return LLVMParser::RuleFunctionHeader;
}


std::any LLVMParser::FunctionHeaderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFunctionHeader(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FunctionHeaderContext* LLVMParser::functionHeader() {
  FunctionHeaderContext *_localctx = _tracker.createInstance<FunctionHeaderContext>(_ctx, getState());
  enterRule(_localctx, 42, LLVMParser::RuleFunctionHeader);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1045);
    optPreemptionSpecifier();
    setState(1047);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::DEFAULT || _la == LLVMParser::HIDDEN_VISIB || _la == LLVMParser::PROTECTED) {
      setState(1046);
      visibility();
    }
    setState(1049);
    optDLLStorageClass();
    setState(1050);
    optCallingConv();
    setState(1051);
    returnAttrs();
    setState(1052);
    llvmType(0);
    setState(1053);
    globalIdent();
    setState(1054);
    match(LLVMParser::LPAREN);
    setState(1055);
    params();
    setState(1056);
    match(LLVMParser::RPAREN);
    setState(1058);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      setState(1057);
      unnamedAddr();
      break;
    }

    default:
      break;
    }
    setState(1060);
    funcAttrs();
    setState(1062);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      setState(1061);
      section();
      break;
    }

    default:
      break;
    }
    setState(1064);
    optComdat();
    setState(1065);
    optGC();
    setState(1066);
    optPrefix();
    setState(1067);
    optPrologue();
    setState(1068);
    optPersonality();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptGCContext ------------------------------------------------------------------

LLVMParser::OptGCContext::OptGCContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OptGCContext::GC() {
  return getToken(LLVMParser::GC, 0);
}

LLVMParser::StringLitContext* LLVMParser::OptGCContext::stringLit() {
  return getRuleContext<LLVMParser::StringLitContext>(0);
}


size_t LLVMParser::OptGCContext::getRuleIndex() const {
  return LLVMParser::RuleOptGC;
}


std::any LLVMParser::OptGCContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptGC(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptGCContext* LLVMParser::optGC() {
  OptGCContext *_localctx = _tracker.createInstance<OptGCContext>(_ctx, getState());
  enterRule(_localctx, 44, LLVMParser::RuleOptGC);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1072);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx)) {
    case 1: {
      setState(1070);
      match(LLVMParser::GC);
      setState(1071);
      stringLit();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptPrefixContext ------------------------------------------------------------------

LLVMParser::OptPrefixContext::OptPrefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OptPrefixContext::PREFIX() {
  return getToken(LLVMParser::PREFIX, 0);
}

LLVMParser::LlvmTypeContext* LLVMParser::OptPrefixContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::ConstantContext* LLVMParser::OptPrefixContext::constant() {
  return getRuleContext<LLVMParser::ConstantContext>(0);
}


size_t LLVMParser::OptPrefixContext::getRuleIndex() const {
  return LLVMParser::RuleOptPrefix;
}


std::any LLVMParser::OptPrefixContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptPrefix(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptPrefixContext* LLVMParser::optPrefix() {
  OptPrefixContext *_localctx = _tracker.createInstance<OptPrefixContext>(_ctx, getState());
  enterRule(_localctx, 46, LLVMParser::RuleOptPrefix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1078);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx)) {
    case 1: {
      setState(1074);
      match(LLVMParser::PREFIX);
      setState(1075);
      llvmType(0);
      setState(1076);
      constant();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptPrologueContext ------------------------------------------------------------------

LLVMParser::OptPrologueContext::OptPrologueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OptPrologueContext::PROLOGUE() {
  return getToken(LLVMParser::PROLOGUE, 0);
}

LLVMParser::LlvmTypeContext* LLVMParser::OptPrologueContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::ConstantContext* LLVMParser::OptPrologueContext::constant() {
  return getRuleContext<LLVMParser::ConstantContext>(0);
}


size_t LLVMParser::OptPrologueContext::getRuleIndex() const {
  return LLVMParser::RuleOptPrologue;
}


std::any LLVMParser::OptPrologueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptPrologue(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptPrologueContext* LLVMParser::optPrologue() {
  OptPrologueContext *_localctx = _tracker.createInstance<OptPrologueContext>(_ctx, getState());
  enterRule(_localctx, 48, LLVMParser::RuleOptPrologue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1084);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
    case 1: {
      setState(1080);
      match(LLVMParser::PROLOGUE);
      setState(1081);
      llvmType(0);
      setState(1082);
      constant();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptPersonalityContext ------------------------------------------------------------------

LLVMParser::OptPersonalityContext::OptPersonalityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OptPersonalityContext::PERSONALITY() {
  return getToken(LLVMParser::PERSONALITY, 0);
}

LLVMParser::LlvmTypeContext* LLVMParser::OptPersonalityContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::ConstantContext* LLVMParser::OptPersonalityContext::constant() {
  return getRuleContext<LLVMParser::ConstantContext>(0);
}


size_t LLVMParser::OptPersonalityContext::getRuleIndex() const {
  return LLVMParser::RuleOptPersonality;
}


std::any LLVMParser::OptPersonalityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptPersonality(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptPersonalityContext* LLVMParser::optPersonality() {
  OptPersonalityContext *_localctx = _tracker.createInstance<OptPersonalityContext>(_ctx, getState());
  enterRule(_localctx, 50, LLVMParser::RuleOptPersonality);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1090);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
    case 1: {
      setState(1086);
      match(LLVMParser::PERSONALITY);
      setState(1087);
      llvmType(0);
      setState(1088);
      constant();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionBodyContext ------------------------------------------------------------------

LLVMParser::FunctionBodyContext::FunctionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FunctionBodyContext::LBRACE() {
  return getToken(LLVMParser::LBRACE, 0);
}

LLVMParser::BasicBlockListContext* LLVMParser::FunctionBodyContext::basicBlockList() {
  return getRuleContext<LLVMParser::BasicBlockListContext>(0);
}

LLVMParser::UseListOrdersContext* LLVMParser::FunctionBodyContext::useListOrders() {
  return getRuleContext<LLVMParser::UseListOrdersContext>(0);
}

tree::TerminalNode* LLVMParser::FunctionBodyContext::RBRACE() {
  return getToken(LLVMParser::RBRACE, 0);
}


size_t LLVMParser::FunctionBodyContext::getRuleIndex() const {
  return LLVMParser::RuleFunctionBody;
}


std::any LLVMParser::FunctionBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFunctionBody(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FunctionBodyContext* LLVMParser::functionBody() {
  FunctionBodyContext *_localctx = _tracker.createInstance<FunctionBodyContext>(_ctx, getState());
  enterRule(_localctx, 52, LLVMParser::RuleFunctionBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1092);
    match(LLVMParser::LBRACE);
    setState(1093);
    basicBlockList(0);
    setState(1094);
    useListOrders();
    setState(1095);
    match(LLVMParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttrGroupDefContext ------------------------------------------------------------------

LLVMParser::AttrGroupDefContext::AttrGroupDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::AttrGroupDefContext::ATTRIBUTES() {
  return getToken(LLVMParser::ATTRIBUTES, 0);
}

LLVMParser::AttrGroupIDContext* LLVMParser::AttrGroupDefContext::attrGroupID() {
  return getRuleContext<LLVMParser::AttrGroupIDContext>(0);
}

tree::TerminalNode* LLVMParser::AttrGroupDefContext::EQSIGN() {
  return getToken(LLVMParser::EQSIGN, 0);
}

tree::TerminalNode* LLVMParser::AttrGroupDefContext::LBRACE() {
  return getToken(LLVMParser::LBRACE, 0);
}

LLVMParser::FuncAttrsContext* LLVMParser::AttrGroupDefContext::funcAttrs() {
  return getRuleContext<LLVMParser::FuncAttrsContext>(0);
}

tree::TerminalNode* LLVMParser::AttrGroupDefContext::RBRACE() {
  return getToken(LLVMParser::RBRACE, 0);
}


size_t LLVMParser::AttrGroupDefContext::getRuleIndex() const {
  return LLVMParser::RuleAttrGroupDef;
}


std::any LLVMParser::AttrGroupDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitAttrGroupDef(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::AttrGroupDefContext* LLVMParser::attrGroupDef() {
  AttrGroupDefContext *_localctx = _tracker.createInstance<AttrGroupDefContext>(_ctx, getState());
  enterRule(_localctx, 54, LLVMParser::RuleAttrGroupDef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1097);
    match(LLVMParser::ATTRIBUTES);
    setState(1098);
    attrGroupID();
    setState(1099);
    match(LLVMParser::EQSIGN);
    setState(1100);
    match(LLVMParser::LBRACE);
    setState(1101);
    funcAttrs();
    setState(1102);
    match(LLVMParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedMetadataDefContext ------------------------------------------------------------------

LLVMParser::NamedMetadataDefContext::NamedMetadataDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::MetadataNameContext* LLVMParser::NamedMetadataDefContext::metadataName() {
  return getRuleContext<LLVMParser::MetadataNameContext>(0);
}

tree::TerminalNode* LLVMParser::NamedMetadataDefContext::EQSIGN() {
  return getToken(LLVMParser::EQSIGN, 0);
}

tree::TerminalNode* LLVMParser::NamedMetadataDefContext::BANG() {
  return getToken(LLVMParser::BANG, 0);
}

tree::TerminalNode* LLVMParser::NamedMetadataDefContext::LBRACE() {
  return getToken(LLVMParser::LBRACE, 0);
}

LLVMParser::MetadataNodesContext* LLVMParser::NamedMetadataDefContext::metadataNodes() {
  return getRuleContext<LLVMParser::MetadataNodesContext>(0);
}

tree::TerminalNode* LLVMParser::NamedMetadataDefContext::RBRACE() {
  return getToken(LLVMParser::RBRACE, 0);
}


size_t LLVMParser::NamedMetadataDefContext::getRuleIndex() const {
  return LLVMParser::RuleNamedMetadataDef;
}


std::any LLVMParser::NamedMetadataDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitNamedMetadataDef(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::NamedMetadataDefContext* LLVMParser::namedMetadataDef() {
  NamedMetadataDefContext *_localctx = _tracker.createInstance<NamedMetadataDefContext>(_ctx, getState());
  enterRule(_localctx, 56, LLVMParser::RuleNamedMetadataDef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1104);
    metadataName();
    setState(1105);
    match(LLVMParser::EQSIGN);
    setState(1106);
    match(LLVMParser::BANG);
    setState(1107);
    match(LLVMParser::LBRACE);
    setState(1108);
    metadataNodes();
    setState(1109);
    match(LLVMParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetadataNodesContext ------------------------------------------------------------------

LLVMParser::MetadataNodesContext::MetadataNodesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::MetadataNodeListContext* LLVMParser::MetadataNodesContext::metadataNodeList() {
  return getRuleContext<LLVMParser::MetadataNodeListContext>(0);
}


size_t LLVMParser::MetadataNodesContext::getRuleIndex() const {
  return LLVMParser::RuleMetadataNodes;
}


std::any LLVMParser::MetadataNodesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitMetadataNodes(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::MetadataNodesContext* LLVMParser::metadataNodes() {
  MetadataNodesContext *_localctx = _tracker.createInstance<MetadataNodesContext>(_ctx, getState());
  enterRule(_localctx, 58, LLVMParser::RuleMetadataNodes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1112);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::NOTDIEXPRESSION || _la == LLVMParser::METADATA_ID) {
      setState(1111);
      metadataNodeList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetadataNodeListContext ------------------------------------------------------------------

LLVMParser::MetadataNodeListContext::MetadataNodeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::MetadataNodeContext* LLVMParser::MetadataNodeListContext::metadataNode() {
  return getRuleContext<LLVMParser::MetadataNodeContext>(0);
}

LLVMParser::MetadataNodeListContext* LLVMParser::MetadataNodeListContext::metadataNodeList() {
  return getRuleContext<LLVMParser::MetadataNodeListContext>(0);
}

tree::TerminalNode* LLVMParser::MetadataNodeListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::MetadataNodeListContext::getRuleIndex() const {
  return LLVMParser::RuleMetadataNodeList;
}


std::any LLVMParser::MetadataNodeListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitMetadataNodeList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::MetadataNodeListContext* LLVMParser::metadataNodeList() {
   return metadataNodeList(0);
}

LLVMParser::MetadataNodeListContext* LLVMParser::metadataNodeList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::MetadataNodeListContext *_localctx = _tracker.createInstance<MetadataNodeListContext>(_ctx, parentState);
  LLVMParser::MetadataNodeListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 60;
  enterRecursionRule(_localctx, 60, LLVMParser::RuleMetadataNodeList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1115);
    metadataNode();
    _ctx->stop = _input->LT(-1);
    setState(1122);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<MetadataNodeListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleMetadataNodeList);
        setState(1117);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1118);
        match(LLVMParser::COMMA);
        setState(1119);
        metadataNode(); 
      }
      setState(1124);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- MetadataNodeContext ------------------------------------------------------------------

LLVMParser::MetadataNodeContext::MetadataNodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::MetadataIDContext* LLVMParser::MetadataNodeContext::metadataID() {
  return getRuleContext<LLVMParser::MetadataIDContext>(0);
}

LLVMParser::DiExpressionContext* LLVMParser::MetadataNodeContext::diExpression() {
  return getRuleContext<LLVMParser::DiExpressionContext>(0);
}


size_t LLVMParser::MetadataNodeContext::getRuleIndex() const {
  return LLVMParser::RuleMetadataNode;
}


std::any LLVMParser::MetadataNodeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitMetadataNode(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::MetadataNodeContext* LLVMParser::metadataNode() {
  MetadataNodeContext *_localctx = _tracker.createInstance<MetadataNodeContext>(_ctx, getState());
  enterRule(_localctx, 62, LLVMParser::RuleMetadataNode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1127);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::METADATA_ID: {
        enterOuterAlt(_localctx, 1);
        setState(1125);
        metadataID();
        break;
      }

      case LLVMParser::NOTDIEXPRESSION: {
        enterOuterAlt(_localctx, 2);
        setState(1126);
        diExpression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetadataDefContext ------------------------------------------------------------------

LLVMParser::MetadataDefContext::MetadataDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::MetadataIDContext* LLVMParser::MetadataDefContext::metadataID() {
  return getRuleContext<LLVMParser::MetadataIDContext>(0);
}

tree::TerminalNode* LLVMParser::MetadataDefContext::EQSIGN() {
  return getToken(LLVMParser::EQSIGN, 0);
}

LLVMParser::OptDistinctContext* LLVMParser::MetadataDefContext::optDistinct() {
  return getRuleContext<LLVMParser::OptDistinctContext>(0);
}

LLVMParser::MdTupleContext* LLVMParser::MetadataDefContext::mdTuple() {
  return getRuleContext<LLVMParser::MdTupleContext>(0);
}

LLVMParser::SpecializedMDNodeContext* LLVMParser::MetadataDefContext::specializedMDNode() {
  return getRuleContext<LLVMParser::SpecializedMDNodeContext>(0);
}


size_t LLVMParser::MetadataDefContext::getRuleIndex() const {
  return LLVMParser::RuleMetadataDef;
}


std::any LLVMParser::MetadataDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitMetadataDef(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::MetadataDefContext* LLVMParser::metadataDef() {
  MetadataDefContext *_localctx = _tracker.createInstance<MetadataDefContext>(_ctx, getState());
  enterRule(_localctx, 64, LLVMParser::RuleMetadataDef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1139);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1129);
      metadataID();
      setState(1130);
      match(LLVMParser::EQSIGN);
      setState(1131);
      optDistinct();
      setState(1132);
      mdTuple();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1134);
      metadataID();
      setState(1135);
      match(LLVMParser::EQSIGN);
      setState(1136);
      optDistinct();
      setState(1137);
      specializedMDNode();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptDistinctContext ------------------------------------------------------------------

LLVMParser::OptDistinctContext::OptDistinctContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OptDistinctContext::DISTINCT() {
  return getToken(LLVMParser::DISTINCT, 0);
}


size_t LLVMParser::OptDistinctContext::getRuleIndex() const {
  return LLVMParser::RuleOptDistinct;
}


std::any LLVMParser::OptDistinctContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptDistinct(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptDistinctContext* LLVMParser::optDistinct() {
  OptDistinctContext *_localctx = _tracker.createInstance<OptDistinctContext>(_ctx, getState());
  enterRule(_localctx, 66, LLVMParser::RuleOptDistinct);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1142);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::DISTINCT) {
      setState(1141);
      match(LLVMParser::DISTINCT);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UseListOrdersContext ------------------------------------------------------------------

LLVMParser::UseListOrdersContext::UseListOrdersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::UseListOrderListContext* LLVMParser::UseListOrdersContext::useListOrderList() {
  return getRuleContext<LLVMParser::UseListOrderListContext>(0);
}


size_t LLVMParser::UseListOrdersContext::getRuleIndex() const {
  return LLVMParser::RuleUseListOrders;
}


std::any LLVMParser::UseListOrdersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitUseListOrders(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::UseListOrdersContext* LLVMParser::useListOrders() {
  UseListOrdersContext *_localctx = _tracker.createInstance<UseListOrdersContext>(_ctx, getState());
  enterRule(_localctx, 68, LLVMParser::RuleUseListOrders);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1145);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::USELISTORDER) {
      setState(1144);
      useListOrderList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UseListOrderListContext ------------------------------------------------------------------

LLVMParser::UseListOrderListContext::UseListOrderListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::UseListOrderContext* LLVMParser::UseListOrderListContext::useListOrder() {
  return getRuleContext<LLVMParser::UseListOrderContext>(0);
}

LLVMParser::UseListOrderListContext* LLVMParser::UseListOrderListContext::useListOrderList() {
  return getRuleContext<LLVMParser::UseListOrderListContext>(0);
}


size_t LLVMParser::UseListOrderListContext::getRuleIndex() const {
  return LLVMParser::RuleUseListOrderList;
}


std::any LLVMParser::UseListOrderListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitUseListOrderList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::UseListOrderListContext* LLVMParser::useListOrderList() {
   return useListOrderList(0);
}

LLVMParser::UseListOrderListContext* LLVMParser::useListOrderList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::UseListOrderListContext *_localctx = _tracker.createInstance<UseListOrderListContext>(_ctx, parentState);
  LLVMParser::UseListOrderListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 70;
  enterRecursionRule(_localctx, 70, LLVMParser::RuleUseListOrderList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1148);
    useListOrder();
    _ctx->stop = _input->LT(-1);
    setState(1154);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<UseListOrderListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleUseListOrderList);
        setState(1150);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1151);
        useListOrder(); 
      }
      setState(1156);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- UseListOrderContext ------------------------------------------------------------------

LLVMParser::UseListOrderContext::UseListOrderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::UseListOrderContext::USELISTORDER() {
  return getToken(LLVMParser::USELISTORDER, 0);
}

LLVMParser::LlvmTypeContext* LLVMParser::UseListOrderContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::ValueContext* LLVMParser::UseListOrderContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::UseListOrderContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

tree::TerminalNode* LLVMParser::UseListOrderContext::LBRACE() {
  return getToken(LLVMParser::LBRACE, 0);
}

LLVMParser::IndexListContext* LLVMParser::UseListOrderContext::indexList() {
  return getRuleContext<LLVMParser::IndexListContext>(0);
}

tree::TerminalNode* LLVMParser::UseListOrderContext::RBRACE() {
  return getToken(LLVMParser::RBRACE, 0);
}


size_t LLVMParser::UseListOrderContext::getRuleIndex() const {
  return LLVMParser::RuleUseListOrder;
}


std::any LLVMParser::UseListOrderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitUseListOrder(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::UseListOrderContext* LLVMParser::useListOrder() {
  UseListOrderContext *_localctx = _tracker.createInstance<UseListOrderContext>(_ctx, getState());
  enterRule(_localctx, 72, LLVMParser::RuleUseListOrder);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1157);
    match(LLVMParser::USELISTORDER);
    setState(1158);
    llvmType(0);
    setState(1159);
    value();
    setState(1160);
    match(LLVMParser::COMMA);
    setState(1161);
    match(LLVMParser::LBRACE);
    setState(1162);
    indexList(0);
    setState(1163);
    match(LLVMParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UseListOrderBBContext ------------------------------------------------------------------

LLVMParser::UseListOrderBBContext::UseListOrderBBContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::UseListOrderBBContext::USELISTORDER_BB() {
  return getToken(LLVMParser::USELISTORDER_BB, 0);
}

LLVMParser::GlobalIdentContext* LLVMParser::UseListOrderBBContext::globalIdent() {
  return getRuleContext<LLVMParser::GlobalIdentContext>(0);
}

std::vector<tree::TerminalNode *> LLVMParser::UseListOrderBBContext::COMMA() {
  return getTokens(LLVMParser::COMMA);
}

tree::TerminalNode* LLVMParser::UseListOrderBBContext::COMMA(size_t i) {
  return getToken(LLVMParser::COMMA, i);
}

LLVMParser::LocalIdentContext* LLVMParser::UseListOrderBBContext::localIdent() {
  return getRuleContext<LLVMParser::LocalIdentContext>(0);
}

tree::TerminalNode* LLVMParser::UseListOrderBBContext::LBRACE() {
  return getToken(LLVMParser::LBRACE, 0);
}

LLVMParser::IndexListContext* LLVMParser::UseListOrderBBContext::indexList() {
  return getRuleContext<LLVMParser::IndexListContext>(0);
}

tree::TerminalNode* LLVMParser::UseListOrderBBContext::RBRACE() {
  return getToken(LLVMParser::RBRACE, 0);
}


size_t LLVMParser::UseListOrderBBContext::getRuleIndex() const {
  return LLVMParser::RuleUseListOrderBB;
}


std::any LLVMParser::UseListOrderBBContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitUseListOrderBB(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::UseListOrderBBContext* LLVMParser::useListOrderBB() {
  UseListOrderBBContext *_localctx = _tracker.createInstance<UseListOrderBBContext>(_ctx, getState());
  enterRule(_localctx, 74, LLVMParser::RuleUseListOrderBB);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1165);
    match(LLVMParser::USELISTORDER_BB);
    setState(1166);
    globalIdent();
    setState(1167);
    match(LLVMParser::COMMA);
    setState(1168);
    localIdent();
    setState(1169);
    match(LLVMParser::COMMA);
    setState(1170);
    match(LLVMParser::LBRACE);
    setState(1171);
    indexList(0);
    setState(1172);
    match(LLVMParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlobalIdentContext ------------------------------------------------------------------

LLVMParser::GlobalIdentContext::GlobalIdentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::GlobalIdentContext::GLOBAL_IDENT() {
  return getToken(LLVMParser::GLOBAL_IDENT, 0);
}


size_t LLVMParser::GlobalIdentContext::getRuleIndex() const {
  return LLVMParser::RuleGlobalIdent;
}


std::any LLVMParser::GlobalIdentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitGlobalIdent(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::GlobalIdentContext* LLVMParser::globalIdent() {
  GlobalIdentContext *_localctx = _tracker.createInstance<GlobalIdentContext>(_ctx, getState());
  enterRule(_localctx, 76, LLVMParser::RuleGlobalIdent);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1174);
    match(LLVMParser::GLOBAL_IDENT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalIdentContext ------------------------------------------------------------------

LLVMParser::LocalIdentContext::LocalIdentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::LocalIdentContext::LOCAL_IDENT() {
  return getToken(LLVMParser::LOCAL_IDENT, 0);
}


size_t LLVMParser::LocalIdentContext::getRuleIndex() const {
  return LLVMParser::RuleLocalIdent;
}


std::any LLVMParser::LocalIdentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitLocalIdent(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::LocalIdentContext* LLVMParser::localIdent() {
  LocalIdentContext *_localctx = _tracker.createInstance<LocalIdentContext>(_ctx, getState());
  enterRule(_localctx, 78, LLVMParser::RuleLocalIdent);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1176);
    match(LLVMParser::LOCAL_IDENT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelIdentContext ------------------------------------------------------------------

LLVMParser::LabelIdentContext::LabelIdentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::LabelIdentContext::LABEL_IDENT() {
  return getToken(LLVMParser::LABEL_IDENT, 0);
}


size_t LLVMParser::LabelIdentContext::getRuleIndex() const {
  return LLVMParser::RuleLabelIdent;
}


std::any LLVMParser::LabelIdentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitLabelIdent(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::LabelIdentContext* LLVMParser::labelIdent() {
  LabelIdentContext *_localctx = _tracker.createInstance<LabelIdentContext>(_ctx, getState());
  enterRule(_localctx, 80, LLVMParser::RuleLabelIdent);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1178);
    match(LLVMParser::LABEL_IDENT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttrGroupIDContext ------------------------------------------------------------------

LLVMParser::AttrGroupIDContext::AttrGroupIDContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::AttrGroupIDContext::ATTR_GROUP_ID() {
  return getToken(LLVMParser::ATTR_GROUP_ID, 0);
}


size_t LLVMParser::AttrGroupIDContext::getRuleIndex() const {
  return LLVMParser::RuleAttrGroupID;
}


std::any LLVMParser::AttrGroupIDContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitAttrGroupID(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::AttrGroupIDContext* LLVMParser::attrGroupID() {
  AttrGroupIDContext *_localctx = _tracker.createInstance<AttrGroupIDContext>(_ctx, getState());
  enterRule(_localctx, 82, LLVMParser::RuleAttrGroupID);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1180);
    match(LLVMParser::ATTR_GROUP_ID);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComdatNameContext ------------------------------------------------------------------

LLVMParser::ComdatNameContext::ComdatNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ComdatNameContext::COMDAT_NAME() {
  return getToken(LLVMParser::COMDAT_NAME, 0);
}


size_t LLVMParser::ComdatNameContext::getRuleIndex() const {
  return LLVMParser::RuleComdatName;
}


std::any LLVMParser::ComdatNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitComdatName(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ComdatNameContext* LLVMParser::comdatName() {
  ComdatNameContext *_localctx = _tracker.createInstance<ComdatNameContext>(_ctx, getState());
  enterRule(_localctx, 84, LLVMParser::RuleComdatName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1182);
    match(LLVMParser::COMDAT_NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetadataNameContext ------------------------------------------------------------------

LLVMParser::MetadataNameContext::MetadataNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::MetadataNameContext::METADATA_NAME() {
  return getToken(LLVMParser::METADATA_NAME, 0);
}


size_t LLVMParser::MetadataNameContext::getRuleIndex() const {
  return LLVMParser::RuleMetadataName;
}


std::any LLVMParser::MetadataNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitMetadataName(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::MetadataNameContext* LLVMParser::metadataName() {
  MetadataNameContext *_localctx = _tracker.createInstance<MetadataNameContext>(_ctx, getState());
  enterRule(_localctx, 86, LLVMParser::RuleMetadataName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1184);
    match(LLVMParser::METADATA_NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetadataIDContext ------------------------------------------------------------------

LLVMParser::MetadataIDContext::MetadataIDContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::MetadataIDContext::METADATA_ID() {
  return getToken(LLVMParser::METADATA_ID, 0);
}


size_t LLVMParser::MetadataIDContext::getRuleIndex() const {
  return LLVMParser::RuleMetadataID;
}


std::any LLVMParser::MetadataIDContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitMetadataID(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::MetadataIDContext* LLVMParser::metadataID() {
  MetadataIDContext *_localctx = _tracker.createInstance<MetadataIDContext>(_ctx, getState());
  enterRule(_localctx, 88, LLVMParser::RuleMetadataID);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1186);
    match(LLVMParser::METADATA_ID);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LlvmTypeContext ------------------------------------------------------------------

LLVMParser::LlvmTypeContext::LlvmTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::VoidTypeContext* LLVMParser::LlvmTypeContext::voidType() {
  return getRuleContext<LLVMParser::VoidTypeContext>(0);
}

LLVMParser::ConcreteNonRecTypeContext* LLVMParser::LlvmTypeContext::concreteNonRecType() {
  return getRuleContext<LLVMParser::ConcreteNonRecTypeContext>(0);
}

LLVMParser::MetadataTypeContext* LLVMParser::LlvmTypeContext::metadataType() {
  return getRuleContext<LLVMParser::MetadataTypeContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::LlvmTypeContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

tree::TerminalNode* LLVMParser::LlvmTypeContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::ParamsContext* LLVMParser::LlvmTypeContext::params() {
  return getRuleContext<LLVMParser::ParamsContext>(0);
}

tree::TerminalNode* LLVMParser::LlvmTypeContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}

LLVMParser::OptAddrSpaceContext* LLVMParser::LlvmTypeContext::optAddrSpace() {
  return getRuleContext<LLVMParser::OptAddrSpaceContext>(0);
}

tree::TerminalNode* LLVMParser::LlvmTypeContext::STAR() {
  return getToken(LLVMParser::STAR, 0);
}


size_t LLVMParser::LlvmTypeContext::getRuleIndex() const {
  return LLVMParser::RuleLlvmType;
}


std::any LLVMParser::LlvmTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitLlvmType(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::LlvmTypeContext* LLVMParser::llvmType() {
   return llvmType(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::llvmType(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::LlvmTypeContext *_localctx = _tracker.createInstance<LlvmTypeContext>(_ctx, parentState);
  LLVMParser::LlvmTypeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 90;
  enterRecursionRule(_localctx, 90, LLVMParser::RuleLlvmType, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1192);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::VOID: {
        setState(1189);
        voidType();
        break;
      }

      case LLVMParser::LT:
      case LLVMParser::LBRACK:
      case LLVMParser::LBRACE:
      case LLVMParser::DOUBLE:
      case LLVMParser::FLOAT:
      case LLVMParser::FP128:
      case LLVMParser::HALF:
      case LLVMParser::LABEL:
      case LLVMParser::PPC_FP128:
      case LLVMParser::TOKEN:
      case LLVMParser::X86_FP80:
      case LLVMParser::X86_MMX:
      case LLVMParser::INT_TYPE:
      case LLVMParser::LOCAL_IDENT: {
        setState(1190);
        concreteNonRecType();
        break;
      }

      case LLVMParser::METADATA: {
        setState(1191);
        metadataType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(1205);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1203);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<LlvmTypeContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleLlvmType);
          setState(1194);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(1195);
          match(LLVMParser::LPAREN);
          setState(1196);
          params();
          setState(1197);
          match(LLVMParser::RPAREN);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<LlvmTypeContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleLlvmType);
          setState(1199);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(1200);
          optAddrSpace();
          setState(1201);
          match(LLVMParser::STAR);
          break;
        }

        default:
          break;
        } 
      }
      setState(1207);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ConcreteNonRecTypeContext ------------------------------------------------------------------

LLVMParser::ConcreteNonRecTypeContext::ConcreteNonRecTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::IntTypeContext* LLVMParser::ConcreteNonRecTypeContext::intType() {
  return getRuleContext<LLVMParser::IntTypeContext>(0);
}

LLVMParser::FloatTypeContext* LLVMParser::ConcreteNonRecTypeContext::floatType() {
  return getRuleContext<LLVMParser::FloatTypeContext>(0);
}

LLVMParser::VectorTypeContext* LLVMParser::ConcreteNonRecTypeContext::vectorType() {
  return getRuleContext<LLVMParser::VectorTypeContext>(0);
}

LLVMParser::LabelTypeContext* LLVMParser::ConcreteNonRecTypeContext::labelType() {
  return getRuleContext<LLVMParser::LabelTypeContext>(0);
}

LLVMParser::ArrayTypeContext* LLVMParser::ConcreteNonRecTypeContext::arrayType() {
  return getRuleContext<LLVMParser::ArrayTypeContext>(0);
}

LLVMParser::StructTypeContext* LLVMParser::ConcreteNonRecTypeContext::structType() {
  return getRuleContext<LLVMParser::StructTypeContext>(0);
}

LLVMParser::NamedTypeContext* LLVMParser::ConcreteNonRecTypeContext::namedType() {
  return getRuleContext<LLVMParser::NamedTypeContext>(0);
}

LLVMParser::MmxTypeContext* LLVMParser::ConcreteNonRecTypeContext::mmxType() {
  return getRuleContext<LLVMParser::MmxTypeContext>(0);
}

LLVMParser::TokenTypeContext* LLVMParser::ConcreteNonRecTypeContext::tokenType() {
  return getRuleContext<LLVMParser::TokenTypeContext>(0);
}


size_t LLVMParser::ConcreteNonRecTypeContext::getRuleIndex() const {
  return LLVMParser::RuleConcreteNonRecType;
}


std::any LLVMParser::ConcreteNonRecTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitConcreteNonRecType(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ConcreteNonRecTypeContext* LLVMParser::concreteNonRecType() {
  ConcreteNonRecTypeContext *_localctx = _tracker.createInstance<ConcreteNonRecTypeContext>(_ctx, getState());
  enterRule(_localctx, 92, LLVMParser::RuleConcreteNonRecType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1217);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1208);
      intType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1209);
      floatType();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1210);
      vectorType();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1211);
      labelType();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1212);
      arrayType();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1213);
      structType();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1214);
      namedType();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1215);
      mmxType();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1216);
      tokenType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VoidTypeContext ------------------------------------------------------------------

LLVMParser::VoidTypeContext::VoidTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::VoidTypeContext::VOID() {
  return getToken(LLVMParser::VOID, 0);
}


size_t LLVMParser::VoidTypeContext::getRuleIndex() const {
  return LLVMParser::RuleVoidType;
}


std::any LLVMParser::VoidTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitVoidType(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::VoidTypeContext* LLVMParser::voidType() {
  VoidTypeContext *_localctx = _tracker.createInstance<VoidTypeContext>(_ctx, getState());
  enterRule(_localctx, 94, LLVMParser::RuleVoidType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1219);
    match(LLVMParser::VOID);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntTypeContext ------------------------------------------------------------------

LLVMParser::IntTypeContext::IntTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::IntTypeContext::INT_TYPE() {
  return getToken(LLVMParser::INT_TYPE, 0);
}


size_t LLVMParser::IntTypeContext::getRuleIndex() const {
  return LLVMParser::RuleIntType;
}


std::any LLVMParser::IntTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitIntType(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::IntTypeContext* LLVMParser::intType() {
  IntTypeContext *_localctx = _tracker.createInstance<IntTypeContext>(_ctx, getState());
  enterRule(_localctx, 96, LLVMParser::RuleIntType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1221);
    match(LLVMParser::INT_TYPE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatTypeContext ------------------------------------------------------------------

LLVMParser::FloatTypeContext::FloatTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::FloatKindContext* LLVMParser::FloatTypeContext::floatKind() {
  return getRuleContext<LLVMParser::FloatKindContext>(0);
}


size_t LLVMParser::FloatTypeContext::getRuleIndex() const {
  return LLVMParser::RuleFloatType;
}


std::any LLVMParser::FloatTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFloatType(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FloatTypeContext* LLVMParser::floatType() {
  FloatTypeContext *_localctx = _tracker.createInstance<FloatTypeContext>(_ctx, getState());
  enterRule(_localctx, 98, LLVMParser::RuleFloatType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1223);
    floatKind();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatKindContext ------------------------------------------------------------------

LLVMParser::FloatKindContext::FloatKindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FloatKindContext::HALF() {
  return getToken(LLVMParser::HALF, 0);
}

tree::TerminalNode* LLVMParser::FloatKindContext::FLOAT() {
  return getToken(LLVMParser::FLOAT, 0);
}

tree::TerminalNode* LLVMParser::FloatKindContext::DOUBLE() {
  return getToken(LLVMParser::DOUBLE, 0);
}

tree::TerminalNode* LLVMParser::FloatKindContext::X86_FP80() {
  return getToken(LLVMParser::X86_FP80, 0);
}

tree::TerminalNode* LLVMParser::FloatKindContext::FP128() {
  return getToken(LLVMParser::FP128, 0);
}

tree::TerminalNode* LLVMParser::FloatKindContext::PPC_FP128() {
  return getToken(LLVMParser::PPC_FP128, 0);
}


size_t LLVMParser::FloatKindContext::getRuleIndex() const {
  return LLVMParser::RuleFloatKind;
}


std::any LLVMParser::FloatKindContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFloatKind(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FloatKindContext* LLVMParser::floatKind() {
  FloatKindContext *_localctx = _tracker.createInstance<FloatKindContext>(_ctx, getState());
  enterRule(_localctx, 100, LLVMParser::RuleFloatKind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1225);
    _la = _input->LA(1);
    if (!(((((_la - 126) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 126)) & 2251821288521729) != 0) || _la == LLVMParser::PPC_FP128 || _la == LLVMParser::X86_FP80)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MmxTypeContext ------------------------------------------------------------------

LLVMParser::MmxTypeContext::MmxTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::MmxTypeContext::X86_MMX() {
  return getToken(LLVMParser::X86_MMX, 0);
}


size_t LLVMParser::MmxTypeContext::getRuleIndex() const {
  return LLVMParser::RuleMmxType;
}


std::any LLVMParser::MmxTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitMmxType(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::MmxTypeContext* LLVMParser::mmxType() {
  MmxTypeContext *_localctx = _tracker.createInstance<MmxTypeContext>(_ctx, getState());
  enterRule(_localctx, 102, LLVMParser::RuleMmxType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1227);
    match(LLVMParser::X86_MMX);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptAddrSpaceContext ------------------------------------------------------------------

LLVMParser::OptAddrSpaceContext::OptAddrSpaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::AddrSpaceContext* LLVMParser::OptAddrSpaceContext::addrSpace() {
  return getRuleContext<LLVMParser::AddrSpaceContext>(0);
}


size_t LLVMParser::OptAddrSpaceContext::getRuleIndex() const {
  return LLVMParser::RuleOptAddrSpace;
}


std::any LLVMParser::OptAddrSpaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptAddrSpace(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptAddrSpaceContext* LLVMParser::optAddrSpace() {
  OptAddrSpaceContext *_localctx = _tracker.createInstance<OptAddrSpaceContext>(_ctx, getState());
  enterRule(_localctx, 104, LLVMParser::RuleOptAddrSpace);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1230);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::ADDRSPACE) {
      setState(1229);
      addrSpace();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddrSpaceContext ------------------------------------------------------------------

LLVMParser::AddrSpaceContext::AddrSpaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::AddrSpaceContext::ADDRSPACE() {
  return getToken(LLVMParser::ADDRSPACE, 0);
}

tree::TerminalNode* LLVMParser::AddrSpaceContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

tree::TerminalNode* LLVMParser::AddrSpaceContext::INT_LIT() {
  return getToken(LLVMParser::INT_LIT, 0);
}

tree::TerminalNode* LLVMParser::AddrSpaceContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::AddrSpaceContext::getRuleIndex() const {
  return LLVMParser::RuleAddrSpace;
}


std::any LLVMParser::AddrSpaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitAddrSpace(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::AddrSpaceContext* LLVMParser::addrSpace() {
  AddrSpaceContext *_localctx = _tracker.createInstance<AddrSpaceContext>(_ctx, getState());
  enterRule(_localctx, 106, LLVMParser::RuleAddrSpace);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1232);
    match(LLVMParser::ADDRSPACE);
    setState(1233);
    match(LLVMParser::LPAREN);
    setState(1234);
    match(LLVMParser::INT_LIT);
    setState(1235);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VectorTypeContext ------------------------------------------------------------------

LLVMParser::VectorTypeContext::VectorTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::VectorTypeContext::LT() {
  return getToken(LLVMParser::LT, 0);
}

tree::TerminalNode* LLVMParser::VectorTypeContext::INT_LIT() {
  return getToken(LLVMParser::INT_LIT, 0);
}

tree::TerminalNode* LLVMParser::VectorTypeContext::X() {
  return getToken(LLVMParser::X, 0);
}

LLVMParser::LlvmTypeContext* LLVMParser::VectorTypeContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

tree::TerminalNode* LLVMParser::VectorTypeContext::GT() {
  return getToken(LLVMParser::GT, 0);
}


size_t LLVMParser::VectorTypeContext::getRuleIndex() const {
  return LLVMParser::RuleVectorType;
}


std::any LLVMParser::VectorTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitVectorType(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::VectorTypeContext* LLVMParser::vectorType() {
  VectorTypeContext *_localctx = _tracker.createInstance<VectorTypeContext>(_ctx, getState());
  enterRule(_localctx, 108, LLVMParser::RuleVectorType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1237);
    match(LLVMParser::LT);
    setState(1238);
    match(LLVMParser::INT_LIT);
    setState(1239);
    match(LLVMParser::X);
    setState(1240);
    llvmType(0);
    setState(1241);
    match(LLVMParser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelTypeContext ------------------------------------------------------------------

LLVMParser::LabelTypeContext::LabelTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::LabelTypeContext::LABEL() {
  return getToken(LLVMParser::LABEL, 0);
}


size_t LLVMParser::LabelTypeContext::getRuleIndex() const {
  return LLVMParser::RuleLabelType;
}


std::any LLVMParser::LabelTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitLabelType(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::LabelTypeContext* LLVMParser::labelType() {
  LabelTypeContext *_localctx = _tracker.createInstance<LabelTypeContext>(_ctx, getState());
  enterRule(_localctx, 110, LLVMParser::RuleLabelType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1243);
    match(LLVMParser::LABEL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TokenTypeContext ------------------------------------------------------------------

LLVMParser::TokenTypeContext::TokenTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::TokenTypeContext::TOKEN() {
  return getToken(LLVMParser::TOKEN, 0);
}


size_t LLVMParser::TokenTypeContext::getRuleIndex() const {
  return LLVMParser::RuleTokenType;
}


std::any LLVMParser::TokenTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitTokenType(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::TokenTypeContext* LLVMParser::tokenType() {
  TokenTypeContext *_localctx = _tracker.createInstance<TokenTypeContext>(_ctx, getState());
  enterRule(_localctx, 112, LLVMParser::RuleTokenType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1245);
    match(LLVMParser::TOKEN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetadataTypeContext ------------------------------------------------------------------

LLVMParser::MetadataTypeContext::MetadataTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::MetadataTypeContext::METADATA() {
  return getToken(LLVMParser::METADATA, 0);
}


size_t LLVMParser::MetadataTypeContext::getRuleIndex() const {
  return LLVMParser::RuleMetadataType;
}


std::any LLVMParser::MetadataTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitMetadataType(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::MetadataTypeContext* LLVMParser::metadataType() {
  MetadataTypeContext *_localctx = _tracker.createInstance<MetadataTypeContext>(_ctx, getState());
  enterRule(_localctx, 114, LLVMParser::RuleMetadataType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1247);
    match(LLVMParser::METADATA);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayTypeContext ------------------------------------------------------------------

LLVMParser::ArrayTypeContext::ArrayTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ArrayTypeContext::LBRACK() {
  return getToken(LLVMParser::LBRACK, 0);
}

tree::TerminalNode* LLVMParser::ArrayTypeContext::INT_LIT() {
  return getToken(LLVMParser::INT_LIT, 0);
}

tree::TerminalNode* LLVMParser::ArrayTypeContext::X() {
  return getToken(LLVMParser::X, 0);
}

LLVMParser::LlvmTypeContext* LLVMParser::ArrayTypeContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

tree::TerminalNode* LLVMParser::ArrayTypeContext::RBRACK() {
  return getToken(LLVMParser::RBRACK, 0);
}


size_t LLVMParser::ArrayTypeContext::getRuleIndex() const {
  return LLVMParser::RuleArrayType;
}


std::any LLVMParser::ArrayTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitArrayType(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ArrayTypeContext* LLVMParser::arrayType() {
  ArrayTypeContext *_localctx = _tracker.createInstance<ArrayTypeContext>(_ctx, getState());
  enterRule(_localctx, 116, LLVMParser::RuleArrayType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1249);
    match(LLVMParser::LBRACK);
    setState(1250);
    match(LLVMParser::INT_LIT);
    setState(1251);
    match(LLVMParser::X);
    setState(1252);
    llvmType(0);
    setState(1253);
    match(LLVMParser::RBRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructTypeContext ------------------------------------------------------------------

LLVMParser::StructTypeContext::StructTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::StructTypeContext::LBRACE() {
  return getToken(LLVMParser::LBRACE, 0);
}

tree::TerminalNode* LLVMParser::StructTypeContext::RBRACE() {
  return getToken(LLVMParser::RBRACE, 0);
}

LLVMParser::TypeListContext* LLVMParser::StructTypeContext::typeList() {
  return getRuleContext<LLVMParser::TypeListContext>(0);
}

tree::TerminalNode* LLVMParser::StructTypeContext::LT() {
  return getToken(LLVMParser::LT, 0);
}

tree::TerminalNode* LLVMParser::StructTypeContext::GT() {
  return getToken(LLVMParser::GT, 0);
}


size_t LLVMParser::StructTypeContext::getRuleIndex() const {
  return LLVMParser::RuleStructType;
}


std::any LLVMParser::StructTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitStructType(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::StructTypeContext* LLVMParser::structType() {
  StructTypeContext *_localctx = _tracker.createInstance<StructTypeContext>(_ctx, getState());
  enterRule(_localctx, 118, LLVMParser::RuleStructType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1271);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1255);
      match(LLVMParser::LBRACE);
      setState(1256);
      match(LLVMParser::RBRACE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1257);
      match(LLVMParser::LBRACE);
      setState(1258);
      typeList(0);
      setState(1259);
      match(LLVMParser::RBRACE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1261);
      match(LLVMParser::LT);
      setState(1262);
      match(LLVMParser::LBRACE);
      setState(1263);
      match(LLVMParser::RBRACE);
      setState(1264);
      match(LLVMParser::GT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1265);
      match(LLVMParser::LT);
      setState(1266);
      match(LLVMParser::LBRACE);
      setState(1267);
      typeList(0);
      setState(1268);
      match(LLVMParser::RBRACE);
      setState(1269);
      match(LLVMParser::GT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeListContext ------------------------------------------------------------------

LLVMParser::TypeListContext::TypeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::LlvmTypeContext* LLVMParser::TypeListContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::TypeListContext* LLVMParser::TypeListContext::typeList() {
  return getRuleContext<LLVMParser::TypeListContext>(0);
}

tree::TerminalNode* LLVMParser::TypeListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::TypeListContext::getRuleIndex() const {
  return LLVMParser::RuleTypeList;
}


std::any LLVMParser::TypeListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitTypeList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::TypeListContext* LLVMParser::typeList() {
   return typeList(0);
}

LLVMParser::TypeListContext* LLVMParser::typeList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::TypeListContext *_localctx = _tracker.createInstance<TypeListContext>(_ctx, parentState);
  LLVMParser::TypeListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 120;
  enterRecursionRule(_localctx, 120, LLVMParser::RuleTypeList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1274);
    llvmType(0);
    _ctx->stop = _input->LT(-1);
    setState(1281);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<TypeListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleTypeList);
        setState(1276);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1277);
        match(LLVMParser::COMMA);
        setState(1278);
        llvmType(0); 
      }
      setState(1283);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- OpaqueTypeContext ------------------------------------------------------------------

LLVMParser::OpaqueTypeContext::OpaqueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OpaqueTypeContext::OPAQUE() {
  return getToken(LLVMParser::OPAQUE, 0);
}


size_t LLVMParser::OpaqueTypeContext::getRuleIndex() const {
  return LLVMParser::RuleOpaqueType;
}


std::any LLVMParser::OpaqueTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOpaqueType(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OpaqueTypeContext* LLVMParser::opaqueType() {
  OpaqueTypeContext *_localctx = _tracker.createInstance<OpaqueTypeContext>(_ctx, getState());
  enterRule(_localctx, 122, LLVMParser::RuleOpaqueType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1284);
    match(LLVMParser::OPAQUE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedTypeContext ------------------------------------------------------------------

LLVMParser::NamedTypeContext::NamedTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::LocalIdentContext* LLVMParser::NamedTypeContext::localIdent() {
  return getRuleContext<LLVMParser::LocalIdentContext>(0);
}


size_t LLVMParser::NamedTypeContext::getRuleIndex() const {
  return LLVMParser::RuleNamedType;
}


std::any LLVMParser::NamedTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitNamedType(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::NamedTypeContext* LLVMParser::namedType() {
  NamedTypeContext *_localctx = _tracker.createInstance<NamedTypeContext>(_ctx, getState());
  enterRule(_localctx, 124, LLVMParser::RuleNamedType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1286);
    localIdent();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueContext ------------------------------------------------------------------

LLVMParser::ValueContext::ValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::ConstantContext* LLVMParser::ValueContext::constant() {
  return getRuleContext<LLVMParser::ConstantContext>(0);
}

LLVMParser::LocalIdentContext* LLVMParser::ValueContext::localIdent() {
  return getRuleContext<LLVMParser::LocalIdentContext>(0);
}

LLVMParser::InlineAsmContext* LLVMParser::ValueContext::inlineAsm() {
  return getRuleContext<LLVMParser::InlineAsmContext>(0);
}


size_t LLVMParser::ValueContext::getRuleIndex() const {
  return LLVMParser::RuleValue;
}


std::any LLVMParser::ValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitValue(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ValueContext* LLVMParser::value() {
  ValueContext *_localctx = _tracker.createInstance<ValueContext>(_ctx, getState());
  enterRule(_localctx, 126, LLVMParser::RuleValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1291);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::LT:
      case LLVMParser::LBRACK:
      case LLVMParser::LBRACE:
      case LLVMParser::ADD:
      case LLVMParser::ADDRSPACECAST:
      case LLVMParser::AND:
      case LLVMParser::ASHR:
      case LLVMParser::BITCAST:
      case LLVMParser::BLOCKADDRESS:
      case LLVMParser::C:
      case LLVMParser::EXTRACTELEMENT:
      case LLVMParser::EXTRACTVALUE:
      case LLVMParser::FADD:
      case LLVMParser::FALSE:
      case LLVMParser::FCMP:
      case LLVMParser::FDIV:
      case LLVMParser::FMUL:
      case LLVMParser::FPEXT:
      case LLVMParser::FPTOSI:
      case LLVMParser::FPTOUI:
      case LLVMParser::FPTRUNC:
      case LLVMParser::FREM:
      case LLVMParser::FSUB:
      case LLVMParser::GETELEMENTPTR:
      case LLVMParser::ICMP:
      case LLVMParser::INSERTELEMENT:
      case LLVMParser::INSERTVALUE:
      case LLVMParser::INTTOPTR:
      case LLVMParser::LSHR:
      case LLVMParser::MUL:
      case LLVMParser::NONE:
      case LLVMParser::NULL_:
      case LLVMParser::OR:
      case LLVMParser::PTRTOINT:
      case LLVMParser::SDIV:
      case LLVMParser::SELECT:
      case LLVMParser::SEXT:
      case LLVMParser::SHL:
      case LLVMParser::SHUFFLEVECTOR:
      case LLVMParser::SITOFP:
      case LLVMParser::SREM:
      case LLVMParser::SUB:
      case LLVMParser::TRUE:
      case LLVMParser::TRUNC:
      case LLVMParser::UDIV:
      case LLVMParser::UITOFP:
      case LLVMParser::UNDEF:
      case LLVMParser::UREM:
      case LLVMParser::XOR:
      case LLVMParser::ZEROINITIALIZER:
      case LLVMParser::ZEXT:
      case LLVMParser::INT_LIT:
      case LLVMParser::FLOAT_LIT:
      case LLVMParser::GLOBAL_IDENT: {
        enterOuterAlt(_localctx, 1);
        setState(1288);
        constant();
        break;
      }

      case LLVMParser::LOCAL_IDENT: {
        enterOuterAlt(_localctx, 2);
        setState(1289);
        localIdent();
        break;
      }

      case LLVMParser::ASM: {
        enterOuterAlt(_localctx, 3);
        setState(1290);
        inlineAsm();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InlineAsmContext ------------------------------------------------------------------

LLVMParser::InlineAsmContext::InlineAsmContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::InlineAsmContext::ASM() {
  return getToken(LLVMParser::ASM, 0);
}

LLVMParser::OptSideEffectContext* LLVMParser::InlineAsmContext::optSideEffect() {
  return getRuleContext<LLVMParser::OptSideEffectContext>(0);
}

LLVMParser::OptAlignStackContext* LLVMParser::InlineAsmContext::optAlignStack() {
  return getRuleContext<LLVMParser::OptAlignStackContext>(0);
}

LLVMParser::OptIntelDialectContext* LLVMParser::InlineAsmContext::optIntelDialect() {
  return getRuleContext<LLVMParser::OptIntelDialectContext>(0);
}

std::vector<LLVMParser::StringLitContext *> LLVMParser::InlineAsmContext::stringLit() {
  return getRuleContexts<LLVMParser::StringLitContext>();
}

LLVMParser::StringLitContext* LLVMParser::InlineAsmContext::stringLit(size_t i) {
  return getRuleContext<LLVMParser::StringLitContext>(i);
}

tree::TerminalNode* LLVMParser::InlineAsmContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::InlineAsmContext::getRuleIndex() const {
  return LLVMParser::RuleInlineAsm;
}


std::any LLVMParser::InlineAsmContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitInlineAsm(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::InlineAsmContext* LLVMParser::inlineAsm() {
  InlineAsmContext *_localctx = _tracker.createInstance<InlineAsmContext>(_ctx, getState());
  enterRule(_localctx, 128, LLVMParser::RuleInlineAsm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1293);
    match(LLVMParser::ASM);
    setState(1294);
    optSideEffect();
    setState(1295);
    optAlignStack();
    setState(1296);
    optIntelDialect();
    setState(1297);
    stringLit();
    setState(1298);
    match(LLVMParser::COMMA);
    setState(1299);
    stringLit();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptSideEffectContext ------------------------------------------------------------------

LLVMParser::OptSideEffectContext::OptSideEffectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OptSideEffectContext::SIDEEFFECT() {
  return getToken(LLVMParser::SIDEEFFECT, 0);
}


size_t LLVMParser::OptSideEffectContext::getRuleIndex() const {
  return LLVMParser::RuleOptSideEffect;
}


std::any LLVMParser::OptSideEffectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptSideEffect(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptSideEffectContext* LLVMParser::optSideEffect() {
  OptSideEffectContext *_localctx = _tracker.createInstance<OptSideEffectContext>(_ctx, getState());
  enterRule(_localctx, 130, LLVMParser::RuleOptSideEffect);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1302);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::SIDEEFFECT) {
      setState(1301);
      match(LLVMParser::SIDEEFFECT);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptAlignStackContext ------------------------------------------------------------------

LLVMParser::OptAlignStackContext::OptAlignStackContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OptAlignStackContext::ALIGNSTACK() {
  return getToken(LLVMParser::ALIGNSTACK, 0);
}


size_t LLVMParser::OptAlignStackContext::getRuleIndex() const {
  return LLVMParser::RuleOptAlignStack;
}


std::any LLVMParser::OptAlignStackContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptAlignStack(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptAlignStackContext* LLVMParser::optAlignStack() {
  OptAlignStackContext *_localctx = _tracker.createInstance<OptAlignStackContext>(_ctx, getState());
  enterRule(_localctx, 132, LLVMParser::RuleOptAlignStack);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1305);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::ALIGNSTACK) {
      setState(1304);
      match(LLVMParser::ALIGNSTACK);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptIntelDialectContext ------------------------------------------------------------------

LLVMParser::OptIntelDialectContext::OptIntelDialectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OptIntelDialectContext::INTELDIALECT() {
  return getToken(LLVMParser::INTELDIALECT, 0);
}


size_t LLVMParser::OptIntelDialectContext::getRuleIndex() const {
  return LLVMParser::RuleOptIntelDialect;
}


std::any LLVMParser::OptIntelDialectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptIntelDialect(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptIntelDialectContext* LLVMParser::optIntelDialect() {
  OptIntelDialectContext *_localctx = _tracker.createInstance<OptIntelDialectContext>(_ctx, getState());
  enterRule(_localctx, 134, LLVMParser::RuleOptIntelDialect);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1308);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::INTELDIALECT) {
      setState(1307);
      match(LLVMParser::INTELDIALECT);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantContext ------------------------------------------------------------------

LLVMParser::ConstantContext::ConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::BoolConstContext* LLVMParser::ConstantContext::boolConst() {
  return getRuleContext<LLVMParser::BoolConstContext>(0);
}

LLVMParser::IntConstContext* LLVMParser::ConstantContext::intConst() {
  return getRuleContext<LLVMParser::IntConstContext>(0);
}

LLVMParser::FloatConstContext* LLVMParser::ConstantContext::floatConst() {
  return getRuleContext<LLVMParser::FloatConstContext>(0);
}

LLVMParser::NullConstContext* LLVMParser::ConstantContext::nullConst() {
  return getRuleContext<LLVMParser::NullConstContext>(0);
}

LLVMParser::NoneConstContext* LLVMParser::ConstantContext::noneConst() {
  return getRuleContext<LLVMParser::NoneConstContext>(0);
}

LLVMParser::StructConstContext* LLVMParser::ConstantContext::structConst() {
  return getRuleContext<LLVMParser::StructConstContext>(0);
}

LLVMParser::ArrayConstContext* LLVMParser::ConstantContext::arrayConst() {
  return getRuleContext<LLVMParser::ArrayConstContext>(0);
}

LLVMParser::CharArrayConstContext* LLVMParser::ConstantContext::charArrayConst() {
  return getRuleContext<LLVMParser::CharArrayConstContext>(0);
}

LLVMParser::VectorConstContext* LLVMParser::ConstantContext::vectorConst() {
  return getRuleContext<LLVMParser::VectorConstContext>(0);
}

LLVMParser::ZeroInitializerConstContext* LLVMParser::ConstantContext::zeroInitializerConst() {
  return getRuleContext<LLVMParser::ZeroInitializerConstContext>(0);
}

LLVMParser::GlobalIdentContext* LLVMParser::ConstantContext::globalIdent() {
  return getRuleContext<LLVMParser::GlobalIdentContext>(0);
}

LLVMParser::UndefConstContext* LLVMParser::ConstantContext::undefConst() {
  return getRuleContext<LLVMParser::UndefConstContext>(0);
}

LLVMParser::BlockAddressConstContext* LLVMParser::ConstantContext::blockAddressConst() {
  return getRuleContext<LLVMParser::BlockAddressConstContext>(0);
}

LLVMParser::ConstantExprContext* LLVMParser::ConstantContext::constantExpr() {
  return getRuleContext<LLVMParser::ConstantExprContext>(0);
}


size_t LLVMParser::ConstantContext::getRuleIndex() const {
  return LLVMParser::RuleConstant;
}


std::any LLVMParser::ConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitConstant(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ConstantContext* LLVMParser::constant() {
  ConstantContext *_localctx = _tracker.createInstance<ConstantContext>(_ctx, getState());
  enterRule(_localctx, 136, LLVMParser::RuleConstant);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1324);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1310);
      boolConst();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1311);
      intConst();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1312);
      floatConst();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1313);
      nullConst();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1314);
      noneConst();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1315);
      structConst();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1316);
      arrayConst();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1317);
      charArrayConst();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1318);
      vectorConst();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1319);
      zeroInitializerConst();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1320);
      globalIdent();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1321);
      undefConst();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1322);
      blockAddressConst();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1323);
      constantExpr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BoolConstContext ------------------------------------------------------------------

LLVMParser::BoolConstContext::BoolConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::BoolLitContext* LLVMParser::BoolConstContext::boolLit() {
  return getRuleContext<LLVMParser::BoolLitContext>(0);
}


size_t LLVMParser::BoolConstContext::getRuleIndex() const {
  return LLVMParser::RuleBoolConst;
}


std::any LLVMParser::BoolConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitBoolConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::BoolConstContext* LLVMParser::boolConst() {
  BoolConstContext *_localctx = _tracker.createInstance<BoolConstContext>(_ctx, getState());
  enterRule(_localctx, 138, LLVMParser::RuleBoolConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1326);
    boolLit();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BoolLitContext ------------------------------------------------------------------

LLVMParser::BoolLitContext::BoolLitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::BoolLitContext::TRUE() {
  return getToken(LLVMParser::TRUE, 0);
}

tree::TerminalNode* LLVMParser::BoolLitContext::FALSE() {
  return getToken(LLVMParser::FALSE, 0);
}


size_t LLVMParser::BoolLitContext::getRuleIndex() const {
  return LLVMParser::RuleBoolLit;
}


std::any LLVMParser::BoolLitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitBoolLit(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::BoolLitContext* LLVMParser::boolLit() {
  BoolLitContext *_localctx = _tracker.createInstance<BoolLitContext>(_ctx, getState());
  enterRule(_localctx, 140, LLVMParser::RuleBoolLit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1328);
    _la = _input->LA(1);
    if (!(_la == LLVMParser::FALSE || _la == LLVMParser::TRUE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntConstContext ------------------------------------------------------------------

LLVMParser::IntConstContext::IntConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::IntConstContext::INT_LIT() {
  return getToken(LLVMParser::INT_LIT, 0);
}


size_t LLVMParser::IntConstContext::getRuleIndex() const {
  return LLVMParser::RuleIntConst;
}


std::any LLVMParser::IntConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitIntConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::IntConstContext* LLVMParser::intConst() {
  IntConstContext *_localctx = _tracker.createInstance<IntConstContext>(_ctx, getState());
  enterRule(_localctx, 142, LLVMParser::RuleIntConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1330);
    match(LLVMParser::INT_LIT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntLitContext ------------------------------------------------------------------

LLVMParser::IntLitContext::IntLitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::IntLitContext::INT_LIT() {
  return getToken(LLVMParser::INT_LIT, 0);
}


size_t LLVMParser::IntLitContext::getRuleIndex() const {
  return LLVMParser::RuleIntLit;
}


std::any LLVMParser::IntLitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitIntLit(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::IntLitContext* LLVMParser::intLit() {
  IntLitContext *_localctx = _tracker.createInstance<IntLitContext>(_ctx, getState());
  enterRule(_localctx, 144, LLVMParser::RuleIntLit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1332);
    match(LLVMParser::INT_LIT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatConstContext ------------------------------------------------------------------

LLVMParser::FloatConstContext::FloatConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FloatConstContext::FLOAT_LIT() {
  return getToken(LLVMParser::FLOAT_LIT, 0);
}


size_t LLVMParser::FloatConstContext::getRuleIndex() const {
  return LLVMParser::RuleFloatConst;
}


std::any LLVMParser::FloatConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFloatConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FloatConstContext* LLVMParser::floatConst() {
  FloatConstContext *_localctx = _tracker.createInstance<FloatConstContext>(_ctx, getState());
  enterRule(_localctx, 146, LLVMParser::RuleFloatConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1334);
    match(LLVMParser::FLOAT_LIT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NullConstContext ------------------------------------------------------------------

LLVMParser::NullConstContext::NullConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::NullConstContext::NULL_() {
  return getToken(LLVMParser::NULL_, 0);
}


size_t LLVMParser::NullConstContext::getRuleIndex() const {
  return LLVMParser::RuleNullConst;
}


std::any LLVMParser::NullConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitNullConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::NullConstContext* LLVMParser::nullConst() {
  NullConstContext *_localctx = _tracker.createInstance<NullConstContext>(_ctx, getState());
  enterRule(_localctx, 148, LLVMParser::RuleNullConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1336);
    match(LLVMParser::NULL_);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NoneConstContext ------------------------------------------------------------------

LLVMParser::NoneConstContext::NoneConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::NoneConstContext::NONE() {
  return getToken(LLVMParser::NONE, 0);
}


size_t LLVMParser::NoneConstContext::getRuleIndex() const {
  return LLVMParser::RuleNoneConst;
}


std::any LLVMParser::NoneConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitNoneConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::NoneConstContext* LLVMParser::noneConst() {
  NoneConstContext *_localctx = _tracker.createInstance<NoneConstContext>(_ctx, getState());
  enterRule(_localctx, 150, LLVMParser::RuleNoneConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1338);
    match(LLVMParser::NONE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructConstContext ------------------------------------------------------------------

LLVMParser::StructConstContext::StructConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::StructConstContext::LBRACE() {
  return getToken(LLVMParser::LBRACE, 0);
}

tree::TerminalNode* LLVMParser::StructConstContext::RBRACE() {
  return getToken(LLVMParser::RBRACE, 0);
}

LLVMParser::TypeConstListContext* LLVMParser::StructConstContext::typeConstList() {
  return getRuleContext<LLVMParser::TypeConstListContext>(0);
}

tree::TerminalNode* LLVMParser::StructConstContext::LT() {
  return getToken(LLVMParser::LT, 0);
}

tree::TerminalNode* LLVMParser::StructConstContext::GT() {
  return getToken(LLVMParser::GT, 0);
}


size_t LLVMParser::StructConstContext::getRuleIndex() const {
  return LLVMParser::RuleStructConst;
}


std::any LLVMParser::StructConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitStructConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::StructConstContext* LLVMParser::structConst() {
  StructConstContext *_localctx = _tracker.createInstance<StructConstContext>(_ctx, getState());
  enterRule(_localctx, 152, LLVMParser::RuleStructConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1356);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1340);
      match(LLVMParser::LBRACE);
      setState(1341);
      match(LLVMParser::RBRACE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1342);
      match(LLVMParser::LBRACE);
      setState(1343);
      typeConstList(0);
      setState(1344);
      match(LLVMParser::RBRACE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1346);
      match(LLVMParser::LT);
      setState(1347);
      match(LLVMParser::LBRACE);
      setState(1348);
      match(LLVMParser::RBRACE);
      setState(1349);
      match(LLVMParser::GT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1350);
      match(LLVMParser::LT);
      setState(1351);
      match(LLVMParser::LBRACE);
      setState(1352);
      typeConstList(0);
      setState(1353);
      match(LLVMParser::RBRACE);
      setState(1354);
      match(LLVMParser::GT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayConstContext ------------------------------------------------------------------

LLVMParser::ArrayConstContext::ArrayConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ArrayConstContext::LBRACK() {
  return getToken(LLVMParser::LBRACK, 0);
}

LLVMParser::TypeConstsContext* LLVMParser::ArrayConstContext::typeConsts() {
  return getRuleContext<LLVMParser::TypeConstsContext>(0);
}

tree::TerminalNode* LLVMParser::ArrayConstContext::RBRACK() {
  return getToken(LLVMParser::RBRACK, 0);
}


size_t LLVMParser::ArrayConstContext::getRuleIndex() const {
  return LLVMParser::RuleArrayConst;
}


std::any LLVMParser::ArrayConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitArrayConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ArrayConstContext* LLVMParser::arrayConst() {
  ArrayConstContext *_localctx = _tracker.createInstance<ArrayConstContext>(_ctx, getState());
  enterRule(_localctx, 154, LLVMParser::RuleArrayConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1358);
    match(LLVMParser::LBRACK);
    setState(1359);
    typeConsts();
    setState(1360);
    match(LLVMParser::RBRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CharArrayConstContext ------------------------------------------------------------------

LLVMParser::CharArrayConstContext::CharArrayConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::CharArrayConstContext::C() {
  return getToken(LLVMParser::C, 0);
}

LLVMParser::StringLitContext* LLVMParser::CharArrayConstContext::stringLit() {
  return getRuleContext<LLVMParser::StringLitContext>(0);
}


size_t LLVMParser::CharArrayConstContext::getRuleIndex() const {
  return LLVMParser::RuleCharArrayConst;
}


std::any LLVMParser::CharArrayConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitCharArrayConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::CharArrayConstContext* LLVMParser::charArrayConst() {
  CharArrayConstContext *_localctx = _tracker.createInstance<CharArrayConstContext>(_ctx, getState());
  enterRule(_localctx, 156, LLVMParser::RuleCharArrayConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1362);
    match(LLVMParser::C);
    setState(1363);
    stringLit();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringLitContext ------------------------------------------------------------------

LLVMParser::StringLitContext::StringLitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::StringLitContext::STRING_LIT() {
  return getToken(LLVMParser::STRING_LIT, 0);
}


size_t LLVMParser::StringLitContext::getRuleIndex() const {
  return LLVMParser::RuleStringLit;
}


std::any LLVMParser::StringLitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitStringLit(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::StringLitContext* LLVMParser::stringLit() {
  StringLitContext *_localctx = _tracker.createInstance<StringLitContext>(_ctx, getState());
  enterRule(_localctx, 158, LLVMParser::RuleStringLit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1365);
    match(LLVMParser::STRING_LIT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VectorConstContext ------------------------------------------------------------------

LLVMParser::VectorConstContext::VectorConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::VectorConstContext::LT() {
  return getToken(LLVMParser::LT, 0);
}

LLVMParser::TypeConstsContext* LLVMParser::VectorConstContext::typeConsts() {
  return getRuleContext<LLVMParser::TypeConstsContext>(0);
}

tree::TerminalNode* LLVMParser::VectorConstContext::GT() {
  return getToken(LLVMParser::GT, 0);
}


size_t LLVMParser::VectorConstContext::getRuleIndex() const {
  return LLVMParser::RuleVectorConst;
}


std::any LLVMParser::VectorConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitVectorConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::VectorConstContext* LLVMParser::vectorConst() {
  VectorConstContext *_localctx = _tracker.createInstance<VectorConstContext>(_ctx, getState());
  enterRule(_localctx, 160, LLVMParser::RuleVectorConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1367);
    match(LLVMParser::LT);
    setState(1368);
    typeConsts();
    setState(1369);
    match(LLVMParser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ZeroInitializerConstContext ------------------------------------------------------------------

LLVMParser::ZeroInitializerConstContext::ZeroInitializerConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ZeroInitializerConstContext::ZEROINITIALIZER() {
  return getToken(LLVMParser::ZEROINITIALIZER, 0);
}


size_t LLVMParser::ZeroInitializerConstContext::getRuleIndex() const {
  return LLVMParser::RuleZeroInitializerConst;
}


std::any LLVMParser::ZeroInitializerConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitZeroInitializerConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ZeroInitializerConstContext* LLVMParser::zeroInitializerConst() {
  ZeroInitializerConstContext *_localctx = _tracker.createInstance<ZeroInitializerConstContext>(_ctx, getState());
  enterRule(_localctx, 162, LLVMParser::RuleZeroInitializerConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1371);
    match(LLVMParser::ZEROINITIALIZER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UndefConstContext ------------------------------------------------------------------

LLVMParser::UndefConstContext::UndefConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::UndefConstContext::UNDEF() {
  return getToken(LLVMParser::UNDEF, 0);
}


size_t LLVMParser::UndefConstContext::getRuleIndex() const {
  return LLVMParser::RuleUndefConst;
}


std::any LLVMParser::UndefConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitUndefConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::UndefConstContext* LLVMParser::undefConst() {
  UndefConstContext *_localctx = _tracker.createInstance<UndefConstContext>(_ctx, getState());
  enterRule(_localctx, 164, LLVMParser::RuleUndefConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1373);
    match(LLVMParser::UNDEF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockAddressConstContext ------------------------------------------------------------------

LLVMParser::BlockAddressConstContext::BlockAddressConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::BlockAddressConstContext::BLOCKADDRESS() {
  return getToken(LLVMParser::BLOCKADDRESS, 0);
}

tree::TerminalNode* LLVMParser::BlockAddressConstContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::GlobalIdentContext* LLVMParser::BlockAddressConstContext::globalIdent() {
  return getRuleContext<LLVMParser::GlobalIdentContext>(0);
}

tree::TerminalNode* LLVMParser::BlockAddressConstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::LocalIdentContext* LLVMParser::BlockAddressConstContext::localIdent() {
  return getRuleContext<LLVMParser::LocalIdentContext>(0);
}

tree::TerminalNode* LLVMParser::BlockAddressConstContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::BlockAddressConstContext::getRuleIndex() const {
  return LLVMParser::RuleBlockAddressConst;
}


std::any LLVMParser::BlockAddressConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitBlockAddressConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::BlockAddressConstContext* LLVMParser::blockAddressConst() {
  BlockAddressConstContext *_localctx = _tracker.createInstance<BlockAddressConstContext>(_ctx, getState());
  enterRule(_localctx, 166, LLVMParser::RuleBlockAddressConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1375);
    match(LLVMParser::BLOCKADDRESS);
    setState(1376);
    match(LLVMParser::LPAREN);
    setState(1377);
    globalIdent();
    setState(1378);
    match(LLVMParser::COMMA);
    setState(1379);
    localIdent();
    setState(1380);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantExprContext ------------------------------------------------------------------

LLVMParser::ConstantExprContext::ConstantExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::AddExprContext* LLVMParser::ConstantExprContext::addExpr() {
  return getRuleContext<LLVMParser::AddExprContext>(0);
}

LLVMParser::FAddExprContext* LLVMParser::ConstantExprContext::fAddExpr() {
  return getRuleContext<LLVMParser::FAddExprContext>(0);
}

LLVMParser::SubExprContext* LLVMParser::ConstantExprContext::subExpr() {
  return getRuleContext<LLVMParser::SubExprContext>(0);
}

LLVMParser::FSubExprContext* LLVMParser::ConstantExprContext::fSubExpr() {
  return getRuleContext<LLVMParser::FSubExprContext>(0);
}

LLVMParser::MulExprContext* LLVMParser::ConstantExprContext::mulExpr() {
  return getRuleContext<LLVMParser::MulExprContext>(0);
}

LLVMParser::FMulExprContext* LLVMParser::ConstantExprContext::fMulExpr() {
  return getRuleContext<LLVMParser::FMulExprContext>(0);
}

LLVMParser::UDivExprContext* LLVMParser::ConstantExprContext::uDivExpr() {
  return getRuleContext<LLVMParser::UDivExprContext>(0);
}

LLVMParser::SDivExprContext* LLVMParser::ConstantExprContext::sDivExpr() {
  return getRuleContext<LLVMParser::SDivExprContext>(0);
}

LLVMParser::FDivExprContext* LLVMParser::ConstantExprContext::fDivExpr() {
  return getRuleContext<LLVMParser::FDivExprContext>(0);
}

LLVMParser::URemExprContext* LLVMParser::ConstantExprContext::uRemExpr() {
  return getRuleContext<LLVMParser::URemExprContext>(0);
}

LLVMParser::SRemExprContext* LLVMParser::ConstantExprContext::sRemExpr() {
  return getRuleContext<LLVMParser::SRemExprContext>(0);
}

LLVMParser::FRemExprContext* LLVMParser::ConstantExprContext::fRemExpr() {
  return getRuleContext<LLVMParser::FRemExprContext>(0);
}

LLVMParser::ShlExprContext* LLVMParser::ConstantExprContext::shlExpr() {
  return getRuleContext<LLVMParser::ShlExprContext>(0);
}

LLVMParser::LShrExprContext* LLVMParser::ConstantExprContext::lShrExpr() {
  return getRuleContext<LLVMParser::LShrExprContext>(0);
}

LLVMParser::AshrExprContext* LLVMParser::ConstantExprContext::ashrExpr() {
  return getRuleContext<LLVMParser::AshrExprContext>(0);
}

LLVMParser::AndExprContext* LLVMParser::ConstantExprContext::andExpr() {
  return getRuleContext<LLVMParser::AndExprContext>(0);
}

LLVMParser::OrExprContext* LLVMParser::ConstantExprContext::orExpr() {
  return getRuleContext<LLVMParser::OrExprContext>(0);
}

LLVMParser::XorExprContext* LLVMParser::ConstantExprContext::xorExpr() {
  return getRuleContext<LLVMParser::XorExprContext>(0);
}

LLVMParser::ExtractElementExprContext* LLVMParser::ConstantExprContext::extractElementExpr() {
  return getRuleContext<LLVMParser::ExtractElementExprContext>(0);
}

LLVMParser::InsertElementExprContext* LLVMParser::ConstantExprContext::insertElementExpr() {
  return getRuleContext<LLVMParser::InsertElementExprContext>(0);
}

LLVMParser::ShuffleVectorExprContext* LLVMParser::ConstantExprContext::shuffleVectorExpr() {
  return getRuleContext<LLVMParser::ShuffleVectorExprContext>(0);
}

LLVMParser::ExtractValueExprContext* LLVMParser::ConstantExprContext::extractValueExpr() {
  return getRuleContext<LLVMParser::ExtractValueExprContext>(0);
}

LLVMParser::InsertValueExprContext* LLVMParser::ConstantExprContext::insertValueExpr() {
  return getRuleContext<LLVMParser::InsertValueExprContext>(0);
}

LLVMParser::GetElementPtrExprContext* LLVMParser::ConstantExprContext::getElementPtrExpr() {
  return getRuleContext<LLVMParser::GetElementPtrExprContext>(0);
}

LLVMParser::TruncExprContext* LLVMParser::ConstantExprContext::truncExpr() {
  return getRuleContext<LLVMParser::TruncExprContext>(0);
}

LLVMParser::ZExtExprContext* LLVMParser::ConstantExprContext::zExtExpr() {
  return getRuleContext<LLVMParser::ZExtExprContext>(0);
}

LLVMParser::SExtExprContext* LLVMParser::ConstantExprContext::sExtExpr() {
  return getRuleContext<LLVMParser::SExtExprContext>(0);
}

LLVMParser::FPTruncExprContext* LLVMParser::ConstantExprContext::fPTruncExpr() {
  return getRuleContext<LLVMParser::FPTruncExprContext>(0);
}

LLVMParser::FpExtExprContext* LLVMParser::ConstantExprContext::fpExtExpr() {
  return getRuleContext<LLVMParser::FpExtExprContext>(0);
}

LLVMParser::FpToUIExprContext* LLVMParser::ConstantExprContext::fpToUIExpr() {
  return getRuleContext<LLVMParser::FpToUIExprContext>(0);
}

LLVMParser::FpToSIExprContext* LLVMParser::ConstantExprContext::fpToSIExpr() {
  return getRuleContext<LLVMParser::FpToSIExprContext>(0);
}

LLVMParser::UiToFPExprContext* LLVMParser::ConstantExprContext::uiToFPExpr() {
  return getRuleContext<LLVMParser::UiToFPExprContext>(0);
}

LLVMParser::SiToFPExprContext* LLVMParser::ConstantExprContext::siToFPExpr() {
  return getRuleContext<LLVMParser::SiToFPExprContext>(0);
}

LLVMParser::PtrToIntExprContext* LLVMParser::ConstantExprContext::ptrToIntExpr() {
  return getRuleContext<LLVMParser::PtrToIntExprContext>(0);
}

LLVMParser::IntToPtrExprContext* LLVMParser::ConstantExprContext::intToPtrExpr() {
  return getRuleContext<LLVMParser::IntToPtrExprContext>(0);
}

LLVMParser::BitCastExprContext* LLVMParser::ConstantExprContext::bitCastExpr() {
  return getRuleContext<LLVMParser::BitCastExprContext>(0);
}

LLVMParser::AddrSpaceCastExprContext* LLVMParser::ConstantExprContext::addrSpaceCastExpr() {
  return getRuleContext<LLVMParser::AddrSpaceCastExprContext>(0);
}

LLVMParser::ICmpExprContext* LLVMParser::ConstantExprContext::iCmpExpr() {
  return getRuleContext<LLVMParser::ICmpExprContext>(0);
}

LLVMParser::FCmpExprContext* LLVMParser::ConstantExprContext::fCmpExpr() {
  return getRuleContext<LLVMParser::FCmpExprContext>(0);
}

LLVMParser::SelectExprContext* LLVMParser::ConstantExprContext::selectExpr() {
  return getRuleContext<LLVMParser::SelectExprContext>(0);
}


size_t LLVMParser::ConstantExprContext::getRuleIndex() const {
  return LLVMParser::RuleConstantExpr;
}


std::any LLVMParser::ConstantExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitConstantExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ConstantExprContext* LLVMParser::constantExpr() {
  ConstantExprContext *_localctx = _tracker.createInstance<ConstantExprContext>(_ctx, getState());
  enterRule(_localctx, 168, LLVMParser::RuleConstantExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1422);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::ADD: {
        enterOuterAlt(_localctx, 1);
        setState(1382);
        addExpr();
        break;
      }

      case LLVMParser::FADD: {
        enterOuterAlt(_localctx, 2);
        setState(1383);
        fAddExpr();
        break;
      }

      case LLVMParser::SUB: {
        enterOuterAlt(_localctx, 3);
        setState(1384);
        subExpr();
        break;
      }

      case LLVMParser::FSUB: {
        enterOuterAlt(_localctx, 4);
        setState(1385);
        fSubExpr();
        break;
      }

      case LLVMParser::MUL: {
        enterOuterAlt(_localctx, 5);
        setState(1386);
        mulExpr();
        break;
      }

      case LLVMParser::FMUL: {
        enterOuterAlt(_localctx, 6);
        setState(1387);
        fMulExpr();
        break;
      }

      case LLVMParser::UDIV: {
        enterOuterAlt(_localctx, 7);
        setState(1388);
        uDivExpr();
        break;
      }

      case LLVMParser::SDIV: {
        enterOuterAlt(_localctx, 8);
        setState(1389);
        sDivExpr();
        break;
      }

      case LLVMParser::FDIV: {
        enterOuterAlt(_localctx, 9);
        setState(1390);
        fDivExpr();
        break;
      }

      case LLVMParser::UREM: {
        enterOuterAlt(_localctx, 10);
        setState(1391);
        uRemExpr();
        break;
      }

      case LLVMParser::SREM: {
        enterOuterAlt(_localctx, 11);
        setState(1392);
        sRemExpr();
        break;
      }

      case LLVMParser::FREM: {
        enterOuterAlt(_localctx, 12);
        setState(1393);
        fRemExpr();
        break;
      }

      case LLVMParser::SHL: {
        enterOuterAlt(_localctx, 13);
        setState(1394);
        shlExpr();
        break;
      }

      case LLVMParser::LSHR: {
        enterOuterAlt(_localctx, 14);
        setState(1395);
        lShrExpr();
        break;
      }

      case LLVMParser::ASHR: {
        enterOuterAlt(_localctx, 15);
        setState(1396);
        ashrExpr();
        break;
      }

      case LLVMParser::AND: {
        enterOuterAlt(_localctx, 16);
        setState(1397);
        andExpr();
        break;
      }

      case LLVMParser::OR: {
        enterOuterAlt(_localctx, 17);
        setState(1398);
        orExpr();
        break;
      }

      case LLVMParser::XOR: {
        enterOuterAlt(_localctx, 18);
        setState(1399);
        xorExpr();
        break;
      }

      case LLVMParser::EXTRACTELEMENT: {
        enterOuterAlt(_localctx, 19);
        setState(1400);
        extractElementExpr();
        break;
      }

      case LLVMParser::INSERTELEMENT: {
        enterOuterAlt(_localctx, 20);
        setState(1401);
        insertElementExpr();
        break;
      }

      case LLVMParser::SHUFFLEVECTOR: {
        enterOuterAlt(_localctx, 21);
        setState(1402);
        shuffleVectorExpr();
        break;
      }

      case LLVMParser::EXTRACTVALUE: {
        enterOuterAlt(_localctx, 22);
        setState(1403);
        extractValueExpr();
        break;
      }

      case LLVMParser::INSERTVALUE: {
        enterOuterAlt(_localctx, 23);
        setState(1404);
        insertValueExpr();
        break;
      }

      case LLVMParser::GETELEMENTPTR: {
        enterOuterAlt(_localctx, 24);
        setState(1405);
        getElementPtrExpr();
        break;
      }

      case LLVMParser::TRUNC: {
        enterOuterAlt(_localctx, 25);
        setState(1406);
        truncExpr();
        break;
      }

      case LLVMParser::ZEXT: {
        enterOuterAlt(_localctx, 26);
        setState(1407);
        zExtExpr();
        break;
      }

      case LLVMParser::SEXT: {
        enterOuterAlt(_localctx, 27);
        setState(1408);
        sExtExpr();
        break;
      }

      case LLVMParser::FPTRUNC: {
        enterOuterAlt(_localctx, 28);
        setState(1409);
        fPTruncExpr();
        break;
      }

      case LLVMParser::FPEXT: {
        enterOuterAlt(_localctx, 29);
        setState(1410);
        fpExtExpr();
        break;
      }

      case LLVMParser::FPTOUI: {
        enterOuterAlt(_localctx, 30);
        setState(1411);
        fpToUIExpr();
        break;
      }

      case LLVMParser::FPTOSI: {
        enterOuterAlt(_localctx, 31);
        setState(1412);
        fpToSIExpr();
        break;
      }

      case LLVMParser::UITOFP: {
        enterOuterAlt(_localctx, 32);
        setState(1413);
        uiToFPExpr();
        break;
      }

      case LLVMParser::SITOFP: {
        enterOuterAlt(_localctx, 33);
        setState(1414);
        siToFPExpr();
        break;
      }

      case LLVMParser::PTRTOINT: {
        enterOuterAlt(_localctx, 34);
        setState(1415);
        ptrToIntExpr();
        break;
      }

      case LLVMParser::INTTOPTR: {
        enterOuterAlt(_localctx, 35);
        setState(1416);
        intToPtrExpr();
        break;
      }

      case LLVMParser::BITCAST: {
        enterOuterAlt(_localctx, 36);
        setState(1417);
        bitCastExpr();
        break;
      }

      case LLVMParser::ADDRSPACECAST: {
        enterOuterAlt(_localctx, 37);
        setState(1418);
        addrSpaceCastExpr();
        break;
      }

      case LLVMParser::ICMP: {
        enterOuterAlt(_localctx, 38);
        setState(1419);
        iCmpExpr();
        break;
      }

      case LLVMParser::FCMP: {
        enterOuterAlt(_localctx, 39);
        setState(1420);
        fCmpExpr();
        break;
      }

      case LLVMParser::SELECT: {
        enterOuterAlt(_localctx, 40);
        setState(1421);
        selectExpr();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddExprContext ------------------------------------------------------------------

LLVMParser::AddExprContext::AddExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::AddExprContext::ADD() {
  return getToken(LLVMParser::ADD, 0);
}

LLVMParser::OverflowFlagsContext* LLVMParser::AddExprContext::overflowFlags() {
  return getRuleContext<LLVMParser::OverflowFlagsContext>(0);
}

tree::TerminalNode* LLVMParser::AddExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::AddExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::AddExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::AddExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::AddExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

tree::TerminalNode* LLVMParser::AddExprContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

tree::TerminalNode* LLVMParser::AddExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::AddExprContext::getRuleIndex() const {
  return LLVMParser::RuleAddExpr;
}


std::any LLVMParser::AddExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitAddExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::AddExprContext* LLVMParser::addExpr() {
  AddExprContext *_localctx = _tracker.createInstance<AddExprContext>(_ctx, getState());
  enterRule(_localctx, 170, LLVMParser::RuleAddExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1424);
    match(LLVMParser::ADD);
    setState(1425);
    overflowFlags();
    setState(1426);
    match(LLVMParser::LPAREN);
    setState(1427);
    llvmType(0);
    setState(1428);
    constant();
    setState(1429);
    match(LLVMParser::COMMA);
    setState(1430);
    llvmType(0);
    setState(1431);
    constant();
    setState(1432);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FAddExprContext ------------------------------------------------------------------

LLVMParser::FAddExprContext::FAddExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FAddExprContext::FADD() {
  return getToken(LLVMParser::FADD, 0);
}

tree::TerminalNode* LLVMParser::FAddExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::FAddExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::FAddExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::FAddExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::FAddExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

tree::TerminalNode* LLVMParser::FAddExprContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

tree::TerminalNode* LLVMParser::FAddExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::FAddExprContext::getRuleIndex() const {
  return LLVMParser::RuleFAddExpr;
}


std::any LLVMParser::FAddExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFAddExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FAddExprContext* LLVMParser::fAddExpr() {
  FAddExprContext *_localctx = _tracker.createInstance<FAddExprContext>(_ctx, getState());
  enterRule(_localctx, 172, LLVMParser::RuleFAddExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1434);
    match(LLVMParser::FADD);
    setState(1435);
    match(LLVMParser::LPAREN);
    setState(1436);
    llvmType(0);
    setState(1437);
    constant();
    setState(1438);
    match(LLVMParser::COMMA);
    setState(1439);
    llvmType(0);
    setState(1440);
    constant();
    setState(1441);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubExprContext ------------------------------------------------------------------

LLVMParser::SubExprContext::SubExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::SubExprContext::SUB() {
  return getToken(LLVMParser::SUB, 0);
}

LLVMParser::OverflowFlagsContext* LLVMParser::SubExprContext::overflowFlags() {
  return getRuleContext<LLVMParser::OverflowFlagsContext>(0);
}

tree::TerminalNode* LLVMParser::SubExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::SubExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::SubExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::SubExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::SubExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

tree::TerminalNode* LLVMParser::SubExprContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

tree::TerminalNode* LLVMParser::SubExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::SubExprContext::getRuleIndex() const {
  return LLVMParser::RuleSubExpr;
}


std::any LLVMParser::SubExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitSubExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::SubExprContext* LLVMParser::subExpr() {
  SubExprContext *_localctx = _tracker.createInstance<SubExprContext>(_ctx, getState());
  enterRule(_localctx, 174, LLVMParser::RuleSubExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1443);
    match(LLVMParser::SUB);
    setState(1444);
    overflowFlags();
    setState(1445);
    match(LLVMParser::LPAREN);
    setState(1446);
    llvmType(0);
    setState(1447);
    constant();
    setState(1448);
    match(LLVMParser::COMMA);
    setState(1449);
    llvmType(0);
    setState(1450);
    constant();
    setState(1451);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FSubExprContext ------------------------------------------------------------------

LLVMParser::FSubExprContext::FSubExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FSubExprContext::FSUB() {
  return getToken(LLVMParser::FSUB, 0);
}

tree::TerminalNode* LLVMParser::FSubExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::FSubExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::FSubExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::FSubExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::FSubExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

tree::TerminalNode* LLVMParser::FSubExprContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

tree::TerminalNode* LLVMParser::FSubExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::FSubExprContext::getRuleIndex() const {
  return LLVMParser::RuleFSubExpr;
}


std::any LLVMParser::FSubExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFSubExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FSubExprContext* LLVMParser::fSubExpr() {
  FSubExprContext *_localctx = _tracker.createInstance<FSubExprContext>(_ctx, getState());
  enterRule(_localctx, 176, LLVMParser::RuleFSubExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1453);
    match(LLVMParser::FSUB);
    setState(1454);
    match(LLVMParser::LPAREN);
    setState(1455);
    llvmType(0);
    setState(1456);
    constant();
    setState(1457);
    match(LLVMParser::COMMA);
    setState(1458);
    llvmType(0);
    setState(1459);
    constant();
    setState(1460);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MulExprContext ------------------------------------------------------------------

LLVMParser::MulExprContext::MulExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::MulExprContext::MUL() {
  return getToken(LLVMParser::MUL, 0);
}

LLVMParser::OverflowFlagsContext* LLVMParser::MulExprContext::overflowFlags() {
  return getRuleContext<LLVMParser::OverflowFlagsContext>(0);
}

tree::TerminalNode* LLVMParser::MulExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::MulExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::MulExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::MulExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::MulExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

tree::TerminalNode* LLVMParser::MulExprContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

tree::TerminalNode* LLVMParser::MulExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::MulExprContext::getRuleIndex() const {
  return LLVMParser::RuleMulExpr;
}


std::any LLVMParser::MulExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitMulExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::MulExprContext* LLVMParser::mulExpr() {
  MulExprContext *_localctx = _tracker.createInstance<MulExprContext>(_ctx, getState());
  enterRule(_localctx, 178, LLVMParser::RuleMulExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1462);
    match(LLVMParser::MUL);
    setState(1463);
    overflowFlags();
    setState(1464);
    match(LLVMParser::LPAREN);
    setState(1465);
    llvmType(0);
    setState(1466);
    constant();
    setState(1467);
    match(LLVMParser::COMMA);
    setState(1468);
    llvmType(0);
    setState(1469);
    constant();
    setState(1470);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FMulExprContext ------------------------------------------------------------------

LLVMParser::FMulExprContext::FMulExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FMulExprContext::FMUL() {
  return getToken(LLVMParser::FMUL, 0);
}

tree::TerminalNode* LLVMParser::FMulExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::FMulExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::FMulExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::FMulExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::FMulExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

tree::TerminalNode* LLVMParser::FMulExprContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

tree::TerminalNode* LLVMParser::FMulExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::FMulExprContext::getRuleIndex() const {
  return LLVMParser::RuleFMulExpr;
}


std::any LLVMParser::FMulExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFMulExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FMulExprContext* LLVMParser::fMulExpr() {
  FMulExprContext *_localctx = _tracker.createInstance<FMulExprContext>(_ctx, getState());
  enterRule(_localctx, 180, LLVMParser::RuleFMulExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1472);
    match(LLVMParser::FMUL);
    setState(1473);
    match(LLVMParser::LPAREN);
    setState(1474);
    llvmType(0);
    setState(1475);
    constant();
    setState(1476);
    match(LLVMParser::COMMA);
    setState(1477);
    llvmType(0);
    setState(1478);
    constant();
    setState(1479);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UDivExprContext ------------------------------------------------------------------

LLVMParser::UDivExprContext::UDivExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::UDivExprContext::UDIV() {
  return getToken(LLVMParser::UDIV, 0);
}

LLVMParser::OptExactContext* LLVMParser::UDivExprContext::optExact() {
  return getRuleContext<LLVMParser::OptExactContext>(0);
}

tree::TerminalNode* LLVMParser::UDivExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::UDivExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::UDivExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::UDivExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::UDivExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

tree::TerminalNode* LLVMParser::UDivExprContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

tree::TerminalNode* LLVMParser::UDivExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::UDivExprContext::getRuleIndex() const {
  return LLVMParser::RuleUDivExpr;
}


std::any LLVMParser::UDivExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitUDivExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::UDivExprContext* LLVMParser::uDivExpr() {
  UDivExprContext *_localctx = _tracker.createInstance<UDivExprContext>(_ctx, getState());
  enterRule(_localctx, 182, LLVMParser::RuleUDivExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1481);
    match(LLVMParser::UDIV);
    setState(1482);
    optExact();
    setState(1483);
    match(LLVMParser::LPAREN);
    setState(1484);
    llvmType(0);
    setState(1485);
    constant();
    setState(1486);
    match(LLVMParser::COMMA);
    setState(1487);
    llvmType(0);
    setState(1488);
    constant();
    setState(1489);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SDivExprContext ------------------------------------------------------------------

LLVMParser::SDivExprContext::SDivExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::SDivExprContext::SDIV() {
  return getToken(LLVMParser::SDIV, 0);
}

LLVMParser::OptExactContext* LLVMParser::SDivExprContext::optExact() {
  return getRuleContext<LLVMParser::OptExactContext>(0);
}

tree::TerminalNode* LLVMParser::SDivExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::SDivExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::SDivExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::SDivExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::SDivExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

tree::TerminalNode* LLVMParser::SDivExprContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

tree::TerminalNode* LLVMParser::SDivExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::SDivExprContext::getRuleIndex() const {
  return LLVMParser::RuleSDivExpr;
}


std::any LLVMParser::SDivExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitSDivExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::SDivExprContext* LLVMParser::sDivExpr() {
  SDivExprContext *_localctx = _tracker.createInstance<SDivExprContext>(_ctx, getState());
  enterRule(_localctx, 184, LLVMParser::RuleSDivExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1491);
    match(LLVMParser::SDIV);
    setState(1492);
    optExact();
    setState(1493);
    match(LLVMParser::LPAREN);
    setState(1494);
    llvmType(0);
    setState(1495);
    constant();
    setState(1496);
    match(LLVMParser::COMMA);
    setState(1497);
    llvmType(0);
    setState(1498);
    constant();
    setState(1499);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FDivExprContext ------------------------------------------------------------------

LLVMParser::FDivExprContext::FDivExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FDivExprContext::FDIV() {
  return getToken(LLVMParser::FDIV, 0);
}

tree::TerminalNode* LLVMParser::FDivExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::FDivExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::FDivExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::FDivExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::FDivExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

tree::TerminalNode* LLVMParser::FDivExprContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

tree::TerminalNode* LLVMParser::FDivExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::FDivExprContext::getRuleIndex() const {
  return LLVMParser::RuleFDivExpr;
}


std::any LLVMParser::FDivExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFDivExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FDivExprContext* LLVMParser::fDivExpr() {
  FDivExprContext *_localctx = _tracker.createInstance<FDivExprContext>(_ctx, getState());
  enterRule(_localctx, 186, LLVMParser::RuleFDivExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1501);
    match(LLVMParser::FDIV);
    setState(1502);
    match(LLVMParser::LPAREN);
    setState(1503);
    llvmType(0);
    setState(1504);
    constant();
    setState(1505);
    match(LLVMParser::COMMA);
    setState(1506);
    llvmType(0);
    setState(1507);
    constant();
    setState(1508);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- URemExprContext ------------------------------------------------------------------

LLVMParser::URemExprContext::URemExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::URemExprContext::UREM() {
  return getToken(LLVMParser::UREM, 0);
}

tree::TerminalNode* LLVMParser::URemExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::URemExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::URemExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::URemExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::URemExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

tree::TerminalNode* LLVMParser::URemExprContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

tree::TerminalNode* LLVMParser::URemExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::URemExprContext::getRuleIndex() const {
  return LLVMParser::RuleURemExpr;
}


std::any LLVMParser::URemExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitURemExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::URemExprContext* LLVMParser::uRemExpr() {
  URemExprContext *_localctx = _tracker.createInstance<URemExprContext>(_ctx, getState());
  enterRule(_localctx, 188, LLVMParser::RuleURemExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1510);
    match(LLVMParser::UREM);
    setState(1511);
    match(LLVMParser::LPAREN);
    setState(1512);
    llvmType(0);
    setState(1513);
    constant();
    setState(1514);
    match(LLVMParser::COMMA);
    setState(1515);
    llvmType(0);
    setState(1516);
    constant();
    setState(1517);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SRemExprContext ------------------------------------------------------------------

LLVMParser::SRemExprContext::SRemExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::SRemExprContext::SREM() {
  return getToken(LLVMParser::SREM, 0);
}

tree::TerminalNode* LLVMParser::SRemExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::SRemExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::SRemExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::SRemExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::SRemExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

tree::TerminalNode* LLVMParser::SRemExprContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

tree::TerminalNode* LLVMParser::SRemExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::SRemExprContext::getRuleIndex() const {
  return LLVMParser::RuleSRemExpr;
}


std::any LLVMParser::SRemExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitSRemExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::SRemExprContext* LLVMParser::sRemExpr() {
  SRemExprContext *_localctx = _tracker.createInstance<SRemExprContext>(_ctx, getState());
  enterRule(_localctx, 190, LLVMParser::RuleSRemExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1519);
    match(LLVMParser::SREM);
    setState(1520);
    match(LLVMParser::LPAREN);
    setState(1521);
    llvmType(0);
    setState(1522);
    constant();
    setState(1523);
    match(LLVMParser::COMMA);
    setState(1524);
    llvmType(0);
    setState(1525);
    constant();
    setState(1526);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FRemExprContext ------------------------------------------------------------------

LLVMParser::FRemExprContext::FRemExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FRemExprContext::FREM() {
  return getToken(LLVMParser::FREM, 0);
}

tree::TerminalNode* LLVMParser::FRemExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::FRemExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::FRemExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::FRemExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::FRemExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

tree::TerminalNode* LLVMParser::FRemExprContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

tree::TerminalNode* LLVMParser::FRemExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::FRemExprContext::getRuleIndex() const {
  return LLVMParser::RuleFRemExpr;
}


std::any LLVMParser::FRemExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFRemExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FRemExprContext* LLVMParser::fRemExpr() {
  FRemExprContext *_localctx = _tracker.createInstance<FRemExprContext>(_ctx, getState());
  enterRule(_localctx, 192, LLVMParser::RuleFRemExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1528);
    match(LLVMParser::FREM);
    setState(1529);
    match(LLVMParser::LPAREN);
    setState(1530);
    llvmType(0);
    setState(1531);
    constant();
    setState(1532);
    match(LLVMParser::COMMA);
    setState(1533);
    llvmType(0);
    setState(1534);
    constant();
    setState(1535);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShlExprContext ------------------------------------------------------------------

LLVMParser::ShlExprContext::ShlExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ShlExprContext::SHL() {
  return getToken(LLVMParser::SHL, 0);
}

LLVMParser::OverflowFlagsContext* LLVMParser::ShlExprContext::overflowFlags() {
  return getRuleContext<LLVMParser::OverflowFlagsContext>(0);
}

tree::TerminalNode* LLVMParser::ShlExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::ShlExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::ShlExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::ShlExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::ShlExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

tree::TerminalNode* LLVMParser::ShlExprContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

tree::TerminalNode* LLVMParser::ShlExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::ShlExprContext::getRuleIndex() const {
  return LLVMParser::RuleShlExpr;
}


std::any LLVMParser::ShlExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitShlExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ShlExprContext* LLVMParser::shlExpr() {
  ShlExprContext *_localctx = _tracker.createInstance<ShlExprContext>(_ctx, getState());
  enterRule(_localctx, 194, LLVMParser::RuleShlExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1537);
    match(LLVMParser::SHL);
    setState(1538);
    overflowFlags();
    setState(1539);
    match(LLVMParser::LPAREN);
    setState(1540);
    llvmType(0);
    setState(1541);
    constant();
    setState(1542);
    match(LLVMParser::COMMA);
    setState(1543);
    llvmType(0);
    setState(1544);
    constant();
    setState(1545);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LShrExprContext ------------------------------------------------------------------

LLVMParser::LShrExprContext::LShrExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::LShrExprContext::LSHR() {
  return getToken(LLVMParser::LSHR, 0);
}

LLVMParser::OptExactContext* LLVMParser::LShrExprContext::optExact() {
  return getRuleContext<LLVMParser::OptExactContext>(0);
}

tree::TerminalNode* LLVMParser::LShrExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::LShrExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::LShrExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::LShrExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::LShrExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

tree::TerminalNode* LLVMParser::LShrExprContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

tree::TerminalNode* LLVMParser::LShrExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::LShrExprContext::getRuleIndex() const {
  return LLVMParser::RuleLShrExpr;
}


std::any LLVMParser::LShrExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitLShrExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::LShrExprContext* LLVMParser::lShrExpr() {
  LShrExprContext *_localctx = _tracker.createInstance<LShrExprContext>(_ctx, getState());
  enterRule(_localctx, 196, LLVMParser::RuleLShrExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1547);
    match(LLVMParser::LSHR);
    setState(1548);
    optExact();
    setState(1549);
    match(LLVMParser::LPAREN);
    setState(1550);
    llvmType(0);
    setState(1551);
    constant();
    setState(1552);
    match(LLVMParser::COMMA);
    setState(1553);
    llvmType(0);
    setState(1554);
    constant();
    setState(1555);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AshrExprContext ------------------------------------------------------------------

LLVMParser::AshrExprContext::AshrExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::AshrExprContext::ASHR() {
  return getToken(LLVMParser::ASHR, 0);
}

LLVMParser::OptExactContext* LLVMParser::AshrExprContext::optExact() {
  return getRuleContext<LLVMParser::OptExactContext>(0);
}

tree::TerminalNode* LLVMParser::AshrExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::AshrExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::AshrExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::AshrExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::AshrExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

tree::TerminalNode* LLVMParser::AshrExprContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

tree::TerminalNode* LLVMParser::AshrExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::AshrExprContext::getRuleIndex() const {
  return LLVMParser::RuleAshrExpr;
}


std::any LLVMParser::AshrExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitAshrExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::AshrExprContext* LLVMParser::ashrExpr() {
  AshrExprContext *_localctx = _tracker.createInstance<AshrExprContext>(_ctx, getState());
  enterRule(_localctx, 198, LLVMParser::RuleAshrExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1557);
    match(LLVMParser::ASHR);
    setState(1558);
    optExact();
    setState(1559);
    match(LLVMParser::LPAREN);
    setState(1560);
    llvmType(0);
    setState(1561);
    constant();
    setState(1562);
    match(LLVMParser::COMMA);
    setState(1563);
    llvmType(0);
    setState(1564);
    constant();
    setState(1565);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AndExprContext ------------------------------------------------------------------

LLVMParser::AndExprContext::AndExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::AndExprContext::AND() {
  return getToken(LLVMParser::AND, 0);
}

tree::TerminalNode* LLVMParser::AndExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::AndExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::AndExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::AndExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::AndExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

tree::TerminalNode* LLVMParser::AndExprContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

tree::TerminalNode* LLVMParser::AndExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::AndExprContext::getRuleIndex() const {
  return LLVMParser::RuleAndExpr;
}


std::any LLVMParser::AndExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitAndExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::AndExprContext* LLVMParser::andExpr() {
  AndExprContext *_localctx = _tracker.createInstance<AndExprContext>(_ctx, getState());
  enterRule(_localctx, 200, LLVMParser::RuleAndExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1567);
    match(LLVMParser::AND);
    setState(1568);
    match(LLVMParser::LPAREN);
    setState(1569);
    llvmType(0);
    setState(1570);
    constant();
    setState(1571);
    match(LLVMParser::COMMA);
    setState(1572);
    llvmType(0);
    setState(1573);
    constant();
    setState(1574);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrExprContext ------------------------------------------------------------------

LLVMParser::OrExprContext::OrExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OrExprContext::OR() {
  return getToken(LLVMParser::OR, 0);
}

tree::TerminalNode* LLVMParser::OrExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::OrExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::OrExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::OrExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::OrExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

tree::TerminalNode* LLVMParser::OrExprContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

tree::TerminalNode* LLVMParser::OrExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::OrExprContext::getRuleIndex() const {
  return LLVMParser::RuleOrExpr;
}


std::any LLVMParser::OrExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOrExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OrExprContext* LLVMParser::orExpr() {
  OrExprContext *_localctx = _tracker.createInstance<OrExprContext>(_ctx, getState());
  enterRule(_localctx, 202, LLVMParser::RuleOrExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1576);
    match(LLVMParser::OR);
    setState(1577);
    match(LLVMParser::LPAREN);
    setState(1578);
    llvmType(0);
    setState(1579);
    constant();
    setState(1580);
    match(LLVMParser::COMMA);
    setState(1581);
    llvmType(0);
    setState(1582);
    constant();
    setState(1583);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- XorExprContext ------------------------------------------------------------------

LLVMParser::XorExprContext::XorExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::XorExprContext::XOR() {
  return getToken(LLVMParser::XOR, 0);
}

tree::TerminalNode* LLVMParser::XorExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::XorExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::XorExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::XorExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::XorExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

tree::TerminalNode* LLVMParser::XorExprContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

tree::TerminalNode* LLVMParser::XorExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::XorExprContext::getRuleIndex() const {
  return LLVMParser::RuleXorExpr;
}


std::any LLVMParser::XorExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitXorExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::XorExprContext* LLVMParser::xorExpr() {
  XorExprContext *_localctx = _tracker.createInstance<XorExprContext>(_ctx, getState());
  enterRule(_localctx, 204, LLVMParser::RuleXorExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1585);
    match(LLVMParser::XOR);
    setState(1586);
    match(LLVMParser::LPAREN);
    setState(1587);
    llvmType(0);
    setState(1588);
    constant();
    setState(1589);
    match(LLVMParser::COMMA);
    setState(1590);
    llvmType(0);
    setState(1591);
    constant();
    setState(1592);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExtractElementExprContext ------------------------------------------------------------------

LLVMParser::ExtractElementExprContext::ExtractElementExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ExtractElementExprContext::EXTRACTELEMENT() {
  return getToken(LLVMParser::EXTRACTELEMENT, 0);
}

tree::TerminalNode* LLVMParser::ExtractElementExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::ExtractElementExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::ExtractElementExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::ExtractElementExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::ExtractElementExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

tree::TerminalNode* LLVMParser::ExtractElementExprContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

tree::TerminalNode* LLVMParser::ExtractElementExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::ExtractElementExprContext::getRuleIndex() const {
  return LLVMParser::RuleExtractElementExpr;
}


std::any LLVMParser::ExtractElementExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitExtractElementExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ExtractElementExprContext* LLVMParser::extractElementExpr() {
  ExtractElementExprContext *_localctx = _tracker.createInstance<ExtractElementExprContext>(_ctx, getState());
  enterRule(_localctx, 206, LLVMParser::RuleExtractElementExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1594);
    match(LLVMParser::EXTRACTELEMENT);
    setState(1595);
    match(LLVMParser::LPAREN);
    setState(1596);
    llvmType(0);
    setState(1597);
    constant();
    setState(1598);
    match(LLVMParser::COMMA);
    setState(1599);
    llvmType(0);
    setState(1600);
    constant();
    setState(1601);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertElementExprContext ------------------------------------------------------------------

LLVMParser::InsertElementExprContext::InsertElementExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::InsertElementExprContext::INSERTELEMENT() {
  return getToken(LLVMParser::INSERTELEMENT, 0);
}

tree::TerminalNode* LLVMParser::InsertElementExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::InsertElementExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::InsertElementExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::InsertElementExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::InsertElementExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

std::vector<tree::TerminalNode *> LLVMParser::InsertElementExprContext::COMMA() {
  return getTokens(LLVMParser::COMMA);
}

tree::TerminalNode* LLVMParser::InsertElementExprContext::COMMA(size_t i) {
  return getToken(LLVMParser::COMMA, i);
}

tree::TerminalNode* LLVMParser::InsertElementExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::InsertElementExprContext::getRuleIndex() const {
  return LLVMParser::RuleInsertElementExpr;
}


std::any LLVMParser::InsertElementExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitInsertElementExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::InsertElementExprContext* LLVMParser::insertElementExpr() {
  InsertElementExprContext *_localctx = _tracker.createInstance<InsertElementExprContext>(_ctx, getState());
  enterRule(_localctx, 208, LLVMParser::RuleInsertElementExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1603);
    match(LLVMParser::INSERTELEMENT);
    setState(1604);
    match(LLVMParser::LPAREN);
    setState(1605);
    llvmType(0);
    setState(1606);
    constant();
    setState(1607);
    match(LLVMParser::COMMA);
    setState(1608);
    llvmType(0);
    setState(1609);
    constant();
    setState(1610);
    match(LLVMParser::COMMA);
    setState(1611);
    llvmType(0);
    setState(1612);
    constant();
    setState(1613);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShuffleVectorExprContext ------------------------------------------------------------------

LLVMParser::ShuffleVectorExprContext::ShuffleVectorExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ShuffleVectorExprContext::SHUFFLEVECTOR() {
  return getToken(LLVMParser::SHUFFLEVECTOR, 0);
}

tree::TerminalNode* LLVMParser::ShuffleVectorExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::ShuffleVectorExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::ShuffleVectorExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::ShuffleVectorExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::ShuffleVectorExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

std::vector<tree::TerminalNode *> LLVMParser::ShuffleVectorExprContext::COMMA() {
  return getTokens(LLVMParser::COMMA);
}

tree::TerminalNode* LLVMParser::ShuffleVectorExprContext::COMMA(size_t i) {
  return getToken(LLVMParser::COMMA, i);
}

tree::TerminalNode* LLVMParser::ShuffleVectorExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::ShuffleVectorExprContext::getRuleIndex() const {
  return LLVMParser::RuleShuffleVectorExpr;
}


std::any LLVMParser::ShuffleVectorExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitShuffleVectorExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ShuffleVectorExprContext* LLVMParser::shuffleVectorExpr() {
  ShuffleVectorExprContext *_localctx = _tracker.createInstance<ShuffleVectorExprContext>(_ctx, getState());
  enterRule(_localctx, 210, LLVMParser::RuleShuffleVectorExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1615);
    match(LLVMParser::SHUFFLEVECTOR);
    setState(1616);
    match(LLVMParser::LPAREN);
    setState(1617);
    llvmType(0);
    setState(1618);
    constant();
    setState(1619);
    match(LLVMParser::COMMA);
    setState(1620);
    llvmType(0);
    setState(1621);
    constant();
    setState(1622);
    match(LLVMParser::COMMA);
    setState(1623);
    llvmType(0);
    setState(1624);
    constant();
    setState(1625);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExtractValueExprContext ------------------------------------------------------------------

LLVMParser::ExtractValueExprContext::ExtractValueExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ExtractValueExprContext::EXTRACTVALUE() {
  return getToken(LLVMParser::EXTRACTVALUE, 0);
}

tree::TerminalNode* LLVMParser::ExtractValueExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::LlvmTypeContext* LLVMParser::ExtractValueExprContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::ConstantContext* LLVMParser::ExtractValueExprContext::constant() {
  return getRuleContext<LLVMParser::ConstantContext>(0);
}

LLVMParser::IndicesContext* LLVMParser::ExtractValueExprContext::indices() {
  return getRuleContext<LLVMParser::IndicesContext>(0);
}

tree::TerminalNode* LLVMParser::ExtractValueExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::ExtractValueExprContext::getRuleIndex() const {
  return LLVMParser::RuleExtractValueExpr;
}


std::any LLVMParser::ExtractValueExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitExtractValueExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ExtractValueExprContext* LLVMParser::extractValueExpr() {
  ExtractValueExprContext *_localctx = _tracker.createInstance<ExtractValueExprContext>(_ctx, getState());
  enterRule(_localctx, 212, LLVMParser::RuleExtractValueExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1627);
    match(LLVMParser::EXTRACTVALUE);
    setState(1628);
    match(LLVMParser::LPAREN);
    setState(1629);
    llvmType(0);
    setState(1630);
    constant();
    setState(1631);
    indices();
    setState(1632);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertValueExprContext ------------------------------------------------------------------

LLVMParser::InsertValueExprContext::InsertValueExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::InsertValueExprContext::INSERTVALUE() {
  return getToken(LLVMParser::INSERTVALUE, 0);
}

tree::TerminalNode* LLVMParser::InsertValueExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::InsertValueExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::InsertValueExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::InsertValueExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::InsertValueExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

tree::TerminalNode* LLVMParser::InsertValueExprContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::IndicesContext* LLVMParser::InsertValueExprContext::indices() {
  return getRuleContext<LLVMParser::IndicesContext>(0);
}

tree::TerminalNode* LLVMParser::InsertValueExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::InsertValueExprContext::getRuleIndex() const {
  return LLVMParser::RuleInsertValueExpr;
}


std::any LLVMParser::InsertValueExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitInsertValueExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::InsertValueExprContext* LLVMParser::insertValueExpr() {
  InsertValueExprContext *_localctx = _tracker.createInstance<InsertValueExprContext>(_ctx, getState());
  enterRule(_localctx, 214, LLVMParser::RuleInsertValueExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1634);
    match(LLVMParser::INSERTVALUE);
    setState(1635);
    match(LLVMParser::LPAREN);
    setState(1636);
    llvmType(0);
    setState(1637);
    constant();
    setState(1638);
    match(LLVMParser::COMMA);
    setState(1639);
    llvmType(0);
    setState(1640);
    constant();
    setState(1641);
    indices();
    setState(1642);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GetElementPtrExprContext ------------------------------------------------------------------

LLVMParser::GetElementPtrExprContext::GetElementPtrExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::GetElementPtrExprContext::GETELEMENTPTR() {
  return getToken(LLVMParser::GETELEMENTPTR, 0);
}

LLVMParser::OptInBoundsContext* LLVMParser::GetElementPtrExprContext::optInBounds() {
  return getRuleContext<LLVMParser::OptInBoundsContext>(0);
}

tree::TerminalNode* LLVMParser::GetElementPtrExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::GetElementPtrExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::GetElementPtrExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<tree::TerminalNode *> LLVMParser::GetElementPtrExprContext::COMMA() {
  return getTokens(LLVMParser::COMMA);
}

tree::TerminalNode* LLVMParser::GetElementPtrExprContext::COMMA(size_t i) {
  return getToken(LLVMParser::COMMA, i);
}

LLVMParser::ConstantContext* LLVMParser::GetElementPtrExprContext::constant() {
  return getRuleContext<LLVMParser::ConstantContext>(0);
}

LLVMParser::GepConstIndicesContext* LLVMParser::GetElementPtrExprContext::gepConstIndices() {
  return getRuleContext<LLVMParser::GepConstIndicesContext>(0);
}

tree::TerminalNode* LLVMParser::GetElementPtrExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::GetElementPtrExprContext::getRuleIndex() const {
  return LLVMParser::RuleGetElementPtrExpr;
}


std::any LLVMParser::GetElementPtrExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitGetElementPtrExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::GetElementPtrExprContext* LLVMParser::getElementPtrExpr() {
  GetElementPtrExprContext *_localctx = _tracker.createInstance<GetElementPtrExprContext>(_ctx, getState());
  enterRule(_localctx, 216, LLVMParser::RuleGetElementPtrExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1644);
    match(LLVMParser::GETELEMENTPTR);
    setState(1645);
    optInBounds();
    setState(1646);
    match(LLVMParser::LPAREN);
    setState(1647);
    llvmType(0);
    setState(1648);
    match(LLVMParser::COMMA);
    setState(1649);
    llvmType(0);
    setState(1650);
    constant();
    setState(1651);
    match(LLVMParser::COMMA);
    setState(1652);
    gepConstIndices();
    setState(1653);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GepConstIndicesContext ------------------------------------------------------------------

LLVMParser::GepConstIndicesContext::GepConstIndicesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::GepConstIndexListContext* LLVMParser::GepConstIndicesContext::gepConstIndexList() {
  return getRuleContext<LLVMParser::GepConstIndexListContext>(0);
}


size_t LLVMParser::GepConstIndicesContext::getRuleIndex() const {
  return LLVMParser::RuleGepConstIndices;
}


std::any LLVMParser::GepConstIndicesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitGepConstIndices(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::GepConstIndicesContext* LLVMParser::gepConstIndices() {
  GepConstIndicesContext *_localctx = _tracker.createInstance<GepConstIndicesContext>(_ctx, getState());
  enterRule(_localctx, 218, LLVMParser::RuleGepConstIndices);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1656);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5122) != 0) || ((((_la - 126) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 126)) & 2251821288521729) != 0) || ((((_la - 195) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 195)) & 4295000065) != 0) || _la == LLVMParser::PPC_FP128 || ((((_la - 351) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 351)) & 175939040313345) != 0) || _la == LLVMParser::INT_TYPE

    || _la == LLVMParser::LOCAL_IDENT) {
      setState(1655);
      gepConstIndexList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GepConstIndexListContext ------------------------------------------------------------------

LLVMParser::GepConstIndexListContext::GepConstIndexListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::GepConstIndexContext* LLVMParser::GepConstIndexListContext::gepConstIndex() {
  return getRuleContext<LLVMParser::GepConstIndexContext>(0);
}

LLVMParser::GepConstIndexListContext* LLVMParser::GepConstIndexListContext::gepConstIndexList() {
  return getRuleContext<LLVMParser::GepConstIndexListContext>(0);
}

tree::TerminalNode* LLVMParser::GepConstIndexListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::GepConstIndexListContext::getRuleIndex() const {
  return LLVMParser::RuleGepConstIndexList;
}


std::any LLVMParser::GepConstIndexListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitGepConstIndexList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::GepConstIndexListContext* LLVMParser::gepConstIndexList() {
   return gepConstIndexList(0);
}

LLVMParser::GepConstIndexListContext* LLVMParser::gepConstIndexList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::GepConstIndexListContext *_localctx = _tracker.createInstance<GepConstIndexListContext>(_ctx, parentState);
  LLVMParser::GepConstIndexListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 220;
  enterRecursionRule(_localctx, 220, LLVMParser::RuleGepConstIndexList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1659);
    gepConstIndex();
    _ctx->stop = _input->LT(-1);
    setState(1666);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<GepConstIndexListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleGepConstIndexList);
        setState(1661);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1662);
        match(LLVMParser::COMMA);
        setState(1663);
        gepConstIndex(); 
      }
      setState(1668);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- GepConstIndexContext ------------------------------------------------------------------

LLVMParser::GepConstIndexContext::GepConstIndexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::OptInrangeContext* LLVMParser::GepConstIndexContext::optInrange() {
  return getRuleContext<LLVMParser::OptInrangeContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::GepConstIndexContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::ConstantContext* LLVMParser::GepConstIndexContext::constant() {
  return getRuleContext<LLVMParser::ConstantContext>(0);
}


size_t LLVMParser::GepConstIndexContext::getRuleIndex() const {
  return LLVMParser::RuleGepConstIndex;
}


std::any LLVMParser::GepConstIndexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitGepConstIndex(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::GepConstIndexContext* LLVMParser::gepConstIndex() {
  GepConstIndexContext *_localctx = _tracker.createInstance<GepConstIndexContext>(_ctx, getState());
  enterRule(_localctx, 222, LLVMParser::RuleGepConstIndex);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1669);
    optInrange();
    setState(1670);
    llvmType(0);
    setState(1671);
    constant();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptInrangeContext ------------------------------------------------------------------

LLVMParser::OptInrangeContext::OptInrangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OptInrangeContext::INRANGE() {
  return getToken(LLVMParser::INRANGE, 0);
}


size_t LLVMParser::OptInrangeContext::getRuleIndex() const {
  return LLVMParser::RuleOptInrange;
}


std::any LLVMParser::OptInrangeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptInrange(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptInrangeContext* LLVMParser::optInrange() {
  OptInrangeContext *_localctx = _tracker.createInstance<OptInrangeContext>(_ctx, getState());
  enterRule(_localctx, 224, LLVMParser::RuleOptInrange);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1674);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::INRANGE) {
      setState(1673);
      match(LLVMParser::INRANGE);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TruncExprContext ------------------------------------------------------------------

LLVMParser::TruncExprContext::TruncExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::TruncExprContext::TRUNC() {
  return getToken(LLVMParser::TRUNC, 0);
}

tree::TerminalNode* LLVMParser::TruncExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::TruncExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::TruncExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ConstantContext* LLVMParser::TruncExprContext::constant() {
  return getRuleContext<LLVMParser::ConstantContext>(0);
}

tree::TerminalNode* LLVMParser::TruncExprContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

tree::TerminalNode* LLVMParser::TruncExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::TruncExprContext::getRuleIndex() const {
  return LLVMParser::RuleTruncExpr;
}


std::any LLVMParser::TruncExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitTruncExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::TruncExprContext* LLVMParser::truncExpr() {
  TruncExprContext *_localctx = _tracker.createInstance<TruncExprContext>(_ctx, getState());
  enterRule(_localctx, 226, LLVMParser::RuleTruncExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1676);
    match(LLVMParser::TRUNC);
    setState(1677);
    match(LLVMParser::LPAREN);
    setState(1678);
    llvmType(0);
    setState(1679);
    constant();
    setState(1680);
    match(LLVMParser::TO);
    setState(1681);
    llvmType(0);
    setState(1682);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ZExtExprContext ------------------------------------------------------------------

LLVMParser::ZExtExprContext::ZExtExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ZExtExprContext::ZEXT() {
  return getToken(LLVMParser::ZEXT, 0);
}

tree::TerminalNode* LLVMParser::ZExtExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::ZExtExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::ZExtExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ConstantContext* LLVMParser::ZExtExprContext::constant() {
  return getRuleContext<LLVMParser::ConstantContext>(0);
}

tree::TerminalNode* LLVMParser::ZExtExprContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

tree::TerminalNode* LLVMParser::ZExtExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::ZExtExprContext::getRuleIndex() const {
  return LLVMParser::RuleZExtExpr;
}


std::any LLVMParser::ZExtExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitZExtExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ZExtExprContext* LLVMParser::zExtExpr() {
  ZExtExprContext *_localctx = _tracker.createInstance<ZExtExprContext>(_ctx, getState());
  enterRule(_localctx, 228, LLVMParser::RuleZExtExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1684);
    match(LLVMParser::ZEXT);
    setState(1685);
    match(LLVMParser::LPAREN);
    setState(1686);
    llvmType(0);
    setState(1687);
    constant();
    setState(1688);
    match(LLVMParser::TO);
    setState(1689);
    llvmType(0);
    setState(1690);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SExtExprContext ------------------------------------------------------------------

LLVMParser::SExtExprContext::SExtExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::SExtExprContext::SEXT() {
  return getToken(LLVMParser::SEXT, 0);
}

tree::TerminalNode* LLVMParser::SExtExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::SExtExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::SExtExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ConstantContext* LLVMParser::SExtExprContext::constant() {
  return getRuleContext<LLVMParser::ConstantContext>(0);
}

tree::TerminalNode* LLVMParser::SExtExprContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

tree::TerminalNode* LLVMParser::SExtExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::SExtExprContext::getRuleIndex() const {
  return LLVMParser::RuleSExtExpr;
}


std::any LLVMParser::SExtExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitSExtExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::SExtExprContext* LLVMParser::sExtExpr() {
  SExtExprContext *_localctx = _tracker.createInstance<SExtExprContext>(_ctx, getState());
  enterRule(_localctx, 230, LLVMParser::RuleSExtExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1692);
    match(LLVMParser::SEXT);
    setState(1693);
    match(LLVMParser::LPAREN);
    setState(1694);
    llvmType(0);
    setState(1695);
    constant();
    setState(1696);
    match(LLVMParser::TO);
    setState(1697);
    llvmType(0);
    setState(1698);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FPTruncExprContext ------------------------------------------------------------------

LLVMParser::FPTruncExprContext::FPTruncExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FPTruncExprContext::FPTRUNC() {
  return getToken(LLVMParser::FPTRUNC, 0);
}

tree::TerminalNode* LLVMParser::FPTruncExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::FPTruncExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::FPTruncExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ConstantContext* LLVMParser::FPTruncExprContext::constant() {
  return getRuleContext<LLVMParser::ConstantContext>(0);
}

tree::TerminalNode* LLVMParser::FPTruncExprContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

tree::TerminalNode* LLVMParser::FPTruncExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::FPTruncExprContext::getRuleIndex() const {
  return LLVMParser::RuleFPTruncExpr;
}


std::any LLVMParser::FPTruncExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFPTruncExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FPTruncExprContext* LLVMParser::fPTruncExpr() {
  FPTruncExprContext *_localctx = _tracker.createInstance<FPTruncExprContext>(_ctx, getState());
  enterRule(_localctx, 232, LLVMParser::RuleFPTruncExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1700);
    match(LLVMParser::FPTRUNC);
    setState(1701);
    match(LLVMParser::LPAREN);
    setState(1702);
    llvmType(0);
    setState(1703);
    constant();
    setState(1704);
    match(LLVMParser::TO);
    setState(1705);
    llvmType(0);
    setState(1706);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FpExtExprContext ------------------------------------------------------------------

LLVMParser::FpExtExprContext::FpExtExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FpExtExprContext::FPEXT() {
  return getToken(LLVMParser::FPEXT, 0);
}

tree::TerminalNode* LLVMParser::FpExtExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::FpExtExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::FpExtExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ConstantContext* LLVMParser::FpExtExprContext::constant() {
  return getRuleContext<LLVMParser::ConstantContext>(0);
}

tree::TerminalNode* LLVMParser::FpExtExprContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

tree::TerminalNode* LLVMParser::FpExtExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::FpExtExprContext::getRuleIndex() const {
  return LLVMParser::RuleFpExtExpr;
}


std::any LLVMParser::FpExtExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFpExtExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FpExtExprContext* LLVMParser::fpExtExpr() {
  FpExtExprContext *_localctx = _tracker.createInstance<FpExtExprContext>(_ctx, getState());
  enterRule(_localctx, 234, LLVMParser::RuleFpExtExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1708);
    match(LLVMParser::FPEXT);
    setState(1709);
    match(LLVMParser::LPAREN);
    setState(1710);
    llvmType(0);
    setState(1711);
    constant();
    setState(1712);
    match(LLVMParser::TO);
    setState(1713);
    llvmType(0);
    setState(1714);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FpToUIExprContext ------------------------------------------------------------------

LLVMParser::FpToUIExprContext::FpToUIExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FpToUIExprContext::FPTOUI() {
  return getToken(LLVMParser::FPTOUI, 0);
}

tree::TerminalNode* LLVMParser::FpToUIExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::FpToUIExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::FpToUIExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ConstantContext* LLVMParser::FpToUIExprContext::constant() {
  return getRuleContext<LLVMParser::ConstantContext>(0);
}

tree::TerminalNode* LLVMParser::FpToUIExprContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

tree::TerminalNode* LLVMParser::FpToUIExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::FpToUIExprContext::getRuleIndex() const {
  return LLVMParser::RuleFpToUIExpr;
}


std::any LLVMParser::FpToUIExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFpToUIExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FpToUIExprContext* LLVMParser::fpToUIExpr() {
  FpToUIExprContext *_localctx = _tracker.createInstance<FpToUIExprContext>(_ctx, getState());
  enterRule(_localctx, 236, LLVMParser::RuleFpToUIExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1716);
    match(LLVMParser::FPTOUI);
    setState(1717);
    match(LLVMParser::LPAREN);
    setState(1718);
    llvmType(0);
    setState(1719);
    constant();
    setState(1720);
    match(LLVMParser::TO);
    setState(1721);
    llvmType(0);
    setState(1722);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FpToSIExprContext ------------------------------------------------------------------

LLVMParser::FpToSIExprContext::FpToSIExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FpToSIExprContext::FPTOSI() {
  return getToken(LLVMParser::FPTOSI, 0);
}

tree::TerminalNode* LLVMParser::FpToSIExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::FpToSIExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::FpToSIExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ConstantContext* LLVMParser::FpToSIExprContext::constant() {
  return getRuleContext<LLVMParser::ConstantContext>(0);
}

tree::TerminalNode* LLVMParser::FpToSIExprContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

tree::TerminalNode* LLVMParser::FpToSIExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::FpToSIExprContext::getRuleIndex() const {
  return LLVMParser::RuleFpToSIExpr;
}


std::any LLVMParser::FpToSIExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFpToSIExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FpToSIExprContext* LLVMParser::fpToSIExpr() {
  FpToSIExprContext *_localctx = _tracker.createInstance<FpToSIExprContext>(_ctx, getState());
  enterRule(_localctx, 238, LLVMParser::RuleFpToSIExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1724);
    match(LLVMParser::FPTOSI);
    setState(1725);
    match(LLVMParser::LPAREN);
    setState(1726);
    llvmType(0);
    setState(1727);
    constant();
    setState(1728);
    match(LLVMParser::TO);
    setState(1729);
    llvmType(0);
    setState(1730);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UiToFPExprContext ------------------------------------------------------------------

LLVMParser::UiToFPExprContext::UiToFPExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::UiToFPExprContext::UITOFP() {
  return getToken(LLVMParser::UITOFP, 0);
}

tree::TerminalNode* LLVMParser::UiToFPExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::UiToFPExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::UiToFPExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ConstantContext* LLVMParser::UiToFPExprContext::constant() {
  return getRuleContext<LLVMParser::ConstantContext>(0);
}

tree::TerminalNode* LLVMParser::UiToFPExprContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

tree::TerminalNode* LLVMParser::UiToFPExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::UiToFPExprContext::getRuleIndex() const {
  return LLVMParser::RuleUiToFPExpr;
}


std::any LLVMParser::UiToFPExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitUiToFPExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::UiToFPExprContext* LLVMParser::uiToFPExpr() {
  UiToFPExprContext *_localctx = _tracker.createInstance<UiToFPExprContext>(_ctx, getState());
  enterRule(_localctx, 240, LLVMParser::RuleUiToFPExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1732);
    match(LLVMParser::UITOFP);
    setState(1733);
    match(LLVMParser::LPAREN);
    setState(1734);
    llvmType(0);
    setState(1735);
    constant();
    setState(1736);
    match(LLVMParser::TO);
    setState(1737);
    llvmType(0);
    setState(1738);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SiToFPExprContext ------------------------------------------------------------------

LLVMParser::SiToFPExprContext::SiToFPExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::SiToFPExprContext::SITOFP() {
  return getToken(LLVMParser::SITOFP, 0);
}

tree::TerminalNode* LLVMParser::SiToFPExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::SiToFPExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::SiToFPExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ConstantContext* LLVMParser::SiToFPExprContext::constant() {
  return getRuleContext<LLVMParser::ConstantContext>(0);
}

tree::TerminalNode* LLVMParser::SiToFPExprContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

tree::TerminalNode* LLVMParser::SiToFPExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::SiToFPExprContext::getRuleIndex() const {
  return LLVMParser::RuleSiToFPExpr;
}


std::any LLVMParser::SiToFPExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitSiToFPExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::SiToFPExprContext* LLVMParser::siToFPExpr() {
  SiToFPExprContext *_localctx = _tracker.createInstance<SiToFPExprContext>(_ctx, getState());
  enterRule(_localctx, 242, LLVMParser::RuleSiToFPExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1740);
    match(LLVMParser::SITOFP);
    setState(1741);
    match(LLVMParser::LPAREN);
    setState(1742);
    llvmType(0);
    setState(1743);
    constant();
    setState(1744);
    match(LLVMParser::TO);
    setState(1745);
    llvmType(0);
    setState(1746);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PtrToIntExprContext ------------------------------------------------------------------

LLVMParser::PtrToIntExprContext::PtrToIntExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::PtrToIntExprContext::PTRTOINT() {
  return getToken(LLVMParser::PTRTOINT, 0);
}

tree::TerminalNode* LLVMParser::PtrToIntExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::PtrToIntExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::PtrToIntExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ConstantContext* LLVMParser::PtrToIntExprContext::constant() {
  return getRuleContext<LLVMParser::ConstantContext>(0);
}

tree::TerminalNode* LLVMParser::PtrToIntExprContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

tree::TerminalNode* LLVMParser::PtrToIntExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::PtrToIntExprContext::getRuleIndex() const {
  return LLVMParser::RulePtrToIntExpr;
}


std::any LLVMParser::PtrToIntExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitPtrToIntExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::PtrToIntExprContext* LLVMParser::ptrToIntExpr() {
  PtrToIntExprContext *_localctx = _tracker.createInstance<PtrToIntExprContext>(_ctx, getState());
  enterRule(_localctx, 244, LLVMParser::RulePtrToIntExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1748);
    match(LLVMParser::PTRTOINT);
    setState(1749);
    match(LLVMParser::LPAREN);
    setState(1750);
    llvmType(0);
    setState(1751);
    constant();
    setState(1752);
    match(LLVMParser::TO);
    setState(1753);
    llvmType(0);
    setState(1754);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntToPtrExprContext ------------------------------------------------------------------

LLVMParser::IntToPtrExprContext::IntToPtrExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::IntToPtrExprContext::INTTOPTR() {
  return getToken(LLVMParser::INTTOPTR, 0);
}

tree::TerminalNode* LLVMParser::IntToPtrExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::IntToPtrExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::IntToPtrExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ConstantContext* LLVMParser::IntToPtrExprContext::constant() {
  return getRuleContext<LLVMParser::ConstantContext>(0);
}

tree::TerminalNode* LLVMParser::IntToPtrExprContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

tree::TerminalNode* LLVMParser::IntToPtrExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::IntToPtrExprContext::getRuleIndex() const {
  return LLVMParser::RuleIntToPtrExpr;
}


std::any LLVMParser::IntToPtrExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitIntToPtrExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::IntToPtrExprContext* LLVMParser::intToPtrExpr() {
  IntToPtrExprContext *_localctx = _tracker.createInstance<IntToPtrExprContext>(_ctx, getState());
  enterRule(_localctx, 246, LLVMParser::RuleIntToPtrExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1756);
    match(LLVMParser::INTTOPTR);
    setState(1757);
    match(LLVMParser::LPAREN);
    setState(1758);
    llvmType(0);
    setState(1759);
    constant();
    setState(1760);
    match(LLVMParser::TO);
    setState(1761);
    llvmType(0);
    setState(1762);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitCastExprContext ------------------------------------------------------------------

LLVMParser::BitCastExprContext::BitCastExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::BitCastExprContext::BITCAST() {
  return getToken(LLVMParser::BITCAST, 0);
}

tree::TerminalNode* LLVMParser::BitCastExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::BitCastExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::BitCastExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ConstantContext* LLVMParser::BitCastExprContext::constant() {
  return getRuleContext<LLVMParser::ConstantContext>(0);
}

tree::TerminalNode* LLVMParser::BitCastExprContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

tree::TerminalNode* LLVMParser::BitCastExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::BitCastExprContext::getRuleIndex() const {
  return LLVMParser::RuleBitCastExpr;
}


std::any LLVMParser::BitCastExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitBitCastExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::BitCastExprContext* LLVMParser::bitCastExpr() {
  BitCastExprContext *_localctx = _tracker.createInstance<BitCastExprContext>(_ctx, getState());
  enterRule(_localctx, 248, LLVMParser::RuleBitCastExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1764);
    match(LLVMParser::BITCAST);
    setState(1765);
    match(LLVMParser::LPAREN);
    setState(1766);
    llvmType(0);
    setState(1767);
    constant();
    setState(1768);
    match(LLVMParser::TO);
    setState(1769);
    llvmType(0);
    setState(1770);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddrSpaceCastExprContext ------------------------------------------------------------------

LLVMParser::AddrSpaceCastExprContext::AddrSpaceCastExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::AddrSpaceCastExprContext::ADDRSPACECAST() {
  return getToken(LLVMParser::ADDRSPACECAST, 0);
}

tree::TerminalNode* LLVMParser::AddrSpaceCastExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::AddrSpaceCastExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::AddrSpaceCastExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ConstantContext* LLVMParser::AddrSpaceCastExprContext::constant() {
  return getRuleContext<LLVMParser::ConstantContext>(0);
}

tree::TerminalNode* LLVMParser::AddrSpaceCastExprContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

tree::TerminalNode* LLVMParser::AddrSpaceCastExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::AddrSpaceCastExprContext::getRuleIndex() const {
  return LLVMParser::RuleAddrSpaceCastExpr;
}


std::any LLVMParser::AddrSpaceCastExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitAddrSpaceCastExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::AddrSpaceCastExprContext* LLVMParser::addrSpaceCastExpr() {
  AddrSpaceCastExprContext *_localctx = _tracker.createInstance<AddrSpaceCastExprContext>(_ctx, getState());
  enterRule(_localctx, 250, LLVMParser::RuleAddrSpaceCastExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1772);
    match(LLVMParser::ADDRSPACECAST);
    setState(1773);
    match(LLVMParser::LPAREN);
    setState(1774);
    llvmType(0);
    setState(1775);
    constant();
    setState(1776);
    match(LLVMParser::TO);
    setState(1777);
    llvmType(0);
    setState(1778);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ICmpExprContext ------------------------------------------------------------------

LLVMParser::ICmpExprContext::ICmpExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ICmpExprContext::ICMP() {
  return getToken(LLVMParser::ICMP, 0);
}

LLVMParser::IPredContext* LLVMParser::ICmpExprContext::iPred() {
  return getRuleContext<LLVMParser::IPredContext>(0);
}

tree::TerminalNode* LLVMParser::ICmpExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::ICmpExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::ICmpExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::ICmpExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::ICmpExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

tree::TerminalNode* LLVMParser::ICmpExprContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

tree::TerminalNode* LLVMParser::ICmpExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::ICmpExprContext::getRuleIndex() const {
  return LLVMParser::RuleICmpExpr;
}


std::any LLVMParser::ICmpExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitICmpExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ICmpExprContext* LLVMParser::iCmpExpr() {
  ICmpExprContext *_localctx = _tracker.createInstance<ICmpExprContext>(_ctx, getState());
  enterRule(_localctx, 252, LLVMParser::RuleICmpExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1780);
    match(LLVMParser::ICMP);
    setState(1781);
    iPred();
    setState(1782);
    match(LLVMParser::LPAREN);
    setState(1783);
    llvmType(0);
    setState(1784);
    constant();
    setState(1785);
    match(LLVMParser::COMMA);
    setState(1786);
    llvmType(0);
    setState(1787);
    constant();
    setState(1788);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FCmpExprContext ------------------------------------------------------------------

LLVMParser::FCmpExprContext::FCmpExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FCmpExprContext::FCMP() {
  return getToken(LLVMParser::FCMP, 0);
}

LLVMParser::FpredContext* LLVMParser::FCmpExprContext::fpred() {
  return getRuleContext<LLVMParser::FpredContext>(0);
}

tree::TerminalNode* LLVMParser::FCmpExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::FCmpExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::FCmpExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::FCmpExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::FCmpExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

tree::TerminalNode* LLVMParser::FCmpExprContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

tree::TerminalNode* LLVMParser::FCmpExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::FCmpExprContext::getRuleIndex() const {
  return LLVMParser::RuleFCmpExpr;
}


std::any LLVMParser::FCmpExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFCmpExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FCmpExprContext* LLVMParser::fCmpExpr() {
  FCmpExprContext *_localctx = _tracker.createInstance<FCmpExprContext>(_ctx, getState());
  enterRule(_localctx, 254, LLVMParser::RuleFCmpExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1790);
    match(LLVMParser::FCMP);
    setState(1791);
    fpred();
    setState(1792);
    match(LLVMParser::LPAREN);
    setState(1793);
    llvmType(0);
    setState(1794);
    constant();
    setState(1795);
    match(LLVMParser::COMMA);
    setState(1796);
    llvmType(0);
    setState(1797);
    constant();
    setState(1798);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectExprContext ------------------------------------------------------------------

LLVMParser::SelectExprContext::SelectExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::SelectExprContext::SELECT() {
  return getToken(LLVMParser::SELECT, 0);
}

tree::TerminalNode* LLVMParser::SelectExprContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::SelectExprContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::SelectExprContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ConstantContext *> LLVMParser::SelectExprContext::constant() {
  return getRuleContexts<LLVMParser::ConstantContext>();
}

LLVMParser::ConstantContext* LLVMParser::SelectExprContext::constant(size_t i) {
  return getRuleContext<LLVMParser::ConstantContext>(i);
}

std::vector<tree::TerminalNode *> LLVMParser::SelectExprContext::COMMA() {
  return getTokens(LLVMParser::COMMA);
}

tree::TerminalNode* LLVMParser::SelectExprContext::COMMA(size_t i) {
  return getToken(LLVMParser::COMMA, i);
}

tree::TerminalNode* LLVMParser::SelectExprContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::SelectExprContext::getRuleIndex() const {
  return LLVMParser::RuleSelectExpr;
}


std::any LLVMParser::SelectExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitSelectExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::SelectExprContext* LLVMParser::selectExpr() {
  SelectExprContext *_localctx = _tracker.createInstance<SelectExprContext>(_ctx, getState());
  enterRule(_localctx, 256, LLVMParser::RuleSelectExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1800);
    match(LLVMParser::SELECT);
    setState(1801);
    match(LLVMParser::LPAREN);
    setState(1802);
    llvmType(0);
    setState(1803);
    constant();
    setState(1804);
    match(LLVMParser::COMMA);
    setState(1805);
    llvmType(0);
    setState(1806);
    constant();
    setState(1807);
    match(LLVMParser::COMMA);
    setState(1808);
    llvmType(0);
    setState(1809);
    constant();
    setState(1810);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BasicBlockListContext ------------------------------------------------------------------

LLVMParser::BasicBlockListContext::BasicBlockListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::BasicBlockContext* LLVMParser::BasicBlockListContext::basicBlock() {
  return getRuleContext<LLVMParser::BasicBlockContext>(0);
}

LLVMParser::BasicBlockListContext* LLVMParser::BasicBlockListContext::basicBlockList() {
  return getRuleContext<LLVMParser::BasicBlockListContext>(0);
}


size_t LLVMParser::BasicBlockListContext::getRuleIndex() const {
  return LLVMParser::RuleBasicBlockList;
}


std::any LLVMParser::BasicBlockListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitBasicBlockList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::BasicBlockListContext* LLVMParser::basicBlockList() {
   return basicBlockList(0);
}

LLVMParser::BasicBlockListContext* LLVMParser::basicBlockList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::BasicBlockListContext *_localctx = _tracker.createInstance<BasicBlockListContext>(_ctx, parentState);
  LLVMParser::BasicBlockListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 258;
  enterRecursionRule(_localctx, 258, LLVMParser::RuleBasicBlockList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1813);
    basicBlock();
    _ctx->stop = _input->LT(-1);
    setState(1819);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<BasicBlockListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBasicBlockList);
        setState(1815);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1816);
        basicBlock(); 
      }
      setState(1821);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- BasicBlockContext ------------------------------------------------------------------

LLVMParser::BasicBlockContext::BasicBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::OptLabelIdentContext* LLVMParser::BasicBlockContext::optLabelIdent() {
  return getRuleContext<LLVMParser::OptLabelIdentContext>(0);
}

LLVMParser::InstructionsContext* LLVMParser::BasicBlockContext::instructions() {
  return getRuleContext<LLVMParser::InstructionsContext>(0);
}

LLVMParser::TerminatorContext* LLVMParser::BasicBlockContext::terminator() {
  return getRuleContext<LLVMParser::TerminatorContext>(0);
}


size_t LLVMParser::BasicBlockContext::getRuleIndex() const {
  return LLVMParser::RuleBasicBlock;
}


std::any LLVMParser::BasicBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitBasicBlock(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::BasicBlockContext* LLVMParser::basicBlock() {
  BasicBlockContext *_localctx = _tracker.createInstance<BasicBlockContext>(_ctx, getState());
  enterRule(_localctx, 260, LLVMParser::RuleBasicBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1822);
    optLabelIdent();
    setState(1823);
    instructions();
    setState(1824);
    terminator();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptLabelIdentContext ------------------------------------------------------------------

LLVMParser::OptLabelIdentContext::OptLabelIdentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::LabelIdentContext* LLVMParser::OptLabelIdentContext::labelIdent() {
  return getRuleContext<LLVMParser::LabelIdentContext>(0);
}


size_t LLVMParser::OptLabelIdentContext::getRuleIndex() const {
  return LLVMParser::RuleOptLabelIdent;
}


std::any LLVMParser::OptLabelIdentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptLabelIdent(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptLabelIdentContext* LLVMParser::optLabelIdent() {
  OptLabelIdentContext *_localctx = _tracker.createInstance<OptLabelIdentContext>(_ctx, getState());
  enterRule(_localctx, 262, LLVMParser::RuleOptLabelIdent);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1827);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::LABEL_IDENT) {
      setState(1826);
      labelIdent();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InstructionsContext ------------------------------------------------------------------

LLVMParser::InstructionsContext::InstructionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::InstructionListContext* LLVMParser::InstructionsContext::instructionList() {
  return getRuleContext<LLVMParser::InstructionListContext>(0);
}


size_t LLVMParser::InstructionsContext::getRuleIndex() const {
  return LLVMParser::RuleInstructions;
}


std::any LLVMParser::InstructionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitInstructions(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::InstructionsContext* LLVMParser::instructions() {
  InstructionsContext *_localctx = _tracker.createInstance<InstructionsContext>(_ctx, getState());
  enterRule(_localctx, 264, LLVMParser::RuleInstructions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1830);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 17) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 17)) & 720893154316255493) != 0) || ((((_la - 144) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 144)) & 315252248940544907) != 0) || ((((_la - 211) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 211)) & -9223301668098006783) != 0) || ((((_la - 277) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 277)) & 1450169604830659073) != 0) || ((((_la - 344) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 344)) & -8070450495740427263) != 0) || _la == LLVMParser::LOCAL_IDENT) {
      setState(1829);
      instructionList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InstructionListContext ------------------------------------------------------------------

LLVMParser::InstructionListContext::InstructionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::InstructionContext* LLVMParser::InstructionListContext::instruction() {
  return getRuleContext<LLVMParser::InstructionContext>(0);
}

LLVMParser::InstructionListContext* LLVMParser::InstructionListContext::instructionList() {
  return getRuleContext<LLVMParser::InstructionListContext>(0);
}


size_t LLVMParser::InstructionListContext::getRuleIndex() const {
  return LLVMParser::RuleInstructionList;
}


std::any LLVMParser::InstructionListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitInstructionList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::InstructionListContext* LLVMParser::instructionList() {
   return instructionList(0);
}

LLVMParser::InstructionListContext* LLVMParser::instructionList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::InstructionListContext *_localctx = _tracker.createInstance<InstructionListContext>(_ctx, parentState);
  LLVMParser::InstructionListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 266;
  enterRecursionRule(_localctx, 266, LLVMParser::RuleInstructionList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1833);
    instruction();
    _ctx->stop = _input->LT(-1);
    setState(1839);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<InstructionListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleInstructionList);
        setState(1835);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1836);
        instruction(); 
      }
      setState(1841);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- InstructionContext ------------------------------------------------------------------

LLVMParser::InstructionContext::InstructionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::StoreInstContext* LLVMParser::InstructionContext::storeInst() {
  return getRuleContext<LLVMParser::StoreInstContext>(0);
}

LLVMParser::FenceInstContext* LLVMParser::InstructionContext::fenceInst() {
  return getRuleContext<LLVMParser::FenceInstContext>(0);
}

LLVMParser::CmpXchgInstContext* LLVMParser::InstructionContext::cmpXchgInst() {
  return getRuleContext<LLVMParser::CmpXchgInstContext>(0);
}

LLVMParser::AtomicRMWInstContext* LLVMParser::InstructionContext::atomicRMWInst() {
  return getRuleContext<LLVMParser::AtomicRMWInstContext>(0);
}

LLVMParser::LocalIdentContext* LLVMParser::InstructionContext::localIdent() {
  return getRuleContext<LLVMParser::LocalIdentContext>(0);
}

tree::TerminalNode* LLVMParser::InstructionContext::EQSIGN() {
  return getToken(LLVMParser::EQSIGN, 0);
}

LLVMParser::ValueInstructionContext* LLVMParser::InstructionContext::valueInstruction() {
  return getRuleContext<LLVMParser::ValueInstructionContext>(0);
}


size_t LLVMParser::InstructionContext::getRuleIndex() const {
  return LLVMParser::RuleInstruction;
}


std::any LLVMParser::InstructionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitInstruction(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::InstructionContext* LLVMParser::instruction() {
  InstructionContext *_localctx = _tracker.createInstance<InstructionContext>(_ctx, getState());
  enterRule(_localctx, 268, LLVMParser::RuleInstruction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1851);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::STORE: {
        enterOuterAlt(_localctx, 1);
        setState(1842);
        storeInst();
        break;
      }

      case LLVMParser::FENCE: {
        enterOuterAlt(_localctx, 2);
        setState(1843);
        fenceInst();
        break;
      }

      case LLVMParser::CMPXCHG: {
        enterOuterAlt(_localctx, 3);
        setState(1844);
        cmpXchgInst();
        break;
      }

      case LLVMParser::ATOMICRMW: {
        enterOuterAlt(_localctx, 4);
        setState(1845);
        atomicRMWInst();
        break;
      }

      case LLVMParser::LOCAL_IDENT: {
        enterOuterAlt(_localctx, 5);
        setState(1846);
        localIdent();
        setState(1847);
        match(LLVMParser::EQSIGN);
        setState(1848);
        valueInstruction();
        break;
      }

      case LLVMParser::ADD:
      case LLVMParser::ADDRSPACECAST:
      case LLVMParser::ALLOCA:
      case LLVMParser::AND:
      case LLVMParser::ASHR:
      case LLVMParser::BITCAST:
      case LLVMParser::CALL:
      case LLVMParser::CATCHPAD:
      case LLVMParser::CLEANUPPAD:
      case LLVMParser::EXTRACTELEMENT:
      case LLVMParser::EXTRACTVALUE:
      case LLVMParser::FADD:
      case LLVMParser::FCMP:
      case LLVMParser::FDIV:
      case LLVMParser::FMUL:
      case LLVMParser::FPEXT:
      case LLVMParser::FPTOSI:
      case LLVMParser::FPTOUI:
      case LLVMParser::FPTRUNC:
      case LLVMParser::FREM:
      case LLVMParser::FSUB:
      case LLVMParser::GETELEMENTPTR:
      case LLVMParser::ICMP:
      case LLVMParser::INSERTELEMENT:
      case LLVMParser::INSERTVALUE:
      case LLVMParser::INTTOPTR:
      case LLVMParser::LANDINGPAD:
      case LLVMParser::LOAD:
      case LLVMParser::LSHR:
      case LLVMParser::MUL:
      case LLVMParser::MUSTTAIL:
      case LLVMParser::NOTAIL:
      case LLVMParser::OR:
      case LLVMParser::PHI:
      case LLVMParser::PTRTOINT:
      case LLVMParser::SDIV:
      case LLVMParser::SELECT:
      case LLVMParser::SEXT:
      case LLVMParser::SHL:
      case LLVMParser::SHUFFLEVECTOR:
      case LLVMParser::SITOFP:
      case LLVMParser::SREM:
      case LLVMParser::SUB:
      case LLVMParser::TAIL:
      case LLVMParser::TRUNC:
      case LLVMParser::UDIV:
      case LLVMParser::UITOFP:
      case LLVMParser::UREM:
      case LLVMParser::VA_ARG:
      case LLVMParser::XOR:
      case LLVMParser::ZEXT: {
        enterOuterAlt(_localctx, 6);
        setState(1850);
        valueInstruction();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueInstructionContext ------------------------------------------------------------------

LLVMParser::ValueInstructionContext::ValueInstructionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::AddInstContext* LLVMParser::ValueInstructionContext::addInst() {
  return getRuleContext<LLVMParser::AddInstContext>(0);
}

LLVMParser::FAddInstContext* LLVMParser::ValueInstructionContext::fAddInst() {
  return getRuleContext<LLVMParser::FAddInstContext>(0);
}

LLVMParser::SubInstContext* LLVMParser::ValueInstructionContext::subInst() {
  return getRuleContext<LLVMParser::SubInstContext>(0);
}

LLVMParser::FSubInstContext* LLVMParser::ValueInstructionContext::fSubInst() {
  return getRuleContext<LLVMParser::FSubInstContext>(0);
}

LLVMParser::MulInstContext* LLVMParser::ValueInstructionContext::mulInst() {
  return getRuleContext<LLVMParser::MulInstContext>(0);
}

LLVMParser::FMulInstContext* LLVMParser::ValueInstructionContext::fMulInst() {
  return getRuleContext<LLVMParser::FMulInstContext>(0);
}

LLVMParser::UDivInstContext* LLVMParser::ValueInstructionContext::uDivInst() {
  return getRuleContext<LLVMParser::UDivInstContext>(0);
}

LLVMParser::SDivInstContext* LLVMParser::ValueInstructionContext::sDivInst() {
  return getRuleContext<LLVMParser::SDivInstContext>(0);
}

LLVMParser::FDivInstContext* LLVMParser::ValueInstructionContext::fDivInst() {
  return getRuleContext<LLVMParser::FDivInstContext>(0);
}

LLVMParser::URemInstContext* LLVMParser::ValueInstructionContext::uRemInst() {
  return getRuleContext<LLVMParser::URemInstContext>(0);
}

LLVMParser::SRemInstContext* LLVMParser::ValueInstructionContext::sRemInst() {
  return getRuleContext<LLVMParser::SRemInstContext>(0);
}

LLVMParser::FRemInstContext* LLVMParser::ValueInstructionContext::fRemInst() {
  return getRuleContext<LLVMParser::FRemInstContext>(0);
}

LLVMParser::ShlInstContext* LLVMParser::ValueInstructionContext::shlInst() {
  return getRuleContext<LLVMParser::ShlInstContext>(0);
}

LLVMParser::LshrInstContext* LLVMParser::ValueInstructionContext::lshrInst() {
  return getRuleContext<LLVMParser::LshrInstContext>(0);
}

LLVMParser::AshrInstContext* LLVMParser::ValueInstructionContext::ashrInst() {
  return getRuleContext<LLVMParser::AshrInstContext>(0);
}

LLVMParser::AndInstContext* LLVMParser::ValueInstructionContext::andInst() {
  return getRuleContext<LLVMParser::AndInstContext>(0);
}

LLVMParser::OrInstContext* LLVMParser::ValueInstructionContext::orInst() {
  return getRuleContext<LLVMParser::OrInstContext>(0);
}

LLVMParser::XorInstContext* LLVMParser::ValueInstructionContext::xorInst() {
  return getRuleContext<LLVMParser::XorInstContext>(0);
}

LLVMParser::ExtractElementInstContext* LLVMParser::ValueInstructionContext::extractElementInst() {
  return getRuleContext<LLVMParser::ExtractElementInstContext>(0);
}

LLVMParser::InsertElementInstContext* LLVMParser::ValueInstructionContext::insertElementInst() {
  return getRuleContext<LLVMParser::InsertElementInstContext>(0);
}

LLVMParser::ShuffleVectorInstContext* LLVMParser::ValueInstructionContext::shuffleVectorInst() {
  return getRuleContext<LLVMParser::ShuffleVectorInstContext>(0);
}

LLVMParser::ExtractValueInstContext* LLVMParser::ValueInstructionContext::extractValueInst() {
  return getRuleContext<LLVMParser::ExtractValueInstContext>(0);
}

LLVMParser::InsertValueInstContext* LLVMParser::ValueInstructionContext::insertValueInst() {
  return getRuleContext<LLVMParser::InsertValueInstContext>(0);
}

LLVMParser::AllocaInstContext* LLVMParser::ValueInstructionContext::allocaInst() {
  return getRuleContext<LLVMParser::AllocaInstContext>(0);
}

LLVMParser::LoadInstContext* LLVMParser::ValueInstructionContext::loadInst() {
  return getRuleContext<LLVMParser::LoadInstContext>(0);
}

LLVMParser::GetElementPtrInstContext* LLVMParser::ValueInstructionContext::getElementPtrInst() {
  return getRuleContext<LLVMParser::GetElementPtrInstContext>(0);
}

LLVMParser::TruncInstContext* LLVMParser::ValueInstructionContext::truncInst() {
  return getRuleContext<LLVMParser::TruncInstContext>(0);
}

LLVMParser::ZExtInstContext* LLVMParser::ValueInstructionContext::zExtInst() {
  return getRuleContext<LLVMParser::ZExtInstContext>(0);
}

LLVMParser::SExtInstContext* LLVMParser::ValueInstructionContext::sExtInst() {
  return getRuleContext<LLVMParser::SExtInstContext>(0);
}

LLVMParser::FpTruncInstContext* LLVMParser::ValueInstructionContext::fpTruncInst() {
  return getRuleContext<LLVMParser::FpTruncInstContext>(0);
}

LLVMParser::FpExtInstContext* LLVMParser::ValueInstructionContext::fpExtInst() {
  return getRuleContext<LLVMParser::FpExtInstContext>(0);
}

LLVMParser::FpToUIInstContext* LLVMParser::ValueInstructionContext::fpToUIInst() {
  return getRuleContext<LLVMParser::FpToUIInstContext>(0);
}

LLVMParser::FpToSIInstContext* LLVMParser::ValueInstructionContext::fpToSIInst() {
  return getRuleContext<LLVMParser::FpToSIInstContext>(0);
}

LLVMParser::UiToFPInstContext* LLVMParser::ValueInstructionContext::uiToFPInst() {
  return getRuleContext<LLVMParser::UiToFPInstContext>(0);
}

LLVMParser::SiToFPInstContext* LLVMParser::ValueInstructionContext::siToFPInst() {
  return getRuleContext<LLVMParser::SiToFPInstContext>(0);
}

LLVMParser::PtrToIntInstContext* LLVMParser::ValueInstructionContext::ptrToIntInst() {
  return getRuleContext<LLVMParser::PtrToIntInstContext>(0);
}

LLVMParser::IntToPtrInstContext* LLVMParser::ValueInstructionContext::intToPtrInst() {
  return getRuleContext<LLVMParser::IntToPtrInstContext>(0);
}

LLVMParser::BitCastInstContext* LLVMParser::ValueInstructionContext::bitCastInst() {
  return getRuleContext<LLVMParser::BitCastInstContext>(0);
}

LLVMParser::AddrSpaceCastInstContext* LLVMParser::ValueInstructionContext::addrSpaceCastInst() {
  return getRuleContext<LLVMParser::AddrSpaceCastInstContext>(0);
}

LLVMParser::ICmpInstContext* LLVMParser::ValueInstructionContext::iCmpInst() {
  return getRuleContext<LLVMParser::ICmpInstContext>(0);
}

LLVMParser::FCmpInstContext* LLVMParser::ValueInstructionContext::fCmpInst() {
  return getRuleContext<LLVMParser::FCmpInstContext>(0);
}

LLVMParser::PhiInstContext* LLVMParser::ValueInstructionContext::phiInst() {
  return getRuleContext<LLVMParser::PhiInstContext>(0);
}

LLVMParser::SelectInstContext* LLVMParser::ValueInstructionContext::selectInst() {
  return getRuleContext<LLVMParser::SelectInstContext>(0);
}

LLVMParser::CallInstContext* LLVMParser::ValueInstructionContext::callInst() {
  return getRuleContext<LLVMParser::CallInstContext>(0);
}

LLVMParser::VaArgInstContext* LLVMParser::ValueInstructionContext::vaArgInst() {
  return getRuleContext<LLVMParser::VaArgInstContext>(0);
}

LLVMParser::LandingPadInstContext* LLVMParser::ValueInstructionContext::landingPadInst() {
  return getRuleContext<LLVMParser::LandingPadInstContext>(0);
}

LLVMParser::CatchPadInstContext* LLVMParser::ValueInstructionContext::catchPadInst() {
  return getRuleContext<LLVMParser::CatchPadInstContext>(0);
}

LLVMParser::CleanupPadInstContext* LLVMParser::ValueInstructionContext::cleanupPadInst() {
  return getRuleContext<LLVMParser::CleanupPadInstContext>(0);
}


size_t LLVMParser::ValueInstructionContext::getRuleIndex() const {
  return LLVMParser::RuleValueInstruction;
}


std::any LLVMParser::ValueInstructionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitValueInstruction(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ValueInstructionContext* LLVMParser::valueInstruction() {
  ValueInstructionContext *_localctx = _tracker.createInstance<ValueInstructionContext>(_ctx, getState());
  enterRule(_localctx, 270, LLVMParser::RuleValueInstruction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1901);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::ADD: {
        enterOuterAlt(_localctx, 1);
        setState(1853);
        addInst();
        break;
      }

      case LLVMParser::FADD: {
        enterOuterAlt(_localctx, 2);
        setState(1854);
        fAddInst();
        break;
      }

      case LLVMParser::SUB: {
        enterOuterAlt(_localctx, 3);
        setState(1855);
        subInst();
        break;
      }

      case LLVMParser::FSUB: {
        enterOuterAlt(_localctx, 4);
        setState(1856);
        fSubInst();
        break;
      }

      case LLVMParser::MUL: {
        enterOuterAlt(_localctx, 5);
        setState(1857);
        mulInst();
        break;
      }

      case LLVMParser::FMUL: {
        enterOuterAlt(_localctx, 6);
        setState(1858);
        fMulInst();
        break;
      }

      case LLVMParser::UDIV: {
        enterOuterAlt(_localctx, 7);
        setState(1859);
        uDivInst();
        break;
      }

      case LLVMParser::SDIV: {
        enterOuterAlt(_localctx, 8);
        setState(1860);
        sDivInst();
        break;
      }

      case LLVMParser::FDIV: {
        enterOuterAlt(_localctx, 9);
        setState(1861);
        fDivInst();
        break;
      }

      case LLVMParser::UREM: {
        enterOuterAlt(_localctx, 10);
        setState(1862);
        uRemInst();
        break;
      }

      case LLVMParser::SREM: {
        enterOuterAlt(_localctx, 11);
        setState(1863);
        sRemInst();
        break;
      }

      case LLVMParser::FREM: {
        enterOuterAlt(_localctx, 12);
        setState(1864);
        fRemInst();
        break;
      }

      case LLVMParser::SHL: {
        enterOuterAlt(_localctx, 13);
        setState(1865);
        shlInst();
        break;
      }

      case LLVMParser::LSHR: {
        enterOuterAlt(_localctx, 14);
        setState(1866);
        lshrInst();
        break;
      }

      case LLVMParser::ASHR: {
        enterOuterAlt(_localctx, 15);
        setState(1867);
        ashrInst();
        break;
      }

      case LLVMParser::AND: {
        enterOuterAlt(_localctx, 16);
        setState(1868);
        andInst();
        break;
      }

      case LLVMParser::OR: {
        enterOuterAlt(_localctx, 17);
        setState(1869);
        orInst();
        break;
      }

      case LLVMParser::XOR: {
        enterOuterAlt(_localctx, 18);
        setState(1870);
        xorInst();
        break;
      }

      case LLVMParser::EXTRACTELEMENT: {
        enterOuterAlt(_localctx, 19);
        setState(1871);
        extractElementInst();
        break;
      }

      case LLVMParser::INSERTELEMENT: {
        enterOuterAlt(_localctx, 20);
        setState(1872);
        insertElementInst();
        break;
      }

      case LLVMParser::SHUFFLEVECTOR: {
        enterOuterAlt(_localctx, 21);
        setState(1873);
        shuffleVectorInst();
        break;
      }

      case LLVMParser::EXTRACTVALUE: {
        enterOuterAlt(_localctx, 22);
        setState(1874);
        extractValueInst();
        break;
      }

      case LLVMParser::INSERTVALUE: {
        enterOuterAlt(_localctx, 23);
        setState(1875);
        insertValueInst();
        break;
      }

      case LLVMParser::ALLOCA: {
        enterOuterAlt(_localctx, 24);
        setState(1876);
        allocaInst();
        break;
      }

      case LLVMParser::LOAD: {
        enterOuterAlt(_localctx, 25);
        setState(1877);
        loadInst();
        break;
      }

      case LLVMParser::GETELEMENTPTR: {
        enterOuterAlt(_localctx, 26);
        setState(1878);
        getElementPtrInst();
        break;
      }

      case LLVMParser::TRUNC: {
        enterOuterAlt(_localctx, 27);
        setState(1879);
        truncInst();
        break;
      }

      case LLVMParser::ZEXT: {
        enterOuterAlt(_localctx, 28);
        setState(1880);
        zExtInst();
        break;
      }

      case LLVMParser::SEXT: {
        enterOuterAlt(_localctx, 29);
        setState(1881);
        sExtInst();
        break;
      }

      case LLVMParser::FPTRUNC: {
        enterOuterAlt(_localctx, 30);
        setState(1882);
        fpTruncInst();
        break;
      }

      case LLVMParser::FPEXT: {
        enterOuterAlt(_localctx, 31);
        setState(1883);
        fpExtInst();
        break;
      }

      case LLVMParser::FPTOUI: {
        enterOuterAlt(_localctx, 32);
        setState(1884);
        fpToUIInst();
        break;
      }

      case LLVMParser::FPTOSI: {
        enterOuterAlt(_localctx, 33);
        setState(1885);
        fpToSIInst();
        break;
      }

      case LLVMParser::UITOFP: {
        enterOuterAlt(_localctx, 34);
        setState(1886);
        uiToFPInst();
        break;
      }

      case LLVMParser::SITOFP: {
        enterOuterAlt(_localctx, 35);
        setState(1887);
        siToFPInst();
        break;
      }

      case LLVMParser::PTRTOINT: {
        enterOuterAlt(_localctx, 36);
        setState(1888);
        ptrToIntInst();
        break;
      }

      case LLVMParser::INTTOPTR: {
        enterOuterAlt(_localctx, 37);
        setState(1889);
        intToPtrInst();
        break;
      }

      case LLVMParser::BITCAST: {
        enterOuterAlt(_localctx, 38);
        setState(1890);
        bitCastInst();
        break;
      }

      case LLVMParser::ADDRSPACECAST: {
        enterOuterAlt(_localctx, 39);
        setState(1891);
        addrSpaceCastInst();
        break;
      }

      case LLVMParser::ICMP: {
        enterOuterAlt(_localctx, 40);
        setState(1892);
        iCmpInst();
        break;
      }

      case LLVMParser::FCMP: {
        enterOuterAlt(_localctx, 41);
        setState(1893);
        fCmpInst();
        break;
      }

      case LLVMParser::PHI: {
        enterOuterAlt(_localctx, 42);
        setState(1894);
        phiInst();
        break;
      }

      case LLVMParser::SELECT: {
        enterOuterAlt(_localctx, 43);
        setState(1895);
        selectInst();
        break;
      }

      case LLVMParser::CALL:
      case LLVMParser::MUSTTAIL:
      case LLVMParser::NOTAIL:
      case LLVMParser::TAIL: {
        enterOuterAlt(_localctx, 44);
        setState(1896);
        callInst();
        break;
      }

      case LLVMParser::VA_ARG: {
        enterOuterAlt(_localctx, 45);
        setState(1897);
        vaArgInst();
        break;
      }

      case LLVMParser::LANDINGPAD: {
        enterOuterAlt(_localctx, 46);
        setState(1898);
        landingPadInst();
        break;
      }

      case LLVMParser::CATCHPAD: {
        enterOuterAlt(_localctx, 47);
        setState(1899);
        catchPadInst();
        break;
      }

      case LLVMParser::CLEANUPPAD: {
        enterOuterAlt(_localctx, 48);
        setState(1900);
        cleanupPadInst();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddInstContext ------------------------------------------------------------------

LLVMParser::AddInstContext::AddInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::AddInstContext::ADD() {
  return getToken(LLVMParser::ADD, 0);
}

LLVMParser::OverflowFlagsContext* LLVMParser::AddInstContext::overflowFlags() {
  return getRuleContext<LLVMParser::OverflowFlagsContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::AddInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::AddInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::AddInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

tree::TerminalNode* LLVMParser::AddInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::AddInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::AddInstContext::getRuleIndex() const {
  return LLVMParser::RuleAddInst;
}


std::any LLVMParser::AddInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitAddInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::AddInstContext* LLVMParser::addInst() {
  AddInstContext *_localctx = _tracker.createInstance<AddInstContext>(_ctx, getState());
  enterRule(_localctx, 272, LLVMParser::RuleAddInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1903);
    match(LLVMParser::ADD);
    setState(1904);
    overflowFlags();
    setState(1905);
    llvmType(0);
    setState(1906);
    value();
    setState(1907);
    match(LLVMParser::COMMA);
    setState(1908);
    value();
    setState(1909);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FAddInstContext ------------------------------------------------------------------

LLVMParser::FAddInstContext::FAddInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FAddInstContext::FADD() {
  return getToken(LLVMParser::FADD, 0);
}

LLVMParser::FastMathFlagsContext* LLVMParser::FAddInstContext::fastMathFlags() {
  return getRuleContext<LLVMParser::FastMathFlagsContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::FAddInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::FAddInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::FAddInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

tree::TerminalNode* LLVMParser::FAddInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::FAddInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::FAddInstContext::getRuleIndex() const {
  return LLVMParser::RuleFAddInst;
}


std::any LLVMParser::FAddInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFAddInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FAddInstContext* LLVMParser::fAddInst() {
  FAddInstContext *_localctx = _tracker.createInstance<FAddInstContext>(_ctx, getState());
  enterRule(_localctx, 274, LLVMParser::RuleFAddInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1911);
    match(LLVMParser::FADD);
    setState(1912);
    fastMathFlags();
    setState(1913);
    llvmType(0);
    setState(1914);
    value();
    setState(1915);
    match(LLVMParser::COMMA);
    setState(1916);
    value();
    setState(1917);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubInstContext ------------------------------------------------------------------

LLVMParser::SubInstContext::SubInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::SubInstContext::SUB() {
  return getToken(LLVMParser::SUB, 0);
}

LLVMParser::OverflowFlagsContext* LLVMParser::SubInstContext::overflowFlags() {
  return getRuleContext<LLVMParser::OverflowFlagsContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::SubInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::SubInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::SubInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

tree::TerminalNode* LLVMParser::SubInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::SubInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::SubInstContext::getRuleIndex() const {
  return LLVMParser::RuleSubInst;
}


std::any LLVMParser::SubInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitSubInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::SubInstContext* LLVMParser::subInst() {
  SubInstContext *_localctx = _tracker.createInstance<SubInstContext>(_ctx, getState());
  enterRule(_localctx, 276, LLVMParser::RuleSubInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1919);
    match(LLVMParser::SUB);
    setState(1920);
    overflowFlags();
    setState(1921);
    llvmType(0);
    setState(1922);
    value();
    setState(1923);
    match(LLVMParser::COMMA);
    setState(1924);
    value();
    setState(1925);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FSubInstContext ------------------------------------------------------------------

LLVMParser::FSubInstContext::FSubInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FSubInstContext::FSUB() {
  return getToken(LLVMParser::FSUB, 0);
}

LLVMParser::FastMathFlagsContext* LLVMParser::FSubInstContext::fastMathFlags() {
  return getRuleContext<LLVMParser::FastMathFlagsContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::FSubInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::FSubInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::FSubInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

tree::TerminalNode* LLVMParser::FSubInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::FSubInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::FSubInstContext::getRuleIndex() const {
  return LLVMParser::RuleFSubInst;
}


std::any LLVMParser::FSubInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFSubInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FSubInstContext* LLVMParser::fSubInst() {
  FSubInstContext *_localctx = _tracker.createInstance<FSubInstContext>(_ctx, getState());
  enterRule(_localctx, 278, LLVMParser::RuleFSubInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1927);
    match(LLVMParser::FSUB);
    setState(1928);
    fastMathFlags();
    setState(1929);
    llvmType(0);
    setState(1930);
    value();
    setState(1931);
    match(LLVMParser::COMMA);
    setState(1932);
    value();
    setState(1933);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MulInstContext ------------------------------------------------------------------

LLVMParser::MulInstContext::MulInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::MulInstContext::MUL() {
  return getToken(LLVMParser::MUL, 0);
}

LLVMParser::OverflowFlagsContext* LLVMParser::MulInstContext::overflowFlags() {
  return getRuleContext<LLVMParser::OverflowFlagsContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::MulInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::MulInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::MulInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

tree::TerminalNode* LLVMParser::MulInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::MulInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::MulInstContext::getRuleIndex() const {
  return LLVMParser::RuleMulInst;
}


std::any LLVMParser::MulInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitMulInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::MulInstContext* LLVMParser::mulInst() {
  MulInstContext *_localctx = _tracker.createInstance<MulInstContext>(_ctx, getState());
  enterRule(_localctx, 280, LLVMParser::RuleMulInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1935);
    match(LLVMParser::MUL);
    setState(1936);
    overflowFlags();
    setState(1937);
    llvmType(0);
    setState(1938);
    value();
    setState(1939);
    match(LLVMParser::COMMA);
    setState(1940);
    value();
    setState(1941);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FMulInstContext ------------------------------------------------------------------

LLVMParser::FMulInstContext::FMulInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FMulInstContext::FMUL() {
  return getToken(LLVMParser::FMUL, 0);
}

LLVMParser::FastMathFlagsContext* LLVMParser::FMulInstContext::fastMathFlags() {
  return getRuleContext<LLVMParser::FastMathFlagsContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::FMulInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::FMulInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::FMulInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

tree::TerminalNode* LLVMParser::FMulInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::FMulInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::FMulInstContext::getRuleIndex() const {
  return LLVMParser::RuleFMulInst;
}


std::any LLVMParser::FMulInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFMulInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FMulInstContext* LLVMParser::fMulInst() {
  FMulInstContext *_localctx = _tracker.createInstance<FMulInstContext>(_ctx, getState());
  enterRule(_localctx, 282, LLVMParser::RuleFMulInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1943);
    match(LLVMParser::FMUL);
    setState(1944);
    fastMathFlags();
    setState(1945);
    llvmType(0);
    setState(1946);
    value();
    setState(1947);
    match(LLVMParser::COMMA);
    setState(1948);
    value();
    setState(1949);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UDivInstContext ------------------------------------------------------------------

LLVMParser::UDivInstContext::UDivInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::UDivInstContext::UDIV() {
  return getToken(LLVMParser::UDIV, 0);
}

LLVMParser::OptExactContext* LLVMParser::UDivInstContext::optExact() {
  return getRuleContext<LLVMParser::OptExactContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::UDivInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::UDivInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::UDivInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

tree::TerminalNode* LLVMParser::UDivInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::UDivInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::UDivInstContext::getRuleIndex() const {
  return LLVMParser::RuleUDivInst;
}


std::any LLVMParser::UDivInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitUDivInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::UDivInstContext* LLVMParser::uDivInst() {
  UDivInstContext *_localctx = _tracker.createInstance<UDivInstContext>(_ctx, getState());
  enterRule(_localctx, 284, LLVMParser::RuleUDivInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1951);
    match(LLVMParser::UDIV);
    setState(1952);
    optExact();
    setState(1953);
    llvmType(0);
    setState(1954);
    value();
    setState(1955);
    match(LLVMParser::COMMA);
    setState(1956);
    value();
    setState(1957);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SDivInstContext ------------------------------------------------------------------

LLVMParser::SDivInstContext::SDivInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::SDivInstContext::SDIV() {
  return getToken(LLVMParser::SDIV, 0);
}

LLVMParser::OptExactContext* LLVMParser::SDivInstContext::optExact() {
  return getRuleContext<LLVMParser::OptExactContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::SDivInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::SDivInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::SDivInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

tree::TerminalNode* LLVMParser::SDivInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::SDivInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::SDivInstContext::getRuleIndex() const {
  return LLVMParser::RuleSDivInst;
}


std::any LLVMParser::SDivInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitSDivInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::SDivInstContext* LLVMParser::sDivInst() {
  SDivInstContext *_localctx = _tracker.createInstance<SDivInstContext>(_ctx, getState());
  enterRule(_localctx, 286, LLVMParser::RuleSDivInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1959);
    match(LLVMParser::SDIV);
    setState(1960);
    optExact();
    setState(1961);
    llvmType(0);
    setState(1962);
    value();
    setState(1963);
    match(LLVMParser::COMMA);
    setState(1964);
    value();
    setState(1965);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FDivInstContext ------------------------------------------------------------------

LLVMParser::FDivInstContext::FDivInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FDivInstContext::FDIV() {
  return getToken(LLVMParser::FDIV, 0);
}

LLVMParser::FastMathFlagsContext* LLVMParser::FDivInstContext::fastMathFlags() {
  return getRuleContext<LLVMParser::FastMathFlagsContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::FDivInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::FDivInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::FDivInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

tree::TerminalNode* LLVMParser::FDivInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::FDivInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::FDivInstContext::getRuleIndex() const {
  return LLVMParser::RuleFDivInst;
}


std::any LLVMParser::FDivInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFDivInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FDivInstContext* LLVMParser::fDivInst() {
  FDivInstContext *_localctx = _tracker.createInstance<FDivInstContext>(_ctx, getState());
  enterRule(_localctx, 288, LLVMParser::RuleFDivInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1967);
    match(LLVMParser::FDIV);
    setState(1968);
    fastMathFlags();
    setState(1969);
    llvmType(0);
    setState(1970);
    value();
    setState(1971);
    match(LLVMParser::COMMA);
    setState(1972);
    value();
    setState(1973);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- URemInstContext ------------------------------------------------------------------

LLVMParser::URemInstContext::URemInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::URemInstContext::UREM() {
  return getToken(LLVMParser::UREM, 0);
}

LLVMParser::LlvmTypeContext* LLVMParser::URemInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::URemInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::URemInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

tree::TerminalNode* LLVMParser::URemInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::URemInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::URemInstContext::getRuleIndex() const {
  return LLVMParser::RuleURemInst;
}


std::any LLVMParser::URemInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitURemInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::URemInstContext* LLVMParser::uRemInst() {
  URemInstContext *_localctx = _tracker.createInstance<URemInstContext>(_ctx, getState());
  enterRule(_localctx, 290, LLVMParser::RuleURemInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1975);
    match(LLVMParser::UREM);
    setState(1976);
    llvmType(0);
    setState(1977);
    value();
    setState(1978);
    match(LLVMParser::COMMA);
    setState(1979);
    value();
    setState(1980);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SRemInstContext ------------------------------------------------------------------

LLVMParser::SRemInstContext::SRemInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::SRemInstContext::SREM() {
  return getToken(LLVMParser::SREM, 0);
}

LLVMParser::LlvmTypeContext* LLVMParser::SRemInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::SRemInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::SRemInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

tree::TerminalNode* LLVMParser::SRemInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::SRemInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::SRemInstContext::getRuleIndex() const {
  return LLVMParser::RuleSRemInst;
}


std::any LLVMParser::SRemInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitSRemInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::SRemInstContext* LLVMParser::sRemInst() {
  SRemInstContext *_localctx = _tracker.createInstance<SRemInstContext>(_ctx, getState());
  enterRule(_localctx, 292, LLVMParser::RuleSRemInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1982);
    match(LLVMParser::SREM);
    setState(1983);
    llvmType(0);
    setState(1984);
    value();
    setState(1985);
    match(LLVMParser::COMMA);
    setState(1986);
    value();
    setState(1987);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FRemInstContext ------------------------------------------------------------------

LLVMParser::FRemInstContext::FRemInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FRemInstContext::FREM() {
  return getToken(LLVMParser::FREM, 0);
}

LLVMParser::FastMathFlagsContext* LLVMParser::FRemInstContext::fastMathFlags() {
  return getRuleContext<LLVMParser::FastMathFlagsContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::FRemInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::FRemInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::FRemInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

tree::TerminalNode* LLVMParser::FRemInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::FRemInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::FRemInstContext::getRuleIndex() const {
  return LLVMParser::RuleFRemInst;
}


std::any LLVMParser::FRemInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFRemInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FRemInstContext* LLVMParser::fRemInst() {
  FRemInstContext *_localctx = _tracker.createInstance<FRemInstContext>(_ctx, getState());
  enterRule(_localctx, 294, LLVMParser::RuleFRemInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1989);
    match(LLVMParser::FREM);
    setState(1990);
    fastMathFlags();
    setState(1991);
    llvmType(0);
    setState(1992);
    value();
    setState(1993);
    match(LLVMParser::COMMA);
    setState(1994);
    value();
    setState(1995);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShlInstContext ------------------------------------------------------------------

LLVMParser::ShlInstContext::ShlInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ShlInstContext::SHL() {
  return getToken(LLVMParser::SHL, 0);
}

LLVMParser::OverflowFlagsContext* LLVMParser::ShlInstContext::overflowFlags() {
  return getRuleContext<LLVMParser::OverflowFlagsContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::ShlInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::ShlInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::ShlInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

tree::TerminalNode* LLVMParser::ShlInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::ShlInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::ShlInstContext::getRuleIndex() const {
  return LLVMParser::RuleShlInst;
}


std::any LLVMParser::ShlInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitShlInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ShlInstContext* LLVMParser::shlInst() {
  ShlInstContext *_localctx = _tracker.createInstance<ShlInstContext>(_ctx, getState());
  enterRule(_localctx, 296, LLVMParser::RuleShlInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1997);
    match(LLVMParser::SHL);
    setState(1998);
    overflowFlags();
    setState(1999);
    llvmType(0);
    setState(2000);
    value();
    setState(2001);
    match(LLVMParser::COMMA);
    setState(2002);
    value();
    setState(2003);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LshrInstContext ------------------------------------------------------------------

LLVMParser::LshrInstContext::LshrInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::LshrInstContext::LSHR() {
  return getToken(LLVMParser::LSHR, 0);
}

LLVMParser::OptExactContext* LLVMParser::LshrInstContext::optExact() {
  return getRuleContext<LLVMParser::OptExactContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::LshrInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::LshrInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::LshrInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

tree::TerminalNode* LLVMParser::LshrInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::LshrInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::LshrInstContext::getRuleIndex() const {
  return LLVMParser::RuleLshrInst;
}


std::any LLVMParser::LshrInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitLshrInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::LshrInstContext* LLVMParser::lshrInst() {
  LshrInstContext *_localctx = _tracker.createInstance<LshrInstContext>(_ctx, getState());
  enterRule(_localctx, 298, LLVMParser::RuleLshrInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2005);
    match(LLVMParser::LSHR);
    setState(2006);
    optExact();
    setState(2007);
    llvmType(0);
    setState(2008);
    value();
    setState(2009);
    match(LLVMParser::COMMA);
    setState(2010);
    value();
    setState(2011);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AshrInstContext ------------------------------------------------------------------

LLVMParser::AshrInstContext::AshrInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::AshrInstContext::ASHR() {
  return getToken(LLVMParser::ASHR, 0);
}

LLVMParser::OptExactContext* LLVMParser::AshrInstContext::optExact() {
  return getRuleContext<LLVMParser::OptExactContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::AshrInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::AshrInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::AshrInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

tree::TerminalNode* LLVMParser::AshrInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::AshrInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::AshrInstContext::getRuleIndex() const {
  return LLVMParser::RuleAshrInst;
}


std::any LLVMParser::AshrInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitAshrInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::AshrInstContext* LLVMParser::ashrInst() {
  AshrInstContext *_localctx = _tracker.createInstance<AshrInstContext>(_ctx, getState());
  enterRule(_localctx, 300, LLVMParser::RuleAshrInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2013);
    match(LLVMParser::ASHR);
    setState(2014);
    optExact();
    setState(2015);
    llvmType(0);
    setState(2016);
    value();
    setState(2017);
    match(LLVMParser::COMMA);
    setState(2018);
    value();
    setState(2019);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AndInstContext ------------------------------------------------------------------

LLVMParser::AndInstContext::AndInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::AndInstContext::AND() {
  return getToken(LLVMParser::AND, 0);
}

LLVMParser::LlvmTypeContext* LLVMParser::AndInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::AndInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::AndInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

tree::TerminalNode* LLVMParser::AndInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::AndInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::AndInstContext::getRuleIndex() const {
  return LLVMParser::RuleAndInst;
}


std::any LLVMParser::AndInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitAndInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::AndInstContext* LLVMParser::andInst() {
  AndInstContext *_localctx = _tracker.createInstance<AndInstContext>(_ctx, getState());
  enterRule(_localctx, 302, LLVMParser::RuleAndInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2021);
    match(LLVMParser::AND);
    setState(2022);
    llvmType(0);
    setState(2023);
    value();
    setState(2024);
    match(LLVMParser::COMMA);
    setState(2025);
    value();
    setState(2026);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrInstContext ------------------------------------------------------------------

LLVMParser::OrInstContext::OrInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OrInstContext::OR() {
  return getToken(LLVMParser::OR, 0);
}

LLVMParser::LlvmTypeContext* LLVMParser::OrInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::OrInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::OrInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

tree::TerminalNode* LLVMParser::OrInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::OrInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::OrInstContext::getRuleIndex() const {
  return LLVMParser::RuleOrInst;
}


std::any LLVMParser::OrInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOrInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OrInstContext* LLVMParser::orInst() {
  OrInstContext *_localctx = _tracker.createInstance<OrInstContext>(_ctx, getState());
  enterRule(_localctx, 304, LLVMParser::RuleOrInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2028);
    match(LLVMParser::OR);
    setState(2029);
    llvmType(0);
    setState(2030);
    value();
    setState(2031);
    match(LLVMParser::COMMA);
    setState(2032);
    value();
    setState(2033);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- XorInstContext ------------------------------------------------------------------

LLVMParser::XorInstContext::XorInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::XorInstContext::XOR() {
  return getToken(LLVMParser::XOR, 0);
}

LLVMParser::LlvmTypeContext* LLVMParser::XorInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::XorInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::XorInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

tree::TerminalNode* LLVMParser::XorInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::XorInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::XorInstContext::getRuleIndex() const {
  return LLVMParser::RuleXorInst;
}


std::any LLVMParser::XorInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitXorInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::XorInstContext* LLVMParser::xorInst() {
  XorInstContext *_localctx = _tracker.createInstance<XorInstContext>(_ctx, getState());
  enterRule(_localctx, 306, LLVMParser::RuleXorInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2035);
    match(LLVMParser::XOR);
    setState(2036);
    llvmType(0);
    setState(2037);
    value();
    setState(2038);
    match(LLVMParser::COMMA);
    setState(2039);
    value();
    setState(2040);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExtractElementInstContext ------------------------------------------------------------------

LLVMParser::ExtractElementInstContext::ExtractElementInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ExtractElementInstContext::EXTRACTELEMENT() {
  return getToken(LLVMParser::EXTRACTELEMENT, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::ExtractElementInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::ExtractElementInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::ExtractElementInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::ExtractElementInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

tree::TerminalNode* LLVMParser::ExtractElementInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::ExtractElementInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::ExtractElementInstContext::getRuleIndex() const {
  return LLVMParser::RuleExtractElementInst;
}


std::any LLVMParser::ExtractElementInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitExtractElementInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ExtractElementInstContext* LLVMParser::extractElementInst() {
  ExtractElementInstContext *_localctx = _tracker.createInstance<ExtractElementInstContext>(_ctx, getState());
  enterRule(_localctx, 308, LLVMParser::RuleExtractElementInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2042);
    match(LLVMParser::EXTRACTELEMENT);
    setState(2043);
    llvmType(0);
    setState(2044);
    value();
    setState(2045);
    match(LLVMParser::COMMA);
    setState(2046);
    llvmType(0);
    setState(2047);
    value();
    setState(2048);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertElementInstContext ------------------------------------------------------------------

LLVMParser::InsertElementInstContext::InsertElementInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::InsertElementInstContext::INSERTELEMENT() {
  return getToken(LLVMParser::INSERTELEMENT, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::InsertElementInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::InsertElementInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::InsertElementInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::InsertElementInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

std::vector<tree::TerminalNode *> LLVMParser::InsertElementInstContext::COMMA() {
  return getTokens(LLVMParser::COMMA);
}

tree::TerminalNode* LLVMParser::InsertElementInstContext::COMMA(size_t i) {
  return getToken(LLVMParser::COMMA, i);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::InsertElementInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::InsertElementInstContext::getRuleIndex() const {
  return LLVMParser::RuleInsertElementInst;
}


std::any LLVMParser::InsertElementInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitInsertElementInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::InsertElementInstContext* LLVMParser::insertElementInst() {
  InsertElementInstContext *_localctx = _tracker.createInstance<InsertElementInstContext>(_ctx, getState());
  enterRule(_localctx, 310, LLVMParser::RuleInsertElementInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2050);
    match(LLVMParser::INSERTELEMENT);
    setState(2051);
    llvmType(0);
    setState(2052);
    value();
    setState(2053);
    match(LLVMParser::COMMA);
    setState(2054);
    llvmType(0);
    setState(2055);
    value();
    setState(2056);
    match(LLVMParser::COMMA);
    setState(2057);
    llvmType(0);
    setState(2058);
    value();
    setState(2059);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShuffleVectorInstContext ------------------------------------------------------------------

LLVMParser::ShuffleVectorInstContext::ShuffleVectorInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ShuffleVectorInstContext::SHUFFLEVECTOR() {
  return getToken(LLVMParser::SHUFFLEVECTOR, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::ShuffleVectorInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::ShuffleVectorInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::ShuffleVectorInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::ShuffleVectorInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

std::vector<tree::TerminalNode *> LLVMParser::ShuffleVectorInstContext::COMMA() {
  return getTokens(LLVMParser::COMMA);
}

tree::TerminalNode* LLVMParser::ShuffleVectorInstContext::COMMA(size_t i) {
  return getToken(LLVMParser::COMMA, i);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::ShuffleVectorInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::ShuffleVectorInstContext::getRuleIndex() const {
  return LLVMParser::RuleShuffleVectorInst;
}


std::any LLVMParser::ShuffleVectorInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitShuffleVectorInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ShuffleVectorInstContext* LLVMParser::shuffleVectorInst() {
  ShuffleVectorInstContext *_localctx = _tracker.createInstance<ShuffleVectorInstContext>(_ctx, getState());
  enterRule(_localctx, 312, LLVMParser::RuleShuffleVectorInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2061);
    match(LLVMParser::SHUFFLEVECTOR);
    setState(2062);
    llvmType(0);
    setState(2063);
    value();
    setState(2064);
    match(LLVMParser::COMMA);
    setState(2065);
    llvmType(0);
    setState(2066);
    value();
    setState(2067);
    match(LLVMParser::COMMA);
    setState(2068);
    llvmType(0);
    setState(2069);
    value();
    setState(2070);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExtractValueInstContext ------------------------------------------------------------------

LLVMParser::ExtractValueInstContext::ExtractValueInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ExtractValueInstContext::EXTRACTVALUE() {
  return getToken(LLVMParser::EXTRACTVALUE, 0);
}

LLVMParser::LlvmTypeContext* LLVMParser::ExtractValueInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::ValueContext* LLVMParser::ExtractValueInstContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::ExtractValueInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::IndexListContext* LLVMParser::ExtractValueInstContext::indexList() {
  return getRuleContext<LLVMParser::IndexListContext>(0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::ExtractValueInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::ExtractValueInstContext::getRuleIndex() const {
  return LLVMParser::RuleExtractValueInst;
}


std::any LLVMParser::ExtractValueInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitExtractValueInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ExtractValueInstContext* LLVMParser::extractValueInst() {
  ExtractValueInstContext *_localctx = _tracker.createInstance<ExtractValueInstContext>(_ctx, getState());
  enterRule(_localctx, 314, LLVMParser::RuleExtractValueInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2072);
    match(LLVMParser::EXTRACTVALUE);
    setState(2073);
    llvmType(0);
    setState(2074);
    value();
    setState(2075);
    match(LLVMParser::COMMA);
    setState(2076);
    indexList(0);
    setState(2077);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertValueInstContext ------------------------------------------------------------------

LLVMParser::InsertValueInstContext::InsertValueInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::InsertValueInstContext::INSERTVALUE() {
  return getToken(LLVMParser::INSERTVALUE, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::InsertValueInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::InsertValueInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::InsertValueInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::InsertValueInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

std::vector<tree::TerminalNode *> LLVMParser::InsertValueInstContext::COMMA() {
  return getTokens(LLVMParser::COMMA);
}

tree::TerminalNode* LLVMParser::InsertValueInstContext::COMMA(size_t i) {
  return getToken(LLVMParser::COMMA, i);
}

LLVMParser::IndexListContext* LLVMParser::InsertValueInstContext::indexList() {
  return getRuleContext<LLVMParser::IndexListContext>(0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::InsertValueInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::InsertValueInstContext::getRuleIndex() const {
  return LLVMParser::RuleInsertValueInst;
}


std::any LLVMParser::InsertValueInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitInsertValueInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::InsertValueInstContext* LLVMParser::insertValueInst() {
  InsertValueInstContext *_localctx = _tracker.createInstance<InsertValueInstContext>(_ctx, getState());
  enterRule(_localctx, 316, LLVMParser::RuleInsertValueInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2079);
    match(LLVMParser::INSERTVALUE);
    setState(2080);
    llvmType(0);
    setState(2081);
    value();
    setState(2082);
    match(LLVMParser::COMMA);
    setState(2083);
    llvmType(0);
    setState(2084);
    value();
    setState(2085);
    match(LLVMParser::COMMA);
    setState(2086);
    indexList(0);
    setState(2087);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AllocaInstContext ------------------------------------------------------------------

LLVMParser::AllocaInstContext::AllocaInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::AllocaInstContext::ALLOCA() {
  return getToken(LLVMParser::ALLOCA, 0);
}

LLVMParser::OptInAllocaContext* LLVMParser::AllocaInstContext::optInAlloca() {
  return getRuleContext<LLVMParser::OptInAllocaContext>(0);
}

LLVMParser::OptSwiftErrorContext* LLVMParser::AllocaInstContext::optSwiftError() {
  return getRuleContext<LLVMParser::OptSwiftErrorContext>(0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::AllocaInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::AllocaInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::AllocaInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}

std::vector<tree::TerminalNode *> LLVMParser::AllocaInstContext::COMMA() {
  return getTokens(LLVMParser::COMMA);
}

tree::TerminalNode* LLVMParser::AllocaInstContext::COMMA(size_t i) {
  return getToken(LLVMParser::COMMA, i);
}

LLVMParser::AlignmentContext* LLVMParser::AllocaInstContext::alignment() {
  return getRuleContext<LLVMParser::AlignmentContext>(0);
}

LLVMParser::ValueContext* LLVMParser::AllocaInstContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

LLVMParser::AddrSpaceContext* LLVMParser::AllocaInstContext::addrSpace() {
  return getRuleContext<LLVMParser::AddrSpaceContext>(0);
}


size_t LLVMParser::AllocaInstContext::getRuleIndex() const {
  return LLVMParser::RuleAllocaInst;
}


std::any LLVMParser::AllocaInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitAllocaInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::AllocaInstContext* LLVMParser::allocaInst() {
  AllocaInstContext *_localctx = _tracker.createInstance<AllocaInstContext>(_ctx, getState());
  enterRule(_localctx, 318, LLVMParser::RuleAllocaInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2165);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2089);
      match(LLVMParser::ALLOCA);
      setState(2090);
      optInAlloca();
      setState(2091);
      optSwiftError();
      setState(2092);
      llvmType(0);
      setState(2093);
      optCommaSepMetadataAttachmentList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2095);
      match(LLVMParser::ALLOCA);
      setState(2096);
      optInAlloca();
      setState(2097);
      optSwiftError();
      setState(2098);
      llvmType(0);
      setState(2099);
      match(LLVMParser::COMMA);
      setState(2100);
      alignment();
      setState(2101);
      optCommaSepMetadataAttachmentList();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2103);
      match(LLVMParser::ALLOCA);
      setState(2104);
      optInAlloca();
      setState(2105);
      optSwiftError();
      setState(2106);
      llvmType(0);
      setState(2107);
      match(LLVMParser::COMMA);
      setState(2108);
      llvmType(0);
      setState(2109);
      value();
      setState(2110);
      optCommaSepMetadataAttachmentList();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2112);
      match(LLVMParser::ALLOCA);
      setState(2113);
      optInAlloca();
      setState(2114);
      optSwiftError();
      setState(2115);
      llvmType(0);
      setState(2116);
      match(LLVMParser::COMMA);
      setState(2117);
      llvmType(0);
      setState(2118);
      value();
      setState(2119);
      match(LLVMParser::COMMA);
      setState(2120);
      alignment();
      setState(2121);
      optCommaSepMetadataAttachmentList();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2123);
      match(LLVMParser::ALLOCA);
      setState(2124);
      optInAlloca();
      setState(2125);
      optSwiftError();
      setState(2126);
      llvmType(0);
      setState(2127);
      match(LLVMParser::COMMA);
      setState(2128);
      addrSpace();
      setState(2129);
      optCommaSepMetadataAttachmentList();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2131);
      match(LLVMParser::ALLOCA);
      setState(2132);
      optInAlloca();
      setState(2133);
      optSwiftError();
      setState(2134);
      llvmType(0);
      setState(2135);
      match(LLVMParser::COMMA);
      setState(2136);
      alignment();
      setState(2137);
      match(LLVMParser::COMMA);
      setState(2138);
      addrSpace();
      setState(2139);
      optCommaSepMetadataAttachmentList();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2141);
      match(LLVMParser::ALLOCA);
      setState(2142);
      optInAlloca();
      setState(2143);
      optSwiftError();
      setState(2144);
      llvmType(0);
      setState(2145);
      match(LLVMParser::COMMA);
      setState(2146);
      llvmType(0);
      setState(2147);
      value();
      setState(2148);
      match(LLVMParser::COMMA);
      setState(2149);
      addrSpace();
      setState(2150);
      optCommaSepMetadataAttachmentList();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2152);
      match(LLVMParser::ALLOCA);
      setState(2153);
      optInAlloca();
      setState(2154);
      optSwiftError();
      setState(2155);
      llvmType(0);
      setState(2156);
      match(LLVMParser::COMMA);
      setState(2157);
      llvmType(0);
      setState(2158);
      value();
      setState(2159);
      match(LLVMParser::COMMA);
      setState(2160);
      alignment();
      setState(2161);
      match(LLVMParser::COMMA);
      setState(2162);
      addrSpace();
      setState(2163);
      optCommaSepMetadataAttachmentList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptInAllocaContext ------------------------------------------------------------------

LLVMParser::OptInAllocaContext::OptInAllocaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OptInAllocaContext::INALLOCA() {
  return getToken(LLVMParser::INALLOCA, 0);
}


size_t LLVMParser::OptInAllocaContext::getRuleIndex() const {
  return LLVMParser::RuleOptInAlloca;
}


std::any LLVMParser::OptInAllocaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptInAlloca(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptInAllocaContext* LLVMParser::optInAlloca() {
  OptInAllocaContext *_localctx = _tracker.createInstance<OptInAllocaContext>(_ctx, getState());
  enterRule(_localctx, 320, LLVMParser::RuleOptInAlloca);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2168);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::INALLOCA) {
      setState(2167);
      match(LLVMParser::INALLOCA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptSwiftErrorContext ------------------------------------------------------------------

LLVMParser::OptSwiftErrorContext::OptSwiftErrorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OptSwiftErrorContext::SWIFTERROR() {
  return getToken(LLVMParser::SWIFTERROR, 0);
}


size_t LLVMParser::OptSwiftErrorContext::getRuleIndex() const {
  return LLVMParser::RuleOptSwiftError;
}


std::any LLVMParser::OptSwiftErrorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptSwiftError(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptSwiftErrorContext* LLVMParser::optSwiftError() {
  OptSwiftErrorContext *_localctx = _tracker.createInstance<OptSwiftErrorContext>(_ctx, getState());
  enterRule(_localctx, 322, LLVMParser::RuleOptSwiftError);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2171);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::SWIFTERROR) {
      setState(2170);
      match(LLVMParser::SWIFTERROR);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LoadInstContext ------------------------------------------------------------------

LLVMParser::LoadInstContext::LoadInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::LoadInstContext::LOAD() {
  return getToken(LLVMParser::LOAD, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::LoadInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::LoadInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<tree::TerminalNode *> LLVMParser::LoadInstContext::COMMA() {
  return getTokens(LLVMParser::COMMA);
}

tree::TerminalNode* LLVMParser::LoadInstContext::COMMA(size_t i) {
  return getToken(LLVMParser::COMMA, i);
}

LLVMParser::ValueContext* LLVMParser::LoadInstContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::LoadInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}

tree::TerminalNode* LLVMParser::LoadInstContext::VOLATILE() {
  return getToken(LLVMParser::VOLATILE, 0);
}

LLVMParser::AlignmentContext* LLVMParser::LoadInstContext::alignment() {
  return getRuleContext<LLVMParser::AlignmentContext>(0);
}

tree::TerminalNode* LLVMParser::LoadInstContext::ATOMIC() {
  return getToken(LLVMParser::ATOMIC, 0);
}

LLVMParser::OptSyncScopeContext* LLVMParser::LoadInstContext::optSyncScope() {
  return getRuleContext<LLVMParser::OptSyncScopeContext>(0);
}

LLVMParser::AtomicOrderingContext* LLVMParser::LoadInstContext::atomicOrdering() {
  return getRuleContext<LLVMParser::AtomicOrderingContext>(0);
}


size_t LLVMParser::LoadInstContext::getRuleIndex() const {
  return LLVMParser::RuleLoadInst;
}


std::any LLVMParser::LoadInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitLoadInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::LoadInstContext* LLVMParser::loadInst() {
  LoadInstContext *_localctx = _tracker.createInstance<LoadInstContext>(_ctx, getState());
  enterRule(_localctx, 324, LLVMParser::RuleLoadInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2223);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2173);
      match(LLVMParser::LOAD);
      setState(2175);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LLVMParser::VOLATILE) {
        setState(2174);
        match(LLVMParser::VOLATILE);
      }
      setState(2177);
      llvmType(0);
      setState(2178);
      match(LLVMParser::COMMA);
      setState(2179);
      llvmType(0);
      setState(2180);
      value();
      setState(2181);
      optCommaSepMetadataAttachmentList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2183);
      match(LLVMParser::LOAD);
      setState(2185);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LLVMParser::VOLATILE) {
        setState(2184);
        match(LLVMParser::VOLATILE);
      }
      setState(2187);
      llvmType(0);
      setState(2188);
      match(LLVMParser::COMMA);
      setState(2189);
      llvmType(0);
      setState(2190);
      value();
      setState(2191);
      match(LLVMParser::COMMA);
      setState(2192);
      alignment();
      setState(2193);
      optCommaSepMetadataAttachmentList();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2195);
      match(LLVMParser::LOAD);
      setState(2196);
      match(LLVMParser::ATOMIC);
      setState(2198);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LLVMParser::VOLATILE) {
        setState(2197);
        match(LLVMParser::VOLATILE);
      }
      setState(2200);
      llvmType(0);
      setState(2201);
      match(LLVMParser::COMMA);
      setState(2202);
      llvmType(0);
      setState(2203);
      value();
      setState(2204);
      optSyncScope();
      setState(2205);
      atomicOrdering();
      setState(2206);
      optCommaSepMetadataAttachmentList();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2208);
      match(LLVMParser::LOAD);
      setState(2209);
      match(LLVMParser::ATOMIC);
      setState(2211);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LLVMParser::VOLATILE) {
        setState(2210);
        match(LLVMParser::VOLATILE);
      }
      setState(2213);
      llvmType(0);
      setState(2214);
      match(LLVMParser::COMMA);
      setState(2215);
      llvmType(0);
      setState(2216);
      value();
      setState(2217);
      optSyncScope();
      setState(2218);
      atomicOrdering();
      setState(2219);
      match(LLVMParser::COMMA);
      setState(2220);
      alignment();
      setState(2221);
      optCommaSepMetadataAttachmentList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StoreInstContext ------------------------------------------------------------------

LLVMParser::StoreInstContext::StoreInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::StoreInstContext::STORE() {
  return getToken(LLVMParser::STORE, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::StoreInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::StoreInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::StoreInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::StoreInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

std::vector<tree::TerminalNode *> LLVMParser::StoreInstContext::COMMA() {
  return getTokens(LLVMParser::COMMA);
}

tree::TerminalNode* LLVMParser::StoreInstContext::COMMA(size_t i) {
  return getToken(LLVMParser::COMMA, i);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::StoreInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}

tree::TerminalNode* LLVMParser::StoreInstContext::VOLATILE() {
  return getToken(LLVMParser::VOLATILE, 0);
}

LLVMParser::AlignmentContext* LLVMParser::StoreInstContext::alignment() {
  return getRuleContext<LLVMParser::AlignmentContext>(0);
}

tree::TerminalNode* LLVMParser::StoreInstContext::ATOMIC() {
  return getToken(LLVMParser::ATOMIC, 0);
}

LLVMParser::OptSyncScopeContext* LLVMParser::StoreInstContext::optSyncScope() {
  return getRuleContext<LLVMParser::OptSyncScopeContext>(0);
}

LLVMParser::AtomicOrderingContext* LLVMParser::StoreInstContext::atomicOrdering() {
  return getRuleContext<LLVMParser::AtomicOrderingContext>(0);
}


size_t LLVMParser::StoreInstContext::getRuleIndex() const {
  return LLVMParser::RuleStoreInst;
}


std::any LLVMParser::StoreInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitStoreInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::StoreInstContext* LLVMParser::storeInst() {
  StoreInstContext *_localctx = _tracker.createInstance<StoreInstContext>(_ctx, getState());
  enterRule(_localctx, 326, LLVMParser::RuleStoreInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2279);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2225);
      match(LLVMParser::STORE);
      setState(2227);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LLVMParser::VOLATILE) {
        setState(2226);
        match(LLVMParser::VOLATILE);
      }
      setState(2229);
      llvmType(0);
      setState(2230);
      value();
      setState(2231);
      match(LLVMParser::COMMA);
      setState(2232);
      llvmType(0);
      setState(2233);
      value();
      setState(2234);
      optCommaSepMetadataAttachmentList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2236);
      match(LLVMParser::STORE);
      setState(2238);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LLVMParser::VOLATILE) {
        setState(2237);
        match(LLVMParser::VOLATILE);
      }
      setState(2240);
      llvmType(0);
      setState(2241);
      value();
      setState(2242);
      match(LLVMParser::COMMA);
      setState(2243);
      llvmType(0);
      setState(2244);
      value();
      setState(2245);
      match(LLVMParser::COMMA);
      setState(2246);
      alignment();
      setState(2247);
      optCommaSepMetadataAttachmentList();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2249);
      match(LLVMParser::STORE);
      setState(2250);
      match(LLVMParser::ATOMIC);
      setState(2252);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LLVMParser::VOLATILE) {
        setState(2251);
        match(LLVMParser::VOLATILE);
      }
      setState(2254);
      llvmType(0);
      setState(2255);
      value();
      setState(2256);
      match(LLVMParser::COMMA);
      setState(2257);
      llvmType(0);
      setState(2258);
      value();
      setState(2259);
      optSyncScope();
      setState(2260);
      atomicOrdering();
      setState(2261);
      optCommaSepMetadataAttachmentList();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2263);
      match(LLVMParser::STORE);
      setState(2264);
      match(LLVMParser::ATOMIC);
      setState(2266);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LLVMParser::VOLATILE) {
        setState(2265);
        match(LLVMParser::VOLATILE);
      }
      setState(2268);
      llvmType(0);
      setState(2269);
      value();
      setState(2270);
      match(LLVMParser::COMMA);
      setState(2271);
      llvmType(0);
      setState(2272);
      value();
      setState(2273);
      optSyncScope();
      setState(2274);
      atomicOrdering();
      setState(2275);
      match(LLVMParser::COMMA);
      setState(2276);
      alignment();
      setState(2277);
      optCommaSepMetadataAttachmentList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FenceInstContext ------------------------------------------------------------------

LLVMParser::FenceInstContext::FenceInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FenceInstContext::FENCE() {
  return getToken(LLVMParser::FENCE, 0);
}

LLVMParser::OptSyncScopeContext* LLVMParser::FenceInstContext::optSyncScope() {
  return getRuleContext<LLVMParser::OptSyncScopeContext>(0);
}

LLVMParser::AtomicOrderingContext* LLVMParser::FenceInstContext::atomicOrdering() {
  return getRuleContext<LLVMParser::AtomicOrderingContext>(0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::FenceInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::FenceInstContext::getRuleIndex() const {
  return LLVMParser::RuleFenceInst;
}


std::any LLVMParser::FenceInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFenceInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FenceInstContext* LLVMParser::fenceInst() {
  FenceInstContext *_localctx = _tracker.createInstance<FenceInstContext>(_ctx, getState());
  enterRule(_localctx, 328, LLVMParser::RuleFenceInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2281);
    match(LLVMParser::FENCE);
    setState(2282);
    optSyncScope();
    setState(2283);
    atomicOrdering();
    setState(2284);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CmpXchgInstContext ------------------------------------------------------------------

LLVMParser::CmpXchgInstContext::CmpXchgInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::CmpXchgInstContext::CMPXCHG() {
  return getToken(LLVMParser::CMPXCHG, 0);
}

LLVMParser::OptWeakContext* LLVMParser::CmpXchgInstContext::optWeak() {
  return getRuleContext<LLVMParser::OptWeakContext>(0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::CmpXchgInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::CmpXchgInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::CmpXchgInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::CmpXchgInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

std::vector<tree::TerminalNode *> LLVMParser::CmpXchgInstContext::COMMA() {
  return getTokens(LLVMParser::COMMA);
}

tree::TerminalNode* LLVMParser::CmpXchgInstContext::COMMA(size_t i) {
  return getToken(LLVMParser::COMMA, i);
}

LLVMParser::OptSyncScopeContext* LLVMParser::CmpXchgInstContext::optSyncScope() {
  return getRuleContext<LLVMParser::OptSyncScopeContext>(0);
}

std::vector<LLVMParser::AtomicOrderingContext *> LLVMParser::CmpXchgInstContext::atomicOrdering() {
  return getRuleContexts<LLVMParser::AtomicOrderingContext>();
}

LLVMParser::AtomicOrderingContext* LLVMParser::CmpXchgInstContext::atomicOrdering(size_t i) {
  return getRuleContext<LLVMParser::AtomicOrderingContext>(i);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::CmpXchgInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}

tree::TerminalNode* LLVMParser::CmpXchgInstContext::VOLATILE() {
  return getToken(LLVMParser::VOLATILE, 0);
}


size_t LLVMParser::CmpXchgInstContext::getRuleIndex() const {
  return LLVMParser::RuleCmpXchgInst;
}


std::any LLVMParser::CmpXchgInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitCmpXchgInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::CmpXchgInstContext* LLVMParser::cmpXchgInst() {
  CmpXchgInstContext *_localctx = _tracker.createInstance<CmpXchgInstContext>(_ctx, getState());
  enterRule(_localctx, 330, LLVMParser::RuleCmpXchgInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2286);
    match(LLVMParser::CMPXCHG);
    setState(2287);
    optWeak();
    setState(2289);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::VOLATILE) {
      setState(2288);
      match(LLVMParser::VOLATILE);
    }
    setState(2291);
    llvmType(0);
    setState(2292);
    value();
    setState(2293);
    match(LLVMParser::COMMA);
    setState(2294);
    llvmType(0);
    setState(2295);
    value();
    setState(2296);
    match(LLVMParser::COMMA);
    setState(2297);
    llvmType(0);
    setState(2298);
    value();
    setState(2299);
    optSyncScope();
    setState(2300);
    atomicOrdering();
    setState(2301);
    atomicOrdering();
    setState(2302);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptWeakContext ------------------------------------------------------------------

LLVMParser::OptWeakContext::OptWeakContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OptWeakContext::WEAK() {
  return getToken(LLVMParser::WEAK, 0);
}


size_t LLVMParser::OptWeakContext::getRuleIndex() const {
  return LLVMParser::RuleOptWeak;
}


std::any LLVMParser::OptWeakContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptWeak(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptWeakContext* LLVMParser::optWeak() {
  OptWeakContext *_localctx = _tracker.createInstance<OptWeakContext>(_ctx, getState());
  enterRule(_localctx, 332, LLVMParser::RuleOptWeak);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2305);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::WEAK) {
      setState(2304);
      match(LLVMParser::WEAK);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AtomicRMWInstContext ------------------------------------------------------------------

LLVMParser::AtomicRMWInstContext::AtomicRMWInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::AtomicRMWInstContext::ATOMICRMW() {
  return getToken(LLVMParser::ATOMICRMW, 0);
}

LLVMParser::BinOpContext* LLVMParser::AtomicRMWInstContext::binOp() {
  return getRuleContext<LLVMParser::BinOpContext>(0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::AtomicRMWInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::AtomicRMWInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::AtomicRMWInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::AtomicRMWInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

tree::TerminalNode* LLVMParser::AtomicRMWInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::OptSyncScopeContext* LLVMParser::AtomicRMWInstContext::optSyncScope() {
  return getRuleContext<LLVMParser::OptSyncScopeContext>(0);
}

LLVMParser::AtomicOrderingContext* LLVMParser::AtomicRMWInstContext::atomicOrdering() {
  return getRuleContext<LLVMParser::AtomicOrderingContext>(0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::AtomicRMWInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}

tree::TerminalNode* LLVMParser::AtomicRMWInstContext::VOLATILE() {
  return getToken(LLVMParser::VOLATILE, 0);
}


size_t LLVMParser::AtomicRMWInstContext::getRuleIndex() const {
  return LLVMParser::RuleAtomicRMWInst;
}


std::any LLVMParser::AtomicRMWInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitAtomicRMWInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::AtomicRMWInstContext* LLVMParser::atomicRMWInst() {
  AtomicRMWInstContext *_localctx = _tracker.createInstance<AtomicRMWInstContext>(_ctx, getState());
  enterRule(_localctx, 334, LLVMParser::RuleAtomicRMWInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2307);
    match(LLVMParser::ATOMICRMW);
    setState(2309);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::VOLATILE) {
      setState(2308);
      match(LLVMParser::VOLATILE);
    }
    setState(2311);
    binOp();
    setState(2312);
    llvmType(0);
    setState(2313);
    value();
    setState(2314);
    match(LLVMParser::COMMA);
    setState(2315);
    llvmType(0);
    setState(2316);
    value();
    setState(2317);
    optSyncScope();
    setState(2318);
    atomicOrdering();
    setState(2319);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BinOpContext ------------------------------------------------------------------

LLVMParser::BinOpContext::BinOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::BinOpContext::ADD() {
  return getToken(LLVMParser::ADD, 0);
}

tree::TerminalNode* LLVMParser::BinOpContext::AND() {
  return getToken(LLVMParser::AND, 0);
}

tree::TerminalNode* LLVMParser::BinOpContext::MAX() {
  return getToken(LLVMParser::MAX, 0);
}

tree::TerminalNode* LLVMParser::BinOpContext::MIN() {
  return getToken(LLVMParser::MIN, 0);
}

tree::TerminalNode* LLVMParser::BinOpContext::NAND() {
  return getToken(LLVMParser::NAND, 0);
}

tree::TerminalNode* LLVMParser::BinOpContext::OR() {
  return getToken(LLVMParser::OR, 0);
}

tree::TerminalNode* LLVMParser::BinOpContext::SUB() {
  return getToken(LLVMParser::SUB, 0);
}

tree::TerminalNode* LLVMParser::BinOpContext::UMAX() {
  return getToken(LLVMParser::UMAX, 0);
}

tree::TerminalNode* LLVMParser::BinOpContext::UMIN() {
  return getToken(LLVMParser::UMIN, 0);
}

tree::TerminalNode* LLVMParser::BinOpContext::XCHG() {
  return getToken(LLVMParser::XCHG, 0);
}

tree::TerminalNode* LLVMParser::BinOpContext::XOR() {
  return getToken(LLVMParser::XOR, 0);
}


size_t LLVMParser::BinOpContext::getRuleIndex() const {
  return LLVMParser::RuleBinOp;
}


std::any LLVMParser::BinOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitBinOp(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::BinOpContext* LLVMParser::binOp() {
  BinOpContext *_localctx = _tracker.createInstance<BinOpContext>(_ctx, getState());
  enterRule(_localctx, 336, LLVMParser::RuleBinOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2321);
    _la = _input->LA(1);
    if (!(_la == LLVMParser::ADD

    || _la == LLVMParser::AND || ((((_la - 226) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 226)) & 281474976712709) != 0) || ((((_la - 337) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 337)) & 805306369) != 0) || _la == LLVMParser::XCHG

    || _la == LLVMParser::XOR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GetElementPtrInstContext ------------------------------------------------------------------

LLVMParser::GetElementPtrInstContext::GetElementPtrInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::GetElementPtrInstContext::GETELEMENTPTR() {
  return getToken(LLVMParser::GETELEMENTPTR, 0);
}

LLVMParser::OptInBoundsContext* LLVMParser::GetElementPtrInstContext::optInBounds() {
  return getRuleContext<LLVMParser::OptInBoundsContext>(0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::GetElementPtrInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::GetElementPtrInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<tree::TerminalNode *> LLVMParser::GetElementPtrInstContext::COMMA() {
  return getTokens(LLVMParser::COMMA);
}

tree::TerminalNode* LLVMParser::GetElementPtrInstContext::COMMA(size_t i) {
  return getToken(LLVMParser::COMMA, i);
}

LLVMParser::ValueContext* LLVMParser::GetElementPtrInstContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::GetElementPtrInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}

LLVMParser::CommaSepTypeValueListContext* LLVMParser::GetElementPtrInstContext::commaSepTypeValueList() {
  return getRuleContext<LLVMParser::CommaSepTypeValueListContext>(0);
}


size_t LLVMParser::GetElementPtrInstContext::getRuleIndex() const {
  return LLVMParser::RuleGetElementPtrInst;
}


std::any LLVMParser::GetElementPtrInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitGetElementPtrInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::GetElementPtrInstContext* LLVMParser::getElementPtrInst() {
  GetElementPtrInstContext *_localctx = _tracker.createInstance<GetElementPtrInstContext>(_ctx, getState());
  enterRule(_localctx, 338, LLVMParser::RuleGetElementPtrInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2341);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2323);
      match(LLVMParser::GETELEMENTPTR);
      setState(2324);
      optInBounds();
      setState(2325);
      llvmType(0);
      setState(2326);
      match(LLVMParser::COMMA);
      setState(2327);
      llvmType(0);
      setState(2328);
      value();
      setState(2329);
      optCommaSepMetadataAttachmentList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2331);
      match(LLVMParser::GETELEMENTPTR);
      setState(2332);
      optInBounds();
      setState(2333);
      llvmType(0);
      setState(2334);
      match(LLVMParser::COMMA);
      setState(2335);
      llvmType(0);
      setState(2336);
      value();
      setState(2337);
      match(LLVMParser::COMMA);
      setState(2338);
      commaSepTypeValueList(0);
      setState(2339);
      optCommaSepMetadataAttachmentList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TruncInstContext ------------------------------------------------------------------

LLVMParser::TruncInstContext::TruncInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::TruncInstContext::TRUNC() {
  return getToken(LLVMParser::TRUNC, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::TruncInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::TruncInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ValueContext* LLVMParser::TruncInstContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::TruncInstContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::TruncInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::TruncInstContext::getRuleIndex() const {
  return LLVMParser::RuleTruncInst;
}


std::any LLVMParser::TruncInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitTruncInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::TruncInstContext* LLVMParser::truncInst() {
  TruncInstContext *_localctx = _tracker.createInstance<TruncInstContext>(_ctx, getState());
  enterRule(_localctx, 340, LLVMParser::RuleTruncInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2343);
    match(LLVMParser::TRUNC);
    setState(2344);
    llvmType(0);
    setState(2345);
    value();
    setState(2346);
    match(LLVMParser::TO);
    setState(2347);
    llvmType(0);
    setState(2348);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ZExtInstContext ------------------------------------------------------------------

LLVMParser::ZExtInstContext::ZExtInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ZExtInstContext::ZEXT() {
  return getToken(LLVMParser::ZEXT, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::ZExtInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::ZExtInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ValueContext* LLVMParser::ZExtInstContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::ZExtInstContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::ZExtInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::ZExtInstContext::getRuleIndex() const {
  return LLVMParser::RuleZExtInst;
}


std::any LLVMParser::ZExtInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitZExtInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ZExtInstContext* LLVMParser::zExtInst() {
  ZExtInstContext *_localctx = _tracker.createInstance<ZExtInstContext>(_ctx, getState());
  enterRule(_localctx, 342, LLVMParser::RuleZExtInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2350);
    match(LLVMParser::ZEXT);
    setState(2351);
    llvmType(0);
    setState(2352);
    value();
    setState(2353);
    match(LLVMParser::TO);
    setState(2354);
    llvmType(0);
    setState(2355);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SExtInstContext ------------------------------------------------------------------

LLVMParser::SExtInstContext::SExtInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::SExtInstContext::SEXT() {
  return getToken(LLVMParser::SEXT, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::SExtInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::SExtInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ValueContext* LLVMParser::SExtInstContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::SExtInstContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::SExtInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::SExtInstContext::getRuleIndex() const {
  return LLVMParser::RuleSExtInst;
}


std::any LLVMParser::SExtInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitSExtInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::SExtInstContext* LLVMParser::sExtInst() {
  SExtInstContext *_localctx = _tracker.createInstance<SExtInstContext>(_ctx, getState());
  enterRule(_localctx, 344, LLVMParser::RuleSExtInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2357);
    match(LLVMParser::SEXT);
    setState(2358);
    llvmType(0);
    setState(2359);
    value();
    setState(2360);
    match(LLVMParser::TO);
    setState(2361);
    llvmType(0);
    setState(2362);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FpTruncInstContext ------------------------------------------------------------------

LLVMParser::FpTruncInstContext::FpTruncInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FpTruncInstContext::FPTRUNC() {
  return getToken(LLVMParser::FPTRUNC, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::FpTruncInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::FpTruncInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ValueContext* LLVMParser::FpTruncInstContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::FpTruncInstContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::FpTruncInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::FpTruncInstContext::getRuleIndex() const {
  return LLVMParser::RuleFpTruncInst;
}


std::any LLVMParser::FpTruncInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFpTruncInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FpTruncInstContext* LLVMParser::fpTruncInst() {
  FpTruncInstContext *_localctx = _tracker.createInstance<FpTruncInstContext>(_ctx, getState());
  enterRule(_localctx, 346, LLVMParser::RuleFpTruncInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2364);
    match(LLVMParser::FPTRUNC);
    setState(2365);
    llvmType(0);
    setState(2366);
    value();
    setState(2367);
    match(LLVMParser::TO);
    setState(2368);
    llvmType(0);
    setState(2369);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FpExtInstContext ------------------------------------------------------------------

LLVMParser::FpExtInstContext::FpExtInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FpExtInstContext::FPEXT() {
  return getToken(LLVMParser::FPEXT, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::FpExtInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::FpExtInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ValueContext* LLVMParser::FpExtInstContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::FpExtInstContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::FpExtInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::FpExtInstContext::getRuleIndex() const {
  return LLVMParser::RuleFpExtInst;
}


std::any LLVMParser::FpExtInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFpExtInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FpExtInstContext* LLVMParser::fpExtInst() {
  FpExtInstContext *_localctx = _tracker.createInstance<FpExtInstContext>(_ctx, getState());
  enterRule(_localctx, 348, LLVMParser::RuleFpExtInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2371);
    match(LLVMParser::FPEXT);
    setState(2372);
    llvmType(0);
    setState(2373);
    value();
    setState(2374);
    match(LLVMParser::TO);
    setState(2375);
    llvmType(0);
    setState(2376);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FpToUIInstContext ------------------------------------------------------------------

LLVMParser::FpToUIInstContext::FpToUIInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FpToUIInstContext::FPTOUI() {
  return getToken(LLVMParser::FPTOUI, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::FpToUIInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::FpToUIInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ValueContext* LLVMParser::FpToUIInstContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::FpToUIInstContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::FpToUIInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::FpToUIInstContext::getRuleIndex() const {
  return LLVMParser::RuleFpToUIInst;
}


std::any LLVMParser::FpToUIInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFpToUIInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FpToUIInstContext* LLVMParser::fpToUIInst() {
  FpToUIInstContext *_localctx = _tracker.createInstance<FpToUIInstContext>(_ctx, getState());
  enterRule(_localctx, 350, LLVMParser::RuleFpToUIInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2378);
    match(LLVMParser::FPTOUI);
    setState(2379);
    llvmType(0);
    setState(2380);
    value();
    setState(2381);
    match(LLVMParser::TO);
    setState(2382);
    llvmType(0);
    setState(2383);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FpToSIInstContext ------------------------------------------------------------------

LLVMParser::FpToSIInstContext::FpToSIInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FpToSIInstContext::FPTOSI() {
  return getToken(LLVMParser::FPTOSI, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::FpToSIInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::FpToSIInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ValueContext* LLVMParser::FpToSIInstContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::FpToSIInstContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::FpToSIInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::FpToSIInstContext::getRuleIndex() const {
  return LLVMParser::RuleFpToSIInst;
}


std::any LLVMParser::FpToSIInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFpToSIInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FpToSIInstContext* LLVMParser::fpToSIInst() {
  FpToSIInstContext *_localctx = _tracker.createInstance<FpToSIInstContext>(_ctx, getState());
  enterRule(_localctx, 352, LLVMParser::RuleFpToSIInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2385);
    match(LLVMParser::FPTOSI);
    setState(2386);
    llvmType(0);
    setState(2387);
    value();
    setState(2388);
    match(LLVMParser::TO);
    setState(2389);
    llvmType(0);
    setState(2390);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UiToFPInstContext ------------------------------------------------------------------

LLVMParser::UiToFPInstContext::UiToFPInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::UiToFPInstContext::UITOFP() {
  return getToken(LLVMParser::UITOFP, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::UiToFPInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::UiToFPInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ValueContext* LLVMParser::UiToFPInstContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::UiToFPInstContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::UiToFPInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::UiToFPInstContext::getRuleIndex() const {
  return LLVMParser::RuleUiToFPInst;
}


std::any LLVMParser::UiToFPInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitUiToFPInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::UiToFPInstContext* LLVMParser::uiToFPInst() {
  UiToFPInstContext *_localctx = _tracker.createInstance<UiToFPInstContext>(_ctx, getState());
  enterRule(_localctx, 354, LLVMParser::RuleUiToFPInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2392);
    match(LLVMParser::UITOFP);
    setState(2393);
    llvmType(0);
    setState(2394);
    value();
    setState(2395);
    match(LLVMParser::TO);
    setState(2396);
    llvmType(0);
    setState(2397);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SiToFPInstContext ------------------------------------------------------------------

LLVMParser::SiToFPInstContext::SiToFPInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::SiToFPInstContext::SITOFP() {
  return getToken(LLVMParser::SITOFP, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::SiToFPInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::SiToFPInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ValueContext* LLVMParser::SiToFPInstContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::SiToFPInstContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::SiToFPInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::SiToFPInstContext::getRuleIndex() const {
  return LLVMParser::RuleSiToFPInst;
}


std::any LLVMParser::SiToFPInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitSiToFPInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::SiToFPInstContext* LLVMParser::siToFPInst() {
  SiToFPInstContext *_localctx = _tracker.createInstance<SiToFPInstContext>(_ctx, getState());
  enterRule(_localctx, 356, LLVMParser::RuleSiToFPInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2399);
    match(LLVMParser::SITOFP);
    setState(2400);
    llvmType(0);
    setState(2401);
    value();
    setState(2402);
    match(LLVMParser::TO);
    setState(2403);
    llvmType(0);
    setState(2404);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PtrToIntInstContext ------------------------------------------------------------------

LLVMParser::PtrToIntInstContext::PtrToIntInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::PtrToIntInstContext::PTRTOINT() {
  return getToken(LLVMParser::PTRTOINT, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::PtrToIntInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::PtrToIntInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ValueContext* LLVMParser::PtrToIntInstContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::PtrToIntInstContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::PtrToIntInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::PtrToIntInstContext::getRuleIndex() const {
  return LLVMParser::RulePtrToIntInst;
}


std::any LLVMParser::PtrToIntInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitPtrToIntInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::PtrToIntInstContext* LLVMParser::ptrToIntInst() {
  PtrToIntInstContext *_localctx = _tracker.createInstance<PtrToIntInstContext>(_ctx, getState());
  enterRule(_localctx, 358, LLVMParser::RulePtrToIntInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2406);
    match(LLVMParser::PTRTOINT);
    setState(2407);
    llvmType(0);
    setState(2408);
    value();
    setState(2409);
    match(LLVMParser::TO);
    setState(2410);
    llvmType(0);
    setState(2411);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntToPtrInstContext ------------------------------------------------------------------

LLVMParser::IntToPtrInstContext::IntToPtrInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::IntToPtrInstContext::INTTOPTR() {
  return getToken(LLVMParser::INTTOPTR, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::IntToPtrInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::IntToPtrInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ValueContext* LLVMParser::IntToPtrInstContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::IntToPtrInstContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::IntToPtrInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::IntToPtrInstContext::getRuleIndex() const {
  return LLVMParser::RuleIntToPtrInst;
}


std::any LLVMParser::IntToPtrInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitIntToPtrInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::IntToPtrInstContext* LLVMParser::intToPtrInst() {
  IntToPtrInstContext *_localctx = _tracker.createInstance<IntToPtrInstContext>(_ctx, getState());
  enterRule(_localctx, 360, LLVMParser::RuleIntToPtrInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2413);
    match(LLVMParser::INTTOPTR);
    setState(2414);
    llvmType(0);
    setState(2415);
    value();
    setState(2416);
    match(LLVMParser::TO);
    setState(2417);
    llvmType(0);
    setState(2418);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitCastInstContext ------------------------------------------------------------------

LLVMParser::BitCastInstContext::BitCastInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::BitCastInstContext::BITCAST() {
  return getToken(LLVMParser::BITCAST, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::BitCastInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::BitCastInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ValueContext* LLVMParser::BitCastInstContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::BitCastInstContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::BitCastInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::BitCastInstContext::getRuleIndex() const {
  return LLVMParser::RuleBitCastInst;
}


std::any LLVMParser::BitCastInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitBitCastInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::BitCastInstContext* LLVMParser::bitCastInst() {
  BitCastInstContext *_localctx = _tracker.createInstance<BitCastInstContext>(_ctx, getState());
  enterRule(_localctx, 362, LLVMParser::RuleBitCastInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2420);
    match(LLVMParser::BITCAST);
    setState(2421);
    llvmType(0);
    setState(2422);
    value();
    setState(2423);
    match(LLVMParser::TO);
    setState(2424);
    llvmType(0);
    setState(2425);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddrSpaceCastInstContext ------------------------------------------------------------------

LLVMParser::AddrSpaceCastInstContext::AddrSpaceCastInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::AddrSpaceCastInstContext::ADDRSPACECAST() {
  return getToken(LLVMParser::ADDRSPACECAST, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::AddrSpaceCastInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::AddrSpaceCastInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ValueContext* LLVMParser::AddrSpaceCastInstContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::AddrSpaceCastInstContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::AddrSpaceCastInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::AddrSpaceCastInstContext::getRuleIndex() const {
  return LLVMParser::RuleAddrSpaceCastInst;
}


std::any LLVMParser::AddrSpaceCastInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitAddrSpaceCastInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::AddrSpaceCastInstContext* LLVMParser::addrSpaceCastInst() {
  AddrSpaceCastInstContext *_localctx = _tracker.createInstance<AddrSpaceCastInstContext>(_ctx, getState());
  enterRule(_localctx, 364, LLVMParser::RuleAddrSpaceCastInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2427);
    match(LLVMParser::ADDRSPACECAST);
    setState(2428);
    llvmType(0);
    setState(2429);
    value();
    setState(2430);
    match(LLVMParser::TO);
    setState(2431);
    llvmType(0);
    setState(2432);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ICmpInstContext ------------------------------------------------------------------

LLVMParser::ICmpInstContext::ICmpInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ICmpInstContext::ICMP() {
  return getToken(LLVMParser::ICMP, 0);
}

LLVMParser::IPredContext* LLVMParser::ICmpInstContext::iPred() {
  return getRuleContext<LLVMParser::IPredContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::ICmpInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::ICmpInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::ICmpInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

tree::TerminalNode* LLVMParser::ICmpInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::ICmpInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::ICmpInstContext::getRuleIndex() const {
  return LLVMParser::RuleICmpInst;
}


std::any LLVMParser::ICmpInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitICmpInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ICmpInstContext* LLVMParser::iCmpInst() {
  ICmpInstContext *_localctx = _tracker.createInstance<ICmpInstContext>(_ctx, getState());
  enterRule(_localctx, 366, LLVMParser::RuleICmpInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2434);
    match(LLVMParser::ICMP);
    setState(2435);
    iPred();
    setState(2436);
    llvmType(0);
    setState(2437);
    value();
    setState(2438);
    match(LLVMParser::COMMA);
    setState(2439);
    value();
    setState(2440);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FCmpInstContext ------------------------------------------------------------------

LLVMParser::FCmpInstContext::FCmpInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FCmpInstContext::FCMP() {
  return getToken(LLVMParser::FCMP, 0);
}

LLVMParser::FastMathFlagsContext* LLVMParser::FCmpInstContext::fastMathFlags() {
  return getRuleContext<LLVMParser::FastMathFlagsContext>(0);
}

LLVMParser::FpredContext* LLVMParser::FCmpInstContext::fpred() {
  return getRuleContext<LLVMParser::FpredContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::FCmpInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::FCmpInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::FCmpInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

tree::TerminalNode* LLVMParser::FCmpInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::FCmpInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::FCmpInstContext::getRuleIndex() const {
  return LLVMParser::RuleFCmpInst;
}


std::any LLVMParser::FCmpInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFCmpInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FCmpInstContext* LLVMParser::fCmpInst() {
  FCmpInstContext *_localctx = _tracker.createInstance<FCmpInstContext>(_ctx, getState());
  enterRule(_localctx, 368, LLVMParser::RuleFCmpInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2442);
    match(LLVMParser::FCMP);
    setState(2443);
    fastMathFlags();
    setState(2444);
    fpred();
    setState(2445);
    llvmType(0);
    setState(2446);
    value();
    setState(2447);
    match(LLVMParser::COMMA);
    setState(2448);
    value();
    setState(2449);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PhiInstContext ------------------------------------------------------------------

LLVMParser::PhiInstContext::PhiInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::PhiInstContext::PHI() {
  return getToken(LLVMParser::PHI, 0);
}

LLVMParser::LlvmTypeContext* LLVMParser::PhiInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::IncListContext* LLVMParser::PhiInstContext::incList() {
  return getRuleContext<LLVMParser::IncListContext>(0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::PhiInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::PhiInstContext::getRuleIndex() const {
  return LLVMParser::RulePhiInst;
}


std::any LLVMParser::PhiInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitPhiInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::PhiInstContext* LLVMParser::phiInst() {
  PhiInstContext *_localctx = _tracker.createInstance<PhiInstContext>(_ctx, getState());
  enterRule(_localctx, 370, LLVMParser::RulePhiInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2451);
    match(LLVMParser::PHI);
    setState(2452);
    llvmType(0);
    setState(2453);
    incList(0);
    setState(2454);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IncListContext ------------------------------------------------------------------

LLVMParser::IncListContext::IncListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::IncContext* LLVMParser::IncListContext::inc() {
  return getRuleContext<LLVMParser::IncContext>(0);
}

LLVMParser::IncListContext* LLVMParser::IncListContext::incList() {
  return getRuleContext<LLVMParser::IncListContext>(0);
}

tree::TerminalNode* LLVMParser::IncListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::IncListContext::getRuleIndex() const {
  return LLVMParser::RuleIncList;
}


std::any LLVMParser::IncListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitIncList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::IncListContext* LLVMParser::incList() {
   return incList(0);
}

LLVMParser::IncListContext* LLVMParser::incList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::IncListContext *_localctx = _tracker.createInstance<IncListContext>(_ctx, parentState);
  LLVMParser::IncListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 372;
  enterRecursionRule(_localctx, 372, LLVMParser::RuleIncList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2457);
    inc();
    _ctx->stop = _input->LT(-1);
    setState(2464);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<IncListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleIncList);
        setState(2459);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2460);
        match(LLVMParser::COMMA);
        setState(2461);
        inc(); 
      }
      setState(2466);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- IncContext ------------------------------------------------------------------

LLVMParser::IncContext::IncContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::IncContext::LBRACK() {
  return getToken(LLVMParser::LBRACK, 0);
}

LLVMParser::ValueContext* LLVMParser::IncContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::IncContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::LocalIdentContext* LLVMParser::IncContext::localIdent() {
  return getRuleContext<LLVMParser::LocalIdentContext>(0);
}

tree::TerminalNode* LLVMParser::IncContext::RBRACK() {
  return getToken(LLVMParser::RBRACK, 0);
}


size_t LLVMParser::IncContext::getRuleIndex() const {
  return LLVMParser::RuleInc;
}


std::any LLVMParser::IncContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitInc(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::IncContext* LLVMParser::inc() {
  IncContext *_localctx = _tracker.createInstance<IncContext>(_ctx, getState());
  enterRule(_localctx, 374, LLVMParser::RuleInc);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2467);
    match(LLVMParser::LBRACK);
    setState(2468);
    value();
    setState(2469);
    match(LLVMParser::COMMA);
    setState(2470);
    localIdent();
    setState(2471);
    match(LLVMParser::RBRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectInstContext ------------------------------------------------------------------

LLVMParser::SelectInstContext::SelectInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::SelectInstContext::SELECT() {
  return getToken(LLVMParser::SELECT, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::SelectInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::SelectInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

std::vector<LLVMParser::ValueContext *> LLVMParser::SelectInstContext::value() {
  return getRuleContexts<LLVMParser::ValueContext>();
}

LLVMParser::ValueContext* LLVMParser::SelectInstContext::value(size_t i) {
  return getRuleContext<LLVMParser::ValueContext>(i);
}

std::vector<tree::TerminalNode *> LLVMParser::SelectInstContext::COMMA() {
  return getTokens(LLVMParser::COMMA);
}

tree::TerminalNode* LLVMParser::SelectInstContext::COMMA(size_t i) {
  return getToken(LLVMParser::COMMA, i);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::SelectInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::SelectInstContext::getRuleIndex() const {
  return LLVMParser::RuleSelectInst;
}


std::any LLVMParser::SelectInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitSelectInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::SelectInstContext* LLVMParser::selectInst() {
  SelectInstContext *_localctx = _tracker.createInstance<SelectInstContext>(_ctx, getState());
  enterRule(_localctx, 376, LLVMParser::RuleSelectInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2473);
    match(LLVMParser::SELECT);
    setState(2474);
    llvmType(0);
    setState(2475);
    value();
    setState(2476);
    match(LLVMParser::COMMA);
    setState(2477);
    llvmType(0);
    setState(2478);
    value();
    setState(2479);
    match(LLVMParser::COMMA);
    setState(2480);
    llvmType(0);
    setState(2481);
    value();
    setState(2482);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallInstContext ------------------------------------------------------------------

LLVMParser::CallInstContext::CallInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::OptTailContext* LLVMParser::CallInstContext::optTail() {
  return getRuleContext<LLVMParser::OptTailContext>(0);
}

tree::TerminalNode* LLVMParser::CallInstContext::CALL() {
  return getToken(LLVMParser::CALL, 0);
}

LLVMParser::FastMathFlagsContext* LLVMParser::CallInstContext::fastMathFlags() {
  return getRuleContext<LLVMParser::FastMathFlagsContext>(0);
}

LLVMParser::OptCallingConvContext* LLVMParser::CallInstContext::optCallingConv() {
  return getRuleContext<LLVMParser::OptCallingConvContext>(0);
}

LLVMParser::ReturnAttrsContext* LLVMParser::CallInstContext::returnAttrs() {
  return getRuleContext<LLVMParser::ReturnAttrsContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::CallInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::ValueContext* LLVMParser::CallInstContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::CallInstContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::ArgsContext* LLVMParser::CallInstContext::args() {
  return getRuleContext<LLVMParser::ArgsContext>(0);
}

tree::TerminalNode* LLVMParser::CallInstContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}

LLVMParser::FuncAttrsContext* LLVMParser::CallInstContext::funcAttrs() {
  return getRuleContext<LLVMParser::FuncAttrsContext>(0);
}

LLVMParser::OperandBundlesContext* LLVMParser::CallInstContext::operandBundles() {
  return getRuleContext<LLVMParser::OperandBundlesContext>(0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::CallInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::CallInstContext::getRuleIndex() const {
  return LLVMParser::RuleCallInst;
}


std::any LLVMParser::CallInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitCallInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::CallInstContext* LLVMParser::callInst() {
  CallInstContext *_localctx = _tracker.createInstance<CallInstContext>(_ctx, getState());
  enterRule(_localctx, 378, LLVMParser::RuleCallInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2484);
    optTail();
    setState(2485);
    match(LLVMParser::CALL);
    setState(2486);
    fastMathFlags();
    setState(2487);
    optCallingConv();
    setState(2488);
    returnAttrs();
    setState(2489);
    llvmType(0);
    setState(2490);
    value();
    setState(2491);
    match(LLVMParser::LPAREN);
    setState(2492);
    args();
    setState(2493);
    match(LLVMParser::RPAREN);
    setState(2494);
    funcAttrs();
    setState(2495);
    operandBundles();
    setState(2496);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptTailContext ------------------------------------------------------------------

LLVMParser::OptTailContext::OptTailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OptTailContext::MUSTTAIL() {
  return getToken(LLVMParser::MUSTTAIL, 0);
}

tree::TerminalNode* LLVMParser::OptTailContext::NOTAIL() {
  return getToken(LLVMParser::NOTAIL, 0);
}

tree::TerminalNode* LLVMParser::OptTailContext::TAIL() {
  return getToken(LLVMParser::TAIL, 0);
}


size_t LLVMParser::OptTailContext::getRuleIndex() const {
  return LLVMParser::RuleOptTail;
}


std::any LLVMParser::OptTailContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptTail(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptTailContext* LLVMParser::optTail() {
  OptTailContext *_localctx = _tracker.createInstance<OptTailContext>(_ctx, getState());
  enterRule(_localctx, 380, LLVMParser::RuleOptTail);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2499);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::MUSTTAIL

    || _la == LLVMParser::NOTAIL || _la == LLVMParser::TAIL) {
      setState(2498);
      _la = _input->LA(1);
      if (!(_la == LLVMParser::MUSTTAIL

      || _la == LLVMParser::NOTAIL || _la == LLVMParser::TAIL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VaArgInstContext ------------------------------------------------------------------

LLVMParser::VaArgInstContext::VaArgInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::VaArgInstContext::VA_ARG() {
  return getToken(LLVMParser::VA_ARG, 0);
}

std::vector<LLVMParser::LlvmTypeContext *> LLVMParser::VaArgInstContext::llvmType() {
  return getRuleContexts<LLVMParser::LlvmTypeContext>();
}

LLVMParser::LlvmTypeContext* LLVMParser::VaArgInstContext::llvmType(size_t i) {
  return getRuleContext<LLVMParser::LlvmTypeContext>(i);
}

LLVMParser::ValueContext* LLVMParser::VaArgInstContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::VaArgInstContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::VaArgInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::VaArgInstContext::getRuleIndex() const {
  return LLVMParser::RuleVaArgInst;
}


std::any LLVMParser::VaArgInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitVaArgInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::VaArgInstContext* LLVMParser::vaArgInst() {
  VaArgInstContext *_localctx = _tracker.createInstance<VaArgInstContext>(_ctx, getState());
  enterRule(_localctx, 382, LLVMParser::RuleVaArgInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2501);
    match(LLVMParser::VA_ARG);
    setState(2502);
    llvmType(0);
    setState(2503);
    value();
    setState(2504);
    match(LLVMParser::COMMA);
    setState(2505);
    llvmType(0);
    setState(2506);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LandingPadInstContext ------------------------------------------------------------------

LLVMParser::LandingPadInstContext::LandingPadInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::LandingPadInstContext::LANDINGPAD() {
  return getToken(LLVMParser::LANDINGPAD, 0);
}

LLVMParser::LlvmTypeContext* LLVMParser::LandingPadInstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::OptCleanupContext* LLVMParser::LandingPadInstContext::optCleanup() {
  return getRuleContext<LLVMParser::OptCleanupContext>(0);
}

LLVMParser::ClausesContext* LLVMParser::LandingPadInstContext::clauses() {
  return getRuleContext<LLVMParser::ClausesContext>(0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::LandingPadInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::LandingPadInstContext::getRuleIndex() const {
  return LLVMParser::RuleLandingPadInst;
}


std::any LLVMParser::LandingPadInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitLandingPadInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::LandingPadInstContext* LLVMParser::landingPadInst() {
  LandingPadInstContext *_localctx = _tracker.createInstance<LandingPadInstContext>(_ctx, getState());
  enterRule(_localctx, 384, LLVMParser::RuleLandingPadInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2508);
    match(LLVMParser::LANDINGPAD);
    setState(2509);
    llvmType(0);
    setState(2510);
    optCleanup();
    setState(2511);
    clauses();
    setState(2512);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptCleanupContext ------------------------------------------------------------------

LLVMParser::OptCleanupContext::OptCleanupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OptCleanupContext::CLEANUP() {
  return getToken(LLVMParser::CLEANUP, 0);
}


size_t LLVMParser::OptCleanupContext::getRuleIndex() const {
  return LLVMParser::RuleOptCleanup;
}


std::any LLVMParser::OptCleanupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptCleanup(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptCleanupContext* LLVMParser::optCleanup() {
  OptCleanupContext *_localctx = _tracker.createInstance<OptCleanupContext>(_ctx, getState());
  enterRule(_localctx, 386, LLVMParser::RuleOptCleanup);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2515);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx)) {
    case 1: {
      setState(2514);
      match(LLVMParser::CLEANUP);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClausesContext ------------------------------------------------------------------

LLVMParser::ClausesContext::ClausesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::ClauseListContext* LLVMParser::ClausesContext::clauseList() {
  return getRuleContext<LLVMParser::ClauseListContext>(0);
}


size_t LLVMParser::ClausesContext::getRuleIndex() const {
  return LLVMParser::RuleClauses;
}


std::any LLVMParser::ClausesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitClauses(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ClausesContext* LLVMParser::clauses() {
  ClausesContext *_localctx = _tracker.createInstance<ClausesContext>(_ctx, getState());
  enterRule(_localctx, 388, LLVMParser::RuleClauses);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2518);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
    case 1: {
      setState(2517);
      clauseList(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClauseListContext ------------------------------------------------------------------

LLVMParser::ClauseListContext::ClauseListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::ClauseContext* LLVMParser::ClauseListContext::clause() {
  return getRuleContext<LLVMParser::ClauseContext>(0);
}

LLVMParser::ClauseListContext* LLVMParser::ClauseListContext::clauseList() {
  return getRuleContext<LLVMParser::ClauseListContext>(0);
}


size_t LLVMParser::ClauseListContext::getRuleIndex() const {
  return LLVMParser::RuleClauseList;
}


std::any LLVMParser::ClauseListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitClauseList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::ClauseListContext* LLVMParser::clauseList() {
   return clauseList(0);
}

LLVMParser::ClauseListContext* LLVMParser::clauseList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::ClauseListContext *_localctx = _tracker.createInstance<ClauseListContext>(_ctx, parentState);
  LLVMParser::ClauseListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 390;
  enterRecursionRule(_localctx, 390, LLVMParser::RuleClauseList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2521);
    clause();
    _ctx->stop = _input->LT(-1);
    setState(2527);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ClauseListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleClauseList);
        setState(2523);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2524);
        clause(); 
      }
      setState(2529);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ClauseContext ------------------------------------------------------------------

LLVMParser::ClauseContext::ClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ClauseContext::CATCH() {
  return getToken(LLVMParser::CATCH, 0);
}

LLVMParser::LlvmTypeContext* LLVMParser::ClauseContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::ValueContext* LLVMParser::ClauseContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::ClauseContext::FILTER() {
  return getToken(LLVMParser::FILTER, 0);
}

LLVMParser::ArrayConstContext* LLVMParser::ClauseContext::arrayConst() {
  return getRuleContext<LLVMParser::ArrayConstContext>(0);
}


size_t LLVMParser::ClauseContext::getRuleIndex() const {
  return LLVMParser::RuleClause;
}


std::any LLVMParser::ClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitClause(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ClauseContext* LLVMParser::clause() {
  ClauseContext *_localctx = _tracker.createInstance<ClauseContext>(_ctx, getState());
  enterRule(_localctx, 392, LLVMParser::RuleClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2538);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::CATCH: {
        enterOuterAlt(_localctx, 1);
        setState(2530);
        match(LLVMParser::CATCH);
        setState(2531);
        llvmType(0);
        setState(2532);
        value();
        break;
      }

      case LLVMParser::FILTER: {
        enterOuterAlt(_localctx, 2);
        setState(2534);
        match(LLVMParser::FILTER);
        setState(2535);
        llvmType(0);
        setState(2536);
        arrayConst();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchPadInstContext ------------------------------------------------------------------

LLVMParser::CatchPadInstContext::CatchPadInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::CatchPadInstContext::CATCHPAD() {
  return getToken(LLVMParser::CATCHPAD, 0);
}

tree::TerminalNode* LLVMParser::CatchPadInstContext::WITHIN() {
  return getToken(LLVMParser::WITHIN, 0);
}

LLVMParser::LocalIdentContext* LLVMParser::CatchPadInstContext::localIdent() {
  return getRuleContext<LLVMParser::LocalIdentContext>(0);
}

tree::TerminalNode* LLVMParser::CatchPadInstContext::LBRACK() {
  return getToken(LLVMParser::LBRACK, 0);
}

LLVMParser::ExceptionArgsContext* LLVMParser::CatchPadInstContext::exceptionArgs() {
  return getRuleContext<LLVMParser::ExceptionArgsContext>(0);
}

tree::TerminalNode* LLVMParser::CatchPadInstContext::RBRACK() {
  return getToken(LLVMParser::RBRACK, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::CatchPadInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::CatchPadInstContext::getRuleIndex() const {
  return LLVMParser::RuleCatchPadInst;
}


std::any LLVMParser::CatchPadInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitCatchPadInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::CatchPadInstContext* LLVMParser::catchPadInst() {
  CatchPadInstContext *_localctx = _tracker.createInstance<CatchPadInstContext>(_ctx, getState());
  enterRule(_localctx, 394, LLVMParser::RuleCatchPadInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2540);
    match(LLVMParser::CATCHPAD);
    setState(2541);
    match(LLVMParser::WITHIN);
    setState(2542);
    localIdent();
    setState(2543);
    match(LLVMParser::LBRACK);
    setState(2544);
    exceptionArgs();
    setState(2545);
    match(LLVMParser::RBRACK);
    setState(2546);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CleanupPadInstContext ------------------------------------------------------------------

LLVMParser::CleanupPadInstContext::CleanupPadInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::CleanupPadInstContext::CLEANUPPAD() {
  return getToken(LLVMParser::CLEANUPPAD, 0);
}

tree::TerminalNode* LLVMParser::CleanupPadInstContext::WITHIN() {
  return getToken(LLVMParser::WITHIN, 0);
}

LLVMParser::ExceptionScopeContext* LLVMParser::CleanupPadInstContext::exceptionScope() {
  return getRuleContext<LLVMParser::ExceptionScopeContext>(0);
}

tree::TerminalNode* LLVMParser::CleanupPadInstContext::LBRACK() {
  return getToken(LLVMParser::LBRACK, 0);
}

LLVMParser::ExceptionArgsContext* LLVMParser::CleanupPadInstContext::exceptionArgs() {
  return getRuleContext<LLVMParser::ExceptionArgsContext>(0);
}

tree::TerminalNode* LLVMParser::CleanupPadInstContext::RBRACK() {
  return getToken(LLVMParser::RBRACK, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::CleanupPadInstContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::CleanupPadInstContext::getRuleIndex() const {
  return LLVMParser::RuleCleanupPadInst;
}


std::any LLVMParser::CleanupPadInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitCleanupPadInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::CleanupPadInstContext* LLVMParser::cleanupPadInst() {
  CleanupPadInstContext *_localctx = _tracker.createInstance<CleanupPadInstContext>(_ctx, getState());
  enterRule(_localctx, 396, LLVMParser::RuleCleanupPadInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2548);
    match(LLVMParser::CLEANUPPAD);
    setState(2549);
    match(LLVMParser::WITHIN);
    setState(2550);
    exceptionScope();
    setState(2551);
    match(LLVMParser::LBRACK);
    setState(2552);
    exceptionArgs();
    setState(2553);
    match(LLVMParser::RBRACK);
    setState(2554);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TerminatorContext ------------------------------------------------------------------

LLVMParser::TerminatorContext::TerminatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::RetTermContext* LLVMParser::TerminatorContext::retTerm() {
  return getRuleContext<LLVMParser::RetTermContext>(0);
}

LLVMParser::BrTermContext* LLVMParser::TerminatorContext::brTerm() {
  return getRuleContext<LLVMParser::BrTermContext>(0);
}

LLVMParser::CondBrTermContext* LLVMParser::TerminatorContext::condBrTerm() {
  return getRuleContext<LLVMParser::CondBrTermContext>(0);
}

LLVMParser::SwitchTermContext* LLVMParser::TerminatorContext::switchTerm() {
  return getRuleContext<LLVMParser::SwitchTermContext>(0);
}

LLVMParser::IndirectBrTermContext* LLVMParser::TerminatorContext::indirectBrTerm() {
  return getRuleContext<LLVMParser::IndirectBrTermContext>(0);
}

LLVMParser::InvokeTermContext* LLVMParser::TerminatorContext::invokeTerm() {
  return getRuleContext<LLVMParser::InvokeTermContext>(0);
}

LLVMParser::ResumeTermContext* LLVMParser::TerminatorContext::resumeTerm() {
  return getRuleContext<LLVMParser::ResumeTermContext>(0);
}

LLVMParser::CatchSwitchTermContext* LLVMParser::TerminatorContext::catchSwitchTerm() {
  return getRuleContext<LLVMParser::CatchSwitchTermContext>(0);
}

LLVMParser::CatchRetTermContext* LLVMParser::TerminatorContext::catchRetTerm() {
  return getRuleContext<LLVMParser::CatchRetTermContext>(0);
}

LLVMParser::CleanupRetTermContext* LLVMParser::TerminatorContext::cleanupRetTerm() {
  return getRuleContext<LLVMParser::CleanupRetTermContext>(0);
}

LLVMParser::UnreachableTermContext* LLVMParser::TerminatorContext::unreachableTerm() {
  return getRuleContext<LLVMParser::UnreachableTermContext>(0);
}


size_t LLVMParser::TerminatorContext::getRuleIndex() const {
  return LLVMParser::RuleTerminator;
}


std::any LLVMParser::TerminatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitTerminator(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::TerminatorContext* LLVMParser::terminator() {
  TerminatorContext *_localctx = _tracker.createInstance<TerminatorContext>(_ctx, getState());
  enterRule(_localctx, 398, LLVMParser::RuleTerminator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2567);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2556);
      retTerm();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2557);
      brTerm();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2558);
      condBrTerm();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2559);
      switchTerm();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2560);
      indirectBrTerm();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2561);
      invokeTerm();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2562);
      resumeTerm();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2563);
      catchSwitchTerm();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2564);
      catchRetTerm();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2565);
      cleanupRetTerm();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(2566);
      unreachableTerm();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RetTermContext ------------------------------------------------------------------

LLVMParser::RetTermContext::RetTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::RetTermContext::RET() {
  return getToken(LLVMParser::RET, 0);
}

LLVMParser::VoidTypeContext* LLVMParser::RetTermContext::voidType() {
  return getRuleContext<LLVMParser::VoidTypeContext>(0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::RetTermContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}

LLVMParser::ValueContext* LLVMParser::RetTermContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::RetTermContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::OptAddrSpaceContext* LLVMParser::RetTermContext::optAddrSpace() {
  return getRuleContext<LLVMParser::OptAddrSpaceContext>(0);
}

tree::TerminalNode* LLVMParser::RetTermContext::STAR() {
  return getToken(LLVMParser::STAR, 0);
}

LLVMParser::ConcreteNonRecTypeContext* LLVMParser::RetTermContext::concreteNonRecType() {
  return getRuleContext<LLVMParser::ConcreteNonRecTypeContext>(0);
}


size_t LLVMParser::RetTermContext::getRuleIndex() const {
  return LLVMParser::RuleRetTerm;
}


std::any LLVMParser::RetTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitRetTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::RetTermContext* LLVMParser::retTerm() {
  RetTermContext *_localctx = _tracker.createInstance<RetTermContext>(_ctx, getState());
  enterRule(_localctx, 400, LLVMParser::RuleRetTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2584);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2569);
      match(LLVMParser::RET);
      setState(2570);
      voidType();
      setState(2571);
      optCommaSepMetadataAttachmentList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2573);
      match(LLVMParser::RET);
      setState(2579);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx)) {
      case 1: {
        setState(2574);
        llvmType(0);
        setState(2575);
        optAddrSpace();
        setState(2576);
        match(LLVMParser::STAR);
        break;
      }

      case 2: {
        setState(2578);
        concreteNonRecType();
        break;
      }

      default:
        break;
      }
      setState(2581);
      value();
      setState(2582);
      optCommaSepMetadataAttachmentList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BrTermContext ------------------------------------------------------------------

LLVMParser::BrTermContext::BrTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::BrTermContext::BR() {
  return getToken(LLVMParser::BR, 0);
}

LLVMParser::LabelTypeContext* LLVMParser::BrTermContext::labelType() {
  return getRuleContext<LLVMParser::LabelTypeContext>(0);
}

LLVMParser::LocalIdentContext* LLVMParser::BrTermContext::localIdent() {
  return getRuleContext<LLVMParser::LocalIdentContext>(0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::BrTermContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::BrTermContext::getRuleIndex() const {
  return LLVMParser::RuleBrTerm;
}


std::any LLVMParser::BrTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitBrTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::BrTermContext* LLVMParser::brTerm() {
  BrTermContext *_localctx = _tracker.createInstance<BrTermContext>(_ctx, getState());
  enterRule(_localctx, 402, LLVMParser::RuleBrTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2586);
    match(LLVMParser::BR);
    setState(2587);
    labelType();
    setState(2588);
    localIdent();
    setState(2589);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CondBrTermContext ------------------------------------------------------------------

LLVMParser::CondBrTermContext::CondBrTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::CondBrTermContext::BR() {
  return getToken(LLVMParser::BR, 0);
}

LLVMParser::IntTypeContext* LLVMParser::CondBrTermContext::intType() {
  return getRuleContext<LLVMParser::IntTypeContext>(0);
}

LLVMParser::ValueContext* LLVMParser::CondBrTermContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

std::vector<tree::TerminalNode *> LLVMParser::CondBrTermContext::COMMA() {
  return getTokens(LLVMParser::COMMA);
}

tree::TerminalNode* LLVMParser::CondBrTermContext::COMMA(size_t i) {
  return getToken(LLVMParser::COMMA, i);
}

std::vector<LLVMParser::LabelTypeContext *> LLVMParser::CondBrTermContext::labelType() {
  return getRuleContexts<LLVMParser::LabelTypeContext>();
}

LLVMParser::LabelTypeContext* LLVMParser::CondBrTermContext::labelType(size_t i) {
  return getRuleContext<LLVMParser::LabelTypeContext>(i);
}

std::vector<LLVMParser::LocalIdentContext *> LLVMParser::CondBrTermContext::localIdent() {
  return getRuleContexts<LLVMParser::LocalIdentContext>();
}

LLVMParser::LocalIdentContext* LLVMParser::CondBrTermContext::localIdent(size_t i) {
  return getRuleContext<LLVMParser::LocalIdentContext>(i);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::CondBrTermContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::CondBrTermContext::getRuleIndex() const {
  return LLVMParser::RuleCondBrTerm;
}


std::any LLVMParser::CondBrTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitCondBrTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::CondBrTermContext* LLVMParser::condBrTerm() {
  CondBrTermContext *_localctx = _tracker.createInstance<CondBrTermContext>(_ctx, getState());
  enterRule(_localctx, 404, LLVMParser::RuleCondBrTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2591);
    match(LLVMParser::BR);
    setState(2592);
    intType();
    setState(2593);
    value();
    setState(2594);
    match(LLVMParser::COMMA);
    setState(2595);
    labelType();
    setState(2596);
    localIdent();
    setState(2597);
    match(LLVMParser::COMMA);
    setState(2598);
    labelType();
    setState(2599);
    localIdent();
    setState(2600);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchTermContext ------------------------------------------------------------------

LLVMParser::SwitchTermContext::SwitchTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::SwitchTermContext::SWITCH() {
  return getToken(LLVMParser::SWITCH, 0);
}

LLVMParser::LlvmTypeContext* LLVMParser::SwitchTermContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::ValueContext* LLVMParser::SwitchTermContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::SwitchTermContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::LabelTypeContext* LLVMParser::SwitchTermContext::labelType() {
  return getRuleContext<LLVMParser::LabelTypeContext>(0);
}

LLVMParser::LocalIdentContext* LLVMParser::SwitchTermContext::localIdent() {
  return getRuleContext<LLVMParser::LocalIdentContext>(0);
}

tree::TerminalNode* LLVMParser::SwitchTermContext::LBRACK() {
  return getToken(LLVMParser::LBRACK, 0);
}

LLVMParser::CasesContext* LLVMParser::SwitchTermContext::cases() {
  return getRuleContext<LLVMParser::CasesContext>(0);
}

tree::TerminalNode* LLVMParser::SwitchTermContext::RBRACK() {
  return getToken(LLVMParser::RBRACK, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::SwitchTermContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::SwitchTermContext::getRuleIndex() const {
  return LLVMParser::RuleSwitchTerm;
}


std::any LLVMParser::SwitchTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitSwitchTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::SwitchTermContext* LLVMParser::switchTerm() {
  SwitchTermContext *_localctx = _tracker.createInstance<SwitchTermContext>(_ctx, getState());
  enterRule(_localctx, 406, LLVMParser::RuleSwitchTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2602);
    match(LLVMParser::SWITCH);
    setState(2603);
    llvmType(0);
    setState(2604);
    value();
    setState(2605);
    match(LLVMParser::COMMA);
    setState(2606);
    labelType();
    setState(2607);
    localIdent();
    setState(2608);
    match(LLVMParser::LBRACK);
    setState(2609);
    cases();
    setState(2610);
    match(LLVMParser::RBRACK);
    setState(2611);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CasesContext ------------------------------------------------------------------

LLVMParser::CasesContext::CasesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::CaseListContext* LLVMParser::CasesContext::caseList() {
  return getRuleContext<LLVMParser::CaseListContext>(0);
}


size_t LLVMParser::CasesContext::getRuleIndex() const {
  return LLVMParser::RuleCases;
}


std::any LLVMParser::CasesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitCases(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::CasesContext* LLVMParser::cases() {
  CasesContext *_localctx = _tracker.createInstance<CasesContext>(_ctx, getState());
  enterRule(_localctx, 408, LLVMParser::RuleCases);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2614);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5122) != 0) || ((((_la - 126) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 126)) & 2251821288521729) != 0) || _la == LLVMParser::LABEL

    || _la == LLVMParser::METADATA || _la == LLVMParser::PPC_FP128 || ((((_la - 351) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 351)) & 175939040313345) != 0) || _la == LLVMParser::INT_TYPE

    || _la == LLVMParser::LOCAL_IDENT) {
      setState(2613);
      caseList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseListContext ------------------------------------------------------------------

LLVMParser::CaseListContext::CaseListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::LlvmCaseContext* LLVMParser::CaseListContext::llvmCase() {
  return getRuleContext<LLVMParser::LlvmCaseContext>(0);
}

LLVMParser::CaseListContext* LLVMParser::CaseListContext::caseList() {
  return getRuleContext<LLVMParser::CaseListContext>(0);
}


size_t LLVMParser::CaseListContext::getRuleIndex() const {
  return LLVMParser::RuleCaseList;
}


std::any LLVMParser::CaseListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitCaseList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::CaseListContext* LLVMParser::caseList() {
   return caseList(0);
}

LLVMParser::CaseListContext* LLVMParser::caseList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::CaseListContext *_localctx = _tracker.createInstance<CaseListContext>(_ctx, parentState);
  LLVMParser::CaseListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 410;
  enterRecursionRule(_localctx, 410, LLVMParser::RuleCaseList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2617);
    llvmCase();
    _ctx->stop = _input->LT(-1);
    setState(2623);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<CaseListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleCaseList);
        setState(2619);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2620);
        llvmCase(); 
      }
      setState(2625);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- LlvmCaseContext ------------------------------------------------------------------

LLVMParser::LlvmCaseContext::LlvmCaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::LlvmTypeContext* LLVMParser::LlvmCaseContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::IntConstContext* LLVMParser::LlvmCaseContext::intConst() {
  return getRuleContext<LLVMParser::IntConstContext>(0);
}

tree::TerminalNode* LLVMParser::LlvmCaseContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::LabelTypeContext* LLVMParser::LlvmCaseContext::labelType() {
  return getRuleContext<LLVMParser::LabelTypeContext>(0);
}

LLVMParser::LocalIdentContext* LLVMParser::LlvmCaseContext::localIdent() {
  return getRuleContext<LLVMParser::LocalIdentContext>(0);
}


size_t LLVMParser::LlvmCaseContext::getRuleIndex() const {
  return LLVMParser::RuleLlvmCase;
}


std::any LLVMParser::LlvmCaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitLlvmCase(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::LlvmCaseContext* LLVMParser::llvmCase() {
  LlvmCaseContext *_localctx = _tracker.createInstance<LlvmCaseContext>(_ctx, getState());
  enterRule(_localctx, 412, LLVMParser::RuleLlvmCase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2626);
    llvmType(0);
    setState(2627);
    intConst();
    setState(2628);
    match(LLVMParser::COMMA);
    setState(2629);
    labelType();
    setState(2630);
    localIdent();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndirectBrTermContext ------------------------------------------------------------------

LLVMParser::IndirectBrTermContext::IndirectBrTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::IndirectBrTermContext::INDIRECTBR() {
  return getToken(LLVMParser::INDIRECTBR, 0);
}

LLVMParser::LlvmTypeContext* LLVMParser::IndirectBrTermContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::ValueContext* LLVMParser::IndirectBrTermContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::IndirectBrTermContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

tree::TerminalNode* LLVMParser::IndirectBrTermContext::LBRACK() {
  return getToken(LLVMParser::LBRACK, 0);
}

LLVMParser::LabelListContext* LLVMParser::IndirectBrTermContext::labelList() {
  return getRuleContext<LLVMParser::LabelListContext>(0);
}

tree::TerminalNode* LLVMParser::IndirectBrTermContext::RBRACK() {
  return getToken(LLVMParser::RBRACK, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::IndirectBrTermContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::IndirectBrTermContext::getRuleIndex() const {
  return LLVMParser::RuleIndirectBrTerm;
}


std::any LLVMParser::IndirectBrTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitIndirectBrTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::IndirectBrTermContext* LLVMParser::indirectBrTerm() {
  IndirectBrTermContext *_localctx = _tracker.createInstance<IndirectBrTermContext>(_ctx, getState());
  enterRule(_localctx, 414, LLVMParser::RuleIndirectBrTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2632);
    match(LLVMParser::INDIRECTBR);
    setState(2633);
    llvmType(0);
    setState(2634);
    value();
    setState(2635);
    match(LLVMParser::COMMA);
    setState(2636);
    match(LLVMParser::LBRACK);
    setState(2637);
    labelList(0);
    setState(2638);
    match(LLVMParser::RBRACK);
    setState(2639);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelListContext ------------------------------------------------------------------

LLVMParser::LabelListContext::LabelListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::LabelContext* LLVMParser::LabelListContext::label() {
  return getRuleContext<LLVMParser::LabelContext>(0);
}

LLVMParser::LabelListContext* LLVMParser::LabelListContext::labelList() {
  return getRuleContext<LLVMParser::LabelListContext>(0);
}

tree::TerminalNode* LLVMParser::LabelListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::LabelListContext::getRuleIndex() const {
  return LLVMParser::RuleLabelList;
}


std::any LLVMParser::LabelListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitLabelList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::LabelListContext* LLVMParser::labelList() {
   return labelList(0);
}

LLVMParser::LabelListContext* LLVMParser::labelList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::LabelListContext *_localctx = _tracker.createInstance<LabelListContext>(_ctx, parentState);
  LLVMParser::LabelListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 416;
  enterRecursionRule(_localctx, 416, LLVMParser::RuleLabelList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2642);
    label();
    _ctx->stop = _input->LT(-1);
    setState(2649);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<LabelListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleLabelList);
        setState(2644);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2645);
        match(LLVMParser::COMMA);
        setState(2646);
        label(); 
      }
      setState(2651);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- LabelContext ------------------------------------------------------------------

LLVMParser::LabelContext::LabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::LabelTypeContext* LLVMParser::LabelContext::labelType() {
  return getRuleContext<LLVMParser::LabelTypeContext>(0);
}

LLVMParser::LocalIdentContext* LLVMParser::LabelContext::localIdent() {
  return getRuleContext<LLVMParser::LocalIdentContext>(0);
}


size_t LLVMParser::LabelContext::getRuleIndex() const {
  return LLVMParser::RuleLabel;
}


std::any LLVMParser::LabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitLabel(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::LabelContext* LLVMParser::label() {
  LabelContext *_localctx = _tracker.createInstance<LabelContext>(_ctx, getState());
  enterRule(_localctx, 418, LLVMParser::RuleLabel);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2652);
    labelType();
    setState(2653);
    localIdent();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InvokeTermContext ------------------------------------------------------------------

LLVMParser::InvokeTermContext::InvokeTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::InvokeTermContext::INVOKE() {
  return getToken(LLVMParser::INVOKE, 0);
}

LLVMParser::OptCallingConvContext* LLVMParser::InvokeTermContext::optCallingConv() {
  return getRuleContext<LLVMParser::OptCallingConvContext>(0);
}

LLVMParser::ReturnAttrsContext* LLVMParser::InvokeTermContext::returnAttrs() {
  return getRuleContext<LLVMParser::ReturnAttrsContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::InvokeTermContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::ValueContext* LLVMParser::InvokeTermContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::InvokeTermContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::ArgsContext* LLVMParser::InvokeTermContext::args() {
  return getRuleContext<LLVMParser::ArgsContext>(0);
}

tree::TerminalNode* LLVMParser::InvokeTermContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}

LLVMParser::FuncAttrsContext* LLVMParser::InvokeTermContext::funcAttrs() {
  return getRuleContext<LLVMParser::FuncAttrsContext>(0);
}

LLVMParser::OperandBundlesContext* LLVMParser::InvokeTermContext::operandBundles() {
  return getRuleContext<LLVMParser::OperandBundlesContext>(0);
}

tree::TerminalNode* LLVMParser::InvokeTermContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

std::vector<LLVMParser::LabelTypeContext *> LLVMParser::InvokeTermContext::labelType() {
  return getRuleContexts<LLVMParser::LabelTypeContext>();
}

LLVMParser::LabelTypeContext* LLVMParser::InvokeTermContext::labelType(size_t i) {
  return getRuleContext<LLVMParser::LabelTypeContext>(i);
}

std::vector<LLVMParser::LocalIdentContext *> LLVMParser::InvokeTermContext::localIdent() {
  return getRuleContexts<LLVMParser::LocalIdentContext>();
}

LLVMParser::LocalIdentContext* LLVMParser::InvokeTermContext::localIdent(size_t i) {
  return getRuleContext<LLVMParser::LocalIdentContext>(i);
}

tree::TerminalNode* LLVMParser::InvokeTermContext::UNWIND() {
  return getToken(LLVMParser::UNWIND, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::InvokeTermContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::InvokeTermContext::getRuleIndex() const {
  return LLVMParser::RuleInvokeTerm;
}


std::any LLVMParser::InvokeTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitInvokeTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::InvokeTermContext* LLVMParser::invokeTerm() {
  InvokeTermContext *_localctx = _tracker.createInstance<InvokeTermContext>(_ctx, getState());
  enterRule(_localctx, 420, LLVMParser::RuleInvokeTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2655);
    match(LLVMParser::INVOKE);
    setState(2656);
    optCallingConv();
    setState(2657);
    returnAttrs();
    setState(2658);
    llvmType(0);
    setState(2659);
    value();
    setState(2660);
    match(LLVMParser::LPAREN);
    setState(2661);
    args();
    setState(2662);
    match(LLVMParser::RPAREN);
    setState(2663);
    funcAttrs();
    setState(2664);
    operandBundles();
    setState(2665);
    match(LLVMParser::TO);
    setState(2666);
    labelType();
    setState(2667);
    localIdent();
    setState(2668);
    match(LLVMParser::UNWIND);
    setState(2669);
    labelType();
    setState(2670);
    localIdent();
    setState(2671);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResumeTermContext ------------------------------------------------------------------

LLVMParser::ResumeTermContext::ResumeTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ResumeTermContext::RESUME() {
  return getToken(LLVMParser::RESUME, 0);
}

LLVMParser::LlvmTypeContext* LLVMParser::ResumeTermContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::ValueContext* LLVMParser::ResumeTermContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::ResumeTermContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::ResumeTermContext::getRuleIndex() const {
  return LLVMParser::RuleResumeTerm;
}


std::any LLVMParser::ResumeTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitResumeTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ResumeTermContext* LLVMParser::resumeTerm() {
  ResumeTermContext *_localctx = _tracker.createInstance<ResumeTermContext>(_ctx, getState());
  enterRule(_localctx, 422, LLVMParser::RuleResumeTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2673);
    match(LLVMParser::RESUME);
    setState(2674);
    llvmType(0);
    setState(2675);
    value();
    setState(2676);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchSwitchTermContext ------------------------------------------------------------------

LLVMParser::CatchSwitchTermContext::CatchSwitchTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::CatchSwitchTermContext::CATCHSWITCH() {
  return getToken(LLVMParser::CATCHSWITCH, 0);
}

tree::TerminalNode* LLVMParser::CatchSwitchTermContext::WITHIN() {
  return getToken(LLVMParser::WITHIN, 0);
}

LLVMParser::ExceptionScopeContext* LLVMParser::CatchSwitchTermContext::exceptionScope() {
  return getRuleContext<LLVMParser::ExceptionScopeContext>(0);
}

tree::TerminalNode* LLVMParser::CatchSwitchTermContext::LBRACK() {
  return getToken(LLVMParser::LBRACK, 0);
}

LLVMParser::LabelListContext* LLVMParser::CatchSwitchTermContext::labelList() {
  return getRuleContext<LLVMParser::LabelListContext>(0);
}

tree::TerminalNode* LLVMParser::CatchSwitchTermContext::RBRACK() {
  return getToken(LLVMParser::RBRACK, 0);
}

tree::TerminalNode* LLVMParser::CatchSwitchTermContext::UNWIND() {
  return getToken(LLVMParser::UNWIND, 0);
}

LLVMParser::UnwindTargetContext* LLVMParser::CatchSwitchTermContext::unwindTarget() {
  return getRuleContext<LLVMParser::UnwindTargetContext>(0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::CatchSwitchTermContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::CatchSwitchTermContext::getRuleIndex() const {
  return LLVMParser::RuleCatchSwitchTerm;
}


std::any LLVMParser::CatchSwitchTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitCatchSwitchTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::CatchSwitchTermContext* LLVMParser::catchSwitchTerm() {
  CatchSwitchTermContext *_localctx = _tracker.createInstance<CatchSwitchTermContext>(_ctx, getState());
  enterRule(_localctx, 424, LLVMParser::RuleCatchSwitchTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2678);
    match(LLVMParser::CATCHSWITCH);
    setState(2679);
    match(LLVMParser::WITHIN);
    setState(2680);
    exceptionScope();
    setState(2681);
    match(LLVMParser::LBRACK);
    setState(2682);
    labelList(0);
    setState(2683);
    match(LLVMParser::RBRACK);
    setState(2684);
    match(LLVMParser::UNWIND);
    setState(2685);
    unwindTarget();
    setState(2686);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchRetTermContext ------------------------------------------------------------------

LLVMParser::CatchRetTermContext::CatchRetTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::CatchRetTermContext::CATCHRET() {
  return getToken(LLVMParser::CATCHRET, 0);
}

tree::TerminalNode* LLVMParser::CatchRetTermContext::FROM() {
  return getToken(LLVMParser::FROM, 0);
}

LLVMParser::ValueContext* LLVMParser::CatchRetTermContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::CatchRetTermContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

LLVMParser::LabelTypeContext* LLVMParser::CatchRetTermContext::labelType() {
  return getRuleContext<LLVMParser::LabelTypeContext>(0);
}

LLVMParser::LocalIdentContext* LLVMParser::CatchRetTermContext::localIdent() {
  return getRuleContext<LLVMParser::LocalIdentContext>(0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::CatchRetTermContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::CatchRetTermContext::getRuleIndex() const {
  return LLVMParser::RuleCatchRetTerm;
}


std::any LLVMParser::CatchRetTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitCatchRetTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::CatchRetTermContext* LLVMParser::catchRetTerm() {
  CatchRetTermContext *_localctx = _tracker.createInstance<CatchRetTermContext>(_ctx, getState());
  enterRule(_localctx, 426, LLVMParser::RuleCatchRetTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2688);
    match(LLVMParser::CATCHRET);
    setState(2689);
    match(LLVMParser::FROM);
    setState(2690);
    value();
    setState(2691);
    match(LLVMParser::TO);
    setState(2692);
    labelType();
    setState(2693);
    localIdent();
    setState(2694);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CleanupRetTermContext ------------------------------------------------------------------

LLVMParser::CleanupRetTermContext::CleanupRetTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::CleanupRetTermContext::CLEANUPRET() {
  return getToken(LLVMParser::CLEANUPRET, 0);
}

tree::TerminalNode* LLVMParser::CleanupRetTermContext::FROM() {
  return getToken(LLVMParser::FROM, 0);
}

LLVMParser::ValueContext* LLVMParser::CleanupRetTermContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

tree::TerminalNode* LLVMParser::CleanupRetTermContext::UNWIND() {
  return getToken(LLVMParser::UNWIND, 0);
}

LLVMParser::UnwindTargetContext* LLVMParser::CleanupRetTermContext::unwindTarget() {
  return getRuleContext<LLVMParser::UnwindTargetContext>(0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::CleanupRetTermContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::CleanupRetTermContext::getRuleIndex() const {
  return LLVMParser::RuleCleanupRetTerm;
}


std::any LLVMParser::CleanupRetTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitCleanupRetTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::CleanupRetTermContext* LLVMParser::cleanupRetTerm() {
  CleanupRetTermContext *_localctx = _tracker.createInstance<CleanupRetTermContext>(_ctx, getState());
  enterRule(_localctx, 428, LLVMParser::RuleCleanupRetTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2696);
    match(LLVMParser::CLEANUPRET);
    setState(2697);
    match(LLVMParser::FROM);
    setState(2698);
    value();
    setState(2699);
    match(LLVMParser::UNWIND);
    setState(2700);
    unwindTarget();
    setState(2701);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnreachableTermContext ------------------------------------------------------------------

LLVMParser::UnreachableTermContext::UnreachableTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::UnreachableTermContext::UNREACHABLE() {
  return getToken(LLVMParser::UNREACHABLE, 0);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::UnreachableTermContext::optCommaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::OptCommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::UnreachableTermContext::getRuleIndex() const {
  return LLVMParser::RuleUnreachableTerm;
}


std::any LLVMParser::UnreachableTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitUnreachableTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::UnreachableTermContext* LLVMParser::unreachableTerm() {
  UnreachableTermContext *_localctx = _tracker.createInstance<UnreachableTermContext>(_ctx, getState());
  enterRule(_localctx, 430, LLVMParser::RuleUnreachableTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2703);
    match(LLVMParser::UNREACHABLE);
    setState(2704);
    optCommaSepMetadataAttachmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnwindTargetContext ------------------------------------------------------------------

LLVMParser::UnwindTargetContext::UnwindTargetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::UnwindTargetContext::TO() {
  return getToken(LLVMParser::TO, 0);
}

tree::TerminalNode* LLVMParser::UnwindTargetContext::CALLER() {
  return getToken(LLVMParser::CALLER, 0);
}

LLVMParser::LabelTypeContext* LLVMParser::UnwindTargetContext::labelType() {
  return getRuleContext<LLVMParser::LabelTypeContext>(0);
}

LLVMParser::LocalIdentContext* LLVMParser::UnwindTargetContext::localIdent() {
  return getRuleContext<LLVMParser::LocalIdentContext>(0);
}


size_t LLVMParser::UnwindTargetContext::getRuleIndex() const {
  return LLVMParser::RuleUnwindTarget;
}


std::any LLVMParser::UnwindTargetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitUnwindTarget(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::UnwindTargetContext* LLVMParser::unwindTarget() {
  UnwindTargetContext *_localctx = _tracker.createInstance<UnwindTargetContext>(_ctx, getState());
  enterRule(_localctx, 432, LLVMParser::RuleUnwindTarget);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2711);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::TO: {
        enterOuterAlt(_localctx, 1);
        setState(2706);
        match(LLVMParser::TO);
        setState(2707);
        match(LLVMParser::CALLER);
        break;
      }

      case LLVMParser::LABEL: {
        enterOuterAlt(_localctx, 2);
        setState(2708);
        labelType();
        setState(2709);
        localIdent();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MdTupleContext ------------------------------------------------------------------

LLVMParser::MdTupleContext::MdTupleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::MdTupleContext::BANG() {
  return getToken(LLVMParser::BANG, 0);
}

LLVMParser::MdFieldsContext* LLVMParser::MdTupleContext::mdFields() {
  return getRuleContext<LLVMParser::MdFieldsContext>(0);
}


size_t LLVMParser::MdTupleContext::getRuleIndex() const {
  return LLVMParser::RuleMdTuple;
}


std::any LLVMParser::MdTupleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitMdTuple(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::MdTupleContext* LLVMParser::mdTuple() {
  MdTupleContext *_localctx = _tracker.createInstance<MdTupleContext>(_ctx, getState());
  enterRule(_localctx, 434, LLVMParser::RuleMdTuple);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2713);
    match(LLVMParser::BANG);
    setState(2714);
    mdFields();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MdFieldsContext ------------------------------------------------------------------

LLVMParser::MdFieldsContext::MdFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::MdFieldsContext::LBRACE() {
  return getToken(LLVMParser::LBRACE, 0);
}

tree::TerminalNode* LLVMParser::MdFieldsContext::RBRACE() {
  return getToken(LLVMParser::RBRACE, 0);
}

LLVMParser::MdFieldListContext* LLVMParser::MdFieldsContext::mdFieldList() {
  return getRuleContext<LLVMParser::MdFieldListContext>(0);
}


size_t LLVMParser::MdFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleMdFields;
}


std::any LLVMParser::MdFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitMdFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::MdFieldsContext* LLVMParser::mdFields() {
  MdFieldsContext *_localctx = _tracker.createInstance<MdFieldsContext>(_ctx, getState());
  enterRule(_localctx, 436, LLVMParser::RuleMdFields);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2722);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2716);
      match(LLVMParser::LBRACE);
      setState(2717);
      match(LLVMParser::RBRACE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2718);
      match(LLVMParser::LBRACE);
      setState(2719);
      mdFieldList(0);
      setState(2720);
      match(LLVMParser::RBRACE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MdFieldListContext ------------------------------------------------------------------

LLVMParser::MdFieldListContext::MdFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::MdFieldContext* LLVMParser::MdFieldListContext::mdField() {
  return getRuleContext<LLVMParser::MdFieldContext>(0);
}

LLVMParser::MdFieldListContext* LLVMParser::MdFieldListContext::mdFieldList() {
  return getRuleContext<LLVMParser::MdFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::MdFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::MdFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleMdFieldList;
}


std::any LLVMParser::MdFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitMdFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::MdFieldListContext* LLVMParser::mdFieldList() {
   return mdFieldList(0);
}

LLVMParser::MdFieldListContext* LLVMParser::mdFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::MdFieldListContext *_localctx = _tracker.createInstance<MdFieldListContext>(_ctx, parentState);
  LLVMParser::MdFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 438;
  enterRecursionRule(_localctx, 438, LLVMParser::RuleMdFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2725);
    mdField();
    _ctx->stop = _input->LT(-1);
    setState(2732);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<MdFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleMdFieldList);
        setState(2727);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2728);
        match(LLVMParser::COMMA);
        setState(2729);
        mdField(); 
      }
      setState(2734);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- MdFieldContext ------------------------------------------------------------------

LLVMParser::MdFieldContext::MdFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::MdFieldContext::NULL_() {
  return getToken(LLVMParser::NULL_, 0);
}

LLVMParser::MetadataContext* LLVMParser::MdFieldContext::metadata() {
  return getRuleContext<LLVMParser::MetadataContext>(0);
}


size_t LLVMParser::MdFieldContext::getRuleIndex() const {
  return LLVMParser::RuleMdField;
}


std::any LLVMParser::MdFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitMdField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::MdFieldContext* LLVMParser::mdField() {
  MdFieldContext *_localctx = _tracker.createInstance<MdFieldContext>(_ctx, getState());
  enterRule(_localctx, 440, LLVMParser::RuleMdField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2737);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::NULL_: {
        enterOuterAlt(_localctx, 1);
        setState(2735);
        match(LLVMParser::NULL_);
        break;
      }

      case LLVMParser::LT:
      case LLVMParser::BANG:
      case LLVMParser::LBRACK:
      case LLVMParser::LBRACE:
      case LLVMParser::NOTDIBASICTYPE:
      case LLVMParser::NOTDICOMPILEUNIT:
      case LLVMParser::NOTDICOMPOSITETYPE:
      case LLVMParser::NOTDIDERIVEDTYPE:
      case LLVMParser::NOTDIENUMERATOR:
      case LLVMParser::NOTDIEXPRESSION:
      case LLVMParser::NOTDIFILE:
      case LLVMParser::NOTDIGLOBALVARIABLE:
      case LLVMParser::NOTDIGLOBALVARIABLEEXPRESSION:
      case LLVMParser::NOTDIIMPORTEDENTITY:
      case LLVMParser::NOTDILEXICALBLOCK:
      case LLVMParser::NOTDILEXICALBLOCKFILE:
      case LLVMParser::NOTDILOCALVARIABLE:
      case LLVMParser::NOTDILOCATION:
      case LLVMParser::NOTDIMACRO:
      case LLVMParser::NOTDIMACROFILE:
      case LLVMParser::NOTDIMODULE:
      case LLVMParser::NOTDINAMESPACE:
      case LLVMParser::NOTDIOBJCPROPERTY:
      case LLVMParser::NOTDISUBPROGRAM:
      case LLVMParser::NOTDISUBRANGE:
      case LLVMParser::NOTDISUBROUTINETYPE:
      case LLVMParser::NOTDITEMPLATETYPEPARAMETER:
      case LLVMParser::NOTDITEMPLATEVALUEPARAMETER:
      case LLVMParser::DOUBLE:
      case LLVMParser::FLOAT:
      case LLVMParser::FP128:
      case LLVMParser::NOTGENERICDINODE:
      case LLVMParser::HALF:
      case LLVMParser::LABEL:
      case LLVMParser::METADATA:
      case LLVMParser::PPC_FP128:
      case LLVMParser::TOKEN:
      case LLVMParser::VOID:
      case LLVMParser::X86_FP80:
      case LLVMParser::X86_MMX:
      case LLVMParser::METADATA_ID:
      case LLVMParser::INT_TYPE:
      case LLVMParser::LOCAL_IDENT: {
        enterOuterAlt(_localctx, 2);
        setState(2736);
        metadata();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetadataContext ------------------------------------------------------------------

LLVMParser::MetadataContext::MetadataContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::LlvmTypeContext* LLVMParser::MetadataContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::ValueContext* LLVMParser::MetadataContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

LLVMParser::MdStringContext* LLVMParser::MetadataContext::mdString() {
  return getRuleContext<LLVMParser::MdStringContext>(0);
}

LLVMParser::MdTupleContext* LLVMParser::MetadataContext::mdTuple() {
  return getRuleContext<LLVMParser::MdTupleContext>(0);
}

LLVMParser::MetadataIDContext* LLVMParser::MetadataContext::metadataID() {
  return getRuleContext<LLVMParser::MetadataIDContext>(0);
}

LLVMParser::SpecializedMDNodeContext* LLVMParser::MetadataContext::specializedMDNode() {
  return getRuleContext<LLVMParser::SpecializedMDNodeContext>(0);
}


size_t LLVMParser::MetadataContext::getRuleIndex() const {
  return LLVMParser::RuleMetadata;
}


std::any LLVMParser::MetadataContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitMetadata(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::MetadataContext* LLVMParser::metadata() {
  MetadataContext *_localctx = _tracker.createInstance<MetadataContext>(_ctx, getState());
  enterRule(_localctx, 442, LLVMParser::RuleMetadata);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2746);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2739);
      llvmType(0);
      setState(2740);
      value();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2742);
      mdString();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2743);
      mdTuple();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2744);
      metadataID();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2745);
      specializedMDNode();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MdStringContext ------------------------------------------------------------------

LLVMParser::MdStringContext::MdStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::MdStringContext::BANG() {
  return getToken(LLVMParser::BANG, 0);
}

LLVMParser::StringLitContext* LLVMParser::MdStringContext::stringLit() {
  return getRuleContext<LLVMParser::StringLitContext>(0);
}


size_t LLVMParser::MdStringContext::getRuleIndex() const {
  return LLVMParser::RuleMdString;
}


std::any LLVMParser::MdStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitMdString(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::MdStringContext* LLVMParser::mdString() {
  MdStringContext *_localctx = _tracker.createInstance<MdStringContext>(_ctx, getState());
  enterRule(_localctx, 444, LLVMParser::RuleMdString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2748);
    match(LLVMParser::BANG);
    setState(2749);
    stringLit();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetadataAttachmentContext ------------------------------------------------------------------

LLVMParser::MetadataAttachmentContext::MetadataAttachmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::MetadataNameContext* LLVMParser::MetadataAttachmentContext::metadataName() {
  return getRuleContext<LLVMParser::MetadataNameContext>(0);
}

LLVMParser::MdNodeContext* LLVMParser::MetadataAttachmentContext::mdNode() {
  return getRuleContext<LLVMParser::MdNodeContext>(0);
}


size_t LLVMParser::MetadataAttachmentContext::getRuleIndex() const {
  return LLVMParser::RuleMetadataAttachment;
}


std::any LLVMParser::MetadataAttachmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitMetadataAttachment(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::MetadataAttachmentContext* LLVMParser::metadataAttachment() {
  MetadataAttachmentContext *_localctx = _tracker.createInstance<MetadataAttachmentContext>(_ctx, getState());
  enterRule(_localctx, 446, LLVMParser::RuleMetadataAttachment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2751);
    metadataName();
    setState(2752);
    mdNode();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MdNodeContext ------------------------------------------------------------------

LLVMParser::MdNodeContext::MdNodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::MdTupleContext* LLVMParser::MdNodeContext::mdTuple() {
  return getRuleContext<LLVMParser::MdTupleContext>(0);
}

LLVMParser::MetadataIDContext* LLVMParser::MdNodeContext::metadataID() {
  return getRuleContext<LLVMParser::MetadataIDContext>(0);
}

LLVMParser::SpecializedMDNodeContext* LLVMParser::MdNodeContext::specializedMDNode() {
  return getRuleContext<LLVMParser::SpecializedMDNodeContext>(0);
}


size_t LLVMParser::MdNodeContext::getRuleIndex() const {
  return LLVMParser::RuleMdNode;
}


std::any LLVMParser::MdNodeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitMdNode(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::MdNodeContext* LLVMParser::mdNode() {
  MdNodeContext *_localctx = _tracker.createInstance<MdNodeContext>(_ctx, getState());
  enterRule(_localctx, 448, LLVMParser::RuleMdNode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2757);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::BANG: {
        enterOuterAlt(_localctx, 1);
        setState(2754);
        mdTuple();
        break;
      }

      case LLVMParser::METADATA_ID: {
        enterOuterAlt(_localctx, 2);
        setState(2755);
        metadataID();
        break;
      }

      case LLVMParser::NOTDIBASICTYPE:
      case LLVMParser::NOTDICOMPILEUNIT:
      case LLVMParser::NOTDICOMPOSITETYPE:
      case LLVMParser::NOTDIDERIVEDTYPE:
      case LLVMParser::NOTDIENUMERATOR:
      case LLVMParser::NOTDIEXPRESSION:
      case LLVMParser::NOTDIFILE:
      case LLVMParser::NOTDIGLOBALVARIABLE:
      case LLVMParser::NOTDIGLOBALVARIABLEEXPRESSION:
      case LLVMParser::NOTDIIMPORTEDENTITY:
      case LLVMParser::NOTDILEXICALBLOCK:
      case LLVMParser::NOTDILEXICALBLOCKFILE:
      case LLVMParser::NOTDILOCALVARIABLE:
      case LLVMParser::NOTDILOCATION:
      case LLVMParser::NOTDIMACRO:
      case LLVMParser::NOTDIMACROFILE:
      case LLVMParser::NOTDIMODULE:
      case LLVMParser::NOTDINAMESPACE:
      case LLVMParser::NOTDIOBJCPROPERTY:
      case LLVMParser::NOTDISUBPROGRAM:
      case LLVMParser::NOTDISUBRANGE:
      case LLVMParser::NOTDISUBROUTINETYPE:
      case LLVMParser::NOTDITEMPLATETYPEPARAMETER:
      case LLVMParser::NOTDITEMPLATEVALUEPARAMETER:
      case LLVMParser::NOTGENERICDINODE: {
        enterOuterAlt(_localctx, 3);
        setState(2756);
        specializedMDNode();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetadataAttachmentsContext ------------------------------------------------------------------

LLVMParser::MetadataAttachmentsContext::MetadataAttachmentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::MetadataAttachmentListContext* LLVMParser::MetadataAttachmentsContext::metadataAttachmentList() {
  return getRuleContext<LLVMParser::MetadataAttachmentListContext>(0);
}


size_t LLVMParser::MetadataAttachmentsContext::getRuleIndex() const {
  return LLVMParser::RuleMetadataAttachments;
}


std::any LLVMParser::MetadataAttachmentsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitMetadataAttachments(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::MetadataAttachmentsContext* LLVMParser::metadataAttachments() {
  MetadataAttachmentsContext *_localctx = _tracker.createInstance<MetadataAttachmentsContext>(_ctx, getState());
  enterRule(_localctx, 450, LLVMParser::RuleMetadataAttachments);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2760);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::METADATA_NAME) {
      setState(2759);
      metadataAttachmentList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetadataAttachmentListContext ------------------------------------------------------------------

LLVMParser::MetadataAttachmentListContext::MetadataAttachmentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::MetadataAttachmentContext* LLVMParser::MetadataAttachmentListContext::metadataAttachment() {
  return getRuleContext<LLVMParser::MetadataAttachmentContext>(0);
}

LLVMParser::MetadataAttachmentListContext* LLVMParser::MetadataAttachmentListContext::metadataAttachmentList() {
  return getRuleContext<LLVMParser::MetadataAttachmentListContext>(0);
}


size_t LLVMParser::MetadataAttachmentListContext::getRuleIndex() const {
  return LLVMParser::RuleMetadataAttachmentList;
}


std::any LLVMParser::MetadataAttachmentListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitMetadataAttachmentList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::MetadataAttachmentListContext* LLVMParser::metadataAttachmentList() {
   return metadataAttachmentList(0);
}

LLVMParser::MetadataAttachmentListContext* LLVMParser::metadataAttachmentList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::MetadataAttachmentListContext *_localctx = _tracker.createInstance<MetadataAttachmentListContext>(_ctx, parentState);
  LLVMParser::MetadataAttachmentListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 452;
  enterRecursionRule(_localctx, 452, LLVMParser::RuleMetadataAttachmentList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2763);
    metadataAttachment();
    _ctx->stop = _input->LT(-1);
    setState(2769);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<MetadataAttachmentListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleMetadataAttachmentList);
        setState(2765);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2766);
        metadataAttachment(); 
      }
      setState(2771);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- OptCommaSepMetadataAttachmentListContext ------------------------------------------------------------------

LLVMParser::OptCommaSepMetadataAttachmentListContext::OptCommaSepMetadataAttachmentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OptCommaSepMetadataAttachmentListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::CommaSepMetadataAttachmentListContext* LLVMParser::OptCommaSepMetadataAttachmentListContext::commaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::CommaSepMetadataAttachmentListContext>(0);
}


size_t LLVMParser::OptCommaSepMetadataAttachmentListContext::getRuleIndex() const {
  return LLVMParser::RuleOptCommaSepMetadataAttachmentList;
}


std::any LLVMParser::OptCommaSepMetadataAttachmentListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptCommaSepMetadataAttachmentList(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptCommaSepMetadataAttachmentListContext* LLVMParser::optCommaSepMetadataAttachmentList() {
  OptCommaSepMetadataAttachmentListContext *_localctx = _tracker.createInstance<OptCommaSepMetadataAttachmentListContext>(_ctx, getState());
  enterRule(_localctx, 454, LLVMParser::RuleOptCommaSepMetadataAttachmentList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2774);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx)) {
    case 1: {
      setState(2772);
      match(LLVMParser::COMMA);
      setState(2773);
      commaSepMetadataAttachmentList(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommaSepMetadataAttachmentListContext ------------------------------------------------------------------

LLVMParser::CommaSepMetadataAttachmentListContext::CommaSepMetadataAttachmentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::MetadataAttachmentContext* LLVMParser::CommaSepMetadataAttachmentListContext::metadataAttachment() {
  return getRuleContext<LLVMParser::MetadataAttachmentContext>(0);
}

LLVMParser::CommaSepMetadataAttachmentListContext* LLVMParser::CommaSepMetadataAttachmentListContext::commaSepMetadataAttachmentList() {
  return getRuleContext<LLVMParser::CommaSepMetadataAttachmentListContext>(0);
}

tree::TerminalNode* LLVMParser::CommaSepMetadataAttachmentListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::CommaSepMetadataAttachmentListContext::getRuleIndex() const {
  return LLVMParser::RuleCommaSepMetadataAttachmentList;
}


std::any LLVMParser::CommaSepMetadataAttachmentListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitCommaSepMetadataAttachmentList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::CommaSepMetadataAttachmentListContext* LLVMParser::commaSepMetadataAttachmentList() {
   return commaSepMetadataAttachmentList(0);
}

LLVMParser::CommaSepMetadataAttachmentListContext* LLVMParser::commaSepMetadataAttachmentList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::CommaSepMetadataAttachmentListContext *_localctx = _tracker.createInstance<CommaSepMetadataAttachmentListContext>(_ctx, parentState);
  LLVMParser::CommaSepMetadataAttachmentListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 456;
  enterRecursionRule(_localctx, 456, LLVMParser::RuleCommaSepMetadataAttachmentList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2777);
    metadataAttachment();
    _ctx->stop = _input->LT(-1);
    setState(2784);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<CommaSepMetadataAttachmentListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleCommaSepMetadataAttachmentList);
        setState(2779);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2780);
        match(LLVMParser::COMMA);
        setState(2781);
        metadataAttachment(); 
      }
      setState(2786);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- SpecializedMDNodeContext ------------------------------------------------------------------

LLVMParser::SpecializedMDNodeContext::SpecializedMDNodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiCompileUnitContext* LLVMParser::SpecializedMDNodeContext::diCompileUnit() {
  return getRuleContext<LLVMParser::DiCompileUnitContext>(0);
}

LLVMParser::DiFileContext* LLVMParser::SpecializedMDNodeContext::diFile() {
  return getRuleContext<LLVMParser::DiFileContext>(0);
}

LLVMParser::DiBasicTypeContext* LLVMParser::SpecializedMDNodeContext::diBasicType() {
  return getRuleContext<LLVMParser::DiBasicTypeContext>(0);
}

LLVMParser::DiSubroutineTypeContext* LLVMParser::SpecializedMDNodeContext::diSubroutineType() {
  return getRuleContext<LLVMParser::DiSubroutineTypeContext>(0);
}

LLVMParser::DiDerivedTypeContext* LLVMParser::SpecializedMDNodeContext::diDerivedType() {
  return getRuleContext<LLVMParser::DiDerivedTypeContext>(0);
}

LLVMParser::DiCompositeTypeContext* LLVMParser::SpecializedMDNodeContext::diCompositeType() {
  return getRuleContext<LLVMParser::DiCompositeTypeContext>(0);
}

LLVMParser::DiSubrangeContext* LLVMParser::SpecializedMDNodeContext::diSubrange() {
  return getRuleContext<LLVMParser::DiSubrangeContext>(0);
}

LLVMParser::DiEnumeratorContext* LLVMParser::SpecializedMDNodeContext::diEnumerator() {
  return getRuleContext<LLVMParser::DiEnumeratorContext>(0);
}

LLVMParser::DiTemplateTypeParameterContext* LLVMParser::SpecializedMDNodeContext::diTemplateTypeParameter() {
  return getRuleContext<LLVMParser::DiTemplateTypeParameterContext>(0);
}

LLVMParser::DiTemplateValueParameterContext* LLVMParser::SpecializedMDNodeContext::diTemplateValueParameter() {
  return getRuleContext<LLVMParser::DiTemplateValueParameterContext>(0);
}

LLVMParser::DiModuleContext* LLVMParser::SpecializedMDNodeContext::diModule() {
  return getRuleContext<LLVMParser::DiModuleContext>(0);
}

LLVMParser::DiNamespaceContext* LLVMParser::SpecializedMDNodeContext::diNamespace() {
  return getRuleContext<LLVMParser::DiNamespaceContext>(0);
}

LLVMParser::DiGlobalVariableContext* LLVMParser::SpecializedMDNodeContext::diGlobalVariable() {
  return getRuleContext<LLVMParser::DiGlobalVariableContext>(0);
}

LLVMParser::DiSubprogramContext* LLVMParser::SpecializedMDNodeContext::diSubprogram() {
  return getRuleContext<LLVMParser::DiSubprogramContext>(0);
}

LLVMParser::DiLexicalBlockContext* LLVMParser::SpecializedMDNodeContext::diLexicalBlock() {
  return getRuleContext<LLVMParser::DiLexicalBlockContext>(0);
}

LLVMParser::DiLexicalBlockFileContext* LLVMParser::SpecializedMDNodeContext::diLexicalBlockFile() {
  return getRuleContext<LLVMParser::DiLexicalBlockFileContext>(0);
}

LLVMParser::DiLocationContext* LLVMParser::SpecializedMDNodeContext::diLocation() {
  return getRuleContext<LLVMParser::DiLocationContext>(0);
}

LLVMParser::DiLocalVariableContext* LLVMParser::SpecializedMDNodeContext::diLocalVariable() {
  return getRuleContext<LLVMParser::DiLocalVariableContext>(0);
}

LLVMParser::DiExpressionContext* LLVMParser::SpecializedMDNodeContext::diExpression() {
  return getRuleContext<LLVMParser::DiExpressionContext>(0);
}

LLVMParser::DiGlobalVariableExpressionContext* LLVMParser::SpecializedMDNodeContext::diGlobalVariableExpression() {
  return getRuleContext<LLVMParser::DiGlobalVariableExpressionContext>(0);
}

LLVMParser::DiObjCPropertyContext* LLVMParser::SpecializedMDNodeContext::diObjCProperty() {
  return getRuleContext<LLVMParser::DiObjCPropertyContext>(0);
}

LLVMParser::DiImportedEntityContext* LLVMParser::SpecializedMDNodeContext::diImportedEntity() {
  return getRuleContext<LLVMParser::DiImportedEntityContext>(0);
}

LLVMParser::DiMacroContext* LLVMParser::SpecializedMDNodeContext::diMacro() {
  return getRuleContext<LLVMParser::DiMacroContext>(0);
}

LLVMParser::DiMacroFileContext* LLVMParser::SpecializedMDNodeContext::diMacroFile() {
  return getRuleContext<LLVMParser::DiMacroFileContext>(0);
}

LLVMParser::GenericDINodeContext* LLVMParser::SpecializedMDNodeContext::genericDINode() {
  return getRuleContext<LLVMParser::GenericDINodeContext>(0);
}


size_t LLVMParser::SpecializedMDNodeContext::getRuleIndex() const {
  return LLVMParser::RuleSpecializedMDNode;
}


std::any LLVMParser::SpecializedMDNodeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitSpecializedMDNode(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::SpecializedMDNodeContext* LLVMParser::specializedMDNode() {
  SpecializedMDNodeContext *_localctx = _tracker.createInstance<SpecializedMDNodeContext>(_ctx, getState());
  enterRule(_localctx, 458, LLVMParser::RuleSpecializedMDNode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2812);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::NOTDICOMPILEUNIT: {
        enterOuterAlt(_localctx, 1);
        setState(2787);
        diCompileUnit();
        break;
      }

      case LLVMParser::NOTDIFILE: {
        enterOuterAlt(_localctx, 2);
        setState(2788);
        diFile();
        break;
      }

      case LLVMParser::NOTDIBASICTYPE: {
        enterOuterAlt(_localctx, 3);
        setState(2789);
        diBasicType();
        break;
      }

      case LLVMParser::NOTDISUBROUTINETYPE: {
        enterOuterAlt(_localctx, 4);
        setState(2790);
        diSubroutineType();
        break;
      }

      case LLVMParser::NOTDIDERIVEDTYPE: {
        enterOuterAlt(_localctx, 5);
        setState(2791);
        diDerivedType();
        break;
      }

      case LLVMParser::NOTDICOMPOSITETYPE: {
        enterOuterAlt(_localctx, 6);
        setState(2792);
        diCompositeType();
        break;
      }

      case LLVMParser::NOTDISUBRANGE: {
        enterOuterAlt(_localctx, 7);
        setState(2793);
        diSubrange();
        break;
      }

      case LLVMParser::NOTDIENUMERATOR: {
        enterOuterAlt(_localctx, 8);
        setState(2794);
        diEnumerator();
        break;
      }

      case LLVMParser::NOTDITEMPLATETYPEPARAMETER: {
        enterOuterAlt(_localctx, 9);
        setState(2795);
        diTemplateTypeParameter();
        break;
      }

      case LLVMParser::NOTDITEMPLATEVALUEPARAMETER: {
        enterOuterAlt(_localctx, 10);
        setState(2796);
        diTemplateValueParameter();
        break;
      }

      case LLVMParser::NOTDIMODULE: {
        enterOuterAlt(_localctx, 11);
        setState(2797);
        diModule();
        break;
      }

      case LLVMParser::NOTDINAMESPACE: {
        enterOuterAlt(_localctx, 12);
        setState(2798);
        diNamespace();
        break;
      }

      case LLVMParser::NOTDIGLOBALVARIABLE: {
        enterOuterAlt(_localctx, 13);
        setState(2799);
        diGlobalVariable();
        break;
      }

      case LLVMParser::NOTDISUBPROGRAM: {
        enterOuterAlt(_localctx, 14);
        setState(2800);
        diSubprogram();
        break;
      }

      case LLVMParser::NOTDILEXICALBLOCK: {
        enterOuterAlt(_localctx, 15);
        setState(2801);
        diLexicalBlock();
        break;
      }

      case LLVMParser::NOTDILEXICALBLOCKFILE: {
        enterOuterAlt(_localctx, 16);
        setState(2802);
        diLexicalBlockFile();
        break;
      }

      case LLVMParser::NOTDILOCATION: {
        enterOuterAlt(_localctx, 17);
        setState(2803);
        diLocation();
        break;
      }

      case LLVMParser::NOTDILOCALVARIABLE: {
        enterOuterAlt(_localctx, 18);
        setState(2804);
        diLocalVariable();
        break;
      }

      case LLVMParser::NOTDIEXPRESSION: {
        enterOuterAlt(_localctx, 19);
        setState(2805);
        diExpression();
        break;
      }

      case LLVMParser::NOTDIGLOBALVARIABLEEXPRESSION: {
        enterOuterAlt(_localctx, 20);
        setState(2806);
        diGlobalVariableExpression();
        break;
      }

      case LLVMParser::NOTDIOBJCPROPERTY: {
        enterOuterAlt(_localctx, 21);
        setState(2807);
        diObjCProperty();
        break;
      }

      case LLVMParser::NOTDIIMPORTEDENTITY: {
        enterOuterAlt(_localctx, 22);
        setState(2808);
        diImportedEntity();
        break;
      }

      case LLVMParser::NOTDIMACRO: {
        enterOuterAlt(_localctx, 23);
        setState(2809);
        diMacro();
        break;
      }

      case LLVMParser::NOTDIMACROFILE: {
        enterOuterAlt(_localctx, 24);
        setState(2810);
        diMacroFile();
        break;
      }

      case LLVMParser::NOTGENERICDINODE: {
        enterOuterAlt(_localctx, 25);
        setState(2811);
        genericDINode();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiCompileUnitContext ------------------------------------------------------------------

LLVMParser::DiCompileUnitContext::DiCompileUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiCompileUnitContext::NOTDICOMPILEUNIT() {
  return getToken(LLVMParser::NOTDICOMPILEUNIT, 0);
}

tree::TerminalNode* LLVMParser::DiCompileUnitContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiCompileUnitFieldsContext* LLVMParser::DiCompileUnitContext::diCompileUnitFields() {
  return getRuleContext<LLVMParser::DiCompileUnitFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiCompileUnitContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiCompileUnitContext::getRuleIndex() const {
  return LLVMParser::RuleDiCompileUnit;
}


std::any LLVMParser::DiCompileUnitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiCompileUnit(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiCompileUnitContext* LLVMParser::diCompileUnit() {
  DiCompileUnitContext *_localctx = _tracker.createInstance<DiCompileUnitContext>(_ctx, getState());
  enterRule(_localctx, 460, LLVMParser::RuleDiCompileUnit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2814);
    match(LLVMParser::NOTDICOMPILEUNIT);
    setState(2815);
    match(LLVMParser::LPAREN);
    setState(2816);
    diCompileUnitFields();
    setState(2817);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiCompileUnitFieldsContext ------------------------------------------------------------------

LLVMParser::DiCompileUnitFieldsContext::DiCompileUnitFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiCompileUnitFieldListContext* LLVMParser::DiCompileUnitFieldsContext::diCompileUnitFieldList() {
  return getRuleContext<LLVMParser::DiCompileUnitFieldListContext>(0);
}


size_t LLVMParser::DiCompileUnitFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiCompileUnitFields;
}


std::any LLVMParser::DiCompileUnitFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiCompileUnitFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiCompileUnitFieldsContext* LLVMParser::diCompileUnitFields() {
  DiCompileUnitFieldsContext *_localctx = _tracker.createInstance<DiCompileUnitFieldsContext>(_ctx, getState());
  enterRule(_localctx, 462, LLVMParser::RuleDiCompileUnitFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2820);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 90) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 90)) & 40681930227713) != 0) || ((((_la - 154) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 154)) & 292733977932857353) != 0) || _la == LLVMParser::MACROSCOLON

    || _la == LLVMParser::PRODUCERCOLON || ((((_la - 295) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 295)) & 25769803793) != 0)) {
      setState(2819);
      diCompileUnitFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiCompileUnitFieldListContext ------------------------------------------------------------------

LLVMParser::DiCompileUnitFieldListContext::DiCompileUnitFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiCompileUnitFieldContext* LLVMParser::DiCompileUnitFieldListContext::diCompileUnitField() {
  return getRuleContext<LLVMParser::DiCompileUnitFieldContext>(0);
}

LLVMParser::DiCompileUnitFieldListContext* LLVMParser::DiCompileUnitFieldListContext::diCompileUnitFieldList() {
  return getRuleContext<LLVMParser::DiCompileUnitFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiCompileUnitFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiCompileUnitFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiCompileUnitFieldList;
}


std::any LLVMParser::DiCompileUnitFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiCompileUnitFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiCompileUnitFieldListContext* LLVMParser::diCompileUnitFieldList() {
   return diCompileUnitFieldList(0);
}

LLVMParser::DiCompileUnitFieldListContext* LLVMParser::diCompileUnitFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiCompileUnitFieldListContext *_localctx = _tracker.createInstance<DiCompileUnitFieldListContext>(_ctx, parentState);
  LLVMParser::DiCompileUnitFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 464;
  enterRecursionRule(_localctx, 464, LLVMParser::RuleDiCompileUnitFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2823);
    diCompileUnitField();
    _ctx->stop = _input->LT(-1);
    setState(2830);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiCompileUnitFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiCompileUnitFieldList);
        setState(2825);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2826);
        match(LLVMParser::COMMA);
        setState(2827);
        diCompileUnitField(); 
      }
      setState(2832);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiCompileUnitFieldContext ------------------------------------------------------------------

LLVMParser::DiCompileUnitFieldContext::DiCompileUnitFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiCompileUnitFieldContext::LANGUAGECOLON() {
  return getToken(LLVMParser::LANGUAGECOLON, 0);
}

LLVMParser::DwarfLangContext* LLVMParser::DiCompileUnitFieldContext::dwarfLang() {
  return getRuleContext<LLVMParser::DwarfLangContext>(0);
}

LLVMParser::FileFieldContext* LLVMParser::DiCompileUnitFieldContext::fileField() {
  return getRuleContext<LLVMParser::FileFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiCompileUnitFieldContext::PRODUCERCOLON() {
  return getToken(LLVMParser::PRODUCERCOLON, 0);
}

LLVMParser::StringLitContext* LLVMParser::DiCompileUnitFieldContext::stringLit() {
  return getRuleContext<LLVMParser::StringLitContext>(0);
}

LLVMParser::IsOptimizedFieldContext* LLVMParser::DiCompileUnitFieldContext::isOptimizedField() {
  return getRuleContext<LLVMParser::IsOptimizedFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiCompileUnitFieldContext::FLAGSCOLON() {
  return getToken(LLVMParser::FLAGSCOLON, 0);
}

tree::TerminalNode* LLVMParser::DiCompileUnitFieldContext::RUNTIMEVERSIONCOLON() {
  return getToken(LLVMParser::RUNTIMEVERSIONCOLON, 0);
}

LLVMParser::IntLitContext* LLVMParser::DiCompileUnitFieldContext::intLit() {
  return getRuleContext<LLVMParser::IntLitContext>(0);
}

tree::TerminalNode* LLVMParser::DiCompileUnitFieldContext::SPLITDEBUGFILENAMECOLON() {
  return getToken(LLVMParser::SPLITDEBUGFILENAMECOLON, 0);
}

tree::TerminalNode* LLVMParser::DiCompileUnitFieldContext::EMISSIONKINDCOLON() {
  return getToken(LLVMParser::EMISSIONKINDCOLON, 0);
}

LLVMParser::EmissionKindContext* LLVMParser::DiCompileUnitFieldContext::emissionKind() {
  return getRuleContext<LLVMParser::EmissionKindContext>(0);
}

tree::TerminalNode* LLVMParser::DiCompileUnitFieldContext::ENUMSCOLON() {
  return getToken(LLVMParser::ENUMSCOLON, 0);
}

LLVMParser::MdFieldContext* LLVMParser::DiCompileUnitFieldContext::mdField() {
  return getRuleContext<LLVMParser::MdFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiCompileUnitFieldContext::RETAINEDTYPESCOLON() {
  return getToken(LLVMParser::RETAINEDTYPESCOLON, 0);
}

tree::TerminalNode* LLVMParser::DiCompileUnitFieldContext::GLOBALSCOLON() {
  return getToken(LLVMParser::GLOBALSCOLON, 0);
}

tree::TerminalNode* LLVMParser::DiCompileUnitFieldContext::IMPORTSCOLON() {
  return getToken(LLVMParser::IMPORTSCOLON, 0);
}

tree::TerminalNode* LLVMParser::DiCompileUnitFieldContext::MACROSCOLON() {
  return getToken(LLVMParser::MACROSCOLON, 0);
}

tree::TerminalNode* LLVMParser::DiCompileUnitFieldContext::DWOIDCOLON() {
  return getToken(LLVMParser::DWOIDCOLON, 0);
}

tree::TerminalNode* LLVMParser::DiCompileUnitFieldContext::SPLITDEBUGINLININGCOLON() {
  return getToken(LLVMParser::SPLITDEBUGINLININGCOLON, 0);
}

LLVMParser::BoolLitContext* LLVMParser::DiCompileUnitFieldContext::boolLit() {
  return getRuleContext<LLVMParser::BoolLitContext>(0);
}

tree::TerminalNode* LLVMParser::DiCompileUnitFieldContext::DEBUGINFOFORPROFILINGCOLON() {
  return getToken(LLVMParser::DEBUGINFOFORPROFILINGCOLON, 0);
}

tree::TerminalNode* LLVMParser::DiCompileUnitFieldContext::GNUPUBNAMESCOLON() {
  return getToken(LLVMParser::GNUPUBNAMESCOLON, 0);
}


size_t LLVMParser::DiCompileUnitFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiCompileUnitField;
}


std::any LLVMParser::DiCompileUnitFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiCompileUnitField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiCompileUnitFieldContext* LLVMParser::diCompileUnitField() {
  DiCompileUnitFieldContext *_localctx = _tracker.createInstance<DiCompileUnitFieldContext>(_ctx, getState());
  enterRule(_localctx, 466, LLVMParser::RuleDiCompileUnitField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2865);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::LANGUAGECOLON: {
        enterOuterAlt(_localctx, 1);
        setState(2833);
        match(LLVMParser::LANGUAGECOLON);
        setState(2834);
        dwarfLang();
        break;
      }

      case LLVMParser::FILECOLON: {
        enterOuterAlt(_localctx, 2);
        setState(2835);
        fileField();
        break;
      }

      case LLVMParser::PRODUCERCOLON: {
        enterOuterAlt(_localctx, 3);
        setState(2836);
        match(LLVMParser::PRODUCERCOLON);
        setState(2837);
        stringLit();
        break;
      }

      case LLVMParser::ISOPTIMIZEDCOLON: {
        enterOuterAlt(_localctx, 4);
        setState(2838);
        isOptimizedField();
        break;
      }

      case LLVMParser::FLAGSCOLON: {
        enterOuterAlt(_localctx, 5);
        setState(2839);
        match(LLVMParser::FLAGSCOLON);
        setState(2840);
        stringLit();
        break;
      }

      case LLVMParser::RUNTIMEVERSIONCOLON: {
        enterOuterAlt(_localctx, 6);
        setState(2841);
        match(LLVMParser::RUNTIMEVERSIONCOLON);
        setState(2842);
        intLit();
        break;
      }

      case LLVMParser::SPLITDEBUGFILENAMECOLON: {
        enterOuterAlt(_localctx, 7);
        setState(2843);
        match(LLVMParser::SPLITDEBUGFILENAMECOLON);
        setState(2844);
        stringLit();
        break;
      }

      case LLVMParser::EMISSIONKINDCOLON: {
        enterOuterAlt(_localctx, 8);
        setState(2845);
        match(LLVMParser::EMISSIONKINDCOLON);
        setState(2846);
        emissionKind();
        break;
      }

      case LLVMParser::ENUMSCOLON: {
        enterOuterAlt(_localctx, 9);
        setState(2847);
        match(LLVMParser::ENUMSCOLON);
        setState(2848);
        mdField();
        break;
      }

      case LLVMParser::RETAINEDTYPESCOLON: {
        enterOuterAlt(_localctx, 10);
        setState(2849);
        match(LLVMParser::RETAINEDTYPESCOLON);
        setState(2850);
        mdField();
        break;
      }

      case LLVMParser::GLOBALSCOLON: {
        enterOuterAlt(_localctx, 11);
        setState(2851);
        match(LLVMParser::GLOBALSCOLON);
        setState(2852);
        mdField();
        break;
      }

      case LLVMParser::IMPORTSCOLON: {
        enterOuterAlt(_localctx, 12);
        setState(2853);
        match(LLVMParser::IMPORTSCOLON);
        setState(2854);
        mdField();
        break;
      }

      case LLVMParser::MACROSCOLON: {
        enterOuterAlt(_localctx, 13);
        setState(2855);
        match(LLVMParser::MACROSCOLON);
        setState(2856);
        mdField();
        break;
      }

      case LLVMParser::DWOIDCOLON: {
        enterOuterAlt(_localctx, 14);
        setState(2857);
        match(LLVMParser::DWOIDCOLON);
        setState(2858);
        intLit();
        break;
      }

      case LLVMParser::SPLITDEBUGINLININGCOLON: {
        enterOuterAlt(_localctx, 15);
        setState(2859);
        match(LLVMParser::SPLITDEBUGINLININGCOLON);
        setState(2860);
        boolLit();
        break;
      }

      case LLVMParser::DEBUGINFOFORPROFILINGCOLON: {
        enterOuterAlt(_localctx, 16);
        setState(2861);
        match(LLVMParser::DEBUGINFOFORPROFILINGCOLON);
        setState(2862);
        boolLit();
        break;
      }

      case LLVMParser::GNUPUBNAMESCOLON: {
        enterOuterAlt(_localctx, 17);
        setState(2863);
        match(LLVMParser::GNUPUBNAMESCOLON);
        setState(2864);
        boolLit();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiFileContext ------------------------------------------------------------------

LLVMParser::DiFileContext::DiFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiFileContext::NOTDIFILE() {
  return getToken(LLVMParser::NOTDIFILE, 0);
}

tree::TerminalNode* LLVMParser::DiFileContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiFileFieldsContext* LLVMParser::DiFileContext::diFileFields() {
  return getRuleContext<LLVMParser::DiFileFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiFileContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiFileContext::getRuleIndex() const {
  return LLVMParser::RuleDiFile;
}


std::any LLVMParser::DiFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiFile(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiFileContext* LLVMParser::diFile() {
  DiFileContext *_localctx = _tracker.createInstance<DiFileContext>(_ctx, getState());
  enterRule(_localctx, 468, LLVMParser::RuleDiFile);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2867);
    match(LLVMParser::NOTDIFILE);
    setState(2868);
    match(LLVMParser::LPAREN);
    setState(2869);
    diFileFields();
    setState(2870);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiFileFieldsContext ------------------------------------------------------------------

LLVMParser::DiFileFieldsContext::DiFileFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiFileFieldListContext* LLVMParser::DiFileFieldsContext::diFileFieldList() {
  return getRuleContext<LLVMParser::DiFileFieldListContext>(0);
}


size_t LLVMParser::DiFileFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiFileFields;
}


std::any LLVMParser::DiFileFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiFileFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiFileFieldsContext* LLVMParser::diFileFields() {
  DiFileFieldsContext *_localctx = _tracker.createInstance<DiFileFieldsContext>(_ctx, getState());
  enterRule(_localctx, 470, LLVMParser::RuleDiFileFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2873);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 71) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 71)) & 35184372088835) != 0) || _la == LLVMParser::FILENAMECOLON) {
      setState(2872);
      diFileFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiFileFieldListContext ------------------------------------------------------------------

LLVMParser::DiFileFieldListContext::DiFileFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiFileFieldContext* LLVMParser::DiFileFieldListContext::diFileField() {
  return getRuleContext<LLVMParser::DiFileFieldContext>(0);
}

LLVMParser::DiFileFieldListContext* LLVMParser::DiFileFieldListContext::diFileFieldList() {
  return getRuleContext<LLVMParser::DiFileFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiFileFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiFileFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiFileFieldList;
}


std::any LLVMParser::DiFileFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiFileFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiFileFieldListContext* LLVMParser::diFileFieldList() {
   return diFileFieldList(0);
}

LLVMParser::DiFileFieldListContext* LLVMParser::diFileFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiFileFieldListContext *_localctx = _tracker.createInstance<DiFileFieldListContext>(_ctx, parentState);
  LLVMParser::DiFileFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 472;
  enterRecursionRule(_localctx, 472, LLVMParser::RuleDiFileFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2876);
    diFileField();
    _ctx->stop = _input->LT(-1);
    setState(2883);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiFileFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiFileFieldList);
        setState(2878);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2879);
        match(LLVMParser::COMMA);
        setState(2880);
        diFileField(); 
      }
      setState(2885);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiFileFieldContext ------------------------------------------------------------------

LLVMParser::DiFileFieldContext::DiFileFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiFileFieldContext::FILENAMECOLON() {
  return getToken(LLVMParser::FILENAMECOLON, 0);
}

LLVMParser::StringLitContext* LLVMParser::DiFileFieldContext::stringLit() {
  return getRuleContext<LLVMParser::StringLitContext>(0);
}

tree::TerminalNode* LLVMParser::DiFileFieldContext::DIRECTORYCOLON() {
  return getToken(LLVMParser::DIRECTORYCOLON, 0);
}

tree::TerminalNode* LLVMParser::DiFileFieldContext::CHECKSUMKINDCOLON() {
  return getToken(LLVMParser::CHECKSUMKINDCOLON, 0);
}

LLVMParser::ChecksumkindContext* LLVMParser::DiFileFieldContext::checksumkind() {
  return getRuleContext<LLVMParser::ChecksumkindContext>(0);
}

tree::TerminalNode* LLVMParser::DiFileFieldContext::CHECKSUMCOLON() {
  return getToken(LLVMParser::CHECKSUMCOLON, 0);
}


size_t LLVMParser::DiFileFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiFileField;
}


std::any LLVMParser::DiFileFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiFileField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiFileFieldContext* LLVMParser::diFileField() {
  DiFileFieldContext *_localctx = _tracker.createInstance<DiFileFieldContext>(_ctx, getState());
  enterRule(_localctx, 474, LLVMParser::RuleDiFileField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2894);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::FILENAMECOLON: {
        enterOuterAlt(_localctx, 1);
        setState(2886);
        match(LLVMParser::FILENAMECOLON);
        setState(2887);
        stringLit();
        break;
      }

      case LLVMParser::DIRECTORYCOLON: {
        enterOuterAlt(_localctx, 2);
        setState(2888);
        match(LLVMParser::DIRECTORYCOLON);
        setState(2889);
        stringLit();
        break;
      }

      case LLVMParser::CHECKSUMKINDCOLON: {
        enterOuterAlt(_localctx, 3);
        setState(2890);
        match(LLVMParser::CHECKSUMKINDCOLON);
        setState(2891);
        checksumkind();
        break;
      }

      case LLVMParser::CHECKSUMCOLON: {
        enterOuterAlt(_localctx, 4);
        setState(2892);
        match(LLVMParser::CHECKSUMCOLON);
        setState(2893);
        stringLit();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiBasicTypeContext ------------------------------------------------------------------

LLVMParser::DiBasicTypeContext::DiBasicTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiBasicTypeContext::NOTDIBASICTYPE() {
  return getToken(LLVMParser::NOTDIBASICTYPE, 0);
}

tree::TerminalNode* LLVMParser::DiBasicTypeContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiBasicTypeFieldsContext* LLVMParser::DiBasicTypeContext::diBasicTypeFields() {
  return getRuleContext<LLVMParser::DiBasicTypeFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiBasicTypeContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiBasicTypeContext::getRuleIndex() const {
  return LLVMParser::RuleDiBasicType;
}


std::any LLVMParser::DiBasicTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiBasicType(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiBasicTypeContext* LLVMParser::diBasicType() {
  DiBasicTypeContext *_localctx = _tracker.createInstance<DiBasicTypeContext>(_ctx, getState());
  enterRule(_localctx, 476, LLVMParser::RuleDiBasicType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2896);
    match(LLVMParser::NOTDIBASICTYPE);
    setState(2897);
    match(LLVMParser::LPAREN);
    setState(2898);
    diBasicTypeFields();
    setState(2899);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiBasicTypeFieldsContext ------------------------------------------------------------------

LLVMParser::DiBasicTypeFieldsContext::DiBasicTypeFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiBasicTypeFieldListContext* LLVMParser::DiBasicTypeFieldsContext::diBasicTypeFieldList() {
  return getRuleContext<LLVMParser::DiBasicTypeFieldListContext>(0);
}


size_t LLVMParser::DiBasicTypeFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiBasicTypeFields;
}


std::any LLVMParser::DiBasicTypeFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiBasicTypeFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiBasicTypeFieldsContext* LLVMParser::diBasicTypeFields() {
  DiBasicTypeFieldsContext *_localctx = _tracker.createInstance<DiBasicTypeFieldsContext>(_ctx, getState());
  enterRule(_localctx, 478, LLVMParser::RuleDiBasicTypeFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2902);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::ALIGNCOLON || _la == LLVMParser::ENCODINGCOLON || _la == LLVMParser::NAMECOLON || _la == LLVMParser::SIZECOLON

    || _la == LLVMParser::TAGCOLON) {
      setState(2901);
      diBasicTypeFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiBasicTypeFieldListContext ------------------------------------------------------------------

LLVMParser::DiBasicTypeFieldListContext::DiBasicTypeFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiBasicTypeFieldContext* LLVMParser::DiBasicTypeFieldListContext::diBasicTypeField() {
  return getRuleContext<LLVMParser::DiBasicTypeFieldContext>(0);
}

LLVMParser::DiBasicTypeFieldListContext* LLVMParser::DiBasicTypeFieldListContext::diBasicTypeFieldList() {
  return getRuleContext<LLVMParser::DiBasicTypeFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiBasicTypeFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiBasicTypeFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiBasicTypeFieldList;
}


std::any LLVMParser::DiBasicTypeFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiBasicTypeFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiBasicTypeFieldListContext* LLVMParser::diBasicTypeFieldList() {
   return diBasicTypeFieldList(0);
}

LLVMParser::DiBasicTypeFieldListContext* LLVMParser::diBasicTypeFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiBasicTypeFieldListContext *_localctx = _tracker.createInstance<DiBasicTypeFieldListContext>(_ctx, parentState);
  LLVMParser::DiBasicTypeFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 480;
  enterRecursionRule(_localctx, 480, LLVMParser::RuleDiBasicTypeFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2905);
    diBasicTypeField();
    _ctx->stop = _input->LT(-1);
    setState(2912);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiBasicTypeFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiBasicTypeFieldList);
        setState(2907);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2908);
        match(LLVMParser::COMMA);
        setState(2909);
        diBasicTypeField(); 
      }
      setState(2914);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiBasicTypeFieldContext ------------------------------------------------------------------

LLVMParser::DiBasicTypeFieldContext::DiBasicTypeFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::TagFieldContext* LLVMParser::DiBasicTypeFieldContext::tagField() {
  return getRuleContext<LLVMParser::TagFieldContext>(0);
}

LLVMParser::NameFieldContext* LLVMParser::DiBasicTypeFieldContext::nameField() {
  return getRuleContext<LLVMParser::NameFieldContext>(0);
}

LLVMParser::SizeFieldContext* LLVMParser::DiBasicTypeFieldContext::sizeField() {
  return getRuleContext<LLVMParser::SizeFieldContext>(0);
}

LLVMParser::AlignFieldContext* LLVMParser::DiBasicTypeFieldContext::alignField() {
  return getRuleContext<LLVMParser::AlignFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiBasicTypeFieldContext::ENCODINGCOLON() {
  return getToken(LLVMParser::ENCODINGCOLON, 0);
}

LLVMParser::DwarfAttEncodingContext* LLVMParser::DiBasicTypeFieldContext::dwarfAttEncoding() {
  return getRuleContext<LLVMParser::DwarfAttEncodingContext>(0);
}


size_t LLVMParser::DiBasicTypeFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiBasicTypeField;
}


std::any LLVMParser::DiBasicTypeFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiBasicTypeField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiBasicTypeFieldContext* LLVMParser::diBasicTypeField() {
  DiBasicTypeFieldContext *_localctx = _tracker.createInstance<DiBasicTypeFieldContext>(_ctx, getState());
  enterRule(_localctx, 482, LLVMParser::RuleDiBasicTypeField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2921);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::TAGCOLON: {
        enterOuterAlt(_localctx, 1);
        setState(2915);
        tagField();
        break;
      }

      case LLVMParser::NAMECOLON: {
        enterOuterAlt(_localctx, 2);
        setState(2916);
        nameField();
        break;
      }

      case LLVMParser::SIZECOLON: {
        enterOuterAlt(_localctx, 3);
        setState(2917);
        sizeField();
        break;
      }

      case LLVMParser::ALIGNCOLON: {
        enterOuterAlt(_localctx, 4);
        setState(2918);
        alignField();
        break;
      }

      case LLVMParser::ENCODINGCOLON: {
        enterOuterAlt(_localctx, 5);
        setState(2919);
        match(LLVMParser::ENCODINGCOLON);
        setState(2920);
        dwarfAttEncoding();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiSubroutineTypeContext ------------------------------------------------------------------

LLVMParser::DiSubroutineTypeContext::DiSubroutineTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiSubroutineTypeContext::NOTDISUBROUTINETYPE() {
  return getToken(LLVMParser::NOTDISUBROUTINETYPE, 0);
}

tree::TerminalNode* LLVMParser::DiSubroutineTypeContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiSubroutineTypeFieldsContext* LLVMParser::DiSubroutineTypeContext::diSubroutineTypeFields() {
  return getRuleContext<LLVMParser::DiSubroutineTypeFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiSubroutineTypeContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiSubroutineTypeContext::getRuleIndex() const {
  return LLVMParser::RuleDiSubroutineType;
}


std::any LLVMParser::DiSubroutineTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiSubroutineType(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiSubroutineTypeContext* LLVMParser::diSubroutineType() {
  DiSubroutineTypeContext *_localctx = _tracker.createInstance<DiSubroutineTypeContext>(_ctx, getState());
  enterRule(_localctx, 484, LLVMParser::RuleDiSubroutineType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2923);
    match(LLVMParser::NOTDISUBROUTINETYPE);
    setState(2924);
    match(LLVMParser::LPAREN);
    setState(2925);
    diSubroutineTypeFields();
    setState(2926);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiSubroutineTypeFieldsContext ------------------------------------------------------------------

LLVMParser::DiSubroutineTypeFieldsContext::DiSubroutineTypeFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiSubroutineTypeFieldListContext* LLVMParser::DiSubroutineTypeFieldsContext::diSubroutineTypeFieldList() {
  return getRuleContext<LLVMParser::DiSubroutineTypeFieldListContext>(0);
}


size_t LLVMParser::DiSubroutineTypeFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiSubroutineTypeFields;
}


std::any LLVMParser::DiSubroutineTypeFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiSubroutineTypeFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiSubroutineTypeFieldsContext* LLVMParser::diSubroutineTypeFields() {
  DiSubroutineTypeFieldsContext *_localctx = _tracker.createInstance<DiSubroutineTypeFieldsContext>(_ctx, getState());
  enterRule(_localctx, 486, LLVMParser::RuleDiSubroutineTypeFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2929);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::CCCOLON || _la == LLVMParser::FLAGSCOLON || _la == LLVMParser::TYPESCOLON) {
      setState(2928);
      diSubroutineTypeFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiSubroutineTypeFieldListContext ------------------------------------------------------------------

LLVMParser::DiSubroutineTypeFieldListContext::DiSubroutineTypeFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiSubroutineTypeFieldContext* LLVMParser::DiSubroutineTypeFieldListContext::diSubroutineTypeField() {
  return getRuleContext<LLVMParser::DiSubroutineTypeFieldContext>(0);
}

LLVMParser::DiSubroutineTypeFieldListContext* LLVMParser::DiSubroutineTypeFieldListContext::diSubroutineTypeFieldList() {
  return getRuleContext<LLVMParser::DiSubroutineTypeFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiSubroutineTypeFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiSubroutineTypeFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiSubroutineTypeFieldList;
}


std::any LLVMParser::DiSubroutineTypeFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiSubroutineTypeFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiSubroutineTypeFieldListContext* LLVMParser::diSubroutineTypeFieldList() {
   return diSubroutineTypeFieldList(0);
}

LLVMParser::DiSubroutineTypeFieldListContext* LLVMParser::diSubroutineTypeFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiSubroutineTypeFieldListContext *_localctx = _tracker.createInstance<DiSubroutineTypeFieldListContext>(_ctx, parentState);
  LLVMParser::DiSubroutineTypeFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 488;
  enterRecursionRule(_localctx, 488, LLVMParser::RuleDiSubroutineTypeFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2932);
    diSubroutineTypeField();
    _ctx->stop = _input->LT(-1);
    setState(2939);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiSubroutineTypeFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiSubroutineTypeFieldList);
        setState(2934);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2935);
        match(LLVMParser::COMMA);
        setState(2936);
        diSubroutineTypeField(); 
      }
      setState(2941);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiSubroutineTypeFieldContext ------------------------------------------------------------------

LLVMParser::DiSubroutineTypeFieldContext::DiSubroutineTypeFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::FlagsFieldContext* LLVMParser::DiSubroutineTypeFieldContext::flagsField() {
  return getRuleContext<LLVMParser::FlagsFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiSubroutineTypeFieldContext::CCCOLON() {
  return getToken(LLVMParser::CCCOLON, 0);
}

LLVMParser::DwarfCCContext* LLVMParser::DiSubroutineTypeFieldContext::dwarfCC() {
  return getRuleContext<LLVMParser::DwarfCCContext>(0);
}

tree::TerminalNode* LLVMParser::DiSubroutineTypeFieldContext::TYPESCOLON() {
  return getToken(LLVMParser::TYPESCOLON, 0);
}

LLVMParser::MdFieldContext* LLVMParser::DiSubroutineTypeFieldContext::mdField() {
  return getRuleContext<LLVMParser::MdFieldContext>(0);
}


size_t LLVMParser::DiSubroutineTypeFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiSubroutineTypeField;
}


std::any LLVMParser::DiSubroutineTypeFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiSubroutineTypeField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiSubroutineTypeFieldContext* LLVMParser::diSubroutineTypeField() {
  DiSubroutineTypeFieldContext *_localctx = _tracker.createInstance<DiSubroutineTypeFieldContext>(_ctx, getState());
  enterRule(_localctx, 490, LLVMParser::RuleDiSubroutineTypeField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2947);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::FLAGSCOLON: {
        enterOuterAlt(_localctx, 1);
        setState(2942);
        flagsField();
        break;
      }

      case LLVMParser::CCCOLON: {
        enterOuterAlt(_localctx, 2);
        setState(2943);
        match(LLVMParser::CCCOLON);
        setState(2944);
        dwarfCC();
        break;
      }

      case LLVMParser::TYPESCOLON: {
        enterOuterAlt(_localctx, 3);
        setState(2945);
        match(LLVMParser::TYPESCOLON);
        setState(2946);
        mdField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiDerivedTypeContext ------------------------------------------------------------------

LLVMParser::DiDerivedTypeContext::DiDerivedTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiDerivedTypeContext::NOTDIDERIVEDTYPE() {
  return getToken(LLVMParser::NOTDIDERIVEDTYPE, 0);
}

tree::TerminalNode* LLVMParser::DiDerivedTypeContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiDerivedTypeFieldsContext* LLVMParser::DiDerivedTypeContext::diDerivedTypeFields() {
  return getRuleContext<LLVMParser::DiDerivedTypeFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiDerivedTypeContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiDerivedTypeContext::getRuleIndex() const {
  return LLVMParser::RuleDiDerivedType;
}


std::any LLVMParser::DiDerivedTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiDerivedType(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiDerivedTypeContext* LLVMParser::diDerivedType() {
  DiDerivedTypeContext *_localctx = _tracker.createInstance<DiDerivedTypeContext>(_ctx, getState());
  enterRule(_localctx, 492, LLVMParser::RuleDiDerivedType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2949);
    match(LLVMParser::NOTDIDERIVEDTYPE);
    setState(2950);
    match(LLVMParser::LPAREN);
    setState(2951);
    diDerivedTypeFields();
    setState(2952);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiDerivedTypeFieldsContext ------------------------------------------------------------------

LLVMParser::DiDerivedTypeFieldsContext::DiDerivedTypeFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiDerivedTypeFieldListContext* LLVMParser::DiDerivedTypeFieldsContext::diDerivedTypeFieldList() {
  return getRuleContext<LLVMParser::DiDerivedTypeFieldListContext>(0);
}


size_t LLVMParser::DiDerivedTypeFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiDerivedTypeFields;
}


std::any LLVMParser::DiDerivedTypeFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiDerivedTypeFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiDerivedTypeFieldsContext* LLVMParser::diDerivedTypeFields() {
  DiDerivedTypeFieldsContext *_localctx = _tracker.createInstance<DiDerivedTypeFieldsContext>(_ctx, getState());
  enterRule(_localctx, 494, LLVMParser::RuleDiDerivedTypeFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2955);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::ALIGNCOLON

    || _la == LLVMParser::BASETYPECOLON || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 302120961) != 0) || ((((_la - 214) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 214)) & 1125899911036929) != 0) || ((((_la - 306) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 306)) & 137438986241) != 0)) {
      setState(2954);
      diDerivedTypeFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiDerivedTypeFieldListContext ------------------------------------------------------------------

LLVMParser::DiDerivedTypeFieldListContext::DiDerivedTypeFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiDerivedTypeFieldContext* LLVMParser::DiDerivedTypeFieldListContext::diDerivedTypeField() {
  return getRuleContext<LLVMParser::DiDerivedTypeFieldContext>(0);
}

LLVMParser::DiDerivedTypeFieldListContext* LLVMParser::DiDerivedTypeFieldListContext::diDerivedTypeFieldList() {
  return getRuleContext<LLVMParser::DiDerivedTypeFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiDerivedTypeFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiDerivedTypeFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiDerivedTypeFieldList;
}


std::any LLVMParser::DiDerivedTypeFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiDerivedTypeFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiDerivedTypeFieldListContext* LLVMParser::diDerivedTypeFieldList() {
   return diDerivedTypeFieldList(0);
}

LLVMParser::DiDerivedTypeFieldListContext* LLVMParser::diDerivedTypeFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiDerivedTypeFieldListContext *_localctx = _tracker.createInstance<DiDerivedTypeFieldListContext>(_ctx, parentState);
  LLVMParser::DiDerivedTypeFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 496;
  enterRecursionRule(_localctx, 496, LLVMParser::RuleDiDerivedTypeFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2958);
    diDerivedTypeField();
    _ctx->stop = _input->LT(-1);
    setState(2965);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiDerivedTypeFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiDerivedTypeFieldList);
        setState(2960);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2961);
        match(LLVMParser::COMMA);
        setState(2962);
        diDerivedTypeField(); 
      }
      setState(2967);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiDerivedTypeFieldContext ------------------------------------------------------------------

LLVMParser::DiDerivedTypeFieldContext::DiDerivedTypeFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::TagFieldContext* LLVMParser::DiDerivedTypeFieldContext::tagField() {
  return getRuleContext<LLVMParser::TagFieldContext>(0);
}

LLVMParser::NameFieldContext* LLVMParser::DiDerivedTypeFieldContext::nameField() {
  return getRuleContext<LLVMParser::NameFieldContext>(0);
}

LLVMParser::ScopeFieldContext* LLVMParser::DiDerivedTypeFieldContext::scopeField() {
  return getRuleContext<LLVMParser::ScopeFieldContext>(0);
}

LLVMParser::FileFieldContext* LLVMParser::DiDerivedTypeFieldContext::fileField() {
  return getRuleContext<LLVMParser::FileFieldContext>(0);
}

LLVMParser::LineFieldContext* LLVMParser::DiDerivedTypeFieldContext::lineField() {
  return getRuleContext<LLVMParser::LineFieldContext>(0);
}

LLVMParser::BaseTypeFieldContext* LLVMParser::DiDerivedTypeFieldContext::baseTypeField() {
  return getRuleContext<LLVMParser::BaseTypeFieldContext>(0);
}

LLVMParser::SizeFieldContext* LLVMParser::DiDerivedTypeFieldContext::sizeField() {
  return getRuleContext<LLVMParser::SizeFieldContext>(0);
}

LLVMParser::AlignFieldContext* LLVMParser::DiDerivedTypeFieldContext::alignField() {
  return getRuleContext<LLVMParser::AlignFieldContext>(0);
}

LLVMParser::OffsetFieldContext* LLVMParser::DiDerivedTypeFieldContext::offsetField() {
  return getRuleContext<LLVMParser::OffsetFieldContext>(0);
}

LLVMParser::FlagsFieldContext* LLVMParser::DiDerivedTypeFieldContext::flagsField() {
  return getRuleContext<LLVMParser::FlagsFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiDerivedTypeFieldContext::EXTRADATACOLON() {
  return getToken(LLVMParser::EXTRADATACOLON, 0);
}

LLVMParser::MdFieldContext* LLVMParser::DiDerivedTypeFieldContext::mdField() {
  return getRuleContext<LLVMParser::MdFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiDerivedTypeFieldContext::DWARFADDRESSSPACECOLON() {
  return getToken(LLVMParser::DWARFADDRESSSPACECOLON, 0);
}

LLVMParser::IntLitContext* LLVMParser::DiDerivedTypeFieldContext::intLit() {
  return getRuleContext<LLVMParser::IntLitContext>(0);
}


size_t LLVMParser::DiDerivedTypeFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiDerivedTypeField;
}


std::any LLVMParser::DiDerivedTypeFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiDerivedTypeField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiDerivedTypeFieldContext* LLVMParser::diDerivedTypeField() {
  DiDerivedTypeFieldContext *_localctx = _tracker.createInstance<DiDerivedTypeFieldContext>(_ctx, getState());
  enterRule(_localctx, 498, LLVMParser::RuleDiDerivedTypeField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2982);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::TAGCOLON: {
        enterOuterAlt(_localctx, 1);
        setState(2968);
        tagField();
        break;
      }

      case LLVMParser::NAMECOLON: {
        enterOuterAlt(_localctx, 2);
        setState(2969);
        nameField();
        break;
      }

      case LLVMParser::SCOPECOLON: {
        enterOuterAlt(_localctx, 3);
        setState(2970);
        scopeField();
        break;
      }

      case LLVMParser::FILECOLON: {
        enterOuterAlt(_localctx, 4);
        setState(2971);
        fileField();
        break;
      }

      case LLVMParser::LINECOLON: {
        enterOuterAlt(_localctx, 5);
        setState(2972);
        lineField();
        break;
      }

      case LLVMParser::BASETYPECOLON: {
        enterOuterAlt(_localctx, 6);
        setState(2973);
        baseTypeField();
        break;
      }

      case LLVMParser::SIZECOLON: {
        enterOuterAlt(_localctx, 7);
        setState(2974);
        sizeField();
        break;
      }

      case LLVMParser::ALIGNCOLON: {
        enterOuterAlt(_localctx, 8);
        setState(2975);
        alignField();
        break;
      }

      case LLVMParser::OFFSETCOLON: {
        enterOuterAlt(_localctx, 9);
        setState(2976);
        offsetField();
        break;
      }

      case LLVMParser::FLAGSCOLON: {
        enterOuterAlt(_localctx, 10);
        setState(2977);
        flagsField();
        break;
      }

      case LLVMParser::EXTRADATACOLON: {
        enterOuterAlt(_localctx, 11);
        setState(2978);
        match(LLVMParser::EXTRADATACOLON);
        setState(2979);
        mdField();
        break;
      }

      case LLVMParser::DWARFADDRESSSPACECOLON: {
        enterOuterAlt(_localctx, 12);
        setState(2980);
        match(LLVMParser::DWARFADDRESSSPACECOLON);
        setState(2981);
        intLit();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiCompositeTypeContext ------------------------------------------------------------------

LLVMParser::DiCompositeTypeContext::DiCompositeTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiCompositeTypeContext::NOTDICOMPOSITETYPE() {
  return getToken(LLVMParser::NOTDICOMPOSITETYPE, 0);
}

tree::TerminalNode* LLVMParser::DiCompositeTypeContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiCompositeTypeFieldsContext* LLVMParser::DiCompositeTypeContext::diCompositeTypeFields() {
  return getRuleContext<LLVMParser::DiCompositeTypeFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiCompositeTypeContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiCompositeTypeContext::getRuleIndex() const {
  return LLVMParser::RuleDiCompositeType;
}


std::any LLVMParser::DiCompositeTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiCompositeType(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiCompositeTypeContext* LLVMParser::diCompositeType() {
  DiCompositeTypeContext *_localctx = _tracker.createInstance<DiCompositeTypeContext>(_ctx, getState());
  enterRule(_localctx, 500, LLVMParser::RuleDiCompositeType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2984);
    match(LLVMParser::NOTDICOMPOSITETYPE);
    setState(2985);
    match(LLVMParser::LPAREN);
    setState(2986);
    diCompositeTypeFields();
    setState(2987);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiCompositeTypeFieldsContext ------------------------------------------------------------------

LLVMParser::DiCompositeTypeFieldsContext::DiCompositeTypeFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiCompositeTypeFieldListContext* LLVMParser::DiCompositeTypeFieldsContext::diCompositeTypeFieldList() {
  return getRuleContext<LLVMParser::DiCompositeTypeFieldListContext>(0);
}


size_t LLVMParser::DiCompositeTypeFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiCompositeTypeFields;
}


std::any LLVMParser::DiCompositeTypeFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiCompositeTypeFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiCompositeTypeFieldsContext* LLVMParser::diCompositeTypeFields() {
  DiCompositeTypeFieldsContext *_localctx = _tracker.createInstance<DiCompositeTypeFieldsContext>(_ctx, getState());
  enterRule(_localctx, 502, LLVMParser::RuleDiCompositeTypeFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2990);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::ALIGNCOLON

    || _la == LLVMParser::BASETYPECOLON || ((((_la - 117) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 117)) & 1236950597633) != 0) || ((((_la - 183) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 183)) & 9007201402224641) != 0) || ((((_la - 264) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 264)) & 144119603302236161) != 0) || ((((_la - 343) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 343)) & 8796093022217) != 0)) {
      setState(2989);
      diCompositeTypeFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiCompositeTypeFieldListContext ------------------------------------------------------------------

LLVMParser::DiCompositeTypeFieldListContext::DiCompositeTypeFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiCompositeTypeFieldContext* LLVMParser::DiCompositeTypeFieldListContext::diCompositeTypeField() {
  return getRuleContext<LLVMParser::DiCompositeTypeFieldContext>(0);
}

LLVMParser::DiCompositeTypeFieldListContext* LLVMParser::DiCompositeTypeFieldListContext::diCompositeTypeFieldList() {
  return getRuleContext<LLVMParser::DiCompositeTypeFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiCompositeTypeFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiCompositeTypeFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiCompositeTypeFieldList;
}


std::any LLVMParser::DiCompositeTypeFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiCompositeTypeFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiCompositeTypeFieldListContext* LLVMParser::diCompositeTypeFieldList() {
   return diCompositeTypeFieldList(0);
}

LLVMParser::DiCompositeTypeFieldListContext* LLVMParser::diCompositeTypeFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiCompositeTypeFieldListContext *_localctx = _tracker.createInstance<DiCompositeTypeFieldListContext>(_ctx, parentState);
  LLVMParser::DiCompositeTypeFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 504;
  enterRecursionRule(_localctx, 504, LLVMParser::RuleDiCompositeTypeFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2993);
    diCompositeTypeField();
    _ctx->stop = _input->LT(-1);
    setState(3000);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiCompositeTypeFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiCompositeTypeFieldList);
        setState(2995);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2996);
        match(LLVMParser::COMMA);
        setState(2997);
        diCompositeTypeField(); 
      }
      setState(3002);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiCompositeTypeFieldContext ------------------------------------------------------------------

LLVMParser::DiCompositeTypeFieldContext::DiCompositeTypeFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::TagFieldContext* LLVMParser::DiCompositeTypeFieldContext::tagField() {
  return getRuleContext<LLVMParser::TagFieldContext>(0);
}

LLVMParser::NameFieldContext* LLVMParser::DiCompositeTypeFieldContext::nameField() {
  return getRuleContext<LLVMParser::NameFieldContext>(0);
}

LLVMParser::ScopeFieldContext* LLVMParser::DiCompositeTypeFieldContext::scopeField() {
  return getRuleContext<LLVMParser::ScopeFieldContext>(0);
}

LLVMParser::FileFieldContext* LLVMParser::DiCompositeTypeFieldContext::fileField() {
  return getRuleContext<LLVMParser::FileFieldContext>(0);
}

LLVMParser::LineFieldContext* LLVMParser::DiCompositeTypeFieldContext::lineField() {
  return getRuleContext<LLVMParser::LineFieldContext>(0);
}

LLVMParser::BaseTypeFieldContext* LLVMParser::DiCompositeTypeFieldContext::baseTypeField() {
  return getRuleContext<LLVMParser::BaseTypeFieldContext>(0);
}

LLVMParser::SizeFieldContext* LLVMParser::DiCompositeTypeFieldContext::sizeField() {
  return getRuleContext<LLVMParser::SizeFieldContext>(0);
}

LLVMParser::AlignFieldContext* LLVMParser::DiCompositeTypeFieldContext::alignField() {
  return getRuleContext<LLVMParser::AlignFieldContext>(0);
}

LLVMParser::OffsetFieldContext* LLVMParser::DiCompositeTypeFieldContext::offsetField() {
  return getRuleContext<LLVMParser::OffsetFieldContext>(0);
}

LLVMParser::FlagsFieldContext* LLVMParser::DiCompositeTypeFieldContext::flagsField() {
  return getRuleContext<LLVMParser::FlagsFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiCompositeTypeFieldContext::ELEMENTSCOLON() {
  return getToken(LLVMParser::ELEMENTSCOLON, 0);
}

LLVMParser::MdFieldContext* LLVMParser::DiCompositeTypeFieldContext::mdField() {
  return getRuleContext<LLVMParser::MdFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiCompositeTypeFieldContext::RUNTIMELANGCOLON() {
  return getToken(LLVMParser::RUNTIMELANGCOLON, 0);
}

LLVMParser::DwarfLangContext* LLVMParser::DiCompositeTypeFieldContext::dwarfLang() {
  return getRuleContext<LLVMParser::DwarfLangContext>(0);
}

tree::TerminalNode* LLVMParser::DiCompositeTypeFieldContext::VTABLEHOLDERCOLON() {
  return getToken(LLVMParser::VTABLEHOLDERCOLON, 0);
}

LLVMParser::TemplateParamsFieldContext* LLVMParser::DiCompositeTypeFieldContext::templateParamsField() {
  return getRuleContext<LLVMParser::TemplateParamsFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiCompositeTypeFieldContext::IDENTIFIERCOLON() {
  return getToken(LLVMParser::IDENTIFIERCOLON, 0);
}

LLVMParser::StringLitContext* LLVMParser::DiCompositeTypeFieldContext::stringLit() {
  return getRuleContext<LLVMParser::StringLitContext>(0);
}

tree::TerminalNode* LLVMParser::DiCompositeTypeFieldContext::DISCRIMINATORCOLON() {
  return getToken(LLVMParser::DISCRIMINATORCOLON, 0);
}


size_t LLVMParser::DiCompositeTypeFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiCompositeTypeField;
}


std::any LLVMParser::DiCompositeTypeFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiCompositeTypeField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiCompositeTypeFieldContext* LLVMParser::diCompositeTypeField() {
  DiCompositeTypeFieldContext *_localctx = _tracker.createInstance<DiCompositeTypeFieldContext>(_ctx, getState());
  enterRule(_localctx, 506, LLVMParser::RuleDiCompositeTypeField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3024);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::TAGCOLON: {
        enterOuterAlt(_localctx, 1);
        setState(3003);
        tagField();
        break;
      }

      case LLVMParser::NAMECOLON: {
        enterOuterAlt(_localctx, 2);
        setState(3004);
        nameField();
        break;
      }

      case LLVMParser::SCOPECOLON: {
        enterOuterAlt(_localctx, 3);
        setState(3005);
        scopeField();
        break;
      }

      case LLVMParser::FILECOLON: {
        enterOuterAlt(_localctx, 4);
        setState(3006);
        fileField();
        break;
      }

      case LLVMParser::LINECOLON: {
        enterOuterAlt(_localctx, 5);
        setState(3007);
        lineField();
        break;
      }

      case LLVMParser::BASETYPECOLON: {
        enterOuterAlt(_localctx, 6);
        setState(3008);
        baseTypeField();
        break;
      }

      case LLVMParser::SIZECOLON: {
        enterOuterAlt(_localctx, 7);
        setState(3009);
        sizeField();
        break;
      }

      case LLVMParser::ALIGNCOLON: {
        enterOuterAlt(_localctx, 8);
        setState(3010);
        alignField();
        break;
      }

      case LLVMParser::OFFSETCOLON: {
        enterOuterAlt(_localctx, 9);
        setState(3011);
        offsetField();
        break;
      }

      case LLVMParser::FLAGSCOLON: {
        enterOuterAlt(_localctx, 10);
        setState(3012);
        flagsField();
        break;
      }

      case LLVMParser::ELEMENTSCOLON: {
        enterOuterAlt(_localctx, 11);
        setState(3013);
        match(LLVMParser::ELEMENTSCOLON);
        setState(3014);
        mdField();
        break;
      }

      case LLVMParser::RUNTIMELANGCOLON: {
        enterOuterAlt(_localctx, 12);
        setState(3015);
        match(LLVMParser::RUNTIMELANGCOLON);
        setState(3016);
        dwarfLang();
        break;
      }

      case LLVMParser::VTABLEHOLDERCOLON: {
        enterOuterAlt(_localctx, 13);
        setState(3017);
        match(LLVMParser::VTABLEHOLDERCOLON);
        setState(3018);
        mdField();
        break;
      }

      case LLVMParser::TEMPLATEPARAMSCOLON: {
        enterOuterAlt(_localctx, 14);
        setState(3019);
        templateParamsField();
        break;
      }

      case LLVMParser::IDENTIFIERCOLON: {
        enterOuterAlt(_localctx, 15);
        setState(3020);
        match(LLVMParser::IDENTIFIERCOLON);
        setState(3021);
        stringLit();
        break;
      }

      case LLVMParser::DISCRIMINATORCOLON: {
        enterOuterAlt(_localctx, 16);
        setState(3022);
        match(LLVMParser::DISCRIMINATORCOLON);
        setState(3023);
        mdField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiSubrangeContext ------------------------------------------------------------------

LLVMParser::DiSubrangeContext::DiSubrangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiSubrangeContext::NOTDISUBRANGE() {
  return getToken(LLVMParser::NOTDISUBRANGE, 0);
}

tree::TerminalNode* LLVMParser::DiSubrangeContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiSubrangeFieldsContext* LLVMParser::DiSubrangeContext::diSubrangeFields() {
  return getRuleContext<LLVMParser::DiSubrangeFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiSubrangeContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiSubrangeContext::getRuleIndex() const {
  return LLVMParser::RuleDiSubrange;
}


std::any LLVMParser::DiSubrangeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiSubrange(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiSubrangeContext* LLVMParser::diSubrange() {
  DiSubrangeContext *_localctx = _tracker.createInstance<DiSubrangeContext>(_ctx, getState());
  enterRule(_localctx, 508, LLVMParser::RuleDiSubrange);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3026);
    match(LLVMParser::NOTDISUBRANGE);
    setState(3027);
    match(LLVMParser::LPAREN);
    setState(3028);
    diSubrangeFields();
    setState(3029);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiSubrangeFieldsContext ------------------------------------------------------------------

LLVMParser::DiSubrangeFieldsContext::DiSubrangeFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiSubrangeFieldListContext* LLVMParser::DiSubrangeFieldsContext::diSubrangeFieldList() {
  return getRuleContext<LLVMParser::DiSubrangeFieldListContext>(0);
}


size_t LLVMParser::DiSubrangeFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiSubrangeFields;
}


std::any LLVMParser::DiSubrangeFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiSubrangeFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiSubrangeFieldsContext* LLVMParser::diSubrangeFields() {
  DiSubrangeFieldsContext *_localctx = _tracker.createInstance<DiSubrangeFieldsContext>(_ctx, getState());
  enterRule(_localctx, 510, LLVMParser::RuleDiSubrangeFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3032);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::COUNTCOLON || _la == LLVMParser::LOWERBOUNDCOLON) {
      setState(3031);
      diSubrangeFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiSubrangeFieldListContext ------------------------------------------------------------------

LLVMParser::DiSubrangeFieldListContext::DiSubrangeFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiSubrangeFieldContext* LLVMParser::DiSubrangeFieldListContext::diSubrangeField() {
  return getRuleContext<LLVMParser::DiSubrangeFieldContext>(0);
}

LLVMParser::DiSubrangeFieldListContext* LLVMParser::DiSubrangeFieldListContext::diSubrangeFieldList() {
  return getRuleContext<LLVMParser::DiSubrangeFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiSubrangeFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiSubrangeFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiSubrangeFieldList;
}


std::any LLVMParser::DiSubrangeFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiSubrangeFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiSubrangeFieldListContext* LLVMParser::diSubrangeFieldList() {
   return diSubrangeFieldList(0);
}

LLVMParser::DiSubrangeFieldListContext* LLVMParser::diSubrangeFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiSubrangeFieldListContext *_localctx = _tracker.createInstance<DiSubrangeFieldListContext>(_ctx, parentState);
  LLVMParser::DiSubrangeFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 512;
  enterRecursionRule(_localctx, 512, LLVMParser::RuleDiSubrangeFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3035);
    diSubrangeField();
    _ctx->stop = _input->LT(-1);
    setState(3042);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiSubrangeFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiSubrangeFieldList);
        setState(3037);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3038);
        match(LLVMParser::COMMA);
        setState(3039);
        diSubrangeField(); 
      }
      setState(3044);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiSubrangeFieldContext ------------------------------------------------------------------

LLVMParser::DiSubrangeFieldContext::DiSubrangeFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiSubrangeFieldContext::COUNTCOLON() {
  return getToken(LLVMParser::COUNTCOLON, 0);
}

LLVMParser::IntOrMDFieldContext* LLVMParser::DiSubrangeFieldContext::intOrMDField() {
  return getRuleContext<LLVMParser::IntOrMDFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiSubrangeFieldContext::LOWERBOUNDCOLON() {
  return getToken(LLVMParser::LOWERBOUNDCOLON, 0);
}

LLVMParser::IntLitContext* LLVMParser::DiSubrangeFieldContext::intLit() {
  return getRuleContext<LLVMParser::IntLitContext>(0);
}


size_t LLVMParser::DiSubrangeFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiSubrangeField;
}


std::any LLVMParser::DiSubrangeFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiSubrangeField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiSubrangeFieldContext* LLVMParser::diSubrangeField() {
  DiSubrangeFieldContext *_localctx = _tracker.createInstance<DiSubrangeFieldContext>(_ctx, getState());
  enterRule(_localctx, 514, LLVMParser::RuleDiSubrangeField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3049);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::COUNTCOLON: {
        enterOuterAlt(_localctx, 1);
        setState(3045);
        match(LLVMParser::COUNTCOLON);
        setState(3046);
        intOrMDField();
        break;
      }

      case LLVMParser::LOWERBOUNDCOLON: {
        enterOuterAlt(_localctx, 2);
        setState(3047);
        match(LLVMParser::LOWERBOUNDCOLON);
        setState(3048);
        intLit();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiEnumeratorContext ------------------------------------------------------------------

LLVMParser::DiEnumeratorContext::DiEnumeratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiEnumeratorContext::NOTDIENUMERATOR() {
  return getToken(LLVMParser::NOTDIENUMERATOR, 0);
}

tree::TerminalNode* LLVMParser::DiEnumeratorContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiEnumeratorFieldsContext* LLVMParser::DiEnumeratorContext::diEnumeratorFields() {
  return getRuleContext<LLVMParser::DiEnumeratorFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiEnumeratorContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiEnumeratorContext::getRuleIndex() const {
  return LLVMParser::RuleDiEnumerator;
}


std::any LLVMParser::DiEnumeratorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiEnumerator(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiEnumeratorContext* LLVMParser::diEnumerator() {
  DiEnumeratorContext *_localctx = _tracker.createInstance<DiEnumeratorContext>(_ctx, getState());
  enterRule(_localctx, 516, LLVMParser::RuleDiEnumerator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3051);
    match(LLVMParser::NOTDIENUMERATOR);
    setState(3052);
    match(LLVMParser::LPAREN);
    setState(3053);
    diEnumeratorFields();
    setState(3054);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiEnumeratorFieldsContext ------------------------------------------------------------------

LLVMParser::DiEnumeratorFieldsContext::DiEnumeratorFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiEnumeratorFieldListContext* LLVMParser::DiEnumeratorFieldsContext::diEnumeratorFieldList() {
  return getRuleContext<LLVMParser::DiEnumeratorFieldListContext>(0);
}


size_t LLVMParser::DiEnumeratorFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiEnumeratorFields;
}


std::any LLVMParser::DiEnumeratorFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiEnumeratorFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiEnumeratorFieldsContext* LLVMParser::diEnumeratorFields() {
  DiEnumeratorFieldsContext *_localctx = _tracker.createInstance<DiEnumeratorFieldsContext>(_ctx, getState());
  enterRule(_localctx, 518, LLVMParser::RuleDiEnumeratorFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3057);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::ISUNSIGNEDCOLON

    || _la == LLVMParser::NAMECOLON || _la == LLVMParser::VALUECOLON) {
      setState(3056);
      diEnumeratorFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiEnumeratorFieldListContext ------------------------------------------------------------------

LLVMParser::DiEnumeratorFieldListContext::DiEnumeratorFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiEnumeratorFieldContext* LLVMParser::DiEnumeratorFieldListContext::diEnumeratorField() {
  return getRuleContext<LLVMParser::DiEnumeratorFieldContext>(0);
}

LLVMParser::DiEnumeratorFieldListContext* LLVMParser::DiEnumeratorFieldListContext::diEnumeratorFieldList() {
  return getRuleContext<LLVMParser::DiEnumeratorFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiEnumeratorFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiEnumeratorFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiEnumeratorFieldList;
}


std::any LLVMParser::DiEnumeratorFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiEnumeratorFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiEnumeratorFieldListContext* LLVMParser::diEnumeratorFieldList() {
   return diEnumeratorFieldList(0);
}

LLVMParser::DiEnumeratorFieldListContext* LLVMParser::diEnumeratorFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiEnumeratorFieldListContext *_localctx = _tracker.createInstance<DiEnumeratorFieldListContext>(_ctx, parentState);
  LLVMParser::DiEnumeratorFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 520;
  enterRecursionRule(_localctx, 520, LLVMParser::RuleDiEnumeratorFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3060);
    diEnumeratorField();
    _ctx->stop = _input->LT(-1);
    setState(3067);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiEnumeratorFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiEnumeratorFieldList);
        setState(3062);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3063);
        match(LLVMParser::COMMA);
        setState(3064);
        diEnumeratorField(); 
      }
      setState(3069);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiEnumeratorFieldContext ------------------------------------------------------------------

LLVMParser::DiEnumeratorFieldContext::DiEnumeratorFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::NameFieldContext* LLVMParser::DiEnumeratorFieldContext::nameField() {
  return getRuleContext<LLVMParser::NameFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiEnumeratorFieldContext::VALUECOLON() {
  return getToken(LLVMParser::VALUECOLON, 0);
}

LLVMParser::IntLitContext* LLVMParser::DiEnumeratorFieldContext::intLit() {
  return getRuleContext<LLVMParser::IntLitContext>(0);
}

tree::TerminalNode* LLVMParser::DiEnumeratorFieldContext::ISUNSIGNEDCOLON() {
  return getToken(LLVMParser::ISUNSIGNEDCOLON, 0);
}

LLVMParser::BoolLitContext* LLVMParser::DiEnumeratorFieldContext::boolLit() {
  return getRuleContext<LLVMParser::BoolLitContext>(0);
}


size_t LLVMParser::DiEnumeratorFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiEnumeratorField;
}


std::any LLVMParser::DiEnumeratorFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiEnumeratorField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiEnumeratorFieldContext* LLVMParser::diEnumeratorField() {
  DiEnumeratorFieldContext *_localctx = _tracker.createInstance<DiEnumeratorFieldContext>(_ctx, getState());
  enterRule(_localctx, 522, LLVMParser::RuleDiEnumeratorField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3075);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::NAMECOLON: {
        enterOuterAlt(_localctx, 1);
        setState(3070);
        nameField();
        break;
      }

      case LLVMParser::VALUECOLON: {
        enterOuterAlt(_localctx, 2);
        setState(3071);
        match(LLVMParser::VALUECOLON);
        setState(3072);
        intLit();
        break;
      }

      case LLVMParser::ISUNSIGNEDCOLON: {
        enterOuterAlt(_localctx, 3);
        setState(3073);
        match(LLVMParser::ISUNSIGNEDCOLON);
        setState(3074);
        boolLit();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiTemplateTypeParameterContext ------------------------------------------------------------------

LLVMParser::DiTemplateTypeParameterContext::DiTemplateTypeParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiTemplateTypeParameterContext::NOTDITEMPLATETYPEPARAMETER() {
  return getToken(LLVMParser::NOTDITEMPLATETYPEPARAMETER, 0);
}

tree::TerminalNode* LLVMParser::DiTemplateTypeParameterContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiTemplateTypeParameterFieldsContext* LLVMParser::DiTemplateTypeParameterContext::diTemplateTypeParameterFields() {
  return getRuleContext<LLVMParser::DiTemplateTypeParameterFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiTemplateTypeParameterContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiTemplateTypeParameterContext::getRuleIndex() const {
  return LLVMParser::RuleDiTemplateTypeParameter;
}


std::any LLVMParser::DiTemplateTypeParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiTemplateTypeParameter(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiTemplateTypeParameterContext* LLVMParser::diTemplateTypeParameter() {
  DiTemplateTypeParameterContext *_localctx = _tracker.createInstance<DiTemplateTypeParameterContext>(_ctx, getState());
  enterRule(_localctx, 524, LLVMParser::RuleDiTemplateTypeParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3077);
    match(LLVMParser::NOTDITEMPLATETYPEPARAMETER);
    setState(3078);
    match(LLVMParser::LPAREN);
    setState(3079);
    diTemplateTypeParameterFields();
    setState(3080);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiTemplateTypeParameterFieldsContext ------------------------------------------------------------------

LLVMParser::DiTemplateTypeParameterFieldsContext::DiTemplateTypeParameterFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiTemplateTypeParameterFieldListContext* LLVMParser::DiTemplateTypeParameterFieldsContext::diTemplateTypeParameterFieldList() {
  return getRuleContext<LLVMParser::DiTemplateTypeParameterFieldListContext>(0);
}


size_t LLVMParser::DiTemplateTypeParameterFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiTemplateTypeParameterFields;
}


std::any LLVMParser::DiTemplateTypeParameterFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiTemplateTypeParameterFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiTemplateTypeParameterFieldsContext* LLVMParser::diTemplateTypeParameterFields() {
  DiTemplateTypeParameterFieldsContext *_localctx = _tracker.createInstance<DiTemplateTypeParameterFieldsContext>(_ctx, getState());
  enterRule(_localctx, 526, LLVMParser::RuleDiTemplateTypeParameterFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3083);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::NAMECOLON || _la == LLVMParser::TYPECOLON) {
      setState(3082);
      diTemplateTypeParameterFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiTemplateTypeParameterFieldListContext ------------------------------------------------------------------

LLVMParser::DiTemplateTypeParameterFieldListContext::DiTemplateTypeParameterFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiTemplateTypeParameterFieldContext* LLVMParser::DiTemplateTypeParameterFieldListContext::diTemplateTypeParameterField() {
  return getRuleContext<LLVMParser::DiTemplateTypeParameterFieldContext>(0);
}

LLVMParser::DiTemplateTypeParameterFieldListContext* LLVMParser::DiTemplateTypeParameterFieldListContext::diTemplateTypeParameterFieldList() {
  return getRuleContext<LLVMParser::DiTemplateTypeParameterFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiTemplateTypeParameterFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiTemplateTypeParameterFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiTemplateTypeParameterFieldList;
}


std::any LLVMParser::DiTemplateTypeParameterFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiTemplateTypeParameterFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiTemplateTypeParameterFieldListContext* LLVMParser::diTemplateTypeParameterFieldList() {
   return diTemplateTypeParameterFieldList(0);
}

LLVMParser::DiTemplateTypeParameterFieldListContext* LLVMParser::diTemplateTypeParameterFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiTemplateTypeParameterFieldListContext *_localctx = _tracker.createInstance<DiTemplateTypeParameterFieldListContext>(_ctx, parentState);
  LLVMParser::DiTemplateTypeParameterFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 528;
  enterRecursionRule(_localctx, 528, LLVMParser::RuleDiTemplateTypeParameterFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3086);
    diTemplateTypeParameterField();
    _ctx->stop = _input->LT(-1);
    setState(3093);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiTemplateTypeParameterFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiTemplateTypeParameterFieldList);
        setState(3088);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3089);
        match(LLVMParser::COMMA);
        setState(3090);
        diTemplateTypeParameterField(); 
      }
      setState(3095);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiTemplateTypeParameterFieldContext ------------------------------------------------------------------

LLVMParser::DiTemplateTypeParameterFieldContext::DiTemplateTypeParameterFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::NameFieldContext* LLVMParser::DiTemplateTypeParameterFieldContext::nameField() {
  return getRuleContext<LLVMParser::NameFieldContext>(0);
}

LLVMParser::TypeFieldContext* LLVMParser::DiTemplateTypeParameterFieldContext::typeField() {
  return getRuleContext<LLVMParser::TypeFieldContext>(0);
}


size_t LLVMParser::DiTemplateTypeParameterFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiTemplateTypeParameterField;
}


std::any LLVMParser::DiTemplateTypeParameterFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiTemplateTypeParameterField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiTemplateTypeParameterFieldContext* LLVMParser::diTemplateTypeParameterField() {
  DiTemplateTypeParameterFieldContext *_localctx = _tracker.createInstance<DiTemplateTypeParameterFieldContext>(_ctx, getState());
  enterRule(_localctx, 530, LLVMParser::RuleDiTemplateTypeParameterField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3098);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::NAMECOLON: {
        enterOuterAlt(_localctx, 1);
        setState(3096);
        nameField();
        break;
      }

      case LLVMParser::TYPECOLON: {
        enterOuterAlt(_localctx, 2);
        setState(3097);
        typeField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiTemplateValueParameterContext ------------------------------------------------------------------

LLVMParser::DiTemplateValueParameterContext::DiTemplateValueParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiTemplateValueParameterContext::NOTDITEMPLATEVALUEPARAMETER() {
  return getToken(LLVMParser::NOTDITEMPLATEVALUEPARAMETER, 0);
}

tree::TerminalNode* LLVMParser::DiTemplateValueParameterContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiTemplateValueParameterFieldsContext* LLVMParser::DiTemplateValueParameterContext::diTemplateValueParameterFields() {
  return getRuleContext<LLVMParser::DiTemplateValueParameterFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiTemplateValueParameterContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiTemplateValueParameterContext::getRuleIndex() const {
  return LLVMParser::RuleDiTemplateValueParameter;
}


std::any LLVMParser::DiTemplateValueParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiTemplateValueParameter(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiTemplateValueParameterContext* LLVMParser::diTemplateValueParameter() {
  DiTemplateValueParameterContext *_localctx = _tracker.createInstance<DiTemplateValueParameterContext>(_ctx, getState());
  enterRule(_localctx, 532, LLVMParser::RuleDiTemplateValueParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3100);
    match(LLVMParser::NOTDITEMPLATEVALUEPARAMETER);
    setState(3101);
    match(LLVMParser::LPAREN);
    setState(3102);
    diTemplateValueParameterFields();
    setState(3103);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiTemplateValueParameterFieldsContext ------------------------------------------------------------------

LLVMParser::DiTemplateValueParameterFieldsContext::DiTemplateValueParameterFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiTemplateValueParameterFieldListContext* LLVMParser::DiTemplateValueParameterFieldsContext::diTemplateValueParameterFieldList() {
  return getRuleContext<LLVMParser::DiTemplateValueParameterFieldListContext>(0);
}


size_t LLVMParser::DiTemplateValueParameterFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiTemplateValueParameterFields;
}


std::any LLVMParser::DiTemplateValueParameterFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiTemplateValueParameterFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiTemplateValueParameterFieldsContext* LLVMParser::diTemplateValueParameterFields() {
  DiTemplateValueParameterFieldsContext *_localctx = _tracker.createInstance<DiTemplateValueParameterFieldsContext>(_ctx, getState());
  enterRule(_localctx, 534, LLVMParser::RuleDiTemplateValueParameterFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3106);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::NAMECOLON || ((((_la - 343) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 343)) & 137438957569) != 0)) {
      setState(3105);
      diTemplateValueParameterFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiTemplateValueParameterFieldListContext ------------------------------------------------------------------

LLVMParser::DiTemplateValueParameterFieldListContext::DiTemplateValueParameterFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiTemplateValueParameterFieldContext* LLVMParser::DiTemplateValueParameterFieldListContext::diTemplateValueParameterField() {
  return getRuleContext<LLVMParser::DiTemplateValueParameterFieldContext>(0);
}

LLVMParser::DiTemplateValueParameterFieldListContext* LLVMParser::DiTemplateValueParameterFieldListContext::diTemplateValueParameterFieldList() {
  return getRuleContext<LLVMParser::DiTemplateValueParameterFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiTemplateValueParameterFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiTemplateValueParameterFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiTemplateValueParameterFieldList;
}


std::any LLVMParser::DiTemplateValueParameterFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiTemplateValueParameterFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiTemplateValueParameterFieldListContext* LLVMParser::diTemplateValueParameterFieldList() {
   return diTemplateValueParameterFieldList(0);
}

LLVMParser::DiTemplateValueParameterFieldListContext* LLVMParser::diTemplateValueParameterFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiTemplateValueParameterFieldListContext *_localctx = _tracker.createInstance<DiTemplateValueParameterFieldListContext>(_ctx, parentState);
  LLVMParser::DiTemplateValueParameterFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 536;
  enterRecursionRule(_localctx, 536, LLVMParser::RuleDiTemplateValueParameterFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3109);
    diTemplateValueParameterField();
    _ctx->stop = _input->LT(-1);
    setState(3116);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiTemplateValueParameterFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiTemplateValueParameterFieldList);
        setState(3111);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3112);
        match(LLVMParser::COMMA);
        setState(3113);
        diTemplateValueParameterField(); 
      }
      setState(3118);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiTemplateValueParameterFieldContext ------------------------------------------------------------------

LLVMParser::DiTemplateValueParameterFieldContext::DiTemplateValueParameterFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::TagFieldContext* LLVMParser::DiTemplateValueParameterFieldContext::tagField() {
  return getRuleContext<LLVMParser::TagFieldContext>(0);
}

LLVMParser::NameFieldContext* LLVMParser::DiTemplateValueParameterFieldContext::nameField() {
  return getRuleContext<LLVMParser::NameFieldContext>(0);
}

LLVMParser::TypeFieldContext* LLVMParser::DiTemplateValueParameterFieldContext::typeField() {
  return getRuleContext<LLVMParser::TypeFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiTemplateValueParameterFieldContext::VALUECOLON() {
  return getToken(LLVMParser::VALUECOLON, 0);
}

LLVMParser::MdFieldContext* LLVMParser::DiTemplateValueParameterFieldContext::mdField() {
  return getRuleContext<LLVMParser::MdFieldContext>(0);
}


size_t LLVMParser::DiTemplateValueParameterFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiTemplateValueParameterField;
}


std::any LLVMParser::DiTemplateValueParameterFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiTemplateValueParameterField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiTemplateValueParameterFieldContext* LLVMParser::diTemplateValueParameterField() {
  DiTemplateValueParameterFieldContext *_localctx = _tracker.createInstance<DiTemplateValueParameterFieldContext>(_ctx, getState());
  enterRule(_localctx, 538, LLVMParser::RuleDiTemplateValueParameterField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3124);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::TAGCOLON: {
        enterOuterAlt(_localctx, 1);
        setState(3119);
        tagField();
        break;
      }

      case LLVMParser::NAMECOLON: {
        enterOuterAlt(_localctx, 2);
        setState(3120);
        nameField();
        break;
      }

      case LLVMParser::TYPECOLON: {
        enterOuterAlt(_localctx, 3);
        setState(3121);
        typeField();
        break;
      }

      case LLVMParser::VALUECOLON: {
        enterOuterAlt(_localctx, 4);
        setState(3122);
        match(LLVMParser::VALUECOLON);
        setState(3123);
        mdField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiModuleContext ------------------------------------------------------------------

LLVMParser::DiModuleContext::DiModuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiModuleContext::NOTDIMODULE() {
  return getToken(LLVMParser::NOTDIMODULE, 0);
}

tree::TerminalNode* LLVMParser::DiModuleContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiModuleFieldsContext* LLVMParser::DiModuleContext::diModuleFields() {
  return getRuleContext<LLVMParser::DiModuleFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiModuleContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiModuleContext::getRuleIndex() const {
  return LLVMParser::RuleDiModule;
}


std::any LLVMParser::DiModuleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiModule(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiModuleContext* LLVMParser::diModule() {
  DiModuleContext *_localctx = _tracker.createInstance<DiModuleContext>(_ctx, getState());
  enterRule(_localctx, 540, LLVMParser::RuleDiModule);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3126);
    match(LLVMParser::NOTDIMODULE);
    setState(3127);
    match(LLVMParser::LPAREN);
    setState(3128);
    diModuleFields();
    setState(3129);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiModuleFieldsContext ------------------------------------------------------------------

LLVMParser::DiModuleFieldsContext::DiModuleFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiModuleFieldListContext* LLVMParser::DiModuleFieldsContext::diModuleFieldList() {
  return getRuleContext<LLVMParser::DiModuleFieldListContext>(0);
}


size_t LLVMParser::DiModuleFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiModuleFields;
}


std::any LLVMParser::DiModuleFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiModuleFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiModuleFieldsContext* LLVMParser::diModuleFields() {
  DiModuleFieldsContext *_localctx = _tracker.createInstance<DiModuleFieldsContext>(_ctx, getState());
  enterRule(_localctx, 542, LLVMParser::RuleDiModuleFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3132);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::CONFIGMACROSCOLON || ((((_la - 190) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 190)) & 70368744439809) != 0) || _la == LLVMParser::SCOPECOLON) {
      setState(3131);
      diModuleFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiModuleFieldListContext ------------------------------------------------------------------

LLVMParser::DiModuleFieldListContext::DiModuleFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiModuleFieldContext* LLVMParser::DiModuleFieldListContext::diModuleField() {
  return getRuleContext<LLVMParser::DiModuleFieldContext>(0);
}

LLVMParser::DiModuleFieldListContext* LLVMParser::DiModuleFieldListContext::diModuleFieldList() {
  return getRuleContext<LLVMParser::DiModuleFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiModuleFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiModuleFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiModuleFieldList;
}


std::any LLVMParser::DiModuleFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiModuleFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiModuleFieldListContext* LLVMParser::diModuleFieldList() {
   return diModuleFieldList(0);
}

LLVMParser::DiModuleFieldListContext* LLVMParser::diModuleFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiModuleFieldListContext *_localctx = _tracker.createInstance<DiModuleFieldListContext>(_ctx, parentState);
  LLVMParser::DiModuleFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 544;
  enterRecursionRule(_localctx, 544, LLVMParser::RuleDiModuleFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3135);
    diModuleField();
    _ctx->stop = _input->LT(-1);
    setState(3142);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiModuleFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiModuleFieldList);
        setState(3137);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3138);
        match(LLVMParser::COMMA);
        setState(3139);
        diModuleField(); 
      }
      setState(3144);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiModuleFieldContext ------------------------------------------------------------------

LLVMParser::DiModuleFieldContext::DiModuleFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::ScopeFieldContext* LLVMParser::DiModuleFieldContext::scopeField() {
  return getRuleContext<LLVMParser::ScopeFieldContext>(0);
}

LLVMParser::NameFieldContext* LLVMParser::DiModuleFieldContext::nameField() {
  return getRuleContext<LLVMParser::NameFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiModuleFieldContext::CONFIGMACROSCOLON() {
  return getToken(LLVMParser::CONFIGMACROSCOLON, 0);
}

LLVMParser::StringLitContext* LLVMParser::DiModuleFieldContext::stringLit() {
  return getRuleContext<LLVMParser::StringLitContext>(0);
}

tree::TerminalNode* LLVMParser::DiModuleFieldContext::INCLUDEPATHCOLON() {
  return getToken(LLVMParser::INCLUDEPATHCOLON, 0);
}

tree::TerminalNode* LLVMParser::DiModuleFieldContext::ISYSROOTCOLON() {
  return getToken(LLVMParser::ISYSROOTCOLON, 0);
}


size_t LLVMParser::DiModuleFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiModuleField;
}


std::any LLVMParser::DiModuleFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiModuleField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiModuleFieldContext* LLVMParser::diModuleField() {
  DiModuleFieldContext *_localctx = _tracker.createInstance<DiModuleFieldContext>(_ctx, getState());
  enterRule(_localctx, 546, LLVMParser::RuleDiModuleField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3153);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::SCOPECOLON: {
        enterOuterAlt(_localctx, 1);
        setState(3145);
        scopeField();
        break;
      }

      case LLVMParser::NAMECOLON: {
        enterOuterAlt(_localctx, 2);
        setState(3146);
        nameField();
        break;
      }

      case LLVMParser::CONFIGMACROSCOLON: {
        enterOuterAlt(_localctx, 3);
        setState(3147);
        match(LLVMParser::CONFIGMACROSCOLON);
        setState(3148);
        stringLit();
        break;
      }

      case LLVMParser::INCLUDEPATHCOLON: {
        enterOuterAlt(_localctx, 4);
        setState(3149);
        match(LLVMParser::INCLUDEPATHCOLON);
        setState(3150);
        stringLit();
        break;
      }

      case LLVMParser::ISYSROOTCOLON: {
        enterOuterAlt(_localctx, 5);
        setState(3151);
        match(LLVMParser::ISYSROOTCOLON);
        setState(3152);
        stringLit();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiNamespaceContext ------------------------------------------------------------------

LLVMParser::DiNamespaceContext::DiNamespaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiNamespaceContext::NOTDINAMESPACE() {
  return getToken(LLVMParser::NOTDINAMESPACE, 0);
}

tree::TerminalNode* LLVMParser::DiNamespaceContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiNamespaceFieldsContext* LLVMParser::DiNamespaceContext::diNamespaceFields() {
  return getRuleContext<LLVMParser::DiNamespaceFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiNamespaceContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiNamespaceContext::getRuleIndex() const {
  return LLVMParser::RuleDiNamespace;
}


std::any LLVMParser::DiNamespaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiNamespace(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiNamespaceContext* LLVMParser::diNamespace() {
  DiNamespaceContext *_localctx = _tracker.createInstance<DiNamespaceContext>(_ctx, getState());
  enterRule(_localctx, 548, LLVMParser::RuleDiNamespace);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3155);
    match(LLVMParser::NOTDINAMESPACE);
    setState(3156);
    match(LLVMParser::LPAREN);
    setState(3157);
    diNamespaceFields();
    setState(3158);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiNamespaceFieldsContext ------------------------------------------------------------------

LLVMParser::DiNamespaceFieldsContext::DiNamespaceFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiNamespaceFieldListContext* LLVMParser::DiNamespaceFieldsContext::diNamespaceFieldList() {
  return getRuleContext<LLVMParser::DiNamespaceFieldListContext>(0);
}


size_t LLVMParser::DiNamespaceFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiNamespaceFields;
}


std::any LLVMParser::DiNamespaceFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiNamespaceFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiNamespaceFieldsContext* LLVMParser::diNamespaceFields() {
  DiNamespaceFieldsContext *_localctx = _tracker.createInstance<DiNamespaceFieldsContext>(_ctx, getState());
  enterRule(_localctx, 550, LLVMParser::RuleDiNamespaceFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3161);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::EXPORTSYMBOLSCOLON || _la == LLVMParser::NAMECOLON || _la == LLVMParser::SCOPECOLON) {
      setState(3160);
      diNamespaceFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiNamespaceFieldListContext ------------------------------------------------------------------

LLVMParser::DiNamespaceFieldListContext::DiNamespaceFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiNamespaceFieldContext* LLVMParser::DiNamespaceFieldListContext::diNamespaceField() {
  return getRuleContext<LLVMParser::DiNamespaceFieldContext>(0);
}

LLVMParser::DiNamespaceFieldListContext* LLVMParser::DiNamespaceFieldListContext::diNamespaceFieldList() {
  return getRuleContext<LLVMParser::DiNamespaceFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiNamespaceFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiNamespaceFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiNamespaceFieldList;
}


std::any LLVMParser::DiNamespaceFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiNamespaceFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiNamespaceFieldListContext* LLVMParser::diNamespaceFieldList() {
   return diNamespaceFieldList(0);
}

LLVMParser::DiNamespaceFieldListContext* LLVMParser::diNamespaceFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiNamespaceFieldListContext *_localctx = _tracker.createInstance<DiNamespaceFieldListContext>(_ctx, parentState);
  LLVMParser::DiNamespaceFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 552;
  enterRecursionRule(_localctx, 552, LLVMParser::RuleDiNamespaceFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3164);
    diNamespaceField();
    _ctx->stop = _input->LT(-1);
    setState(3171);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiNamespaceFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiNamespaceFieldList);
        setState(3166);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3167);
        match(LLVMParser::COMMA);
        setState(3168);
        diNamespaceField(); 
      }
      setState(3173);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiNamespaceFieldContext ------------------------------------------------------------------

LLVMParser::DiNamespaceFieldContext::DiNamespaceFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::ScopeFieldContext* LLVMParser::DiNamespaceFieldContext::scopeField() {
  return getRuleContext<LLVMParser::ScopeFieldContext>(0);
}

LLVMParser::NameFieldContext* LLVMParser::DiNamespaceFieldContext::nameField() {
  return getRuleContext<LLVMParser::NameFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiNamespaceFieldContext::EXPORTSYMBOLSCOLON() {
  return getToken(LLVMParser::EXPORTSYMBOLSCOLON, 0);
}

LLVMParser::BoolLitContext* LLVMParser::DiNamespaceFieldContext::boolLit() {
  return getRuleContext<LLVMParser::BoolLitContext>(0);
}


size_t LLVMParser::DiNamespaceFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiNamespaceField;
}


std::any LLVMParser::DiNamespaceFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiNamespaceField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiNamespaceFieldContext* LLVMParser::diNamespaceField() {
  DiNamespaceFieldContext *_localctx = _tracker.createInstance<DiNamespaceFieldContext>(_ctx, getState());
  enterRule(_localctx, 554, LLVMParser::RuleDiNamespaceField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3178);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::SCOPECOLON: {
        enterOuterAlt(_localctx, 1);
        setState(3174);
        scopeField();
        break;
      }

      case LLVMParser::NAMECOLON: {
        enterOuterAlt(_localctx, 2);
        setState(3175);
        nameField();
        break;
      }

      case LLVMParser::EXPORTSYMBOLSCOLON: {
        enterOuterAlt(_localctx, 3);
        setState(3176);
        match(LLVMParser::EXPORTSYMBOLSCOLON);
        setState(3177);
        boolLit();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiGlobalVariableContext ------------------------------------------------------------------

LLVMParser::DiGlobalVariableContext::DiGlobalVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiGlobalVariableContext::NOTDIGLOBALVARIABLE() {
  return getToken(LLVMParser::NOTDIGLOBALVARIABLE, 0);
}

tree::TerminalNode* LLVMParser::DiGlobalVariableContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiGlobalVariableFieldsContext* LLVMParser::DiGlobalVariableContext::diGlobalVariableFields() {
  return getRuleContext<LLVMParser::DiGlobalVariableFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiGlobalVariableContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiGlobalVariableContext::getRuleIndex() const {
  return LLVMParser::RuleDiGlobalVariable;
}


std::any LLVMParser::DiGlobalVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiGlobalVariable(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiGlobalVariableContext* LLVMParser::diGlobalVariable() {
  DiGlobalVariableContext *_localctx = _tracker.createInstance<DiGlobalVariableContext>(_ctx, getState());
  enterRule(_localctx, 556, LLVMParser::RuleDiGlobalVariable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3180);
    match(LLVMParser::NOTDIGLOBALVARIABLE);
    setState(3181);
    match(LLVMParser::LPAREN);
    setState(3182);
    diGlobalVariableFields();
    setState(3183);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiGlobalVariableFieldsContext ------------------------------------------------------------------

LLVMParser::DiGlobalVariableFieldsContext::DiGlobalVariableFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiGlobalVariableFieldListContext* LLVMParser::DiGlobalVariableFieldsContext::diGlobalVariableFieldList() {
  return getRuleContext<LLVMParser::DiGlobalVariableFieldListContext>(0);
}


size_t LLVMParser::DiGlobalVariableFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiGlobalVariableFields;
}


std::any LLVMParser::DiGlobalVariableFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiGlobalVariableFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiGlobalVariableFieldsContext* LLVMParser::diGlobalVariableFields() {
  DiGlobalVariableFieldsContext *_localctx = _tracker.createInstance<DiGlobalVariableFieldsContext>(_ctx, getState());
  enterRule(_localctx, 558, LLVMParser::RuleDiGlobalVariableFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3186);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::ALIGNCOLON || _la == LLVMParser::DECLARATIONCOLON

    || _la == LLVMParser::FILECOLON || ((((_la - 204) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 204)) & 4294972419) != 0) || _la == LLVMParser::SCOPECOLON

    || _la == LLVMParser::TYPECOLON) {
      setState(3185);
      diGlobalVariableFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiGlobalVariableFieldListContext ------------------------------------------------------------------

LLVMParser::DiGlobalVariableFieldListContext::DiGlobalVariableFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiGlobalVariableFieldContext* LLVMParser::DiGlobalVariableFieldListContext::diGlobalVariableField() {
  return getRuleContext<LLVMParser::DiGlobalVariableFieldContext>(0);
}

LLVMParser::DiGlobalVariableFieldListContext* LLVMParser::DiGlobalVariableFieldListContext::diGlobalVariableFieldList() {
  return getRuleContext<LLVMParser::DiGlobalVariableFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiGlobalVariableFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiGlobalVariableFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiGlobalVariableFieldList;
}


std::any LLVMParser::DiGlobalVariableFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiGlobalVariableFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiGlobalVariableFieldListContext* LLVMParser::diGlobalVariableFieldList() {
   return diGlobalVariableFieldList(0);
}

LLVMParser::DiGlobalVariableFieldListContext* LLVMParser::diGlobalVariableFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiGlobalVariableFieldListContext *_localctx = _tracker.createInstance<DiGlobalVariableFieldListContext>(_ctx, parentState);
  LLVMParser::DiGlobalVariableFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 560;
  enterRecursionRule(_localctx, 560, LLVMParser::RuleDiGlobalVariableFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3189);
    diGlobalVariableField();
    _ctx->stop = _input->LT(-1);
    setState(3196);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiGlobalVariableFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiGlobalVariableFieldList);
        setState(3191);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3192);
        match(LLVMParser::COMMA);
        setState(3193);
        diGlobalVariableField(); 
      }
      setState(3198);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiGlobalVariableFieldContext ------------------------------------------------------------------

LLVMParser::DiGlobalVariableFieldContext::DiGlobalVariableFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::NameFieldContext* LLVMParser::DiGlobalVariableFieldContext::nameField() {
  return getRuleContext<LLVMParser::NameFieldContext>(0);
}

LLVMParser::ScopeFieldContext* LLVMParser::DiGlobalVariableFieldContext::scopeField() {
  return getRuleContext<LLVMParser::ScopeFieldContext>(0);
}

LLVMParser::LinkageNameFieldContext* LLVMParser::DiGlobalVariableFieldContext::linkageNameField() {
  return getRuleContext<LLVMParser::LinkageNameFieldContext>(0);
}

LLVMParser::FileFieldContext* LLVMParser::DiGlobalVariableFieldContext::fileField() {
  return getRuleContext<LLVMParser::FileFieldContext>(0);
}

LLVMParser::LineFieldContext* LLVMParser::DiGlobalVariableFieldContext::lineField() {
  return getRuleContext<LLVMParser::LineFieldContext>(0);
}

LLVMParser::TypeFieldContext* LLVMParser::DiGlobalVariableFieldContext::typeField() {
  return getRuleContext<LLVMParser::TypeFieldContext>(0);
}

LLVMParser::IsLocalFieldContext* LLVMParser::DiGlobalVariableFieldContext::isLocalField() {
  return getRuleContext<LLVMParser::IsLocalFieldContext>(0);
}

LLVMParser::IsDefinitionFieldContext* LLVMParser::DiGlobalVariableFieldContext::isDefinitionField() {
  return getRuleContext<LLVMParser::IsDefinitionFieldContext>(0);
}

LLVMParser::DeclarationFieldContext* LLVMParser::DiGlobalVariableFieldContext::declarationField() {
  return getRuleContext<LLVMParser::DeclarationFieldContext>(0);
}

LLVMParser::AlignFieldContext* LLVMParser::DiGlobalVariableFieldContext::alignField() {
  return getRuleContext<LLVMParser::AlignFieldContext>(0);
}


size_t LLVMParser::DiGlobalVariableFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiGlobalVariableField;
}


std::any LLVMParser::DiGlobalVariableFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiGlobalVariableField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiGlobalVariableFieldContext* LLVMParser::diGlobalVariableField() {
  DiGlobalVariableFieldContext *_localctx = _tracker.createInstance<DiGlobalVariableFieldContext>(_ctx, getState());
  enterRule(_localctx, 562, LLVMParser::RuleDiGlobalVariableField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3209);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::NAMECOLON: {
        enterOuterAlt(_localctx, 1);
        setState(3199);
        nameField();
        break;
      }

      case LLVMParser::SCOPECOLON: {
        enterOuterAlt(_localctx, 2);
        setState(3200);
        scopeField();
        break;
      }

      case LLVMParser::LINKAGENAMECOLON: {
        enterOuterAlt(_localctx, 3);
        setState(3201);
        linkageNameField();
        break;
      }

      case LLVMParser::FILECOLON: {
        enterOuterAlt(_localctx, 4);
        setState(3202);
        fileField();
        break;
      }

      case LLVMParser::LINECOLON: {
        enterOuterAlt(_localctx, 5);
        setState(3203);
        lineField();
        break;
      }

      case LLVMParser::TYPECOLON: {
        enterOuterAlt(_localctx, 6);
        setState(3204);
        typeField();
        break;
      }

      case LLVMParser::ISLOCALCOLON: {
        enterOuterAlt(_localctx, 7);
        setState(3205);
        isLocalField();
        break;
      }

      case LLVMParser::ISDEFINITIONCOLON: {
        enterOuterAlt(_localctx, 8);
        setState(3206);
        isDefinitionField();
        break;
      }

      case LLVMParser::DECLARATIONCOLON: {
        enterOuterAlt(_localctx, 9);
        setState(3207);
        declarationField();
        break;
      }

      case LLVMParser::ALIGNCOLON: {
        enterOuterAlt(_localctx, 10);
        setState(3208);
        alignField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiSubprogramContext ------------------------------------------------------------------

LLVMParser::DiSubprogramContext::DiSubprogramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiSubprogramContext::NOTDISUBPROGRAM() {
  return getToken(LLVMParser::NOTDISUBPROGRAM, 0);
}

tree::TerminalNode* LLVMParser::DiSubprogramContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiSubprogramFieldsContext* LLVMParser::DiSubprogramContext::diSubprogramFields() {
  return getRuleContext<LLVMParser::DiSubprogramFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiSubprogramContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiSubprogramContext::getRuleIndex() const {
  return LLVMParser::RuleDiSubprogram;
}


std::any LLVMParser::DiSubprogramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiSubprogram(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiSubprogramContext* LLVMParser::diSubprogram() {
  DiSubprogramContext *_localctx = _tracker.createInstance<DiSubprogramContext>(_ctx, getState());
  enterRule(_localctx, 564, LLVMParser::RuleDiSubprogram);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3211);
    match(LLVMParser::NOTDISUBPROGRAM);
    setState(3212);
    match(LLVMParser::LPAREN);
    setState(3213);
    diSubprogramFields();
    setState(3214);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiSubprogramFieldsContext ------------------------------------------------------------------

LLVMParser::DiSubprogramFieldsContext::DiSubprogramFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiSubprogramFieldListContext* LLVMParser::DiSubprogramFieldsContext::diSubprogramFieldList() {
  return getRuleContext<LLVMParser::DiSubprogramFieldListContext>(0);
}


size_t LLVMParser::DiSubprogramFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiSubprogramFields;
}


std::any LLVMParser::DiSubprogramFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiSubprogramFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiSubprogramFieldsContext* LLVMParser::diSubprogramFields() {
  DiSubprogramFieldsContext *_localctx = _tracker.createInstance<DiSubprogramFieldsContext>(_ctx, getState());
  enterRule(_localctx, 566, LLVMParser::RuleDiSubprogramFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3217);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::CONTAININGTYPECOLON

    || _la == LLVMParser::DECLARATIONCOLON || ((((_la - 154) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 154)) & 5772488822382133257) != 0) || _la == LLVMParser::NAMECOLON || ((((_la - 306) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 306)) & -9222796992273448957) != 0) || ((((_la - 382) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 382)) & 7) != 0)) {
      setState(3216);
      diSubprogramFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiSubprogramFieldListContext ------------------------------------------------------------------

LLVMParser::DiSubprogramFieldListContext::DiSubprogramFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiSubprogramFieldContext* LLVMParser::DiSubprogramFieldListContext::diSubprogramField() {
  return getRuleContext<LLVMParser::DiSubprogramFieldContext>(0);
}

LLVMParser::DiSubprogramFieldListContext* LLVMParser::DiSubprogramFieldListContext::diSubprogramFieldList() {
  return getRuleContext<LLVMParser::DiSubprogramFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiSubprogramFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiSubprogramFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiSubprogramFieldList;
}


std::any LLVMParser::DiSubprogramFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiSubprogramFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiSubprogramFieldListContext* LLVMParser::diSubprogramFieldList() {
   return diSubprogramFieldList(0);
}

LLVMParser::DiSubprogramFieldListContext* LLVMParser::diSubprogramFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiSubprogramFieldListContext *_localctx = _tracker.createInstance<DiSubprogramFieldListContext>(_ctx, parentState);
  LLVMParser::DiSubprogramFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 568;
  enterRecursionRule(_localctx, 568, LLVMParser::RuleDiSubprogramFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3220);
    diSubprogramField();
    _ctx->stop = _input->LT(-1);
    setState(3227);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiSubprogramFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiSubprogramFieldList);
        setState(3222);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3223);
        match(LLVMParser::COMMA);
        setState(3224);
        diSubprogramField(); 
      }
      setState(3229);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiSubprogramFieldContext ------------------------------------------------------------------

LLVMParser::DiSubprogramFieldContext::DiSubprogramFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::NameFieldContext* LLVMParser::DiSubprogramFieldContext::nameField() {
  return getRuleContext<LLVMParser::NameFieldContext>(0);
}

LLVMParser::ScopeFieldContext* LLVMParser::DiSubprogramFieldContext::scopeField() {
  return getRuleContext<LLVMParser::ScopeFieldContext>(0);
}

LLVMParser::LinkageNameFieldContext* LLVMParser::DiSubprogramFieldContext::linkageNameField() {
  return getRuleContext<LLVMParser::LinkageNameFieldContext>(0);
}

LLVMParser::FileFieldContext* LLVMParser::DiSubprogramFieldContext::fileField() {
  return getRuleContext<LLVMParser::FileFieldContext>(0);
}

LLVMParser::LineFieldContext* LLVMParser::DiSubprogramFieldContext::lineField() {
  return getRuleContext<LLVMParser::LineFieldContext>(0);
}

LLVMParser::TypeFieldContext* LLVMParser::DiSubprogramFieldContext::typeField() {
  return getRuleContext<LLVMParser::TypeFieldContext>(0);
}

LLVMParser::IsLocalFieldContext* LLVMParser::DiSubprogramFieldContext::isLocalField() {
  return getRuleContext<LLVMParser::IsLocalFieldContext>(0);
}

LLVMParser::IsDefinitionFieldContext* LLVMParser::DiSubprogramFieldContext::isDefinitionField() {
  return getRuleContext<LLVMParser::IsDefinitionFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiSubprogramFieldContext::SCOPELINECOLON() {
  return getToken(LLVMParser::SCOPELINECOLON, 0);
}

LLVMParser::IntLitContext* LLVMParser::DiSubprogramFieldContext::intLit() {
  return getRuleContext<LLVMParser::IntLitContext>(0);
}

tree::TerminalNode* LLVMParser::DiSubprogramFieldContext::CONTAININGTYPECOLON() {
  return getToken(LLVMParser::CONTAININGTYPECOLON, 0);
}

LLVMParser::MdFieldContext* LLVMParser::DiSubprogramFieldContext::mdField() {
  return getRuleContext<LLVMParser::MdFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiSubprogramFieldContext::VIRTUALITYCOLON() {
  return getToken(LLVMParser::VIRTUALITYCOLON, 0);
}

LLVMParser::DwarfVirtualityContext* LLVMParser::DiSubprogramFieldContext::dwarfVirtuality() {
  return getRuleContext<LLVMParser::DwarfVirtualityContext>(0);
}

tree::TerminalNode* LLVMParser::DiSubprogramFieldContext::VIRTUALINDEXCOLON() {
  return getToken(LLVMParser::VIRTUALINDEXCOLON, 0);
}

tree::TerminalNode* LLVMParser::DiSubprogramFieldContext::THISADJUSTMENTCOLON() {
  return getToken(LLVMParser::THISADJUSTMENTCOLON, 0);
}

LLVMParser::FlagsFieldContext* LLVMParser::DiSubprogramFieldContext::flagsField() {
  return getRuleContext<LLVMParser::FlagsFieldContext>(0);
}

LLVMParser::IsOptimizedFieldContext* LLVMParser::DiSubprogramFieldContext::isOptimizedField() {
  return getRuleContext<LLVMParser::IsOptimizedFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiSubprogramFieldContext::UNITCOLON() {
  return getToken(LLVMParser::UNITCOLON, 0);
}

LLVMParser::TemplateParamsFieldContext* LLVMParser::DiSubprogramFieldContext::templateParamsField() {
  return getRuleContext<LLVMParser::TemplateParamsFieldContext>(0);
}

LLVMParser::DeclarationFieldContext* LLVMParser::DiSubprogramFieldContext::declarationField() {
  return getRuleContext<LLVMParser::DeclarationFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiSubprogramFieldContext::VARIABLESCOLON() {
  return getToken(LLVMParser::VARIABLESCOLON, 0);
}

tree::TerminalNode* LLVMParser::DiSubprogramFieldContext::THROWNTYPESCOLON() {
  return getToken(LLVMParser::THROWNTYPESCOLON, 0);
}


size_t LLVMParser::DiSubprogramFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiSubprogramField;
}


std::any LLVMParser::DiSubprogramFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiSubprogramField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiSubprogramFieldContext* LLVMParser::diSubprogramField() {
  DiSubprogramFieldContext *_localctx = _tracker.createInstance<DiSubprogramFieldContext>(_ctx, getState());
  enterRule(_localctx, 570, LLVMParser::RuleDiSubprogramField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3258);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::NAMECOLON: {
        enterOuterAlt(_localctx, 1);
        setState(3230);
        nameField();
        break;
      }

      case LLVMParser::SCOPECOLON: {
        enterOuterAlt(_localctx, 2);
        setState(3231);
        scopeField();
        break;
      }

      case LLVMParser::LINKAGENAMECOLON: {
        enterOuterAlt(_localctx, 3);
        setState(3232);
        linkageNameField();
        break;
      }

      case LLVMParser::FILECOLON: {
        enterOuterAlt(_localctx, 4);
        setState(3233);
        fileField();
        break;
      }

      case LLVMParser::LINECOLON: {
        enterOuterAlt(_localctx, 5);
        setState(3234);
        lineField();
        break;
      }

      case LLVMParser::TYPECOLON: {
        enterOuterAlt(_localctx, 6);
        setState(3235);
        typeField();
        break;
      }

      case LLVMParser::ISLOCALCOLON: {
        enterOuterAlt(_localctx, 7);
        setState(3236);
        isLocalField();
        break;
      }

      case LLVMParser::ISDEFINITIONCOLON: {
        enterOuterAlt(_localctx, 8);
        setState(3237);
        isDefinitionField();
        break;
      }

      case LLVMParser::SCOPELINECOLON: {
        enterOuterAlt(_localctx, 9);
        setState(3238);
        match(LLVMParser::SCOPELINECOLON);
        setState(3239);
        intLit();
        break;
      }

      case LLVMParser::CONTAININGTYPECOLON: {
        enterOuterAlt(_localctx, 10);
        setState(3240);
        match(LLVMParser::CONTAININGTYPECOLON);
        setState(3241);
        mdField();
        break;
      }

      case LLVMParser::VIRTUALITYCOLON: {
        enterOuterAlt(_localctx, 11);
        setState(3242);
        match(LLVMParser::VIRTUALITYCOLON);
        setState(3243);
        dwarfVirtuality();
        break;
      }

      case LLVMParser::VIRTUALINDEXCOLON: {
        enterOuterAlt(_localctx, 12);
        setState(3244);
        match(LLVMParser::VIRTUALINDEXCOLON);
        setState(3245);
        intLit();
        break;
      }

      case LLVMParser::THISADJUSTMENTCOLON: {
        enterOuterAlt(_localctx, 13);
        setState(3246);
        match(LLVMParser::THISADJUSTMENTCOLON);
        setState(3247);
        intLit();
        break;
      }

      case LLVMParser::FLAGSCOLON: {
        enterOuterAlt(_localctx, 14);
        setState(3248);
        flagsField();
        break;
      }

      case LLVMParser::ISOPTIMIZEDCOLON: {
        enterOuterAlt(_localctx, 15);
        setState(3249);
        isOptimizedField();
        break;
      }

      case LLVMParser::UNITCOLON: {
        enterOuterAlt(_localctx, 16);
        setState(3250);
        match(LLVMParser::UNITCOLON);
        setState(3251);
        mdField();
        break;
      }

      case LLVMParser::TEMPLATEPARAMSCOLON: {
        enterOuterAlt(_localctx, 17);
        setState(3252);
        templateParamsField();
        break;
      }

      case LLVMParser::DECLARATIONCOLON: {
        enterOuterAlt(_localctx, 18);
        setState(3253);
        declarationField();
        break;
      }

      case LLVMParser::VARIABLESCOLON: {
        enterOuterAlt(_localctx, 19);
        setState(3254);
        match(LLVMParser::VARIABLESCOLON);
        setState(3255);
        mdField();
        break;
      }

      case LLVMParser::THROWNTYPESCOLON: {
        enterOuterAlt(_localctx, 20);
        setState(3256);
        match(LLVMParser::THROWNTYPESCOLON);
        setState(3257);
        mdField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiLexicalBlockContext ------------------------------------------------------------------

LLVMParser::DiLexicalBlockContext::DiLexicalBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiLexicalBlockContext::NOTDILEXICALBLOCK() {
  return getToken(LLVMParser::NOTDILEXICALBLOCK, 0);
}

tree::TerminalNode* LLVMParser::DiLexicalBlockContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiLexicalBlockFieldsContext* LLVMParser::DiLexicalBlockContext::diLexicalBlockFields() {
  return getRuleContext<LLVMParser::DiLexicalBlockFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiLexicalBlockContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiLexicalBlockContext::getRuleIndex() const {
  return LLVMParser::RuleDiLexicalBlock;
}


std::any LLVMParser::DiLexicalBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiLexicalBlock(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiLexicalBlockContext* LLVMParser::diLexicalBlock() {
  DiLexicalBlockContext *_localctx = _tracker.createInstance<DiLexicalBlockContext>(_ctx, getState());
  enterRule(_localctx, 572, LLVMParser::RuleDiLexicalBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3260);
    match(LLVMParser::NOTDILEXICALBLOCK);
    setState(3261);
    match(LLVMParser::LPAREN);
    setState(3262);
    diLexicalBlockFields();
    setState(3263);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiLexicalBlockFieldsContext ------------------------------------------------------------------

LLVMParser::DiLexicalBlockFieldsContext::DiLexicalBlockFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiLexicalBlockFieldListContext* LLVMParser::DiLexicalBlockFieldsContext::diLexicalBlockFieldList() {
  return getRuleContext<LLVMParser::DiLexicalBlockFieldListContext>(0);
}


size_t LLVMParser::DiLexicalBlockFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiLexicalBlockFields;
}


std::any LLVMParser::DiLexicalBlockFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiLexicalBlockFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiLexicalBlockFieldsContext* LLVMParser::diLexicalBlockFields() {
  DiLexicalBlockFieldsContext *_localctx = _tracker.createInstance<DiLexicalBlockFieldsContext>(_ctx, getState());
  enterRule(_localctx, 574, LLVMParser::RuleDiLexicalBlockFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3266);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::COLUMNCOLON || _la == LLVMParser::FILECOLON

    || _la == LLVMParser::LINECOLON || _la == LLVMParser::SCOPECOLON) {
      setState(3265);
      diLexicalBlockFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiLexicalBlockFieldListContext ------------------------------------------------------------------

LLVMParser::DiLexicalBlockFieldListContext::DiLexicalBlockFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiLexicalBlockFieldContext* LLVMParser::DiLexicalBlockFieldListContext::diLexicalBlockField() {
  return getRuleContext<LLVMParser::DiLexicalBlockFieldContext>(0);
}

LLVMParser::DiLexicalBlockFieldListContext* LLVMParser::DiLexicalBlockFieldListContext::diLexicalBlockFieldList() {
  return getRuleContext<LLVMParser::DiLexicalBlockFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiLexicalBlockFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiLexicalBlockFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiLexicalBlockFieldList;
}


std::any LLVMParser::DiLexicalBlockFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiLexicalBlockFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiLexicalBlockFieldListContext* LLVMParser::diLexicalBlockFieldList() {
   return diLexicalBlockFieldList(0);
}

LLVMParser::DiLexicalBlockFieldListContext* LLVMParser::diLexicalBlockFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiLexicalBlockFieldListContext *_localctx = _tracker.createInstance<DiLexicalBlockFieldListContext>(_ctx, parentState);
  LLVMParser::DiLexicalBlockFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 576;
  enterRecursionRule(_localctx, 576, LLVMParser::RuleDiLexicalBlockFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3269);
    diLexicalBlockField();
    _ctx->stop = _input->LT(-1);
    setState(3276);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiLexicalBlockFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiLexicalBlockFieldList);
        setState(3271);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3272);
        match(LLVMParser::COMMA);
        setState(3273);
        diLexicalBlockField(); 
      }
      setState(3278);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiLexicalBlockFieldContext ------------------------------------------------------------------

LLVMParser::DiLexicalBlockFieldContext::DiLexicalBlockFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::ScopeFieldContext* LLVMParser::DiLexicalBlockFieldContext::scopeField() {
  return getRuleContext<LLVMParser::ScopeFieldContext>(0);
}

LLVMParser::FileFieldContext* LLVMParser::DiLexicalBlockFieldContext::fileField() {
  return getRuleContext<LLVMParser::FileFieldContext>(0);
}

LLVMParser::LineFieldContext* LLVMParser::DiLexicalBlockFieldContext::lineField() {
  return getRuleContext<LLVMParser::LineFieldContext>(0);
}

LLVMParser::ColumnFieldContext* LLVMParser::DiLexicalBlockFieldContext::columnField() {
  return getRuleContext<LLVMParser::ColumnFieldContext>(0);
}


size_t LLVMParser::DiLexicalBlockFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiLexicalBlockField;
}


std::any LLVMParser::DiLexicalBlockFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiLexicalBlockField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiLexicalBlockFieldContext* LLVMParser::diLexicalBlockField() {
  DiLexicalBlockFieldContext *_localctx = _tracker.createInstance<DiLexicalBlockFieldContext>(_ctx, getState());
  enterRule(_localctx, 578, LLVMParser::RuleDiLexicalBlockField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3283);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::SCOPECOLON: {
        enterOuterAlt(_localctx, 1);
        setState(3279);
        scopeField();
        break;
      }

      case LLVMParser::FILECOLON: {
        enterOuterAlt(_localctx, 2);
        setState(3280);
        fileField();
        break;
      }

      case LLVMParser::LINECOLON: {
        enterOuterAlt(_localctx, 3);
        setState(3281);
        lineField();
        break;
      }

      case LLVMParser::COLUMNCOLON: {
        enterOuterAlt(_localctx, 4);
        setState(3282);
        columnField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiLexicalBlockFileContext ------------------------------------------------------------------

LLVMParser::DiLexicalBlockFileContext::DiLexicalBlockFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiLexicalBlockFileContext::NOTDILEXICALBLOCKFILE() {
  return getToken(LLVMParser::NOTDILEXICALBLOCKFILE, 0);
}

tree::TerminalNode* LLVMParser::DiLexicalBlockFileContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiLexicalBlockFileFieldsContext* LLVMParser::DiLexicalBlockFileContext::diLexicalBlockFileFields() {
  return getRuleContext<LLVMParser::DiLexicalBlockFileFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiLexicalBlockFileContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiLexicalBlockFileContext::getRuleIndex() const {
  return LLVMParser::RuleDiLexicalBlockFile;
}


std::any LLVMParser::DiLexicalBlockFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiLexicalBlockFile(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiLexicalBlockFileContext* LLVMParser::diLexicalBlockFile() {
  DiLexicalBlockFileContext *_localctx = _tracker.createInstance<DiLexicalBlockFileContext>(_ctx, getState());
  enterRule(_localctx, 580, LLVMParser::RuleDiLexicalBlockFile);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3285);
    match(LLVMParser::NOTDILEXICALBLOCKFILE);
    setState(3286);
    match(LLVMParser::LPAREN);
    setState(3287);
    diLexicalBlockFileFields();
    setState(3288);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiLexicalBlockFileFieldsContext ------------------------------------------------------------------

LLVMParser::DiLexicalBlockFileFieldsContext::DiLexicalBlockFileFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiLexicalBlockFileFieldListContext* LLVMParser::DiLexicalBlockFileFieldsContext::diLexicalBlockFileFieldList() {
  return getRuleContext<LLVMParser::DiLexicalBlockFileFieldListContext>(0);
}


size_t LLVMParser::DiLexicalBlockFileFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiLexicalBlockFileFields;
}


std::any LLVMParser::DiLexicalBlockFileFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiLexicalBlockFileFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiLexicalBlockFileFieldsContext* LLVMParser::diLexicalBlockFileFields() {
  DiLexicalBlockFileFieldsContext *_localctx = _tracker.createInstance<DiLexicalBlockFileFieldsContext>(_ctx, getState());
  enterRule(_localctx, 582, LLVMParser::RuleDiLexicalBlockFileFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3291);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::DISCRIMINATORCOLON

    || _la == LLVMParser::FILECOLON || _la == LLVMParser::SCOPECOLON) {
      setState(3290);
      diLexicalBlockFileFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiLexicalBlockFileFieldListContext ------------------------------------------------------------------

LLVMParser::DiLexicalBlockFileFieldListContext::DiLexicalBlockFileFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiLexicalBlockFileFieldContext* LLVMParser::DiLexicalBlockFileFieldListContext::diLexicalBlockFileField() {
  return getRuleContext<LLVMParser::DiLexicalBlockFileFieldContext>(0);
}

LLVMParser::DiLexicalBlockFileFieldListContext* LLVMParser::DiLexicalBlockFileFieldListContext::diLexicalBlockFileFieldList() {
  return getRuleContext<LLVMParser::DiLexicalBlockFileFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiLexicalBlockFileFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiLexicalBlockFileFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiLexicalBlockFileFieldList;
}


std::any LLVMParser::DiLexicalBlockFileFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiLexicalBlockFileFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiLexicalBlockFileFieldListContext* LLVMParser::diLexicalBlockFileFieldList() {
   return diLexicalBlockFileFieldList(0);
}

LLVMParser::DiLexicalBlockFileFieldListContext* LLVMParser::diLexicalBlockFileFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiLexicalBlockFileFieldListContext *_localctx = _tracker.createInstance<DiLexicalBlockFileFieldListContext>(_ctx, parentState);
  LLVMParser::DiLexicalBlockFileFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 584;
  enterRecursionRule(_localctx, 584, LLVMParser::RuleDiLexicalBlockFileFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3294);
    diLexicalBlockFileField();
    _ctx->stop = _input->LT(-1);
    setState(3301);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiLexicalBlockFileFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiLexicalBlockFileFieldList);
        setState(3296);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3297);
        match(LLVMParser::COMMA);
        setState(3298);
        diLexicalBlockFileField(); 
      }
      setState(3303);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiLexicalBlockFileFieldContext ------------------------------------------------------------------

LLVMParser::DiLexicalBlockFileFieldContext::DiLexicalBlockFileFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::ScopeFieldContext* LLVMParser::DiLexicalBlockFileFieldContext::scopeField() {
  return getRuleContext<LLVMParser::ScopeFieldContext>(0);
}

LLVMParser::FileFieldContext* LLVMParser::DiLexicalBlockFileFieldContext::fileField() {
  return getRuleContext<LLVMParser::FileFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiLexicalBlockFileFieldContext::DISCRIMINATORCOLON() {
  return getToken(LLVMParser::DISCRIMINATORCOLON, 0);
}

LLVMParser::IntLitContext* LLVMParser::DiLexicalBlockFileFieldContext::intLit() {
  return getRuleContext<LLVMParser::IntLitContext>(0);
}


size_t LLVMParser::DiLexicalBlockFileFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiLexicalBlockFileField;
}


std::any LLVMParser::DiLexicalBlockFileFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiLexicalBlockFileField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiLexicalBlockFileFieldContext* LLVMParser::diLexicalBlockFileField() {
  DiLexicalBlockFileFieldContext *_localctx = _tracker.createInstance<DiLexicalBlockFileFieldContext>(_ctx, getState());
  enterRule(_localctx, 586, LLVMParser::RuleDiLexicalBlockFileField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3308);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::SCOPECOLON: {
        enterOuterAlt(_localctx, 1);
        setState(3304);
        scopeField();
        break;
      }

      case LLVMParser::FILECOLON: {
        enterOuterAlt(_localctx, 2);
        setState(3305);
        fileField();
        break;
      }

      case LLVMParser::DISCRIMINATORCOLON: {
        enterOuterAlt(_localctx, 3);
        setState(3306);
        match(LLVMParser::DISCRIMINATORCOLON);
        setState(3307);
        intLit();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiLocationContext ------------------------------------------------------------------

LLVMParser::DiLocationContext::DiLocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiLocationContext::NOTDILOCATION() {
  return getToken(LLVMParser::NOTDILOCATION, 0);
}

tree::TerminalNode* LLVMParser::DiLocationContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiLocationFieldsContext* LLVMParser::DiLocationContext::diLocationFields() {
  return getRuleContext<LLVMParser::DiLocationFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiLocationContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiLocationContext::getRuleIndex() const {
  return LLVMParser::RuleDiLocation;
}


std::any LLVMParser::DiLocationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiLocation(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiLocationContext* LLVMParser::diLocation() {
  DiLocationContext *_localctx = _tracker.createInstance<DiLocationContext>(_ctx, getState());
  enterRule(_localctx, 588, LLVMParser::RuleDiLocation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3310);
    match(LLVMParser::NOTDILOCATION);
    setState(3311);
    match(LLVMParser::LPAREN);
    setState(3312);
    diLocationFields();
    setState(3313);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiLocationFieldsContext ------------------------------------------------------------------

LLVMParser::DiLocationFieldsContext::DiLocationFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiLocationFieldListContext* LLVMParser::DiLocationFieldsContext::diLocationFieldList() {
  return getRuleContext<LLVMParser::DiLocationFieldListContext>(0);
}


size_t LLVMParser::DiLocationFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiLocationFields;
}


std::any LLVMParser::DiLocationFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiLocationFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiLocationFieldsContext* LLVMParser::diLocationFields() {
  DiLocationFieldsContext *_localctx = _tracker.createInstance<DiLocationFieldsContext>(_ctx, getState());
  enterRule(_localctx, 590, LLVMParser::RuleDiLocationFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3316);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::COLUMNCOLON || _la == LLVMParser::INLINEDATCOLON

    || _la == LLVMParser::LINECOLON || _la == LLVMParser::SCOPECOLON) {
      setState(3315);
      diLocationFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiLocationFieldListContext ------------------------------------------------------------------

LLVMParser::DiLocationFieldListContext::DiLocationFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiLocationFieldContext* LLVMParser::DiLocationFieldListContext::diLocationField() {
  return getRuleContext<LLVMParser::DiLocationFieldContext>(0);
}

LLVMParser::DiLocationFieldListContext* LLVMParser::DiLocationFieldListContext::diLocationFieldList() {
  return getRuleContext<LLVMParser::DiLocationFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiLocationFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiLocationFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiLocationFieldList;
}


std::any LLVMParser::DiLocationFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiLocationFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiLocationFieldListContext* LLVMParser::diLocationFieldList() {
   return diLocationFieldList(0);
}

LLVMParser::DiLocationFieldListContext* LLVMParser::diLocationFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiLocationFieldListContext *_localctx = _tracker.createInstance<DiLocationFieldListContext>(_ctx, parentState);
  LLVMParser::DiLocationFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 592;
  enterRecursionRule(_localctx, 592, LLVMParser::RuleDiLocationFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3319);
    diLocationField();
    _ctx->stop = _input->LT(-1);
    setState(3326);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiLocationFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiLocationFieldList);
        setState(3321);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3322);
        match(LLVMParser::COMMA);
        setState(3323);
        diLocationField(); 
      }
      setState(3328);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiLocationFieldContext ------------------------------------------------------------------

LLVMParser::DiLocationFieldContext::DiLocationFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::LineFieldContext* LLVMParser::DiLocationFieldContext::lineField() {
  return getRuleContext<LLVMParser::LineFieldContext>(0);
}

LLVMParser::ColumnFieldContext* LLVMParser::DiLocationFieldContext::columnField() {
  return getRuleContext<LLVMParser::ColumnFieldContext>(0);
}

LLVMParser::ScopeFieldContext* LLVMParser::DiLocationFieldContext::scopeField() {
  return getRuleContext<LLVMParser::ScopeFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiLocationFieldContext::INLINEDATCOLON() {
  return getToken(LLVMParser::INLINEDATCOLON, 0);
}

LLVMParser::MdFieldContext* LLVMParser::DiLocationFieldContext::mdField() {
  return getRuleContext<LLVMParser::MdFieldContext>(0);
}


size_t LLVMParser::DiLocationFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiLocationField;
}


std::any LLVMParser::DiLocationFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiLocationField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiLocationFieldContext* LLVMParser::diLocationField() {
  DiLocationFieldContext *_localctx = _tracker.createInstance<DiLocationFieldContext>(_ctx, getState());
  enterRule(_localctx, 594, LLVMParser::RuleDiLocationField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3334);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::LINECOLON: {
        enterOuterAlt(_localctx, 1);
        setState(3329);
        lineField();
        break;
      }

      case LLVMParser::COLUMNCOLON: {
        enterOuterAlt(_localctx, 2);
        setState(3330);
        columnField();
        break;
      }

      case LLVMParser::SCOPECOLON: {
        enterOuterAlt(_localctx, 3);
        setState(3331);
        scopeField();
        break;
      }

      case LLVMParser::INLINEDATCOLON: {
        enterOuterAlt(_localctx, 4);
        setState(3332);
        match(LLVMParser::INLINEDATCOLON);
        setState(3333);
        mdField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiLocalVariableContext ------------------------------------------------------------------

LLVMParser::DiLocalVariableContext::DiLocalVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiLocalVariableContext::NOTDILOCALVARIABLE() {
  return getToken(LLVMParser::NOTDILOCALVARIABLE, 0);
}

tree::TerminalNode* LLVMParser::DiLocalVariableContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiLocalVariableFieldsContext* LLVMParser::DiLocalVariableContext::diLocalVariableFields() {
  return getRuleContext<LLVMParser::DiLocalVariableFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiLocalVariableContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiLocalVariableContext::getRuleIndex() const {
  return LLVMParser::RuleDiLocalVariable;
}


std::any LLVMParser::DiLocalVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiLocalVariable(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiLocalVariableContext* LLVMParser::diLocalVariable() {
  DiLocalVariableContext *_localctx = _tracker.createInstance<DiLocalVariableContext>(_ctx, getState());
  enterRule(_localctx, 596, LLVMParser::RuleDiLocalVariable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3336);
    match(LLVMParser::NOTDILOCALVARIABLE);
    setState(3337);
    match(LLVMParser::LPAREN);
    setState(3338);
    diLocalVariableFields();
    setState(3339);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiLocalVariableFieldsContext ------------------------------------------------------------------

LLVMParser::DiLocalVariableFieldsContext::DiLocalVariableFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiLocalVariableFieldListContext* LLVMParser::DiLocalVariableFieldsContext::diLocalVariableFieldList() {
  return getRuleContext<LLVMParser::DiLocalVariableFieldListContext>(0);
}


size_t LLVMParser::DiLocalVariableFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiLocalVariableFields;
}


std::any LLVMParser::DiLocalVariableFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiLocalVariableFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiLocalVariableFieldsContext* LLVMParser::diLocalVariableFields() {
  DiLocalVariableFieldsContext *_localctx = _tracker.createInstance<DiLocalVariableFieldsContext>(_ctx, getState());
  enterRule(_localctx, 598, LLVMParser::RuleDiLocalVariableFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3342);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::ALIGNCOLON

    || _la == LLVMParser::ARGCOLON || ((((_la - 154) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 154)) & 1152921504606846985) != 0) || _la == LLVMParser::NAMECOLON || _la == LLVMParser::SCOPECOLON

    || _la == LLVMParser::TYPECOLON) {
      setState(3341);
      diLocalVariableFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiLocalVariableFieldListContext ------------------------------------------------------------------

LLVMParser::DiLocalVariableFieldListContext::DiLocalVariableFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiLocalVariableFieldContext* LLVMParser::DiLocalVariableFieldListContext::diLocalVariableField() {
  return getRuleContext<LLVMParser::DiLocalVariableFieldContext>(0);
}

LLVMParser::DiLocalVariableFieldListContext* LLVMParser::DiLocalVariableFieldListContext::diLocalVariableFieldList() {
  return getRuleContext<LLVMParser::DiLocalVariableFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiLocalVariableFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiLocalVariableFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiLocalVariableFieldList;
}


std::any LLVMParser::DiLocalVariableFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiLocalVariableFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiLocalVariableFieldListContext* LLVMParser::diLocalVariableFieldList() {
   return diLocalVariableFieldList(0);
}

LLVMParser::DiLocalVariableFieldListContext* LLVMParser::diLocalVariableFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiLocalVariableFieldListContext *_localctx = _tracker.createInstance<DiLocalVariableFieldListContext>(_ctx, parentState);
  LLVMParser::DiLocalVariableFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 600;
  enterRecursionRule(_localctx, 600, LLVMParser::RuleDiLocalVariableFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3345);
    diLocalVariableField();
    _ctx->stop = _input->LT(-1);
    setState(3352);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 151, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiLocalVariableFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiLocalVariableFieldList);
        setState(3347);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3348);
        match(LLVMParser::COMMA);
        setState(3349);
        diLocalVariableField(); 
      }
      setState(3354);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 151, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiLocalVariableFieldContext ------------------------------------------------------------------

LLVMParser::DiLocalVariableFieldContext::DiLocalVariableFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::NameFieldContext* LLVMParser::DiLocalVariableFieldContext::nameField() {
  return getRuleContext<LLVMParser::NameFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiLocalVariableFieldContext::ARGCOLON() {
  return getToken(LLVMParser::ARGCOLON, 0);
}

LLVMParser::IntLitContext* LLVMParser::DiLocalVariableFieldContext::intLit() {
  return getRuleContext<LLVMParser::IntLitContext>(0);
}

LLVMParser::ScopeFieldContext* LLVMParser::DiLocalVariableFieldContext::scopeField() {
  return getRuleContext<LLVMParser::ScopeFieldContext>(0);
}

LLVMParser::FileFieldContext* LLVMParser::DiLocalVariableFieldContext::fileField() {
  return getRuleContext<LLVMParser::FileFieldContext>(0);
}

LLVMParser::LineFieldContext* LLVMParser::DiLocalVariableFieldContext::lineField() {
  return getRuleContext<LLVMParser::LineFieldContext>(0);
}

LLVMParser::TypeFieldContext* LLVMParser::DiLocalVariableFieldContext::typeField() {
  return getRuleContext<LLVMParser::TypeFieldContext>(0);
}

LLVMParser::FlagsFieldContext* LLVMParser::DiLocalVariableFieldContext::flagsField() {
  return getRuleContext<LLVMParser::FlagsFieldContext>(0);
}

LLVMParser::AlignFieldContext* LLVMParser::DiLocalVariableFieldContext::alignField() {
  return getRuleContext<LLVMParser::AlignFieldContext>(0);
}


size_t LLVMParser::DiLocalVariableFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiLocalVariableField;
}


std::any LLVMParser::DiLocalVariableFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiLocalVariableField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiLocalVariableFieldContext* LLVMParser::diLocalVariableField() {
  DiLocalVariableFieldContext *_localctx = _tracker.createInstance<DiLocalVariableFieldContext>(_ctx, getState());
  enterRule(_localctx, 602, LLVMParser::RuleDiLocalVariableField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3364);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::NAMECOLON: {
        enterOuterAlt(_localctx, 1);
        setState(3355);
        nameField();
        break;
      }

      case LLVMParser::ARGCOLON: {
        enterOuterAlt(_localctx, 2);
        setState(3356);
        match(LLVMParser::ARGCOLON);
        setState(3357);
        intLit();
        break;
      }

      case LLVMParser::SCOPECOLON: {
        enterOuterAlt(_localctx, 3);
        setState(3358);
        scopeField();
        break;
      }

      case LLVMParser::FILECOLON: {
        enterOuterAlt(_localctx, 4);
        setState(3359);
        fileField();
        break;
      }

      case LLVMParser::LINECOLON: {
        enterOuterAlt(_localctx, 5);
        setState(3360);
        lineField();
        break;
      }

      case LLVMParser::TYPECOLON: {
        enterOuterAlt(_localctx, 6);
        setState(3361);
        typeField();
        break;
      }

      case LLVMParser::FLAGSCOLON: {
        enterOuterAlt(_localctx, 7);
        setState(3362);
        flagsField();
        break;
      }

      case LLVMParser::ALIGNCOLON: {
        enterOuterAlt(_localctx, 8);
        setState(3363);
        alignField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiExpressionContext ------------------------------------------------------------------

LLVMParser::DiExpressionContext::DiExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiExpressionContext::NOTDIEXPRESSION() {
  return getToken(LLVMParser::NOTDIEXPRESSION, 0);
}

tree::TerminalNode* LLVMParser::DiExpressionContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiExpressionFieldsContext* LLVMParser::DiExpressionContext::diExpressionFields() {
  return getRuleContext<LLVMParser::DiExpressionFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiExpressionContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiExpressionContext::getRuleIndex() const {
  return LLVMParser::RuleDiExpression;
}


std::any LLVMParser::DiExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiExpression(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiExpressionContext* LLVMParser::diExpression() {
  DiExpressionContext *_localctx = _tracker.createInstance<DiExpressionContext>(_ctx, getState());
  enterRule(_localctx, 604, LLVMParser::RuleDiExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3366);
    match(LLVMParser::NOTDIEXPRESSION);
    setState(3367);
    match(LLVMParser::LPAREN);
    setState(3368);
    diExpressionFields();
    setState(3369);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiExpressionFieldsContext ------------------------------------------------------------------

LLVMParser::DiExpressionFieldsContext::DiExpressionFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiExpressionFieldListContext* LLVMParser::DiExpressionFieldsContext::diExpressionFieldList() {
  return getRuleContext<LLVMParser::DiExpressionFieldListContext>(0);
}


size_t LLVMParser::DiExpressionFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiExpressionFields;
}


std::any LLVMParser::DiExpressionFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiExpressionFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiExpressionFieldsContext* LLVMParser::diExpressionFields() {
  DiExpressionFieldsContext *_localctx = _tracker.createInstance<DiExpressionFieldsContext>(_ctx, getState());
  enterRule(_localctx, 606, LLVMParser::RuleDiExpressionFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3372);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::DWARF_OP

    || _la == LLVMParser::INT_LIT) {
      setState(3371);
      diExpressionFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiExpressionFieldListContext ------------------------------------------------------------------

LLVMParser::DiExpressionFieldListContext::DiExpressionFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiExpressionFieldContext* LLVMParser::DiExpressionFieldListContext::diExpressionField() {
  return getRuleContext<LLVMParser::DiExpressionFieldContext>(0);
}

LLVMParser::DiExpressionFieldListContext* LLVMParser::DiExpressionFieldListContext::diExpressionFieldList() {
  return getRuleContext<LLVMParser::DiExpressionFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiExpressionFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiExpressionFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiExpressionFieldList;
}


std::any LLVMParser::DiExpressionFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiExpressionFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiExpressionFieldListContext* LLVMParser::diExpressionFieldList() {
   return diExpressionFieldList(0);
}

LLVMParser::DiExpressionFieldListContext* LLVMParser::diExpressionFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiExpressionFieldListContext *_localctx = _tracker.createInstance<DiExpressionFieldListContext>(_ctx, parentState);
  LLVMParser::DiExpressionFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 608;
  enterRecursionRule(_localctx, 608, LLVMParser::RuleDiExpressionFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3375);
    diExpressionField();
    _ctx->stop = _input->LT(-1);
    setState(3382);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiExpressionFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiExpressionFieldList);
        setState(3377);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3378);
        match(LLVMParser::COMMA);
        setState(3379);
        diExpressionField(); 
      }
      setState(3384);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiExpressionFieldContext ------------------------------------------------------------------

LLVMParser::DiExpressionFieldContext::DiExpressionFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiExpressionFieldContext::INT_LIT() {
  return getToken(LLVMParser::INT_LIT, 0);
}

LLVMParser::DwarfOpContext* LLVMParser::DiExpressionFieldContext::dwarfOp() {
  return getRuleContext<LLVMParser::DwarfOpContext>(0);
}


size_t LLVMParser::DiExpressionFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiExpressionField;
}


std::any LLVMParser::DiExpressionFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiExpressionField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiExpressionFieldContext* LLVMParser::diExpressionField() {
  DiExpressionFieldContext *_localctx = _tracker.createInstance<DiExpressionFieldContext>(_ctx, getState());
  enterRule(_localctx, 610, LLVMParser::RuleDiExpressionField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3387);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::INT_LIT: {
        enterOuterAlt(_localctx, 1);
        setState(3385);
        match(LLVMParser::INT_LIT);
        break;
      }

      case LLVMParser::DWARF_OP: {
        enterOuterAlt(_localctx, 2);
        setState(3386);
        dwarfOp();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiGlobalVariableExpressionContext ------------------------------------------------------------------

LLVMParser::DiGlobalVariableExpressionContext::DiGlobalVariableExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiGlobalVariableExpressionContext::NOTDIGLOBALVARIABLEEXPRESSION() {
  return getToken(LLVMParser::NOTDIGLOBALVARIABLEEXPRESSION, 0);
}

tree::TerminalNode* LLVMParser::DiGlobalVariableExpressionContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiGlobalVariableExpressionFieldsContext* LLVMParser::DiGlobalVariableExpressionContext::diGlobalVariableExpressionFields() {
  return getRuleContext<LLVMParser::DiGlobalVariableExpressionFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiGlobalVariableExpressionContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiGlobalVariableExpressionContext::getRuleIndex() const {
  return LLVMParser::RuleDiGlobalVariableExpression;
}


std::any LLVMParser::DiGlobalVariableExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiGlobalVariableExpression(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiGlobalVariableExpressionContext* LLVMParser::diGlobalVariableExpression() {
  DiGlobalVariableExpressionContext *_localctx = _tracker.createInstance<DiGlobalVariableExpressionContext>(_ctx, getState());
  enterRule(_localctx, 612, LLVMParser::RuleDiGlobalVariableExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3389);
    match(LLVMParser::NOTDIGLOBALVARIABLEEXPRESSION);
    setState(3390);
    match(LLVMParser::LPAREN);
    setState(3391);
    diGlobalVariableExpressionFields();
    setState(3392);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiGlobalVariableExpressionFieldsContext ------------------------------------------------------------------

LLVMParser::DiGlobalVariableExpressionFieldsContext::DiGlobalVariableExpressionFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiGlobalVariableExpressionFieldListContext* LLVMParser::DiGlobalVariableExpressionFieldsContext::diGlobalVariableExpressionFieldList() {
  return getRuleContext<LLVMParser::DiGlobalVariableExpressionFieldListContext>(0);
}


size_t LLVMParser::DiGlobalVariableExpressionFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiGlobalVariableExpressionFields;
}


std::any LLVMParser::DiGlobalVariableExpressionFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiGlobalVariableExpressionFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiGlobalVariableExpressionFieldsContext* LLVMParser::diGlobalVariableExpressionFields() {
  DiGlobalVariableExpressionFieldsContext *_localctx = _tracker.createInstance<DiGlobalVariableExpressionFieldsContext>(_ctx, getState());
  enterRule(_localctx, 614, LLVMParser::RuleDiGlobalVariableExpressionFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3395);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::EXPRCOLON || _la == LLVMParser::VARCOLON) {
      setState(3394);
      diGlobalVariableExpressionFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiGlobalVariableExpressionFieldListContext ------------------------------------------------------------------

LLVMParser::DiGlobalVariableExpressionFieldListContext::DiGlobalVariableExpressionFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiGlobalVariableExpressionFieldContext* LLVMParser::DiGlobalVariableExpressionFieldListContext::diGlobalVariableExpressionField() {
  return getRuleContext<LLVMParser::DiGlobalVariableExpressionFieldContext>(0);
}

LLVMParser::DiGlobalVariableExpressionFieldListContext* LLVMParser::DiGlobalVariableExpressionFieldListContext::diGlobalVariableExpressionFieldList() {
  return getRuleContext<LLVMParser::DiGlobalVariableExpressionFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiGlobalVariableExpressionFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiGlobalVariableExpressionFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiGlobalVariableExpressionFieldList;
}


std::any LLVMParser::DiGlobalVariableExpressionFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiGlobalVariableExpressionFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiGlobalVariableExpressionFieldListContext* LLVMParser::diGlobalVariableExpressionFieldList() {
   return diGlobalVariableExpressionFieldList(0);
}

LLVMParser::DiGlobalVariableExpressionFieldListContext* LLVMParser::diGlobalVariableExpressionFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiGlobalVariableExpressionFieldListContext *_localctx = _tracker.createInstance<DiGlobalVariableExpressionFieldListContext>(_ctx, parentState);
  LLVMParser::DiGlobalVariableExpressionFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 616;
  enterRecursionRule(_localctx, 616, LLVMParser::RuleDiGlobalVariableExpressionFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3398);
    diGlobalVariableExpressionField();
    _ctx->stop = _input->LT(-1);
    setState(3405);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiGlobalVariableExpressionFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiGlobalVariableExpressionFieldList);
        setState(3400);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3401);
        match(LLVMParser::COMMA);
        setState(3402);
        diGlobalVariableExpressionField(); 
      }
      setState(3407);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiGlobalVariableExpressionFieldContext ------------------------------------------------------------------

LLVMParser::DiGlobalVariableExpressionFieldContext::DiGlobalVariableExpressionFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiGlobalVariableExpressionFieldContext::VARCOLON() {
  return getToken(LLVMParser::VARCOLON, 0);
}

LLVMParser::MdFieldContext* LLVMParser::DiGlobalVariableExpressionFieldContext::mdField() {
  return getRuleContext<LLVMParser::MdFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiGlobalVariableExpressionFieldContext::EXPRCOLON() {
  return getToken(LLVMParser::EXPRCOLON, 0);
}


size_t LLVMParser::DiGlobalVariableExpressionFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiGlobalVariableExpressionField;
}


std::any LLVMParser::DiGlobalVariableExpressionFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiGlobalVariableExpressionField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiGlobalVariableExpressionFieldContext* LLVMParser::diGlobalVariableExpressionField() {
  DiGlobalVariableExpressionFieldContext *_localctx = _tracker.createInstance<DiGlobalVariableExpressionFieldContext>(_ctx, getState());
  enterRule(_localctx, 618, LLVMParser::RuleDiGlobalVariableExpressionField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3412);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::VARCOLON: {
        enterOuterAlt(_localctx, 1);
        setState(3408);
        match(LLVMParser::VARCOLON);
        setState(3409);
        mdField();
        break;
      }

      case LLVMParser::EXPRCOLON: {
        enterOuterAlt(_localctx, 2);
        setState(3410);
        match(LLVMParser::EXPRCOLON);
        setState(3411);
        mdField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiObjCPropertyContext ------------------------------------------------------------------

LLVMParser::DiObjCPropertyContext::DiObjCPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiObjCPropertyContext::NOTDIOBJCPROPERTY() {
  return getToken(LLVMParser::NOTDIOBJCPROPERTY, 0);
}

tree::TerminalNode* LLVMParser::DiObjCPropertyContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiObjCPropertyFieldsContext* LLVMParser::DiObjCPropertyContext::diObjCPropertyFields() {
  return getRuleContext<LLVMParser::DiObjCPropertyFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiObjCPropertyContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiObjCPropertyContext::getRuleIndex() const {
  return LLVMParser::RuleDiObjCProperty;
}


std::any LLVMParser::DiObjCPropertyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiObjCProperty(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiObjCPropertyContext* LLVMParser::diObjCProperty() {
  DiObjCPropertyContext *_localctx = _tracker.createInstance<DiObjCPropertyContext>(_ctx, getState());
  enterRule(_localctx, 620, LLVMParser::RuleDiObjCProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3414);
    match(LLVMParser::NOTDIOBJCPROPERTY);
    setState(3415);
    match(LLVMParser::LPAREN);
    setState(3416);
    diObjCPropertyFields();
    setState(3417);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiObjCPropertyFieldsContext ------------------------------------------------------------------

LLVMParser::DiObjCPropertyFieldsContext::DiObjCPropertyFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiObjCPropertyFieldListContext* LLVMParser::DiObjCPropertyFieldsContext::diObjCPropertyFieldList() {
  return getRuleContext<LLVMParser::DiObjCPropertyFieldListContext>(0);
}


size_t LLVMParser::DiObjCPropertyFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiObjCPropertyFields;
}


std::any LLVMParser::DiObjCPropertyFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiObjCPropertyFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiObjCPropertyFieldsContext* LLVMParser::diObjCPropertyFields() {
  DiObjCPropertyFieldsContext *_localctx = _tracker.createInstance<DiObjCPropertyFieldsContext>(_ctx, getState());
  enterRule(_localctx, 622, LLVMParser::RuleDiObjCPropertyFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3420);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::ATTRIBUTESCOLON || ((((_la - 154) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 154)) & 1152921504607109121) != 0) || _la == LLVMParser::NAMECOLON || _la == LLVMParser::SETTERCOLON

    || _la == LLVMParser::TYPECOLON) {
      setState(3419);
      diObjCPropertyFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiObjCPropertyFieldListContext ------------------------------------------------------------------

LLVMParser::DiObjCPropertyFieldListContext::DiObjCPropertyFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiObjCPropertyFieldContext* LLVMParser::DiObjCPropertyFieldListContext::diObjCPropertyField() {
  return getRuleContext<LLVMParser::DiObjCPropertyFieldContext>(0);
}

LLVMParser::DiObjCPropertyFieldListContext* LLVMParser::DiObjCPropertyFieldListContext::diObjCPropertyFieldList() {
  return getRuleContext<LLVMParser::DiObjCPropertyFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiObjCPropertyFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiObjCPropertyFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiObjCPropertyFieldList;
}


std::any LLVMParser::DiObjCPropertyFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiObjCPropertyFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiObjCPropertyFieldListContext* LLVMParser::diObjCPropertyFieldList() {
   return diObjCPropertyFieldList(0);
}

LLVMParser::DiObjCPropertyFieldListContext* LLVMParser::diObjCPropertyFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiObjCPropertyFieldListContext *_localctx = _tracker.createInstance<DiObjCPropertyFieldListContext>(_ctx, parentState);
  LLVMParser::DiObjCPropertyFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 624;
  enterRecursionRule(_localctx, 624, LLVMParser::RuleDiObjCPropertyFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3423);
    diObjCPropertyField();
    _ctx->stop = _input->LT(-1);
    setState(3430);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiObjCPropertyFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiObjCPropertyFieldList);
        setState(3425);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3426);
        match(LLVMParser::COMMA);
        setState(3427);
        diObjCPropertyField(); 
      }
      setState(3432);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiObjCPropertyFieldContext ------------------------------------------------------------------

LLVMParser::DiObjCPropertyFieldContext::DiObjCPropertyFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::NameFieldContext* LLVMParser::DiObjCPropertyFieldContext::nameField() {
  return getRuleContext<LLVMParser::NameFieldContext>(0);
}

LLVMParser::FileFieldContext* LLVMParser::DiObjCPropertyFieldContext::fileField() {
  return getRuleContext<LLVMParser::FileFieldContext>(0);
}

LLVMParser::LineFieldContext* LLVMParser::DiObjCPropertyFieldContext::lineField() {
  return getRuleContext<LLVMParser::LineFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiObjCPropertyFieldContext::SETTERCOLON() {
  return getToken(LLVMParser::SETTERCOLON, 0);
}

LLVMParser::StringLitContext* LLVMParser::DiObjCPropertyFieldContext::stringLit() {
  return getRuleContext<LLVMParser::StringLitContext>(0);
}

tree::TerminalNode* LLVMParser::DiObjCPropertyFieldContext::GETTERCOLON() {
  return getToken(LLVMParser::GETTERCOLON, 0);
}

tree::TerminalNode* LLVMParser::DiObjCPropertyFieldContext::ATTRIBUTESCOLON() {
  return getToken(LLVMParser::ATTRIBUTESCOLON, 0);
}

LLVMParser::IntLitContext* LLVMParser::DiObjCPropertyFieldContext::intLit() {
  return getRuleContext<LLVMParser::IntLitContext>(0);
}

LLVMParser::TypeFieldContext* LLVMParser::DiObjCPropertyFieldContext::typeField() {
  return getRuleContext<LLVMParser::TypeFieldContext>(0);
}


size_t LLVMParser::DiObjCPropertyFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiObjCPropertyField;
}


std::any LLVMParser::DiObjCPropertyFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiObjCPropertyField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiObjCPropertyFieldContext* LLVMParser::diObjCPropertyField() {
  DiObjCPropertyFieldContext *_localctx = _tracker.createInstance<DiObjCPropertyFieldContext>(_ctx, getState());
  enterRule(_localctx, 626, LLVMParser::RuleDiObjCPropertyField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3443);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::NAMECOLON: {
        enterOuterAlt(_localctx, 1);
        setState(3433);
        nameField();
        break;
      }

      case LLVMParser::FILECOLON: {
        enterOuterAlt(_localctx, 2);
        setState(3434);
        fileField();
        break;
      }

      case LLVMParser::LINECOLON: {
        enterOuterAlt(_localctx, 3);
        setState(3435);
        lineField();
        break;
      }

      case LLVMParser::SETTERCOLON: {
        enterOuterAlt(_localctx, 4);
        setState(3436);
        match(LLVMParser::SETTERCOLON);
        setState(3437);
        stringLit();
        break;
      }

      case LLVMParser::GETTERCOLON: {
        enterOuterAlt(_localctx, 5);
        setState(3438);
        match(LLVMParser::GETTERCOLON);
        setState(3439);
        stringLit();
        break;
      }

      case LLVMParser::ATTRIBUTESCOLON: {
        enterOuterAlt(_localctx, 6);
        setState(3440);
        match(LLVMParser::ATTRIBUTESCOLON);
        setState(3441);
        intLit();
        break;
      }

      case LLVMParser::TYPECOLON: {
        enterOuterAlt(_localctx, 7);
        setState(3442);
        typeField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiImportedEntityContext ------------------------------------------------------------------

LLVMParser::DiImportedEntityContext::DiImportedEntityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiImportedEntityContext::NOTDIIMPORTEDENTITY() {
  return getToken(LLVMParser::NOTDIIMPORTEDENTITY, 0);
}

tree::TerminalNode* LLVMParser::DiImportedEntityContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiImportedEntityFieldsContext* LLVMParser::DiImportedEntityContext::diImportedEntityFields() {
  return getRuleContext<LLVMParser::DiImportedEntityFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiImportedEntityContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiImportedEntityContext::getRuleIndex() const {
  return LLVMParser::RuleDiImportedEntity;
}


std::any LLVMParser::DiImportedEntityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiImportedEntity(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiImportedEntityContext* LLVMParser::diImportedEntity() {
  DiImportedEntityContext *_localctx = _tracker.createInstance<DiImportedEntityContext>(_ctx, getState());
  enterRule(_localctx, 628, LLVMParser::RuleDiImportedEntity);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3445);
    match(LLVMParser::NOTDIIMPORTEDENTITY);
    setState(3446);
    match(LLVMParser::LPAREN);
    setState(3447);
    diImportedEntityFields();
    setState(3448);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiImportedEntityFieldsContext ------------------------------------------------------------------

LLVMParser::DiImportedEntityFieldsContext::DiImportedEntityFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiImportedEntityFieldListContext* LLVMParser::DiImportedEntityFieldsContext::diImportedEntityFieldList() {
  return getRuleContext<LLVMParser::DiImportedEntityFieldListContext>(0);
}


size_t LLVMParser::DiImportedEntityFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiImportedEntityFields;
}


std::any LLVMParser::DiImportedEntityFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiImportedEntityFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiImportedEntityFieldsContext* LLVMParser::diImportedEntityFields() {
  DiImportedEntityFieldsContext *_localctx = _tracker.createInstance<DiImportedEntityFieldsContext>(_ctx, getState());
  enterRule(_localctx, 630, LLVMParser::RuleDiImportedEntityFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3451);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::ENTITYCOLON

    || _la == LLVMParser::FILECOLON || _la == LLVMParser::LINECOLON

    || _la == LLVMParser::NAMECOLON || _la == LLVMParser::SCOPECOLON

    || _la == LLVMParser::TAGCOLON) {
      setState(3450);
      diImportedEntityFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiImportedEntityFieldListContext ------------------------------------------------------------------

LLVMParser::DiImportedEntityFieldListContext::DiImportedEntityFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiImportedEntityFieldContext* LLVMParser::DiImportedEntityFieldListContext::diImportedEntityField() {
  return getRuleContext<LLVMParser::DiImportedEntityFieldContext>(0);
}

LLVMParser::DiImportedEntityFieldListContext* LLVMParser::DiImportedEntityFieldListContext::diImportedEntityFieldList() {
  return getRuleContext<LLVMParser::DiImportedEntityFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiImportedEntityFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiImportedEntityFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiImportedEntityFieldList;
}


std::any LLVMParser::DiImportedEntityFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiImportedEntityFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiImportedEntityFieldListContext* LLVMParser::diImportedEntityFieldList() {
   return diImportedEntityFieldList(0);
}

LLVMParser::DiImportedEntityFieldListContext* LLVMParser::diImportedEntityFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiImportedEntityFieldListContext *_localctx = _tracker.createInstance<DiImportedEntityFieldListContext>(_ctx, parentState);
  LLVMParser::DiImportedEntityFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 632;
  enterRecursionRule(_localctx, 632, LLVMParser::RuleDiImportedEntityFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3454);
    diImportedEntityField();
    _ctx->stop = _input->LT(-1);
    setState(3461);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiImportedEntityFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiImportedEntityFieldList);
        setState(3456);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3457);
        match(LLVMParser::COMMA);
        setState(3458);
        diImportedEntityField(); 
      }
      setState(3463);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiImportedEntityFieldContext ------------------------------------------------------------------

LLVMParser::DiImportedEntityFieldContext::DiImportedEntityFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::TagFieldContext* LLVMParser::DiImportedEntityFieldContext::tagField() {
  return getRuleContext<LLVMParser::TagFieldContext>(0);
}

LLVMParser::ScopeFieldContext* LLVMParser::DiImportedEntityFieldContext::scopeField() {
  return getRuleContext<LLVMParser::ScopeFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiImportedEntityFieldContext::ENTITYCOLON() {
  return getToken(LLVMParser::ENTITYCOLON, 0);
}

LLVMParser::MdFieldContext* LLVMParser::DiImportedEntityFieldContext::mdField() {
  return getRuleContext<LLVMParser::MdFieldContext>(0);
}

LLVMParser::FileFieldContext* LLVMParser::DiImportedEntityFieldContext::fileField() {
  return getRuleContext<LLVMParser::FileFieldContext>(0);
}

LLVMParser::LineFieldContext* LLVMParser::DiImportedEntityFieldContext::lineField() {
  return getRuleContext<LLVMParser::LineFieldContext>(0);
}

LLVMParser::NameFieldContext* LLVMParser::DiImportedEntityFieldContext::nameField() {
  return getRuleContext<LLVMParser::NameFieldContext>(0);
}


size_t LLVMParser::DiImportedEntityFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiImportedEntityField;
}


std::any LLVMParser::DiImportedEntityFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiImportedEntityField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiImportedEntityFieldContext* LLVMParser::diImportedEntityField() {
  DiImportedEntityFieldContext *_localctx = _tracker.createInstance<DiImportedEntityFieldContext>(_ctx, getState());
  enterRule(_localctx, 634, LLVMParser::RuleDiImportedEntityField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3471);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::TAGCOLON: {
        enterOuterAlt(_localctx, 1);
        setState(3464);
        tagField();
        break;
      }

      case LLVMParser::SCOPECOLON: {
        enterOuterAlt(_localctx, 2);
        setState(3465);
        scopeField();
        break;
      }

      case LLVMParser::ENTITYCOLON: {
        enterOuterAlt(_localctx, 3);
        setState(3466);
        match(LLVMParser::ENTITYCOLON);
        setState(3467);
        mdField();
        break;
      }

      case LLVMParser::FILECOLON: {
        enterOuterAlt(_localctx, 4);
        setState(3468);
        fileField();
        break;
      }

      case LLVMParser::LINECOLON: {
        enterOuterAlt(_localctx, 5);
        setState(3469);
        lineField();
        break;
      }

      case LLVMParser::NAMECOLON: {
        enterOuterAlt(_localctx, 6);
        setState(3470);
        nameField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiMacroContext ------------------------------------------------------------------

LLVMParser::DiMacroContext::DiMacroContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiMacroContext::NOTDIMACRO() {
  return getToken(LLVMParser::NOTDIMACRO, 0);
}

tree::TerminalNode* LLVMParser::DiMacroContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiMacroFieldsContext* LLVMParser::DiMacroContext::diMacroFields() {
  return getRuleContext<LLVMParser::DiMacroFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiMacroContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiMacroContext::getRuleIndex() const {
  return LLVMParser::RuleDiMacro;
}


std::any LLVMParser::DiMacroContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiMacro(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiMacroContext* LLVMParser::diMacro() {
  DiMacroContext *_localctx = _tracker.createInstance<DiMacroContext>(_ctx, getState());
  enterRule(_localctx, 636, LLVMParser::RuleDiMacro);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3473);
    match(LLVMParser::NOTDIMACRO);
    setState(3474);
    match(LLVMParser::LPAREN);
    setState(3475);
    diMacroFields();
    setState(3476);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiMacroFieldsContext ------------------------------------------------------------------

LLVMParser::DiMacroFieldsContext::DiMacroFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiMacroFieldListContext* LLVMParser::DiMacroFieldsContext::diMacroFieldList() {
  return getRuleContext<LLVMParser::DiMacroFieldListContext>(0);
}


size_t LLVMParser::DiMacroFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiMacroFields;
}


std::any LLVMParser::DiMacroFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiMacroFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiMacroFieldsContext* LLVMParser::diMacroFields() {
  DiMacroFieldsContext *_localctx = _tracker.createInstance<DiMacroFieldsContext>(_ctx, getState());
  enterRule(_localctx, 638, LLVMParser::RuleDiMacroFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3479);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::LINECOLON

    || _la == LLVMParser::NAMECOLON || _la == LLVMParser::TYPECOLON

    || _la == LLVMParser::VALUECOLON) {
      setState(3478);
      diMacroFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiMacroFieldListContext ------------------------------------------------------------------

LLVMParser::DiMacroFieldListContext::DiMacroFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiMacroFieldContext* LLVMParser::DiMacroFieldListContext::diMacroField() {
  return getRuleContext<LLVMParser::DiMacroFieldContext>(0);
}

LLVMParser::DiMacroFieldListContext* LLVMParser::DiMacroFieldListContext::diMacroFieldList() {
  return getRuleContext<LLVMParser::DiMacroFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiMacroFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiMacroFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiMacroFieldList;
}


std::any LLVMParser::DiMacroFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiMacroFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiMacroFieldListContext* LLVMParser::diMacroFieldList() {
   return diMacroFieldList(0);
}

LLVMParser::DiMacroFieldListContext* LLVMParser::diMacroFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiMacroFieldListContext *_localctx = _tracker.createInstance<DiMacroFieldListContext>(_ctx, parentState);
  LLVMParser::DiMacroFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 640;
  enterRecursionRule(_localctx, 640, LLVMParser::RuleDiMacroFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3482);
    diMacroField();
    _ctx->stop = _input->LT(-1);
    setState(3489);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiMacroFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiMacroFieldList);
        setState(3484);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3485);
        match(LLVMParser::COMMA);
        setState(3486);
        diMacroField(); 
      }
      setState(3491);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiMacroFieldContext ------------------------------------------------------------------

LLVMParser::DiMacroFieldContext::DiMacroFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::TypeMacinfoFieldContext* LLVMParser::DiMacroFieldContext::typeMacinfoField() {
  return getRuleContext<LLVMParser::TypeMacinfoFieldContext>(0);
}

LLVMParser::LineFieldContext* LLVMParser::DiMacroFieldContext::lineField() {
  return getRuleContext<LLVMParser::LineFieldContext>(0);
}

LLVMParser::NameFieldContext* LLVMParser::DiMacroFieldContext::nameField() {
  return getRuleContext<LLVMParser::NameFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiMacroFieldContext::VALUECOLON() {
  return getToken(LLVMParser::VALUECOLON, 0);
}

LLVMParser::StringLitContext* LLVMParser::DiMacroFieldContext::stringLit() {
  return getRuleContext<LLVMParser::StringLitContext>(0);
}


size_t LLVMParser::DiMacroFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiMacroField;
}


std::any LLVMParser::DiMacroFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiMacroField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiMacroFieldContext* LLVMParser::diMacroField() {
  DiMacroFieldContext *_localctx = _tracker.createInstance<DiMacroFieldContext>(_ctx, getState());
  enterRule(_localctx, 642, LLVMParser::RuleDiMacroField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3497);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::TYPECOLON: {
        enterOuterAlt(_localctx, 1);
        setState(3492);
        typeMacinfoField();
        break;
      }

      case LLVMParser::LINECOLON: {
        enterOuterAlt(_localctx, 2);
        setState(3493);
        lineField();
        break;
      }

      case LLVMParser::NAMECOLON: {
        enterOuterAlt(_localctx, 3);
        setState(3494);
        nameField();
        break;
      }

      case LLVMParser::VALUECOLON: {
        enterOuterAlt(_localctx, 4);
        setState(3495);
        match(LLVMParser::VALUECOLON);
        setState(3496);
        stringLit();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiMacroFileContext ------------------------------------------------------------------

LLVMParser::DiMacroFileContext::DiMacroFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DiMacroFileContext::NOTDIMACROFILE() {
  return getToken(LLVMParser::NOTDIMACROFILE, 0);
}

tree::TerminalNode* LLVMParser::DiMacroFileContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::DiMacroFileFieldsContext* LLVMParser::DiMacroFileContext::diMacroFileFields() {
  return getRuleContext<LLVMParser::DiMacroFileFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::DiMacroFileContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::DiMacroFileContext::getRuleIndex() const {
  return LLVMParser::RuleDiMacroFile;
}


std::any LLVMParser::DiMacroFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiMacroFile(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiMacroFileContext* LLVMParser::diMacroFile() {
  DiMacroFileContext *_localctx = _tracker.createInstance<DiMacroFileContext>(_ctx, getState());
  enterRule(_localctx, 644, LLVMParser::RuleDiMacroFile);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3499);
    match(LLVMParser::NOTDIMACROFILE);
    setState(3500);
    match(LLVMParser::LPAREN);
    setState(3501);
    diMacroFileFields();
    setState(3502);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiMacroFileFieldsContext ------------------------------------------------------------------

LLVMParser::DiMacroFileFieldsContext::DiMacroFileFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiMacroFileFieldListContext* LLVMParser::DiMacroFileFieldsContext::diMacroFileFieldList() {
  return getRuleContext<LLVMParser::DiMacroFileFieldListContext>(0);
}


size_t LLVMParser::DiMacroFileFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleDiMacroFileFields;
}


std::any LLVMParser::DiMacroFileFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiMacroFileFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiMacroFileFieldsContext* LLVMParser::diMacroFileFields() {
  DiMacroFileFieldsContext *_localctx = _tracker.createInstance<DiMacroFileFieldsContext>(_ctx, getState());
  enterRule(_localctx, 646, LLVMParser::RuleDiMacroFileFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3505);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::FILECOLON

    || _la == LLVMParser::LINECOLON || _la == LLVMParser::NODESCOLON || _la == LLVMParser::TYPECOLON) {
      setState(3504);
      diMacroFileFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiMacroFileFieldListContext ------------------------------------------------------------------

LLVMParser::DiMacroFileFieldListContext::DiMacroFileFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiMacroFileFieldContext* LLVMParser::DiMacroFileFieldListContext::diMacroFileField() {
  return getRuleContext<LLVMParser::DiMacroFileFieldContext>(0);
}

LLVMParser::DiMacroFileFieldListContext* LLVMParser::DiMacroFileFieldListContext::diMacroFileFieldList() {
  return getRuleContext<LLVMParser::DiMacroFileFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::DiMacroFileFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::DiMacroFileFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleDiMacroFileFieldList;
}


std::any LLVMParser::DiMacroFileFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiMacroFileFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiMacroFileFieldListContext* LLVMParser::diMacroFileFieldList() {
   return diMacroFileFieldList(0);
}

LLVMParser::DiMacroFileFieldListContext* LLVMParser::diMacroFileFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiMacroFileFieldListContext *_localctx = _tracker.createInstance<DiMacroFileFieldListContext>(_ctx, parentState);
  LLVMParser::DiMacroFileFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 648;
  enterRecursionRule(_localctx, 648, LLVMParser::RuleDiMacroFileFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3508);
    diMacroFileField();
    _ctx->stop = _input->LT(-1);
    setState(3515);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiMacroFileFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiMacroFileFieldList);
        setState(3510);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3511);
        match(LLVMParser::COMMA);
        setState(3512);
        diMacroFileField(); 
      }
      setState(3517);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiMacroFileFieldContext ------------------------------------------------------------------

LLVMParser::DiMacroFileFieldContext::DiMacroFileFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::TypeMacinfoFieldContext* LLVMParser::DiMacroFileFieldContext::typeMacinfoField() {
  return getRuleContext<LLVMParser::TypeMacinfoFieldContext>(0);
}

LLVMParser::LineFieldContext* LLVMParser::DiMacroFileFieldContext::lineField() {
  return getRuleContext<LLVMParser::LineFieldContext>(0);
}

LLVMParser::FileFieldContext* LLVMParser::DiMacroFileFieldContext::fileField() {
  return getRuleContext<LLVMParser::FileFieldContext>(0);
}

tree::TerminalNode* LLVMParser::DiMacroFileFieldContext::NODESCOLON() {
  return getToken(LLVMParser::NODESCOLON, 0);
}

LLVMParser::MdFieldContext* LLVMParser::DiMacroFileFieldContext::mdField() {
  return getRuleContext<LLVMParser::MdFieldContext>(0);
}


size_t LLVMParser::DiMacroFileFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDiMacroFileField;
}


std::any LLVMParser::DiMacroFileFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiMacroFileField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiMacroFileFieldContext* LLVMParser::diMacroFileField() {
  DiMacroFileFieldContext *_localctx = _tracker.createInstance<DiMacroFileFieldContext>(_ctx, getState());
  enterRule(_localctx, 650, LLVMParser::RuleDiMacroFileField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3523);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::TYPECOLON: {
        enterOuterAlt(_localctx, 1);
        setState(3518);
        typeMacinfoField();
        break;
      }

      case LLVMParser::LINECOLON: {
        enterOuterAlt(_localctx, 2);
        setState(3519);
        lineField();
        break;
      }

      case LLVMParser::FILECOLON: {
        enterOuterAlt(_localctx, 3);
        setState(3520);
        fileField();
        break;
      }

      case LLVMParser::NODESCOLON: {
        enterOuterAlt(_localctx, 4);
        setState(3521);
        match(LLVMParser::NODESCOLON);
        setState(3522);
        mdField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenericDINodeContext ------------------------------------------------------------------

LLVMParser::GenericDINodeContext::GenericDINodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::GenericDINodeContext::NOTGENERICDINODE() {
  return getToken(LLVMParser::NOTGENERICDINODE, 0);
}

tree::TerminalNode* LLVMParser::GenericDINodeContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::GenericDINodeFieldsContext* LLVMParser::GenericDINodeContext::genericDINodeFields() {
  return getRuleContext<LLVMParser::GenericDINodeFieldsContext>(0);
}

tree::TerminalNode* LLVMParser::GenericDINodeContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::GenericDINodeContext::getRuleIndex() const {
  return LLVMParser::RuleGenericDINode;
}


std::any LLVMParser::GenericDINodeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitGenericDINode(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::GenericDINodeContext* LLVMParser::genericDINode() {
  GenericDINodeContext *_localctx = _tracker.createInstance<GenericDINodeContext>(_ctx, getState());
  enterRule(_localctx, 652, LLVMParser::RuleGenericDINode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3525);
    match(LLVMParser::NOTGENERICDINODE);
    setState(3526);
    match(LLVMParser::LPAREN);
    setState(3527);
    genericDINodeFields();
    setState(3528);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenericDINodeFieldsContext ------------------------------------------------------------------

LLVMParser::GenericDINodeFieldsContext::GenericDINodeFieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::GenericDINodeFieldListContext* LLVMParser::GenericDINodeFieldsContext::genericDINodeFieldList() {
  return getRuleContext<LLVMParser::GenericDINodeFieldListContext>(0);
}


size_t LLVMParser::GenericDINodeFieldsContext::getRuleIndex() const {
  return LLVMParser::RuleGenericDINodeFields;
}


std::any LLVMParser::GenericDINodeFieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitGenericDINodeFields(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::GenericDINodeFieldsContext* LLVMParser::genericDINodeFields() {
  GenericDINodeFieldsContext *_localctx = _tracker.createInstance<GenericDINodeFieldsContext>(_ctx, getState());
  enterRule(_localctx, 654, LLVMParser::RuleGenericDINodeFields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3531);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::HEADERCOLON || _la == LLVMParser::OPERANDSCOLON || _la == LLVMParser::TAGCOLON) {
      setState(3530);
      genericDINodeFieldList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenericDINodeFieldListContext ------------------------------------------------------------------

LLVMParser::GenericDINodeFieldListContext::GenericDINodeFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::GenericDINodeFieldContext* LLVMParser::GenericDINodeFieldListContext::genericDINodeField() {
  return getRuleContext<LLVMParser::GenericDINodeFieldContext>(0);
}

LLVMParser::GenericDINodeFieldListContext* LLVMParser::GenericDINodeFieldListContext::genericDINodeFieldList() {
  return getRuleContext<LLVMParser::GenericDINodeFieldListContext>(0);
}

tree::TerminalNode* LLVMParser::GenericDINodeFieldListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::GenericDINodeFieldListContext::getRuleIndex() const {
  return LLVMParser::RuleGenericDINodeFieldList;
}


std::any LLVMParser::GenericDINodeFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitGenericDINodeFieldList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::GenericDINodeFieldListContext* LLVMParser::genericDINodeFieldList() {
   return genericDINodeFieldList(0);
}

LLVMParser::GenericDINodeFieldListContext* LLVMParser::genericDINodeFieldList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::GenericDINodeFieldListContext *_localctx = _tracker.createInstance<GenericDINodeFieldListContext>(_ctx, parentState);
  LLVMParser::GenericDINodeFieldListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 656;
  enterRecursionRule(_localctx, 656, LLVMParser::RuleGenericDINodeFieldList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3534);
    genericDINodeField();
    _ctx->stop = _input->LT(-1);
    setState(3541);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<GenericDINodeFieldListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleGenericDINodeFieldList);
        setState(3536);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3537);
        match(LLVMParser::COMMA);
        setState(3538);
        genericDINodeField(); 
      }
      setState(3543);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- GenericDINodeFieldContext ------------------------------------------------------------------

LLVMParser::GenericDINodeFieldContext::GenericDINodeFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::TagFieldContext* LLVMParser::GenericDINodeFieldContext::tagField() {
  return getRuleContext<LLVMParser::TagFieldContext>(0);
}

tree::TerminalNode* LLVMParser::GenericDINodeFieldContext::HEADERCOLON() {
  return getToken(LLVMParser::HEADERCOLON, 0);
}

LLVMParser::StringLitContext* LLVMParser::GenericDINodeFieldContext::stringLit() {
  return getRuleContext<LLVMParser::StringLitContext>(0);
}

tree::TerminalNode* LLVMParser::GenericDINodeFieldContext::OPERANDSCOLON() {
  return getToken(LLVMParser::OPERANDSCOLON, 0);
}

LLVMParser::MdFieldsContext* LLVMParser::GenericDINodeFieldContext::mdFields() {
  return getRuleContext<LLVMParser::MdFieldsContext>(0);
}


size_t LLVMParser::GenericDINodeFieldContext::getRuleIndex() const {
  return LLVMParser::RuleGenericDINodeField;
}


std::any LLVMParser::GenericDINodeFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitGenericDINodeField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::GenericDINodeFieldContext* LLVMParser::genericDINodeField() {
  GenericDINodeFieldContext *_localctx = _tracker.createInstance<GenericDINodeFieldContext>(_ctx, getState());
  enterRule(_localctx, 658, LLVMParser::RuleGenericDINodeField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3549);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::TAGCOLON: {
        enterOuterAlt(_localctx, 1);
        setState(3544);
        tagField();
        break;
      }

      case LLVMParser::HEADERCOLON: {
        enterOuterAlt(_localctx, 2);
        setState(3545);
        match(LLVMParser::HEADERCOLON);
        setState(3546);
        stringLit();
        break;
      }

      case LLVMParser::OPERANDSCOLON: {
        enterOuterAlt(_localctx, 3);
        setState(3547);
        match(LLVMParser::OPERANDSCOLON);
        setState(3548);
        mdFields();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FileFieldContext ------------------------------------------------------------------

LLVMParser::FileFieldContext::FileFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FileFieldContext::FILECOLON() {
  return getToken(LLVMParser::FILECOLON, 0);
}

LLVMParser::MdFieldContext* LLVMParser::FileFieldContext::mdField() {
  return getRuleContext<LLVMParser::MdFieldContext>(0);
}


size_t LLVMParser::FileFieldContext::getRuleIndex() const {
  return LLVMParser::RuleFileField;
}


std::any LLVMParser::FileFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFileField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FileFieldContext* LLVMParser::fileField() {
  FileFieldContext *_localctx = _tracker.createInstance<FileFieldContext>(_ctx, getState());
  enterRule(_localctx, 660, LLVMParser::RuleFileField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3551);
    match(LLVMParser::FILECOLON);
    setState(3552);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IsOptimizedFieldContext ------------------------------------------------------------------

LLVMParser::IsOptimizedFieldContext::IsOptimizedFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::IsOptimizedFieldContext::ISOPTIMIZEDCOLON() {
  return getToken(LLVMParser::ISOPTIMIZEDCOLON, 0);
}

LLVMParser::BoolLitContext* LLVMParser::IsOptimizedFieldContext::boolLit() {
  return getRuleContext<LLVMParser::BoolLitContext>(0);
}


size_t LLVMParser::IsOptimizedFieldContext::getRuleIndex() const {
  return LLVMParser::RuleIsOptimizedField;
}


std::any LLVMParser::IsOptimizedFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitIsOptimizedField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::IsOptimizedFieldContext* LLVMParser::isOptimizedField() {
  IsOptimizedFieldContext *_localctx = _tracker.createInstance<IsOptimizedFieldContext>(_ctx, getState());
  enterRule(_localctx, 662, LLVMParser::RuleIsOptimizedField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3554);
    match(LLVMParser::ISOPTIMIZEDCOLON);
    setState(3555);
    boolLit();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TagFieldContext ------------------------------------------------------------------

LLVMParser::TagFieldContext::TagFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::TagFieldContext::TAGCOLON() {
  return getToken(LLVMParser::TAGCOLON, 0);
}

LLVMParser::DwarfTagContext* LLVMParser::TagFieldContext::dwarfTag() {
  return getRuleContext<LLVMParser::DwarfTagContext>(0);
}


size_t LLVMParser::TagFieldContext::getRuleIndex() const {
  return LLVMParser::RuleTagField;
}


std::any LLVMParser::TagFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitTagField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::TagFieldContext* LLVMParser::tagField() {
  TagFieldContext *_localctx = _tracker.createInstance<TagFieldContext>(_ctx, getState());
  enterRule(_localctx, 664, LLVMParser::RuleTagField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3557);
    match(LLVMParser::TAGCOLON);
    setState(3558);
    dwarfTag();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameFieldContext ------------------------------------------------------------------

LLVMParser::NameFieldContext::NameFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::NameFieldContext::NAMECOLON() {
  return getToken(LLVMParser::NAMECOLON, 0);
}

LLVMParser::StringLitContext* LLVMParser::NameFieldContext::stringLit() {
  return getRuleContext<LLVMParser::StringLitContext>(0);
}


size_t LLVMParser::NameFieldContext::getRuleIndex() const {
  return LLVMParser::RuleNameField;
}


std::any LLVMParser::NameFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitNameField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::NameFieldContext* LLVMParser::nameField() {
  NameFieldContext *_localctx = _tracker.createInstance<NameFieldContext>(_ctx, getState());
  enterRule(_localctx, 666, LLVMParser::RuleNameField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3560);
    match(LLVMParser::NAMECOLON);
    setState(3561);
    stringLit();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SizeFieldContext ------------------------------------------------------------------

LLVMParser::SizeFieldContext::SizeFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::SizeFieldContext::SIZECOLON() {
  return getToken(LLVMParser::SIZECOLON, 0);
}

LLVMParser::IntLitContext* LLVMParser::SizeFieldContext::intLit() {
  return getRuleContext<LLVMParser::IntLitContext>(0);
}


size_t LLVMParser::SizeFieldContext::getRuleIndex() const {
  return LLVMParser::RuleSizeField;
}


std::any LLVMParser::SizeFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitSizeField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::SizeFieldContext* LLVMParser::sizeField() {
  SizeFieldContext *_localctx = _tracker.createInstance<SizeFieldContext>(_ctx, getState());
  enterRule(_localctx, 668, LLVMParser::RuleSizeField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3563);
    match(LLVMParser::SIZECOLON);
    setState(3564);
    intLit();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlignFieldContext ------------------------------------------------------------------

LLVMParser::AlignFieldContext::AlignFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::AlignFieldContext::ALIGNCOLON() {
  return getToken(LLVMParser::ALIGNCOLON, 0);
}

LLVMParser::IntLitContext* LLVMParser::AlignFieldContext::intLit() {
  return getRuleContext<LLVMParser::IntLitContext>(0);
}


size_t LLVMParser::AlignFieldContext::getRuleIndex() const {
  return LLVMParser::RuleAlignField;
}


std::any LLVMParser::AlignFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitAlignField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::AlignFieldContext* LLVMParser::alignField() {
  AlignFieldContext *_localctx = _tracker.createInstance<AlignFieldContext>(_ctx, getState());
  enterRule(_localctx, 670, LLVMParser::RuleAlignField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3566);
    match(LLVMParser::ALIGNCOLON);
    setState(3567);
    intLit();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FlagsFieldContext ------------------------------------------------------------------

LLVMParser::FlagsFieldContext::FlagsFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FlagsFieldContext::FLAGSCOLON() {
  return getToken(LLVMParser::FLAGSCOLON, 0);
}

LLVMParser::DiFlagListContext* LLVMParser::FlagsFieldContext::diFlagList() {
  return getRuleContext<LLVMParser::DiFlagListContext>(0);
}


size_t LLVMParser::FlagsFieldContext::getRuleIndex() const {
  return LLVMParser::RuleFlagsField;
}


std::any LLVMParser::FlagsFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFlagsField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FlagsFieldContext* LLVMParser::flagsField() {
  FlagsFieldContext *_localctx = _tracker.createInstance<FlagsFieldContext>(_ctx, getState());
  enterRule(_localctx, 672, LLVMParser::RuleFlagsField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3569);
    match(LLVMParser::FLAGSCOLON);
    setState(3570);
    diFlagList(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LineFieldContext ------------------------------------------------------------------

LLVMParser::LineFieldContext::LineFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::LineFieldContext::LINECOLON() {
  return getToken(LLVMParser::LINECOLON, 0);
}

LLVMParser::IntLitContext* LLVMParser::LineFieldContext::intLit() {
  return getRuleContext<LLVMParser::IntLitContext>(0);
}


size_t LLVMParser::LineFieldContext::getRuleIndex() const {
  return LLVMParser::RuleLineField;
}


std::any LLVMParser::LineFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitLineField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::LineFieldContext* LLVMParser::lineField() {
  LineFieldContext *_localctx = _tracker.createInstance<LineFieldContext>(_ctx, getState());
  enterRule(_localctx, 674, LLVMParser::RuleLineField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3572);
    match(LLVMParser::LINECOLON);
    setState(3573);
    intLit();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScopeFieldContext ------------------------------------------------------------------

LLVMParser::ScopeFieldContext::ScopeFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ScopeFieldContext::SCOPECOLON() {
  return getToken(LLVMParser::SCOPECOLON, 0);
}

LLVMParser::MdFieldContext* LLVMParser::ScopeFieldContext::mdField() {
  return getRuleContext<LLVMParser::MdFieldContext>(0);
}


size_t LLVMParser::ScopeFieldContext::getRuleIndex() const {
  return LLVMParser::RuleScopeField;
}


std::any LLVMParser::ScopeFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitScopeField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ScopeFieldContext* LLVMParser::scopeField() {
  ScopeFieldContext *_localctx = _tracker.createInstance<ScopeFieldContext>(_ctx, getState());
  enterRule(_localctx, 676, LLVMParser::RuleScopeField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3575);
    match(LLVMParser::SCOPECOLON);
    setState(3576);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseTypeFieldContext ------------------------------------------------------------------

LLVMParser::BaseTypeFieldContext::BaseTypeFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::BaseTypeFieldContext::BASETYPECOLON() {
  return getToken(LLVMParser::BASETYPECOLON, 0);
}

LLVMParser::MdFieldContext* LLVMParser::BaseTypeFieldContext::mdField() {
  return getRuleContext<LLVMParser::MdFieldContext>(0);
}


size_t LLVMParser::BaseTypeFieldContext::getRuleIndex() const {
  return LLVMParser::RuleBaseTypeField;
}


std::any LLVMParser::BaseTypeFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitBaseTypeField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::BaseTypeFieldContext* LLVMParser::baseTypeField() {
  BaseTypeFieldContext *_localctx = _tracker.createInstance<BaseTypeFieldContext>(_ctx, getState());
  enterRule(_localctx, 678, LLVMParser::RuleBaseTypeField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3578);
    match(LLVMParser::BASETYPECOLON);
    setState(3579);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OffsetFieldContext ------------------------------------------------------------------

LLVMParser::OffsetFieldContext::OffsetFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OffsetFieldContext::OFFSETCOLON() {
  return getToken(LLVMParser::OFFSETCOLON, 0);
}

LLVMParser::IntLitContext* LLVMParser::OffsetFieldContext::intLit() {
  return getRuleContext<LLVMParser::IntLitContext>(0);
}


size_t LLVMParser::OffsetFieldContext::getRuleIndex() const {
  return LLVMParser::RuleOffsetField;
}


std::any LLVMParser::OffsetFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOffsetField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OffsetFieldContext* LLVMParser::offsetField() {
  OffsetFieldContext *_localctx = _tracker.createInstance<OffsetFieldContext>(_ctx, getState());
  enterRule(_localctx, 680, LLVMParser::RuleOffsetField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3581);
    match(LLVMParser::OFFSETCOLON);
    setState(3582);
    intLit();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateParamsFieldContext ------------------------------------------------------------------

LLVMParser::TemplateParamsFieldContext::TemplateParamsFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::TemplateParamsFieldContext::TEMPLATEPARAMSCOLON() {
  return getToken(LLVMParser::TEMPLATEPARAMSCOLON, 0);
}

LLVMParser::MdFieldContext* LLVMParser::TemplateParamsFieldContext::mdField() {
  return getRuleContext<LLVMParser::MdFieldContext>(0);
}


size_t LLVMParser::TemplateParamsFieldContext::getRuleIndex() const {
  return LLVMParser::RuleTemplateParamsField;
}


std::any LLVMParser::TemplateParamsFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitTemplateParamsField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::TemplateParamsFieldContext* LLVMParser::templateParamsField() {
  TemplateParamsFieldContext *_localctx = _tracker.createInstance<TemplateParamsFieldContext>(_ctx, getState());
  enterRule(_localctx, 682, LLVMParser::RuleTemplateParamsField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3584);
    match(LLVMParser::TEMPLATEPARAMSCOLON);
    setState(3585);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntOrMDFieldContext ------------------------------------------------------------------

LLVMParser::IntOrMDFieldContext::IntOrMDFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::IntOrMDFieldContext::INT_LIT() {
  return getToken(LLVMParser::INT_LIT, 0);
}

LLVMParser::MdFieldContext* LLVMParser::IntOrMDFieldContext::mdField() {
  return getRuleContext<LLVMParser::MdFieldContext>(0);
}


size_t LLVMParser::IntOrMDFieldContext::getRuleIndex() const {
  return LLVMParser::RuleIntOrMDField;
}


std::any LLVMParser::IntOrMDFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitIntOrMDField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::IntOrMDFieldContext* LLVMParser::intOrMDField() {
  IntOrMDFieldContext *_localctx = _tracker.createInstance<IntOrMDFieldContext>(_ctx, getState());
  enterRule(_localctx, 684, LLVMParser::RuleIntOrMDField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3589);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::INT_LIT: {
        enterOuterAlt(_localctx, 1);
        setState(3587);
        match(LLVMParser::INT_LIT);
        break;
      }

      case LLVMParser::LT:
      case LLVMParser::BANG:
      case LLVMParser::LBRACK:
      case LLVMParser::LBRACE:
      case LLVMParser::NOTDIBASICTYPE:
      case LLVMParser::NOTDICOMPILEUNIT:
      case LLVMParser::NOTDICOMPOSITETYPE:
      case LLVMParser::NOTDIDERIVEDTYPE:
      case LLVMParser::NOTDIENUMERATOR:
      case LLVMParser::NOTDIEXPRESSION:
      case LLVMParser::NOTDIFILE:
      case LLVMParser::NOTDIGLOBALVARIABLE:
      case LLVMParser::NOTDIGLOBALVARIABLEEXPRESSION:
      case LLVMParser::NOTDIIMPORTEDENTITY:
      case LLVMParser::NOTDILEXICALBLOCK:
      case LLVMParser::NOTDILEXICALBLOCKFILE:
      case LLVMParser::NOTDILOCALVARIABLE:
      case LLVMParser::NOTDILOCATION:
      case LLVMParser::NOTDIMACRO:
      case LLVMParser::NOTDIMACROFILE:
      case LLVMParser::NOTDIMODULE:
      case LLVMParser::NOTDINAMESPACE:
      case LLVMParser::NOTDIOBJCPROPERTY:
      case LLVMParser::NOTDISUBPROGRAM:
      case LLVMParser::NOTDISUBRANGE:
      case LLVMParser::NOTDISUBROUTINETYPE:
      case LLVMParser::NOTDITEMPLATETYPEPARAMETER:
      case LLVMParser::NOTDITEMPLATEVALUEPARAMETER:
      case LLVMParser::DOUBLE:
      case LLVMParser::FLOAT:
      case LLVMParser::FP128:
      case LLVMParser::NOTGENERICDINODE:
      case LLVMParser::HALF:
      case LLVMParser::LABEL:
      case LLVMParser::METADATA:
      case LLVMParser::NULL_:
      case LLVMParser::PPC_FP128:
      case LLVMParser::TOKEN:
      case LLVMParser::VOID:
      case LLVMParser::X86_FP80:
      case LLVMParser::X86_MMX:
      case LLVMParser::METADATA_ID:
      case LLVMParser::INT_TYPE:
      case LLVMParser::LOCAL_IDENT: {
        enterOuterAlt(_localctx, 2);
        setState(3588);
        mdField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeFieldContext ------------------------------------------------------------------

LLVMParser::TypeFieldContext::TypeFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::TypeFieldContext::TYPECOLON() {
  return getToken(LLVMParser::TYPECOLON, 0);
}

LLVMParser::MdFieldContext* LLVMParser::TypeFieldContext::mdField() {
  return getRuleContext<LLVMParser::MdFieldContext>(0);
}


size_t LLVMParser::TypeFieldContext::getRuleIndex() const {
  return LLVMParser::RuleTypeField;
}


std::any LLVMParser::TypeFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitTypeField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::TypeFieldContext* LLVMParser::typeField() {
  TypeFieldContext *_localctx = _tracker.createInstance<TypeFieldContext>(_ctx, getState());
  enterRule(_localctx, 686, LLVMParser::RuleTypeField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3591);
    match(LLVMParser::TYPECOLON);
    setState(3592);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LinkageNameFieldContext ------------------------------------------------------------------

LLVMParser::LinkageNameFieldContext::LinkageNameFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::LinkageNameFieldContext::LINKAGENAMECOLON() {
  return getToken(LLVMParser::LINKAGENAMECOLON, 0);
}

LLVMParser::StringLitContext* LLVMParser::LinkageNameFieldContext::stringLit() {
  return getRuleContext<LLVMParser::StringLitContext>(0);
}


size_t LLVMParser::LinkageNameFieldContext::getRuleIndex() const {
  return LLVMParser::RuleLinkageNameField;
}


std::any LLVMParser::LinkageNameFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitLinkageNameField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::LinkageNameFieldContext* LLVMParser::linkageNameField() {
  LinkageNameFieldContext *_localctx = _tracker.createInstance<LinkageNameFieldContext>(_ctx, getState());
  enterRule(_localctx, 688, LLVMParser::RuleLinkageNameField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3594);
    match(LLVMParser::LINKAGENAMECOLON);
    setState(3595);
    stringLit();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IsLocalFieldContext ------------------------------------------------------------------

LLVMParser::IsLocalFieldContext::IsLocalFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::IsLocalFieldContext::ISLOCALCOLON() {
  return getToken(LLVMParser::ISLOCALCOLON, 0);
}

LLVMParser::BoolLitContext* LLVMParser::IsLocalFieldContext::boolLit() {
  return getRuleContext<LLVMParser::BoolLitContext>(0);
}


size_t LLVMParser::IsLocalFieldContext::getRuleIndex() const {
  return LLVMParser::RuleIsLocalField;
}


std::any LLVMParser::IsLocalFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitIsLocalField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::IsLocalFieldContext* LLVMParser::isLocalField() {
  IsLocalFieldContext *_localctx = _tracker.createInstance<IsLocalFieldContext>(_ctx, getState());
  enterRule(_localctx, 690, LLVMParser::RuleIsLocalField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3597);
    match(LLVMParser::ISLOCALCOLON);
    setState(3598);
    boolLit();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IsDefinitionFieldContext ------------------------------------------------------------------

LLVMParser::IsDefinitionFieldContext::IsDefinitionFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::IsDefinitionFieldContext::ISDEFINITIONCOLON() {
  return getToken(LLVMParser::ISDEFINITIONCOLON, 0);
}

LLVMParser::BoolLitContext* LLVMParser::IsDefinitionFieldContext::boolLit() {
  return getRuleContext<LLVMParser::BoolLitContext>(0);
}


size_t LLVMParser::IsDefinitionFieldContext::getRuleIndex() const {
  return LLVMParser::RuleIsDefinitionField;
}


std::any LLVMParser::IsDefinitionFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitIsDefinitionField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::IsDefinitionFieldContext* LLVMParser::isDefinitionField() {
  IsDefinitionFieldContext *_localctx = _tracker.createInstance<IsDefinitionFieldContext>(_ctx, getState());
  enterRule(_localctx, 692, LLVMParser::RuleIsDefinitionField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3600);
    match(LLVMParser::ISDEFINITIONCOLON);
    setState(3601);
    boolLit();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationFieldContext ------------------------------------------------------------------

LLVMParser::DeclarationFieldContext::DeclarationFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DeclarationFieldContext::DECLARATIONCOLON() {
  return getToken(LLVMParser::DECLARATIONCOLON, 0);
}

LLVMParser::MdFieldContext* LLVMParser::DeclarationFieldContext::mdField() {
  return getRuleContext<LLVMParser::MdFieldContext>(0);
}


size_t LLVMParser::DeclarationFieldContext::getRuleIndex() const {
  return LLVMParser::RuleDeclarationField;
}


std::any LLVMParser::DeclarationFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDeclarationField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DeclarationFieldContext* LLVMParser::declarationField() {
  DeclarationFieldContext *_localctx = _tracker.createInstance<DeclarationFieldContext>(_ctx, getState());
  enterRule(_localctx, 694, LLVMParser::RuleDeclarationField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3603);
    match(LLVMParser::DECLARATIONCOLON);
    setState(3604);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnFieldContext ------------------------------------------------------------------

LLVMParser::ColumnFieldContext::ColumnFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ColumnFieldContext::COLUMNCOLON() {
  return getToken(LLVMParser::COLUMNCOLON, 0);
}

LLVMParser::IntLitContext* LLVMParser::ColumnFieldContext::intLit() {
  return getRuleContext<LLVMParser::IntLitContext>(0);
}


size_t LLVMParser::ColumnFieldContext::getRuleIndex() const {
  return LLVMParser::RuleColumnField;
}


std::any LLVMParser::ColumnFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitColumnField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ColumnFieldContext* LLVMParser::columnField() {
  ColumnFieldContext *_localctx = _tracker.createInstance<ColumnFieldContext>(_ctx, getState());
  enterRule(_localctx, 696, LLVMParser::RuleColumnField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3606);
    match(LLVMParser::COLUMNCOLON);
    setState(3607);
    intLit();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeMacinfoFieldContext ------------------------------------------------------------------

LLVMParser::TypeMacinfoFieldContext::TypeMacinfoFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::TypeMacinfoFieldContext::TYPECOLON() {
  return getToken(LLVMParser::TYPECOLON, 0);
}

LLVMParser::DwarfMacinfoContext* LLVMParser::TypeMacinfoFieldContext::dwarfMacinfo() {
  return getRuleContext<LLVMParser::DwarfMacinfoContext>(0);
}


size_t LLVMParser::TypeMacinfoFieldContext::getRuleIndex() const {
  return LLVMParser::RuleTypeMacinfoField;
}


std::any LLVMParser::TypeMacinfoFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitTypeMacinfoField(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::TypeMacinfoFieldContext* LLVMParser::typeMacinfoField() {
  TypeMacinfoFieldContext *_localctx = _tracker.createInstance<TypeMacinfoFieldContext>(_ctx, getState());
  enterRule(_localctx, 698, LLVMParser::RuleTypeMacinfoField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3609);
    match(LLVMParser::TYPECOLON);
    setState(3610);
    dwarfMacinfo();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ChecksumkindContext ------------------------------------------------------------------

LLVMParser::ChecksumkindContext::ChecksumkindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ChecksumkindContext::CHECKSUM_KIND() {
  return getToken(LLVMParser::CHECKSUM_KIND, 0);
}


size_t LLVMParser::ChecksumkindContext::getRuleIndex() const {
  return LLVMParser::RuleChecksumkind;
}


std::any LLVMParser::ChecksumkindContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitChecksumkind(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ChecksumkindContext* LLVMParser::checksumkind() {
  ChecksumkindContext *_localctx = _tracker.createInstance<ChecksumkindContext>(_ctx, getState());
  enterRule(_localctx, 700, LLVMParser::RuleChecksumkind);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3612);
    match(LLVMParser::CHECKSUM_KIND);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiFlagListContext ------------------------------------------------------------------

LLVMParser::DiFlagListContext::DiFlagListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DiFlagContext* LLVMParser::DiFlagListContext::diFlag() {
  return getRuleContext<LLVMParser::DiFlagContext>(0);
}

LLVMParser::DiFlagListContext* LLVMParser::DiFlagListContext::diFlagList() {
  return getRuleContext<LLVMParser::DiFlagListContext>(0);
}

tree::TerminalNode* LLVMParser::DiFlagListContext::VDASH() {
  return getToken(LLVMParser::VDASH, 0);
}


size_t LLVMParser::DiFlagListContext::getRuleIndex() const {
  return LLVMParser::RuleDiFlagList;
}


std::any LLVMParser::DiFlagListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiFlagList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::DiFlagListContext* LLVMParser::diFlagList() {
   return diFlagList(0);
}

LLVMParser::DiFlagListContext* LLVMParser::diFlagList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::DiFlagListContext *_localctx = _tracker.createInstance<DiFlagListContext>(_ctx, parentState);
  LLVMParser::DiFlagListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 702;
  enterRecursionRule(_localctx, 702, LLVMParser::RuleDiFlagList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3615);
    diFlag();
    _ctx->stop = _input->LT(-1);
    setState(3622);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DiFlagListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDiFlagList);
        setState(3617);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3618);
        match(LLVMParser::VDASH);
        setState(3619);
        diFlag(); 
      }
      setState(3624);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DiFlagContext ------------------------------------------------------------------

LLVMParser::DiFlagContext::DiFlagContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::IntLitContext* LLVMParser::DiFlagContext::intLit() {
  return getRuleContext<LLVMParser::IntLitContext>(0);
}

tree::TerminalNode* LLVMParser::DiFlagContext::DI_FLAG() {
  return getToken(LLVMParser::DI_FLAG, 0);
}


size_t LLVMParser::DiFlagContext::getRuleIndex() const {
  return LLVMParser::RuleDiFlag;
}


std::any LLVMParser::DiFlagContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDiFlag(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DiFlagContext* LLVMParser::diFlag() {
  DiFlagContext *_localctx = _tracker.createInstance<DiFlagContext>(_ctx, getState());
  enterRule(_localctx, 704, LLVMParser::RuleDiFlag);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3627);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::INT_LIT: {
        enterOuterAlt(_localctx, 1);
        setState(3625);
        intLit();
        break;
      }

      case LLVMParser::DI_FLAG: {
        enterOuterAlt(_localctx, 2);
        setState(3626);
        match(LLVMParser::DI_FLAG);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DwarfAttEncodingContext ------------------------------------------------------------------

LLVMParser::DwarfAttEncodingContext::DwarfAttEncodingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::IntLitContext* LLVMParser::DwarfAttEncodingContext::intLit() {
  return getRuleContext<LLVMParser::IntLitContext>(0);
}

tree::TerminalNode* LLVMParser::DwarfAttEncodingContext::DWARF_ATT_ENCODING() {
  return getToken(LLVMParser::DWARF_ATT_ENCODING, 0);
}


size_t LLVMParser::DwarfAttEncodingContext::getRuleIndex() const {
  return LLVMParser::RuleDwarfAttEncoding;
}


std::any LLVMParser::DwarfAttEncodingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDwarfAttEncoding(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DwarfAttEncodingContext* LLVMParser::dwarfAttEncoding() {
  DwarfAttEncodingContext *_localctx = _tracker.createInstance<DwarfAttEncodingContext>(_ctx, getState());
  enterRule(_localctx, 706, LLVMParser::RuleDwarfAttEncoding);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3631);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::INT_LIT: {
        enterOuterAlt(_localctx, 1);
        setState(3629);
        intLit();
        break;
      }

      case LLVMParser::DWARF_ATT_ENCODING: {
        enterOuterAlt(_localctx, 2);
        setState(3630);
        match(LLVMParser::DWARF_ATT_ENCODING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DwarfCCContext ------------------------------------------------------------------

LLVMParser::DwarfCCContext::DwarfCCContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::IntLitContext* LLVMParser::DwarfCCContext::intLit() {
  return getRuleContext<LLVMParser::IntLitContext>(0);
}

tree::TerminalNode* LLVMParser::DwarfCCContext::DWARF_CC() {
  return getToken(LLVMParser::DWARF_CC, 0);
}


size_t LLVMParser::DwarfCCContext::getRuleIndex() const {
  return LLVMParser::RuleDwarfCC;
}


std::any LLVMParser::DwarfCCContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDwarfCC(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DwarfCCContext* LLVMParser::dwarfCC() {
  DwarfCCContext *_localctx = _tracker.createInstance<DwarfCCContext>(_ctx, getState());
  enterRule(_localctx, 708, LLVMParser::RuleDwarfCC);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3635);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::INT_LIT: {
        enterOuterAlt(_localctx, 1);
        setState(3633);
        intLit();
        break;
      }

      case LLVMParser::DWARF_CC: {
        enterOuterAlt(_localctx, 2);
        setState(3634);
        match(LLVMParser::DWARF_CC);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DwarfLangContext ------------------------------------------------------------------

LLVMParser::DwarfLangContext::DwarfLangContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::IntLitContext* LLVMParser::DwarfLangContext::intLit() {
  return getRuleContext<LLVMParser::IntLitContext>(0);
}

tree::TerminalNode* LLVMParser::DwarfLangContext::DWARF_LANG() {
  return getToken(LLVMParser::DWARF_LANG, 0);
}


size_t LLVMParser::DwarfLangContext::getRuleIndex() const {
  return LLVMParser::RuleDwarfLang;
}


std::any LLVMParser::DwarfLangContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDwarfLang(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DwarfLangContext* LLVMParser::dwarfLang() {
  DwarfLangContext *_localctx = _tracker.createInstance<DwarfLangContext>(_ctx, getState());
  enterRule(_localctx, 710, LLVMParser::RuleDwarfLang);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3639);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::INT_LIT: {
        enterOuterAlt(_localctx, 1);
        setState(3637);
        intLit();
        break;
      }

      case LLVMParser::DWARF_LANG: {
        enterOuterAlt(_localctx, 2);
        setState(3638);
        match(LLVMParser::DWARF_LANG);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DwarfMacinfoContext ------------------------------------------------------------------

LLVMParser::DwarfMacinfoContext::DwarfMacinfoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::IntLitContext* LLVMParser::DwarfMacinfoContext::intLit() {
  return getRuleContext<LLVMParser::IntLitContext>(0);
}

tree::TerminalNode* LLVMParser::DwarfMacinfoContext::DWARF_MACINFO() {
  return getToken(LLVMParser::DWARF_MACINFO, 0);
}


size_t LLVMParser::DwarfMacinfoContext::getRuleIndex() const {
  return LLVMParser::RuleDwarfMacinfo;
}


std::any LLVMParser::DwarfMacinfoContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDwarfMacinfo(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DwarfMacinfoContext* LLVMParser::dwarfMacinfo() {
  DwarfMacinfoContext *_localctx = _tracker.createInstance<DwarfMacinfoContext>(_ctx, getState());
  enterRule(_localctx, 712, LLVMParser::RuleDwarfMacinfo);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3643);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::INT_LIT: {
        enterOuterAlt(_localctx, 1);
        setState(3641);
        intLit();
        break;
      }

      case LLVMParser::DWARF_MACINFO: {
        enterOuterAlt(_localctx, 2);
        setState(3642);
        match(LLVMParser::DWARF_MACINFO);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DwarfOpContext ------------------------------------------------------------------

LLVMParser::DwarfOpContext::DwarfOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DwarfOpContext::DWARF_OP() {
  return getToken(LLVMParser::DWARF_OP, 0);
}


size_t LLVMParser::DwarfOpContext::getRuleIndex() const {
  return LLVMParser::RuleDwarfOp;
}


std::any LLVMParser::DwarfOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDwarfOp(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DwarfOpContext* LLVMParser::dwarfOp() {
  DwarfOpContext *_localctx = _tracker.createInstance<DwarfOpContext>(_ctx, getState());
  enterRule(_localctx, 714, LLVMParser::RuleDwarfOp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3645);
    match(LLVMParser::DWARF_OP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DwarfTagContext ------------------------------------------------------------------

LLVMParser::DwarfTagContext::DwarfTagContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::IntLitContext* LLVMParser::DwarfTagContext::intLit() {
  return getRuleContext<LLVMParser::IntLitContext>(0);
}

tree::TerminalNode* LLVMParser::DwarfTagContext::DWARF_TAG() {
  return getToken(LLVMParser::DWARF_TAG, 0);
}


size_t LLVMParser::DwarfTagContext::getRuleIndex() const {
  return LLVMParser::RuleDwarfTag;
}


std::any LLVMParser::DwarfTagContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDwarfTag(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DwarfTagContext* LLVMParser::dwarfTag() {
  DwarfTagContext *_localctx = _tracker.createInstance<DwarfTagContext>(_ctx, getState());
  enterRule(_localctx, 716, LLVMParser::RuleDwarfTag);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3649);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::INT_LIT: {
        enterOuterAlt(_localctx, 1);
        setState(3647);
        intLit();
        break;
      }

      case LLVMParser::DWARF_TAG: {
        enterOuterAlt(_localctx, 2);
        setState(3648);
        match(LLVMParser::DWARF_TAG);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DwarfVirtualityContext ------------------------------------------------------------------

LLVMParser::DwarfVirtualityContext::DwarfVirtualityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::IntLitContext* LLVMParser::DwarfVirtualityContext::intLit() {
  return getRuleContext<LLVMParser::IntLitContext>(0);
}

tree::TerminalNode* LLVMParser::DwarfVirtualityContext::DWARF_VIRTUALITY() {
  return getToken(LLVMParser::DWARF_VIRTUALITY, 0);
}


size_t LLVMParser::DwarfVirtualityContext::getRuleIndex() const {
  return LLVMParser::RuleDwarfVirtuality;
}


std::any LLVMParser::DwarfVirtualityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDwarfVirtuality(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DwarfVirtualityContext* LLVMParser::dwarfVirtuality() {
  DwarfVirtualityContext *_localctx = _tracker.createInstance<DwarfVirtualityContext>(_ctx, getState());
  enterRule(_localctx, 718, LLVMParser::RuleDwarfVirtuality);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3653);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::INT_LIT: {
        enterOuterAlt(_localctx, 1);
        setState(3651);
        intLit();
        break;
      }

      case LLVMParser::DWARF_VIRTUALITY: {
        enterOuterAlt(_localctx, 2);
        setState(3652);
        match(LLVMParser::DWARF_VIRTUALITY);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmissionKindContext ------------------------------------------------------------------

LLVMParser::EmissionKindContext::EmissionKindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::IntLitContext* LLVMParser::EmissionKindContext::intLit() {
  return getRuleContext<LLVMParser::IntLitContext>(0);
}

tree::TerminalNode* LLVMParser::EmissionKindContext::FULLDEBUG() {
  return getToken(LLVMParser::FULLDEBUG, 0);
}

tree::TerminalNode* LLVMParser::EmissionKindContext::LINETABLESONLY() {
  return getToken(LLVMParser::LINETABLESONLY, 0);
}

tree::TerminalNode* LLVMParser::EmissionKindContext::NODEBUG() {
  return getToken(LLVMParser::NODEBUG, 0);
}


size_t LLVMParser::EmissionKindContext::getRuleIndex() const {
  return LLVMParser::RuleEmissionKind;
}


std::any LLVMParser::EmissionKindContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitEmissionKind(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::EmissionKindContext* LLVMParser::emissionKind() {
  EmissionKindContext *_localctx = _tracker.createInstance<EmissionKindContext>(_ctx, getState());
  enterRule(_localctx, 720, LLVMParser::RuleEmissionKind);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3659);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::INT_LIT: {
        enterOuterAlt(_localctx, 1);
        setState(3655);
        intLit();
        break;
      }

      case LLVMParser::FULLDEBUG: {
        enterOuterAlt(_localctx, 2);
        setState(3656);
        match(LLVMParser::FULLDEBUG);
        break;
      }

      case LLVMParser::LINETABLESONLY: {
        enterOuterAlt(_localctx, 3);
        setState(3657);
        match(LLVMParser::LINETABLESONLY);
        break;
      }

      case LLVMParser::NODEBUG: {
        enterOuterAlt(_localctx, 4);
        setState(3658);
        match(LLVMParser::NODEBUG);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeValuesContext ------------------------------------------------------------------

LLVMParser::TypeValuesContext::TypeValuesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::TypeValueListContext* LLVMParser::TypeValuesContext::typeValueList() {
  return getRuleContext<LLVMParser::TypeValueListContext>(0);
}


size_t LLVMParser::TypeValuesContext::getRuleIndex() const {
  return LLVMParser::RuleTypeValues;
}


std::any LLVMParser::TypeValuesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitTypeValues(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::TypeValuesContext* LLVMParser::typeValues() {
  TypeValuesContext *_localctx = _tracker.createInstance<TypeValuesContext>(_ctx, getState());
  enterRule(_localctx, 722, LLVMParser::RuleTypeValues);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3662);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5122) != 0) || ((((_la - 126) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 126)) & 2251821288521729) != 0) || _la == LLVMParser::LABEL

    || _la == LLVMParser::METADATA || _la == LLVMParser::PPC_FP128 || ((((_la - 351) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 351)) & 175939040313345) != 0) || _la == LLVMParser::INT_TYPE

    || _la == LLVMParser::LOCAL_IDENT) {
      setState(3661);
      typeValueList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeValueListContext ------------------------------------------------------------------

LLVMParser::TypeValueListContext::TypeValueListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::TypeValueContext* LLVMParser::TypeValueListContext::typeValue() {
  return getRuleContext<LLVMParser::TypeValueContext>(0);
}

LLVMParser::TypeValueListContext* LLVMParser::TypeValueListContext::typeValueList() {
  return getRuleContext<LLVMParser::TypeValueListContext>(0);
}


size_t LLVMParser::TypeValueListContext::getRuleIndex() const {
  return LLVMParser::RuleTypeValueList;
}


std::any LLVMParser::TypeValueListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitTypeValueList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::TypeValueListContext* LLVMParser::typeValueList() {
   return typeValueList(0);
}

LLVMParser::TypeValueListContext* LLVMParser::typeValueList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::TypeValueListContext *_localctx = _tracker.createInstance<TypeValueListContext>(_ctx, parentState);
  LLVMParser::TypeValueListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 724;
  enterRecursionRule(_localctx, 724, LLVMParser::RuleTypeValueList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3665);
    typeValue();
    _ctx->stop = _input->LT(-1);
    setState(3671);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<TypeValueListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleTypeValueList);
        setState(3667);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3668);
        typeValue(); 
      }
      setState(3673);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- CommaSepTypeValueListContext ------------------------------------------------------------------

LLVMParser::CommaSepTypeValueListContext::CommaSepTypeValueListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::TypeValueContext* LLVMParser::CommaSepTypeValueListContext::typeValue() {
  return getRuleContext<LLVMParser::TypeValueContext>(0);
}

LLVMParser::CommaSepTypeValueListContext* LLVMParser::CommaSepTypeValueListContext::commaSepTypeValueList() {
  return getRuleContext<LLVMParser::CommaSepTypeValueListContext>(0);
}

tree::TerminalNode* LLVMParser::CommaSepTypeValueListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::CommaSepTypeValueListContext::getRuleIndex() const {
  return LLVMParser::RuleCommaSepTypeValueList;
}


std::any LLVMParser::CommaSepTypeValueListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitCommaSepTypeValueList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::CommaSepTypeValueListContext* LLVMParser::commaSepTypeValueList() {
   return commaSepTypeValueList(0);
}

LLVMParser::CommaSepTypeValueListContext* LLVMParser::commaSepTypeValueList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::CommaSepTypeValueListContext *_localctx = _tracker.createInstance<CommaSepTypeValueListContext>(_ctx, parentState);
  LLVMParser::CommaSepTypeValueListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 726;
  enterRecursionRule(_localctx, 726, LLVMParser::RuleCommaSepTypeValueList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3675);
    typeValue();
    _ctx->stop = _input->LT(-1);
    setState(3682);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<CommaSepTypeValueListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleCommaSepTypeValueList);
        setState(3677);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3678);
        match(LLVMParser::COMMA);
        setState(3679);
        typeValue(); 
      }
      setState(3684);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TypeValueContext ------------------------------------------------------------------

LLVMParser::TypeValueContext::TypeValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::LlvmTypeContext* LLVMParser::TypeValueContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::ValueContext* LLVMParser::TypeValueContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}


size_t LLVMParser::TypeValueContext::getRuleIndex() const {
  return LLVMParser::RuleTypeValue;
}


std::any LLVMParser::TypeValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitTypeValue(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::TypeValueContext* LLVMParser::typeValue() {
  TypeValueContext *_localctx = _tracker.createInstance<TypeValueContext>(_ctx, getState());
  enterRule(_localctx, 728, LLVMParser::RuleTypeValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3685);
    llvmType(0);
    setState(3686);
    value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeConstsContext ------------------------------------------------------------------

LLVMParser::TypeConstsContext::TypeConstsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::TypeConstListContext* LLVMParser::TypeConstsContext::typeConstList() {
  return getRuleContext<LLVMParser::TypeConstListContext>(0);
}


size_t LLVMParser::TypeConstsContext::getRuleIndex() const {
  return LLVMParser::RuleTypeConsts;
}


std::any LLVMParser::TypeConstsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitTypeConsts(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::TypeConstsContext* LLVMParser::typeConsts() {
  TypeConstsContext *_localctx = _tracker.createInstance<TypeConstsContext>(_ctx, getState());
  enterRule(_localctx, 730, LLVMParser::RuleTypeConsts);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3689);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5122) != 0) || ((((_la - 126) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 126)) & 2251821288521729) != 0) || _la == LLVMParser::LABEL

    || _la == LLVMParser::METADATA || _la == LLVMParser::PPC_FP128 || ((((_la - 351) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 351)) & 175939040313345) != 0) || _la == LLVMParser::INT_TYPE

    || _la == LLVMParser::LOCAL_IDENT) {
      setState(3688);
      typeConstList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeConstListContext ------------------------------------------------------------------

LLVMParser::TypeConstListContext::TypeConstListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::TypeConstContext* LLVMParser::TypeConstListContext::typeConst() {
  return getRuleContext<LLVMParser::TypeConstContext>(0);
}

LLVMParser::TypeConstListContext* LLVMParser::TypeConstListContext::typeConstList() {
  return getRuleContext<LLVMParser::TypeConstListContext>(0);
}

tree::TerminalNode* LLVMParser::TypeConstListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::TypeConstListContext::getRuleIndex() const {
  return LLVMParser::RuleTypeConstList;
}


std::any LLVMParser::TypeConstListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitTypeConstList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::TypeConstListContext* LLVMParser::typeConstList() {
   return typeConstList(0);
}

LLVMParser::TypeConstListContext* LLVMParser::typeConstList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::TypeConstListContext *_localctx = _tracker.createInstance<TypeConstListContext>(_ctx, parentState);
  LLVMParser::TypeConstListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 732;
  enterRecursionRule(_localctx, 732, LLVMParser::RuleTypeConstList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3692);
    typeConst();
    _ctx->stop = _input->LT(-1);
    setState(3699);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<TypeConstListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleTypeConstList);
        setState(3694);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3695);
        match(LLVMParser::COMMA);
        setState(3696);
        typeConst(); 
      }
      setState(3701);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TypeConstContext ------------------------------------------------------------------

LLVMParser::TypeConstContext::TypeConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::LlvmTypeContext* LLVMParser::TypeConstContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::ConstantContext* LLVMParser::TypeConstContext::constant() {
  return getRuleContext<LLVMParser::ConstantContext>(0);
}


size_t LLVMParser::TypeConstContext::getRuleIndex() const {
  return LLVMParser::RuleTypeConst;
}


std::any LLVMParser::TypeConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitTypeConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::TypeConstContext* LLVMParser::typeConst() {
  TypeConstContext *_localctx = _tracker.createInstance<TypeConstContext>(_ctx, getState());
  enterRule(_localctx, 734, LLVMParser::RuleTypeConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3702);
    llvmType(0);
    setState(3703);
    constant();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlignmentContext ------------------------------------------------------------------

LLVMParser::AlignmentContext::AlignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::AlignmentContext::ALIGN() {
  return getToken(LLVMParser::ALIGN, 0);
}

tree::TerminalNode* LLVMParser::AlignmentContext::INT_LIT() {
  return getToken(LLVMParser::INT_LIT, 0);
}


size_t LLVMParser::AlignmentContext::getRuleIndex() const {
  return LLVMParser::RuleAlignment;
}


std::any LLVMParser::AlignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitAlignment(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::AlignmentContext* LLVMParser::alignment() {
  AlignmentContext *_localctx = _tracker.createInstance<AlignmentContext>(_ctx, getState());
  enterRule(_localctx, 736, LLVMParser::RuleAlignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3705);
    match(LLVMParser::ALIGN);
    setState(3706);
    match(LLVMParser::INT_LIT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AllocSizeContext ------------------------------------------------------------------

LLVMParser::AllocSizeContext::AllocSizeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::AllocSizeContext::ALLOCSIZE() {
  return getToken(LLVMParser::ALLOCSIZE, 0);
}

tree::TerminalNode* LLVMParser::AllocSizeContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

std::vector<tree::TerminalNode *> LLVMParser::AllocSizeContext::INT_LIT() {
  return getTokens(LLVMParser::INT_LIT);
}

tree::TerminalNode* LLVMParser::AllocSizeContext::INT_LIT(size_t i) {
  return getToken(LLVMParser::INT_LIT, i);
}

tree::TerminalNode* LLVMParser::AllocSizeContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}

tree::TerminalNode* LLVMParser::AllocSizeContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::AllocSizeContext::getRuleIndex() const {
  return LLVMParser::RuleAllocSize;
}


std::any LLVMParser::AllocSizeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitAllocSize(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::AllocSizeContext* LLVMParser::allocSize() {
  AllocSizeContext *_localctx = _tracker.createInstance<AllocSizeContext>(_ctx, getState());
  enterRule(_localctx, 738, LLVMParser::RuleAllocSize);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3718);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3708);
      match(LLVMParser::ALLOCSIZE);
      setState(3709);
      match(LLVMParser::LPAREN);
      setState(3710);
      match(LLVMParser::INT_LIT);
      setState(3711);
      match(LLVMParser::RPAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3712);
      match(LLVMParser::ALLOCSIZE);
      setState(3713);
      match(LLVMParser::LPAREN);
      setState(3714);
      match(LLVMParser::INT_LIT);
      setState(3715);
      match(LLVMParser::COMMA);
      setState(3716);
      match(LLVMParser::INT_LIT);
      setState(3717);
      match(LLVMParser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgsContext ------------------------------------------------------------------

LLVMParser::ArgsContext::ArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ArgsContext::DOTS() {
  return getToken(LLVMParser::DOTS, 0);
}

LLVMParser::ArgListContext* LLVMParser::ArgsContext::argList() {
  return getRuleContext<LLVMParser::ArgListContext>(0);
}

tree::TerminalNode* LLVMParser::ArgsContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::ArgsContext::getRuleIndex() const {
  return LLVMParser::RuleArgs;
}


std::any LLVMParser::ArgsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitArgs(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ArgsContext* LLVMParser::args() {
  ArgsContext *_localctx = _tracker.createInstance<ArgsContext>(_ctx, getState());
  enterRule(_localctx, 740, LLVMParser::RuleArgs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3726);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx)) {
    case 1: {
      setState(3720);
      match(LLVMParser::DOTS);
      break;
    }

    case 2: {
      setState(3721);
      argList(0);
      break;
    }

    case 3: {
      setState(3722);
      argList(0);
      setState(3723);
      match(LLVMParser::COMMA);
      setState(3724);
      match(LLVMParser::DOTS);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgListContext ------------------------------------------------------------------

LLVMParser::ArgListContext::ArgListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::ArgContext* LLVMParser::ArgListContext::arg() {
  return getRuleContext<LLVMParser::ArgContext>(0);
}

LLVMParser::ArgListContext* LLVMParser::ArgListContext::argList() {
  return getRuleContext<LLVMParser::ArgListContext>(0);
}

tree::TerminalNode* LLVMParser::ArgListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::ArgListContext::getRuleIndex() const {
  return LLVMParser::RuleArgList;
}


std::any LLVMParser::ArgListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitArgList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::ArgListContext* LLVMParser::argList() {
   return argList(0);
}

LLVMParser::ArgListContext* LLVMParser::argList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::ArgListContext *_localctx = _tracker.createInstance<ArgListContext>(_ctx, parentState);
  LLVMParser::ArgListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 742;
  enterRecursionRule(_localctx, 742, LLVMParser::RuleArgList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3729);
    arg();
    _ctx->stop = _input->LT(-1);
    setState(3736);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 191, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ArgListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleArgList);
        setState(3731);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3732);
        match(LLVMParser::COMMA);
        setState(3733);
        arg(); 
      }
      setState(3738);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 191, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ArgContext ------------------------------------------------------------------

LLVMParser::ArgContext::ArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::ParamAttrsContext* LLVMParser::ArgContext::paramAttrs() {
  return getRuleContext<LLVMParser::ParamAttrsContext>(0);
}

LLVMParser::ValueContext* LLVMParser::ArgContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::ArgContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::OptAddrSpaceContext* LLVMParser::ArgContext::optAddrSpace() {
  return getRuleContext<LLVMParser::OptAddrSpaceContext>(0);
}

tree::TerminalNode* LLVMParser::ArgContext::STAR() {
  return getToken(LLVMParser::STAR, 0);
}

LLVMParser::ConcreteNonRecTypeContext* LLVMParser::ArgContext::concreteNonRecType() {
  return getRuleContext<LLVMParser::ConcreteNonRecTypeContext>(0);
}

LLVMParser::MetadataTypeContext* LLVMParser::ArgContext::metadataType() {
  return getRuleContext<LLVMParser::MetadataTypeContext>(0);
}

LLVMParser::MetadataContext* LLVMParser::ArgContext::metadata() {
  return getRuleContext<LLVMParser::MetadataContext>(0);
}


size_t LLVMParser::ArgContext::getRuleIndex() const {
  return LLVMParser::RuleArg;
}


std::any LLVMParser::ArgContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitArg(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ArgContext* LLVMParser::arg() {
  ArgContext *_localctx = _tracker.createInstance<ArgContext>(_ctx, getState());
  enterRule(_localctx, 744, LLVMParser::RuleArg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3752);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3744);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx)) {
      case 1: {
        setState(3739);
        llvmType(0);
        setState(3740);
        optAddrSpace();
        setState(3741);
        match(LLVMParser::STAR);
        break;
      }

      case 2: {
        setState(3743);
        concreteNonRecType();
        break;
      }

      default:
        break;
      }
      setState(3746);
      paramAttrs();
      setState(3747);
      value();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3749);
      metadataType();
      setState(3750);
      metadata();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AtomicOrderingContext ------------------------------------------------------------------

LLVMParser::AtomicOrderingContext::AtomicOrderingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::AtomicOrderingContext::ACQ_REL() {
  return getToken(LLVMParser::ACQ_REL, 0);
}

tree::TerminalNode* LLVMParser::AtomicOrderingContext::ACQUIRE() {
  return getToken(LLVMParser::ACQUIRE, 0);
}

tree::TerminalNode* LLVMParser::AtomicOrderingContext::MONOTONIC() {
  return getToken(LLVMParser::MONOTONIC, 0);
}

tree::TerminalNode* LLVMParser::AtomicOrderingContext::RELEASE() {
  return getToken(LLVMParser::RELEASE, 0);
}

tree::TerminalNode* LLVMParser::AtomicOrderingContext::SEQ_CST() {
  return getToken(LLVMParser::SEQ_CST, 0);
}

tree::TerminalNode* LLVMParser::AtomicOrderingContext::UNORDERED() {
  return getToken(LLVMParser::UNORDERED, 0);
}


size_t LLVMParser::AtomicOrderingContext::getRuleIndex() const {
  return LLVMParser::RuleAtomicOrdering;
}


std::any LLVMParser::AtomicOrderingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitAtomicOrdering(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::AtomicOrderingContext* LLVMParser::atomicOrdering() {
  AtomicOrderingContext *_localctx = _tracker.createInstance<AtomicOrderingContext>(_ctx, getState());
  enterRule(_localctx, 746, LLVMParser::RuleAtomicOrdering);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3754);
    _la = _input->LA(1);
    if (!(_la == LLVMParser::ACQ_REL

    || _la == LLVMParser::ACQUIRE || _la == LLVMParser::MONOTONIC

    || _la == LLVMParser::RELEASE || _la == LLVMParser::SEQ_CST

    || _la == LLVMParser::UNORDERED)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptCallingConvContext ------------------------------------------------------------------

LLVMParser::OptCallingConvContext::OptCallingConvContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::CallingConvContext* LLVMParser::OptCallingConvContext::callingConv() {
  return getRuleContext<LLVMParser::CallingConvContext>(0);
}


size_t LLVMParser::OptCallingConvContext::getRuleIndex() const {
  return LLVMParser::RuleOptCallingConv;
}


std::any LLVMParser::OptCallingConvContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptCallingConv(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptCallingConvContext* LLVMParser::optCallingConv() {
  OptCallingConvContext *_localctx = _tracker.createInstance<OptCallingConvContext>(_ctx, getState());
  enterRule(_localctx, 748, LLVMParser::RuleOptCallingConv);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3757);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 28) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 28)) & 1154054001684350207) != 0) || ((((_la - 150) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 150)) & 1125901525843969) != 0) || ((((_la - 232) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 232)) & 108930815987023873) != 0) || ((((_la - 326) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 326)) & -9223372036854771709) != 0) || ((((_la - 390) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 390)) & 7857) != 0)) {
      setState(3756);
      callingConv();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallingConvContext ------------------------------------------------------------------

LLVMParser::CallingConvContext::CallingConvContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::CallingConvContext::AMDGPU_CS() {
  return getToken(LLVMParser::AMDGPU_CS, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::AMDGPU_ES() {
  return getToken(LLVMParser::AMDGPU_ES, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::AMDGPU_GS() {
  return getToken(LLVMParser::AMDGPU_GS, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::AMDGPU_HS() {
  return getToken(LLVMParser::AMDGPU_HS, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::AMDGPU_KERNEL() {
  return getToken(LLVMParser::AMDGPU_KERNEL, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::AMDGPU_LS() {
  return getToken(LLVMParser::AMDGPU_LS, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::AMDGPU_PS() {
  return getToken(LLVMParser::AMDGPU_PS, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::AMDGPU_VS() {
  return getToken(LLVMParser::AMDGPU_VS, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::ANYREGCC() {
  return getToken(LLVMParser::ANYREGCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::ARM_AAPCS_VFPCC() {
  return getToken(LLVMParser::ARM_AAPCS_VFPCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::ARM_AAPCSCC() {
  return getToken(LLVMParser::ARM_AAPCSCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::ARM_APCSCC() {
  return getToken(LLVMParser::ARM_APCSCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::AVR_INTRCC() {
  return getToken(LLVMParser::AVR_INTRCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::AVR_SIGNALCC() {
  return getToken(LLVMParser::AVR_SIGNALCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::CCC() {
  return getToken(LLVMParser::CCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::COLDCC() {
  return getToken(LLVMParser::COLDCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::CXX_FAST_TLSCC() {
  return getToken(LLVMParser::CXX_FAST_TLSCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::FASTCC() {
  return getToken(LLVMParser::FASTCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::GHCCC() {
  return getToken(LLVMParser::GHCCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::HHVM_CCC() {
  return getToken(LLVMParser::HHVM_CCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::HHVMCC() {
  return getToken(LLVMParser::HHVMCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::INTEL_OCL_BICC() {
  return getToken(LLVMParser::INTEL_OCL_BICC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::MSP430_INTRCC() {
  return getToken(LLVMParser::MSP430_INTRCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::PRESERVE_ALLCC() {
  return getToken(LLVMParser::PRESERVE_ALLCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::PRESERVE_MOSTCC() {
  return getToken(LLVMParser::PRESERVE_MOSTCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::PTX_DEVICE() {
  return getToken(LLVMParser::PTX_DEVICE, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::PTX_KERNEL() {
  return getToken(LLVMParser::PTX_KERNEL, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::SPIR_FUNC() {
  return getToken(LLVMParser::SPIR_FUNC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::SPIR_KERNEL() {
  return getToken(LLVMParser::SPIR_KERNEL, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::SWIFTCC() {
  return getToken(LLVMParser::SWIFTCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::WEBKIT_JSCC() {
  return getToken(LLVMParser::WEBKIT_JSCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::WIN64CC() {
  return getToken(LLVMParser::WIN64CC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::X86_64_SYSVCC() {
  return getToken(LLVMParser::X86_64_SYSVCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::X86_FASTCALLCC() {
  return getToken(LLVMParser::X86_FASTCALLCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::X86_INTRCC() {
  return getToken(LLVMParser::X86_INTRCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::X86_REGCALLCC() {
  return getToken(LLVMParser::X86_REGCALLCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::X86_STDCALLCC() {
  return getToken(LLVMParser::X86_STDCALLCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::X86_THISCALLCC() {
  return getToken(LLVMParser::X86_THISCALLCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::X86_VECTORCALLCC() {
  return getToken(LLVMParser::X86_VECTORCALLCC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::CC() {
  return getToken(LLVMParser::CC, 0);
}

tree::TerminalNode* LLVMParser::CallingConvContext::INT_LIT() {
  return getToken(LLVMParser::INT_LIT, 0);
}


size_t LLVMParser::CallingConvContext::getRuleIndex() const {
  return LLVMParser::RuleCallingConv;
}


std::any LLVMParser::CallingConvContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitCallingConv(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::CallingConvContext* LLVMParser::callingConv() {
  CallingConvContext *_localctx = _tracker.createInstance<CallingConvContext>(_ctx, getState());
  enterRule(_localctx, 750, LLVMParser::RuleCallingConv);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3800);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::AMDGPU_CS: {
        enterOuterAlt(_localctx, 1);
        setState(3759);
        match(LLVMParser::AMDGPU_CS);
        break;
      }

      case LLVMParser::AMDGPU_ES: {
        enterOuterAlt(_localctx, 2);
        setState(3760);
        match(LLVMParser::AMDGPU_ES);
        break;
      }

      case LLVMParser::AMDGPU_GS: {
        enterOuterAlt(_localctx, 3);
        setState(3761);
        match(LLVMParser::AMDGPU_GS);
        break;
      }

      case LLVMParser::AMDGPU_HS: {
        enterOuterAlt(_localctx, 4);
        setState(3762);
        match(LLVMParser::AMDGPU_HS);
        break;
      }

      case LLVMParser::AMDGPU_KERNEL: {
        enterOuterAlt(_localctx, 5);
        setState(3763);
        match(LLVMParser::AMDGPU_KERNEL);
        break;
      }

      case LLVMParser::AMDGPU_LS: {
        enterOuterAlt(_localctx, 6);
        setState(3764);
        match(LLVMParser::AMDGPU_LS);
        break;
      }

      case LLVMParser::AMDGPU_PS: {
        enterOuterAlt(_localctx, 7);
        setState(3765);
        match(LLVMParser::AMDGPU_PS);
        break;
      }

      case LLVMParser::AMDGPU_VS: {
        enterOuterAlt(_localctx, 8);
        setState(3766);
        match(LLVMParser::AMDGPU_VS);
        break;
      }

      case LLVMParser::ANYREGCC: {
        enterOuterAlt(_localctx, 9);
        setState(3767);
        match(LLVMParser::ANYREGCC);
        break;
      }

      case LLVMParser::ARM_AAPCS_VFPCC: {
        enterOuterAlt(_localctx, 10);
        setState(3768);
        match(LLVMParser::ARM_AAPCS_VFPCC);
        break;
      }

      case LLVMParser::ARM_AAPCSCC: {
        enterOuterAlt(_localctx, 11);
        setState(3769);
        match(LLVMParser::ARM_AAPCSCC);
        break;
      }

      case LLVMParser::ARM_APCSCC: {
        enterOuterAlt(_localctx, 12);
        setState(3770);
        match(LLVMParser::ARM_APCSCC);
        break;
      }

      case LLVMParser::AVR_INTRCC: {
        enterOuterAlt(_localctx, 13);
        setState(3771);
        match(LLVMParser::AVR_INTRCC);
        break;
      }

      case LLVMParser::AVR_SIGNALCC: {
        enterOuterAlt(_localctx, 14);
        setState(3772);
        match(LLVMParser::AVR_SIGNALCC);
        break;
      }

      case LLVMParser::CCC: {
        enterOuterAlt(_localctx, 15);
        setState(3773);
        match(LLVMParser::CCC);
        break;
      }

      case LLVMParser::COLDCC: {
        enterOuterAlt(_localctx, 16);
        setState(3774);
        match(LLVMParser::COLDCC);
        break;
      }

      case LLVMParser::CXX_FAST_TLSCC: {
        enterOuterAlt(_localctx, 17);
        setState(3775);
        match(LLVMParser::CXX_FAST_TLSCC);
        break;
      }

      case LLVMParser::FASTCC: {
        enterOuterAlt(_localctx, 18);
        setState(3776);
        match(LLVMParser::FASTCC);
        break;
      }

      case LLVMParser::GHCCC: {
        enterOuterAlt(_localctx, 19);
        setState(3777);
        match(LLVMParser::GHCCC);
        break;
      }

      case LLVMParser::HHVM_CCC: {
        enterOuterAlt(_localctx, 20);
        setState(3778);
        match(LLVMParser::HHVM_CCC);
        break;
      }

      case LLVMParser::HHVMCC: {
        enterOuterAlt(_localctx, 21);
        setState(3779);
        match(LLVMParser::HHVMCC);
        break;
      }

      case LLVMParser::INTEL_OCL_BICC: {
        enterOuterAlt(_localctx, 22);
        setState(3780);
        match(LLVMParser::INTEL_OCL_BICC);
        break;
      }

      case LLVMParser::MSP430_INTRCC: {
        enterOuterAlt(_localctx, 23);
        setState(3781);
        match(LLVMParser::MSP430_INTRCC);
        break;
      }

      case LLVMParser::PRESERVE_ALLCC: {
        enterOuterAlt(_localctx, 24);
        setState(3782);
        match(LLVMParser::PRESERVE_ALLCC);
        break;
      }

      case LLVMParser::PRESERVE_MOSTCC: {
        enterOuterAlt(_localctx, 25);
        setState(3783);
        match(LLVMParser::PRESERVE_MOSTCC);
        break;
      }

      case LLVMParser::PTX_DEVICE: {
        enterOuterAlt(_localctx, 26);
        setState(3784);
        match(LLVMParser::PTX_DEVICE);
        break;
      }

      case LLVMParser::PTX_KERNEL: {
        enterOuterAlt(_localctx, 27);
        setState(3785);
        match(LLVMParser::PTX_KERNEL);
        break;
      }

      case LLVMParser::SPIR_FUNC: {
        enterOuterAlt(_localctx, 28);
        setState(3786);
        match(LLVMParser::SPIR_FUNC);
        break;
      }

      case LLVMParser::SPIR_KERNEL: {
        enterOuterAlt(_localctx, 29);
        setState(3787);
        match(LLVMParser::SPIR_KERNEL);
        break;
      }

      case LLVMParser::SWIFTCC: {
        enterOuterAlt(_localctx, 30);
        setState(3788);
        match(LLVMParser::SWIFTCC);
        break;
      }

      case LLVMParser::WEBKIT_JSCC: {
        enterOuterAlt(_localctx, 31);
        setState(3789);
        match(LLVMParser::WEBKIT_JSCC);
        break;
      }

      case LLVMParser::WIN64CC: {
        enterOuterAlt(_localctx, 32);
        setState(3790);
        match(LLVMParser::WIN64CC);
        break;
      }

      case LLVMParser::X86_64_SYSVCC: {
        enterOuterAlt(_localctx, 33);
        setState(3791);
        match(LLVMParser::X86_64_SYSVCC);
        break;
      }

      case LLVMParser::X86_FASTCALLCC: {
        enterOuterAlt(_localctx, 34);
        setState(3792);
        match(LLVMParser::X86_FASTCALLCC);
        break;
      }

      case LLVMParser::X86_INTRCC: {
        enterOuterAlt(_localctx, 35);
        setState(3793);
        match(LLVMParser::X86_INTRCC);
        break;
      }

      case LLVMParser::X86_REGCALLCC: {
        enterOuterAlt(_localctx, 36);
        setState(3794);
        match(LLVMParser::X86_REGCALLCC);
        break;
      }

      case LLVMParser::X86_STDCALLCC: {
        enterOuterAlt(_localctx, 37);
        setState(3795);
        match(LLVMParser::X86_STDCALLCC);
        break;
      }

      case LLVMParser::X86_THISCALLCC: {
        enterOuterAlt(_localctx, 38);
        setState(3796);
        match(LLVMParser::X86_THISCALLCC);
        break;
      }

      case LLVMParser::X86_VECTORCALLCC: {
        enterOuterAlt(_localctx, 39);
        setState(3797);
        match(LLVMParser::X86_VECTORCALLCC);
        break;
      }

      case LLVMParser::CC: {
        enterOuterAlt(_localctx, 40);
        setState(3798);
        match(LLVMParser::CC);
        setState(3799);
        match(LLVMParser::INT_LIT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptComdatContext ------------------------------------------------------------------

LLVMParser::OptComdatContext::OptComdatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::ComdatContext* LLVMParser::OptComdatContext::comdat() {
  return getRuleContext<LLVMParser::ComdatContext>(0);
}


size_t LLVMParser::OptComdatContext::getRuleIndex() const {
  return LLVMParser::RuleOptComdat;
}


std::any LLVMParser::OptComdatContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptComdat(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptComdatContext* LLVMParser::optComdat() {
  OptComdatContext *_localctx = _tracker.createInstance<OptComdatContext>(_ctx, getState());
  enterRule(_localctx, 752, LLVMParser::RuleOptComdat);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3803);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx)) {
    case 1: {
      setState(3802);
      comdat();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComdatContext ------------------------------------------------------------------

LLVMParser::ComdatContext::ComdatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ComdatContext::COMDAT() {
  return getToken(LLVMParser::COMDAT, 0);
}

tree::TerminalNode* LLVMParser::ComdatContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::ComdatNameContext* LLVMParser::ComdatContext::comdatName() {
  return getRuleContext<LLVMParser::ComdatNameContext>(0);
}

tree::TerminalNode* LLVMParser::ComdatContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::ComdatContext::getRuleIndex() const {
  return LLVMParser::RuleComdat;
}


std::any LLVMParser::ComdatContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitComdat(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ComdatContext* LLVMParser::comdat() {
  ComdatContext *_localctx = _tracker.createInstance<ComdatContext>(_ctx, getState());
  enterRule(_localctx, 754, LLVMParser::RuleComdat);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3811);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3805);
      match(LLVMParser::COMDAT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3806);
      match(LLVMParser::COMDAT);
      setState(3807);
      match(LLVMParser::LPAREN);
      setState(3808);
      comdatName();
      setState(3809);
      match(LLVMParser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DereferenceableContext ------------------------------------------------------------------

LLVMParser::DereferenceableContext::DereferenceableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DereferenceableContext::DEREFERENCEABLE() {
  return getToken(LLVMParser::DEREFERENCEABLE, 0);
}

tree::TerminalNode* LLVMParser::DereferenceableContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

tree::TerminalNode* LLVMParser::DereferenceableContext::INT_LIT() {
  return getToken(LLVMParser::INT_LIT, 0);
}

tree::TerminalNode* LLVMParser::DereferenceableContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}

tree::TerminalNode* LLVMParser::DereferenceableContext::DEREFERENCEABLE_OR_NULL() {
  return getToken(LLVMParser::DEREFERENCEABLE_OR_NULL, 0);
}


size_t LLVMParser::DereferenceableContext::getRuleIndex() const {
  return LLVMParser::RuleDereferenceable;
}


std::any LLVMParser::DereferenceableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDereferenceable(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DereferenceableContext* LLVMParser::dereferenceable() {
  DereferenceableContext *_localctx = _tracker.createInstance<DereferenceableContext>(_ctx, getState());
  enterRule(_localctx, 756, LLVMParser::RuleDereferenceable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3821);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::DEREFERENCEABLE: {
        enterOuterAlt(_localctx, 1);
        setState(3813);
        match(LLVMParser::DEREFERENCEABLE);
        setState(3814);
        match(LLVMParser::LPAREN);
        setState(3815);
        match(LLVMParser::INT_LIT);
        setState(3816);
        match(LLVMParser::RPAREN);
        break;
      }

      case LLVMParser::DEREFERENCEABLE_OR_NULL: {
        enterOuterAlt(_localctx, 2);
        setState(3817);
        match(LLVMParser::DEREFERENCEABLE_OR_NULL);
        setState(3818);
        match(LLVMParser::LPAREN);
        setState(3819);
        match(LLVMParser::INT_LIT);
        setState(3820);
        match(LLVMParser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptDLLStorageClassContext ------------------------------------------------------------------

LLVMParser::OptDLLStorageClassContext::OptDLLStorageClassContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::DllStorageClassContext* LLVMParser::OptDLLStorageClassContext::dllStorageClass() {
  return getRuleContext<LLVMParser::DllStorageClassContext>(0);
}


size_t LLVMParser::OptDLLStorageClassContext::getRuleIndex() const {
  return LLVMParser::RuleOptDLLStorageClass;
}


std::any LLVMParser::OptDLLStorageClassContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptDLLStorageClass(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptDLLStorageClassContext* LLVMParser::optDLLStorageClass() {
  OptDLLStorageClassContext *_localctx = _tracker.createInstance<OptDLLStorageClassContext>(_ctx, getState());
  enterRule(_localctx, 758, LLVMParser::RuleOptDLLStorageClass);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3824);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::DLLEXPORT

    || _la == LLVMParser::DLLIMPORT) {
      setState(3823);
      dllStorageClass();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DllStorageClassContext ------------------------------------------------------------------

LLVMParser::DllStorageClassContext::DllStorageClassContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::DllStorageClassContext::DLLEXPORT() {
  return getToken(LLVMParser::DLLEXPORT, 0);
}

tree::TerminalNode* LLVMParser::DllStorageClassContext::DLLIMPORT() {
  return getToken(LLVMParser::DLLIMPORT, 0);
}


size_t LLVMParser::DllStorageClassContext::getRuleIndex() const {
  return LLVMParser::RuleDllStorageClass;
}


std::any LLVMParser::DllStorageClassContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitDllStorageClass(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::DllStorageClassContext* LLVMParser::dllStorageClass() {
  DllStorageClassContext *_localctx = _tracker.createInstance<DllStorageClassContext>(_ctx, getState());
  enterRule(_localctx, 760, LLVMParser::RuleDllStorageClass);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3826);
    _la = _input->LA(1);
    if (!(_la == LLVMParser::DLLEXPORT

    || _la == LLVMParser::DLLIMPORT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptExactContext ------------------------------------------------------------------

LLVMParser::OptExactContext::OptExactContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OptExactContext::EXACT() {
  return getToken(LLVMParser::EXACT, 0);
}


size_t LLVMParser::OptExactContext::getRuleIndex() const {
  return LLVMParser::RuleOptExact;
}


std::any LLVMParser::OptExactContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptExact(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptExactContext* LLVMParser::optExact() {
  OptExactContext *_localctx = _tracker.createInstance<OptExactContext>(_ctx, getState());
  enterRule(_localctx, 762, LLVMParser::RuleOptExact);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3829);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::EXACT) {
      setState(3828);
      match(LLVMParser::EXACT);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExceptionArgsContext ------------------------------------------------------------------

LLVMParser::ExceptionArgsContext::ExceptionArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::ExceptionArgListContext* LLVMParser::ExceptionArgsContext::exceptionArgList() {
  return getRuleContext<LLVMParser::ExceptionArgListContext>(0);
}


size_t LLVMParser::ExceptionArgsContext::getRuleIndex() const {
  return LLVMParser::RuleExceptionArgs;
}


std::any LLVMParser::ExceptionArgsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitExceptionArgs(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ExceptionArgsContext* LLVMParser::exceptionArgs() {
  ExceptionArgsContext *_localctx = _tracker.createInstance<ExceptionArgsContext>(_ctx, getState());
  enterRule(_localctx, 764, LLVMParser::RuleExceptionArgs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3832);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5122) != 0) || ((((_la - 126) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 126)) & 2251821288521729) != 0) || _la == LLVMParser::LABEL

    || _la == LLVMParser::METADATA || _la == LLVMParser::PPC_FP128 || ((((_la - 351) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 351)) & 175939040313345) != 0) || _la == LLVMParser::INT_TYPE

    || _la == LLVMParser::LOCAL_IDENT) {
      setState(3831);
      exceptionArgList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExceptionArgListContext ------------------------------------------------------------------

LLVMParser::ExceptionArgListContext::ExceptionArgListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::ExceptionArgContext* LLVMParser::ExceptionArgListContext::exceptionArg() {
  return getRuleContext<LLVMParser::ExceptionArgContext>(0);
}

LLVMParser::ExceptionArgListContext* LLVMParser::ExceptionArgListContext::exceptionArgList() {
  return getRuleContext<LLVMParser::ExceptionArgListContext>(0);
}

tree::TerminalNode* LLVMParser::ExceptionArgListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::ExceptionArgListContext::getRuleIndex() const {
  return LLVMParser::RuleExceptionArgList;
}


std::any LLVMParser::ExceptionArgListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitExceptionArgList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::ExceptionArgListContext* LLVMParser::exceptionArgList() {
   return exceptionArgList(0);
}

LLVMParser::ExceptionArgListContext* LLVMParser::exceptionArgList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::ExceptionArgListContext *_localctx = _tracker.createInstance<ExceptionArgListContext>(_ctx, parentState);
  LLVMParser::ExceptionArgListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 766;
  enterRecursionRule(_localctx, 766, LLVMParser::RuleExceptionArgList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3835);
    exceptionArg();
    _ctx->stop = _input->LT(-1);
    setState(3842);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ExceptionArgListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleExceptionArgList);
        setState(3837);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3838);
        match(LLVMParser::COMMA);
        setState(3839);
        exceptionArg(); 
      }
      setState(3844);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ExceptionArgContext ------------------------------------------------------------------

LLVMParser::ExceptionArgContext::ExceptionArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::ValueContext* LLVMParser::ExceptionArgContext::value() {
  return getRuleContext<LLVMParser::ValueContext>(0);
}

LLVMParser::LlvmTypeContext* LLVMParser::ExceptionArgContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::OptAddrSpaceContext* LLVMParser::ExceptionArgContext::optAddrSpace() {
  return getRuleContext<LLVMParser::OptAddrSpaceContext>(0);
}

tree::TerminalNode* LLVMParser::ExceptionArgContext::STAR() {
  return getToken(LLVMParser::STAR, 0);
}

LLVMParser::ConcreteNonRecTypeContext* LLVMParser::ExceptionArgContext::concreteNonRecType() {
  return getRuleContext<LLVMParser::ConcreteNonRecTypeContext>(0);
}

LLVMParser::MetadataTypeContext* LLVMParser::ExceptionArgContext::metadataType() {
  return getRuleContext<LLVMParser::MetadataTypeContext>(0);
}

LLVMParser::MetadataContext* LLVMParser::ExceptionArgContext::metadata() {
  return getRuleContext<LLVMParser::MetadataContext>(0);
}


size_t LLVMParser::ExceptionArgContext::getRuleIndex() const {
  return LLVMParser::RuleExceptionArg;
}


std::any LLVMParser::ExceptionArgContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitExceptionArg(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ExceptionArgContext* LLVMParser::exceptionArg() {
  ExceptionArgContext *_localctx = _tracker.createInstance<ExceptionArgContext>(_ctx, getState());
  enterRule(_localctx, 768, LLVMParser::RuleExceptionArg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3857);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3850);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx)) {
      case 1: {
        setState(3845);
        llvmType(0);
        setState(3846);
        optAddrSpace();
        setState(3847);
        match(LLVMParser::STAR);
        break;
      }

      case 2: {
        setState(3849);
        concreteNonRecType();
        break;
      }

      default:
        break;
      }
      setState(3852);
      value();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3854);
      metadataType();
      setState(3855);
      metadata();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExceptionScopeContext ------------------------------------------------------------------

LLVMParser::ExceptionScopeContext::ExceptionScopeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::NoneConstContext* LLVMParser::ExceptionScopeContext::noneConst() {
  return getRuleContext<LLVMParser::NoneConstContext>(0);
}

LLVMParser::LocalIdentContext* LLVMParser::ExceptionScopeContext::localIdent() {
  return getRuleContext<LLVMParser::LocalIdentContext>(0);
}


size_t LLVMParser::ExceptionScopeContext::getRuleIndex() const {
  return LLVMParser::RuleExceptionScope;
}


std::any LLVMParser::ExceptionScopeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitExceptionScope(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ExceptionScopeContext* LLVMParser::exceptionScope() {
  ExceptionScopeContext *_localctx = _tracker.createInstance<ExceptionScopeContext>(_ctx, getState());
  enterRule(_localctx, 770, LLVMParser::RuleExceptionScope);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3861);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::NONE: {
        enterOuterAlt(_localctx, 1);
        setState(3859);
        noneConst();
        break;
      }

      case LLVMParser::LOCAL_IDENT: {
        enterOuterAlt(_localctx, 2);
        setState(3860);
        localIdent();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FastMathFlagsContext ------------------------------------------------------------------

LLVMParser::FastMathFlagsContext::FastMathFlagsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::FastMathFlagListContext* LLVMParser::FastMathFlagsContext::fastMathFlagList() {
  return getRuleContext<LLVMParser::FastMathFlagListContext>(0);
}


size_t LLVMParser::FastMathFlagsContext::getRuleIndex() const {
  return LLVMParser::RuleFastMathFlags;
}


std::any LLVMParser::FastMathFlagsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFastMathFlags(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FastMathFlagsContext* LLVMParser::fastMathFlags() {
  FastMathFlagsContext *_localctx = _tracker.createInstance<FastMathFlagsContext>(_ctx, getState());
  enterRule(_localctx, 772, LLVMParser::RuleFastMathFlags);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3864);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::AFN

    || _la == LLVMParser::ARCP || _la == LLVMParser::CONTRACT || _la == LLVMParser::FAST || ((((_la - 240) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 240)) & 2251799814733827) != 0)) {
      setState(3863);
      fastMathFlagList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FastMathFlagListContext ------------------------------------------------------------------

LLVMParser::FastMathFlagListContext::FastMathFlagListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::FastMathFlagContext* LLVMParser::FastMathFlagListContext::fastMathFlag() {
  return getRuleContext<LLVMParser::FastMathFlagContext>(0);
}

LLVMParser::FastMathFlagListContext* LLVMParser::FastMathFlagListContext::fastMathFlagList() {
  return getRuleContext<LLVMParser::FastMathFlagListContext>(0);
}


size_t LLVMParser::FastMathFlagListContext::getRuleIndex() const {
  return LLVMParser::RuleFastMathFlagList;
}


std::any LLVMParser::FastMathFlagListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFastMathFlagList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::FastMathFlagListContext* LLVMParser::fastMathFlagList() {
   return fastMathFlagList(0);
}

LLVMParser::FastMathFlagListContext* LLVMParser::fastMathFlagList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::FastMathFlagListContext *_localctx = _tracker.createInstance<FastMathFlagListContext>(_ctx, parentState);
  LLVMParser::FastMathFlagListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 774;
  enterRecursionRule(_localctx, 774, LLVMParser::RuleFastMathFlagList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3867);
    fastMathFlag();
    _ctx->stop = _input->LT(-1);
    setState(3873);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<FastMathFlagListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleFastMathFlagList);
        setState(3869);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3870);
        fastMathFlag(); 
      }
      setState(3875);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- FastMathFlagContext ------------------------------------------------------------------

LLVMParser::FastMathFlagContext::FastMathFlagContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FastMathFlagContext::AFN() {
  return getToken(LLVMParser::AFN, 0);
}

tree::TerminalNode* LLVMParser::FastMathFlagContext::ARCP() {
  return getToken(LLVMParser::ARCP, 0);
}

tree::TerminalNode* LLVMParser::FastMathFlagContext::CONTRACT() {
  return getToken(LLVMParser::CONTRACT, 0);
}

tree::TerminalNode* LLVMParser::FastMathFlagContext::FAST() {
  return getToken(LLVMParser::FAST, 0);
}

tree::TerminalNode* LLVMParser::FastMathFlagContext::NINF() {
  return getToken(LLVMParser::NINF, 0);
}

tree::TerminalNode* LLVMParser::FastMathFlagContext::NNAN() {
  return getToken(LLVMParser::NNAN, 0);
}

tree::TerminalNode* LLVMParser::FastMathFlagContext::NSZ() {
  return getToken(LLVMParser::NSZ, 0);
}

tree::TerminalNode* LLVMParser::FastMathFlagContext::REASSOC() {
  return getToken(LLVMParser::REASSOC, 0);
}


size_t LLVMParser::FastMathFlagContext::getRuleIndex() const {
  return LLVMParser::RuleFastMathFlag;
}


std::any LLVMParser::FastMathFlagContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFastMathFlag(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FastMathFlagContext* LLVMParser::fastMathFlag() {
  FastMathFlagContext *_localctx = _tracker.createInstance<FastMathFlagContext>(_ctx, getState());
  enterRule(_localctx, 776, LLVMParser::RuleFastMathFlag);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3876);
    _la = _input->LA(1);
    if (!(_la == LLVMParser::AFN

    || _la == LLVMParser::ARCP || _la == LLVMParser::CONTRACT || _la == LLVMParser::FAST || ((((_la - 240) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 240)) & 2251799814733827) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FpredContext ------------------------------------------------------------------

LLVMParser::FpredContext::FpredContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::FpredContext::FALSE() {
  return getToken(LLVMParser::FALSE, 0);
}

tree::TerminalNode* LLVMParser::FpredContext::OEQ() {
  return getToken(LLVMParser::OEQ, 0);
}

tree::TerminalNode* LLVMParser::FpredContext::OGE() {
  return getToken(LLVMParser::OGE, 0);
}

tree::TerminalNode* LLVMParser::FpredContext::OGT() {
  return getToken(LLVMParser::OGT, 0);
}

tree::TerminalNode* LLVMParser::FpredContext::OLE() {
  return getToken(LLVMParser::OLE, 0);
}

tree::TerminalNode* LLVMParser::FpredContext::OLT() {
  return getToken(LLVMParser::OLT, 0);
}

tree::TerminalNode* LLVMParser::FpredContext::ONE() {
  return getToken(LLVMParser::ONE, 0);
}

tree::TerminalNode* LLVMParser::FpredContext::ORD() {
  return getToken(LLVMParser::ORD, 0);
}

tree::TerminalNode* LLVMParser::FpredContext::TRUE() {
  return getToken(LLVMParser::TRUE, 0);
}

tree::TerminalNode* LLVMParser::FpredContext::UEQ() {
  return getToken(LLVMParser::UEQ, 0);
}

tree::TerminalNode* LLVMParser::FpredContext::UGE() {
  return getToken(LLVMParser::UGE, 0);
}

tree::TerminalNode* LLVMParser::FpredContext::UGT() {
  return getToken(LLVMParser::UGT, 0);
}

tree::TerminalNode* LLVMParser::FpredContext::ULE() {
  return getToken(LLVMParser::ULE, 0);
}

tree::TerminalNode* LLVMParser::FpredContext::ULT() {
  return getToken(LLVMParser::ULT, 0);
}

tree::TerminalNode* LLVMParser::FpredContext::UNE() {
  return getToken(LLVMParser::UNE, 0);
}

tree::TerminalNode* LLVMParser::FpredContext::UNO() {
  return getToken(LLVMParser::UNO, 0);
}


size_t LLVMParser::FpredContext::getRuleIndex() const {
  return LLVMParser::RuleFpred;
}


std::any LLVMParser::FpredContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFpred(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FpredContext* LLVMParser::fpred() {
  FpredContext *_localctx = _tracker.createInstance<FpredContext>(_ctx, getState());
  enterRule(_localctx, 778, LLVMParser::RuleFpred);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3878);
    _la = _input->LA(1);
    if (!(_la == LLVMParser::FALSE || ((((_la - 263) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 263)) & 4221) != 0) || ((((_la - 353) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 353)) & 298433) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuncAttrsContext ------------------------------------------------------------------

LLVMParser::FuncAttrsContext::FuncAttrsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::FuncAttrListContext* LLVMParser::FuncAttrsContext::funcAttrList() {
  return getRuleContext<LLVMParser::FuncAttrListContext>(0);
}


size_t LLVMParser::FuncAttrsContext::getRuleIndex() const {
  return LLVMParser::RuleFuncAttrs;
}


std::any LLVMParser::FuncAttrsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFuncAttrs(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FuncAttrsContext* LLVMParser::funcAttrs() {
  FuncAttrsContext *_localctx = _tracker.createInstance<FuncAttrsContext>(_ctx, getState());
  enterRule(_localctx, 780, LLVMParser::RuleFuncAttrs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3881);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx)) {
    case 1: {
      setState(3880);
      funcAttrList(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuncAttrListContext ------------------------------------------------------------------

LLVMParser::FuncAttrListContext::FuncAttrListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::FuncAttrContext* LLVMParser::FuncAttrListContext::funcAttr() {
  return getRuleContext<LLVMParser::FuncAttrContext>(0);
}

LLVMParser::FuncAttrListContext* LLVMParser::FuncAttrListContext::funcAttrList() {
  return getRuleContext<LLVMParser::FuncAttrListContext>(0);
}


size_t LLVMParser::FuncAttrListContext::getRuleIndex() const {
  return LLVMParser::RuleFuncAttrList;
}


std::any LLVMParser::FuncAttrListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFuncAttrList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::FuncAttrListContext* LLVMParser::funcAttrList() {
   return funcAttrList(0);
}

LLVMParser::FuncAttrListContext* LLVMParser::funcAttrList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::FuncAttrListContext *_localctx = _tracker.createInstance<FuncAttrListContext>(_ctx, parentState);
  LLVMParser::FuncAttrListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 782;
  enterRecursionRule(_localctx, 782, LLVMParser::RuleFuncAttrList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3884);
    funcAttr();
    _ctx->stop = _input->LT(-1);
    setState(3890);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 209, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<FuncAttrListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleFuncAttrList);
        setState(3886);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3887);
        funcAttr(); 
      }
      setState(3892);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 209, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- FuncAttrContext ------------------------------------------------------------------

LLVMParser::FuncAttrContext::FuncAttrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::AttrGroupIDContext* LLVMParser::FuncAttrContext::attrGroupID() {
  return getRuleContext<LLVMParser::AttrGroupIDContext>(0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::ALIGN() {
  return getToken(LLVMParser::ALIGN, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::EQSIGN() {
  return getToken(LLVMParser::EQSIGN, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::INT_LIT() {
  return getToken(LLVMParser::INT_LIT, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::ALIGNSTACK() {
  return getToken(LLVMParser::ALIGNSTACK, 0);
}

LLVMParser::AlignmentContext* LLVMParser::FuncAttrContext::alignment() {
  return getRuleContext<LLVMParser::AlignmentContext>(0);
}

LLVMParser::AllocSizeContext* LLVMParser::FuncAttrContext::allocSize() {
  return getRuleContext<LLVMParser::AllocSizeContext>(0);
}

LLVMParser::StackAlignmentContext* LLVMParser::FuncAttrContext::stackAlignment() {
  return getRuleContext<LLVMParser::StackAlignmentContext>(0);
}

std::vector<LLVMParser::StringLitContext *> LLVMParser::FuncAttrContext::stringLit() {
  return getRuleContexts<LLVMParser::StringLitContext>();
}

LLVMParser::StringLitContext* LLVMParser::FuncAttrContext::stringLit(size_t i) {
  return getRuleContext<LLVMParser::StringLitContext>(i);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::ALWAYSINLINE() {
  return getToken(LLVMParser::ALWAYSINLINE, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::ARGMEMONLY() {
  return getToken(LLVMParser::ARGMEMONLY, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::BUILTIN() {
  return getToken(LLVMParser::BUILTIN, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::COLD() {
  return getToken(LLVMParser::COLD, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::CONVERGENT() {
  return getToken(LLVMParser::CONVERGENT, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::INACCESSIBLEMEM_OR_ARGMEMONLY() {
  return getToken(LLVMParser::INACCESSIBLEMEM_OR_ARGMEMONLY, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::INACCESSIBLEMEMONLY() {
  return getToken(LLVMParser::INACCESSIBLEMEMONLY, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::INLINEHINT() {
  return getToken(LLVMParser::INLINEHINT, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::JUMPTABLE() {
  return getToken(LLVMParser::JUMPTABLE, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::MINSIZE() {
  return getToken(LLVMParser::MINSIZE, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::NAKED() {
  return getToken(LLVMParser::NAKED, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::NOBUILTIN() {
  return getToken(LLVMParser::NOBUILTIN, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::NODUPLICATE() {
  return getToken(LLVMParser::NODUPLICATE, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::NOIMPLICITFLOAT() {
  return getToken(LLVMParser::NOIMPLICITFLOAT, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::NOINLINE() {
  return getToken(LLVMParser::NOINLINE, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::NONLAZYBIND() {
  return getToken(LLVMParser::NONLAZYBIND, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::NORECURSE() {
  return getToken(LLVMParser::NORECURSE, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::NOREDZONE() {
  return getToken(LLVMParser::NOREDZONE, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::NORETURN() {
  return getToken(LLVMParser::NORETURN, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::NOUNWIND() {
  return getToken(LLVMParser::NOUNWIND, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::OPTNONE() {
  return getToken(LLVMParser::OPTNONE, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::OPTSIZE() {
  return getToken(LLVMParser::OPTSIZE, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::READNONE() {
  return getToken(LLVMParser::READNONE, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::READONLY() {
  return getToken(LLVMParser::READONLY, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::RETURNS_TWICE() {
  return getToken(LLVMParser::RETURNS_TWICE, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::SAFESTACK() {
  return getToken(LLVMParser::SAFESTACK, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::SANITIZE_ADDRESS() {
  return getToken(LLVMParser::SANITIZE_ADDRESS, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::SANITIZE_HWADDRESS() {
  return getToken(LLVMParser::SANITIZE_HWADDRESS, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::SANITIZE_MEMORY() {
  return getToken(LLVMParser::SANITIZE_MEMORY, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::SANITIZE_THREAD() {
  return getToken(LLVMParser::SANITIZE_THREAD, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::SPECULATABLE() {
  return getToken(LLVMParser::SPECULATABLE, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::SSP() {
  return getToken(LLVMParser::SSP, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::SSPREQ() {
  return getToken(LLVMParser::SSPREQ, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::SSPSTRONG() {
  return getToken(LLVMParser::SSPSTRONG, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::STRICTFP() {
  return getToken(LLVMParser::STRICTFP, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::UWTABLE() {
  return getToken(LLVMParser::UWTABLE, 0);
}

tree::TerminalNode* LLVMParser::FuncAttrContext::WRITEONLY() {
  return getToken(LLVMParser::WRITEONLY, 0);
}


size_t LLVMParser::FuncAttrContext::getRuleIndex() const {
  return LLVMParser::RuleFuncAttr;
}


std::any LLVMParser::FuncAttrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitFuncAttr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::FuncAttrContext* LLVMParser::funcAttr() {
  FuncAttrContext *_localctx = _tracker.createInstance<FuncAttrContext>(_ctx, getState());
  enterRule(_localctx, 784, LLVMParser::RuleFuncAttr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3945);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3893);
      attrGroupID();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3894);
      match(LLVMParser::ALIGN);
      setState(3895);
      match(LLVMParser::EQSIGN);
      setState(3896);
      match(LLVMParser::INT_LIT);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3897);
      match(LLVMParser::ALIGNSTACK);
      setState(3898);
      match(LLVMParser::EQSIGN);
      setState(3899);
      match(LLVMParser::INT_LIT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3900);
      alignment();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3901);
      allocSize();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(3902);
      stackAlignment();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(3903);
      stringLit();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(3904);
      stringLit();
      setState(3905);
      match(LLVMParser::EQSIGN);
      setState(3906);
      stringLit();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(3908);
      match(LLVMParser::ALWAYSINLINE);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(3909);
      match(LLVMParser::ARGMEMONLY);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(3910);
      match(LLVMParser::BUILTIN);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(3911);
      match(LLVMParser::COLD);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(3912);
      match(LLVMParser::CONVERGENT);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(3913);
      match(LLVMParser::INACCESSIBLEMEM_OR_ARGMEMONLY);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(3914);
      match(LLVMParser::INACCESSIBLEMEMONLY);
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(3915);
      match(LLVMParser::INLINEHINT);
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(3916);
      match(LLVMParser::JUMPTABLE);
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(3917);
      match(LLVMParser::MINSIZE);
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(3918);
      match(LLVMParser::NAKED);
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(3919);
      match(LLVMParser::NOBUILTIN);
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(3920);
      match(LLVMParser::NODUPLICATE);
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(3921);
      match(LLVMParser::NOIMPLICITFLOAT);
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(3922);
      match(LLVMParser::NOINLINE);
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(3923);
      match(LLVMParser::NONLAZYBIND);
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(3924);
      match(LLVMParser::NORECURSE);
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(3925);
      match(LLVMParser::NOREDZONE);
      break;
    }

    case 27: {
      enterOuterAlt(_localctx, 27);
      setState(3926);
      match(LLVMParser::NORETURN);
      break;
    }

    case 28: {
      enterOuterAlt(_localctx, 28);
      setState(3927);
      match(LLVMParser::NOUNWIND);
      break;
    }

    case 29: {
      enterOuterAlt(_localctx, 29);
      setState(3928);
      match(LLVMParser::OPTNONE);
      break;
    }

    case 30: {
      enterOuterAlt(_localctx, 30);
      setState(3929);
      match(LLVMParser::OPTSIZE);
      break;
    }

    case 31: {
      enterOuterAlt(_localctx, 31);
      setState(3930);
      match(LLVMParser::READNONE);
      break;
    }

    case 32: {
      enterOuterAlt(_localctx, 32);
      setState(3931);
      match(LLVMParser::READONLY);
      break;
    }

    case 33: {
      enterOuterAlt(_localctx, 33);
      setState(3932);
      match(LLVMParser::RETURNS_TWICE);
      break;
    }

    case 34: {
      enterOuterAlt(_localctx, 34);
      setState(3933);
      match(LLVMParser::SAFESTACK);
      break;
    }

    case 35: {
      enterOuterAlt(_localctx, 35);
      setState(3934);
      match(LLVMParser::SANITIZE_ADDRESS);
      break;
    }

    case 36: {
      enterOuterAlt(_localctx, 36);
      setState(3935);
      match(LLVMParser::SANITIZE_HWADDRESS);
      break;
    }

    case 37: {
      enterOuterAlt(_localctx, 37);
      setState(3936);
      match(LLVMParser::SANITIZE_MEMORY);
      break;
    }

    case 38: {
      enterOuterAlt(_localctx, 38);
      setState(3937);
      match(LLVMParser::SANITIZE_THREAD);
      break;
    }

    case 39: {
      enterOuterAlt(_localctx, 39);
      setState(3938);
      match(LLVMParser::SPECULATABLE);
      break;
    }

    case 40: {
      enterOuterAlt(_localctx, 40);
      setState(3939);
      match(LLVMParser::SSP);
      break;
    }

    case 41: {
      enterOuterAlt(_localctx, 41);
      setState(3940);
      match(LLVMParser::SSPREQ);
      break;
    }

    case 42: {
      enterOuterAlt(_localctx, 42);
      setState(3941);
      match(LLVMParser::SSPSTRONG);
      break;
    }

    case 43: {
      enterOuterAlt(_localctx, 43);
      setState(3942);
      match(LLVMParser::STRICTFP);
      break;
    }

    case 44: {
      enterOuterAlt(_localctx, 44);
      setState(3943);
      match(LLVMParser::UWTABLE);
      break;
    }

    case 45: {
      enterOuterAlt(_localctx, 45);
      setState(3944);
      match(LLVMParser::WRITEONLY);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptInBoundsContext ------------------------------------------------------------------

LLVMParser::OptInBoundsContext::OptInBoundsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OptInBoundsContext::INBOUNDS() {
  return getToken(LLVMParser::INBOUNDS, 0);
}


size_t LLVMParser::OptInBoundsContext::getRuleIndex() const {
  return LLVMParser::RuleOptInBounds;
}


std::any LLVMParser::OptInBoundsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptInBounds(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptInBoundsContext* LLVMParser::optInBounds() {
  OptInBoundsContext *_localctx = _tracker.createInstance<OptInBoundsContext>(_ctx, getState());
  enterRule(_localctx, 786, LLVMParser::RuleOptInBounds);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3948);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::INBOUNDS) {
      setState(3947);
      match(LLVMParser::INBOUNDS);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndicesContext ------------------------------------------------------------------

LLVMParser::IndicesContext::IndicesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::IndicesContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}

LLVMParser::IndexListContext* LLVMParser::IndicesContext::indexList() {
  return getRuleContext<LLVMParser::IndexListContext>(0);
}


size_t LLVMParser::IndicesContext::getRuleIndex() const {
  return LLVMParser::RuleIndices;
}


std::any LLVMParser::IndicesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitIndices(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::IndicesContext* LLVMParser::indices() {
  IndicesContext *_localctx = _tracker.createInstance<IndicesContext>(_ctx, getState());
  enterRule(_localctx, 788, LLVMParser::RuleIndices);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3952);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::COMMA) {
      setState(3950);
      match(LLVMParser::COMMA);
      setState(3951);
      indexList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndexListContext ------------------------------------------------------------------

LLVMParser::IndexListContext::IndexListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::IndexContext* LLVMParser::IndexListContext::index() {
  return getRuleContext<LLVMParser::IndexContext>(0);
}

LLVMParser::IndexListContext* LLVMParser::IndexListContext::indexList() {
  return getRuleContext<LLVMParser::IndexListContext>(0);
}

tree::TerminalNode* LLVMParser::IndexListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::IndexListContext::getRuleIndex() const {
  return LLVMParser::RuleIndexList;
}


std::any LLVMParser::IndexListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitIndexList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::IndexListContext* LLVMParser::indexList() {
   return indexList(0);
}

LLVMParser::IndexListContext* LLVMParser::indexList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::IndexListContext *_localctx = _tracker.createInstance<IndexListContext>(_ctx, parentState);
  LLVMParser::IndexListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 790;
  enterRecursionRule(_localctx, 790, LLVMParser::RuleIndexList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3955);
    index();
    _ctx->stop = _input->LT(-1);
    setState(3962);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 213, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<IndexListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleIndexList);
        setState(3957);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3958);
        match(LLVMParser::COMMA);
        setState(3959);
        index(); 
      }
      setState(3964);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 213, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- IndexContext ------------------------------------------------------------------

LLVMParser::IndexContext::IndexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::IndexContext::INT_LIT() {
  return getToken(LLVMParser::INT_LIT, 0);
}


size_t LLVMParser::IndexContext::getRuleIndex() const {
  return LLVMParser::RuleIndex;
}


std::any LLVMParser::IndexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitIndex(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::IndexContext* LLVMParser::index() {
  IndexContext *_localctx = _tracker.createInstance<IndexContext>(_ctx, getState());
  enterRule(_localctx, 792, LLVMParser::RuleIndex);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3965);
    match(LLVMParser::INT_LIT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IPredContext ------------------------------------------------------------------

LLVMParser::IPredContext::IPredContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::IPredContext::EQ() {
  return getToken(LLVMParser::EQ, 0);
}

tree::TerminalNode* LLVMParser::IPredContext::NE() {
  return getToken(LLVMParser::NE, 0);
}

tree::TerminalNode* LLVMParser::IPredContext::SGE() {
  return getToken(LLVMParser::SGE, 0);
}

tree::TerminalNode* LLVMParser::IPredContext::SGT() {
  return getToken(LLVMParser::SGT, 0);
}

tree::TerminalNode* LLVMParser::IPredContext::SLE() {
  return getToken(LLVMParser::SLE, 0);
}

tree::TerminalNode* LLVMParser::IPredContext::SLT() {
  return getToken(LLVMParser::SLT, 0);
}

tree::TerminalNode* LLVMParser::IPredContext::UGE() {
  return getToken(LLVMParser::UGE, 0);
}

tree::TerminalNode* LLVMParser::IPredContext::UGT() {
  return getToken(LLVMParser::UGT, 0);
}

tree::TerminalNode* LLVMParser::IPredContext::ULE() {
  return getToken(LLVMParser::ULE, 0);
}

tree::TerminalNode* LLVMParser::IPredContext::ULT() {
  return getToken(LLVMParser::ULT, 0);
}


size_t LLVMParser::IPredContext::getRuleIndex() const {
  return LLVMParser::RuleIPred;
}


std::any LLVMParser::IPredContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitIPred(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::IPredContext* LLVMParser::iPred() {
  IPredContext *_localctx = _tracker.createInstance<IPredContext>(_ctx, getState());
  enterRule(_localctx, 794, LLVMParser::RuleIPred);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3967);
    _la = _input->LA(1);
    if (!(_la == LLVMParser::EQ || _la == LLVMParser::NE || ((((_la - 314) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 314)) & 1899956092797699) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptLinkageContext ------------------------------------------------------------------

LLVMParser::OptLinkageContext::OptLinkageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::LinkageContext* LLVMParser::OptLinkageContext::linkage() {
  return getRuleContext<LLVMParser::LinkageContext>(0);
}


size_t LLVMParser::OptLinkageContext::getRuleIndex() const {
  return LLVMParser::RuleOptLinkage;
}


std::any LLVMParser::OptLinkageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptLinkage(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptLinkageContext* LLVMParser::optLinkage() {
  OptLinkageContext *_localctx = _tracker.createInstance<OptLinkageContext>(_ctx, getState());
  enterRule(_localctx, 796, LLVMParser::RuleOptLinkage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3970);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 39) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 39)) & 4398046519297) != 0) || ((((_la - 201) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 201)) & 196609) != 0) || _la == LLVMParser::PRIVATE || _la == LLVMParser::WEAK

    || _la == LLVMParser::WEAK_ODR) {
      setState(3969);
      linkage();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LinkageContext ------------------------------------------------------------------

LLVMParser::LinkageContext::LinkageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::LinkageContext::APPENDING() {
  return getToken(LLVMParser::APPENDING, 0);
}

tree::TerminalNode* LLVMParser::LinkageContext::AVAILABLE_EXTERNALLY() {
  return getToken(LLVMParser::AVAILABLE_EXTERNALLY, 0);
}

tree::TerminalNode* LLVMParser::LinkageContext::COMMON() {
  return getToken(LLVMParser::COMMON, 0);
}

tree::TerminalNode* LLVMParser::LinkageContext::INTERNAL() {
  return getToken(LLVMParser::INTERNAL, 0);
}

tree::TerminalNode* LLVMParser::LinkageContext::LINKONCE() {
  return getToken(LLVMParser::LINKONCE, 0);
}

tree::TerminalNode* LLVMParser::LinkageContext::LINKONCE_ODR() {
  return getToken(LLVMParser::LINKONCE_ODR, 0);
}

tree::TerminalNode* LLVMParser::LinkageContext::PRIVATE() {
  return getToken(LLVMParser::PRIVATE, 0);
}

tree::TerminalNode* LLVMParser::LinkageContext::WEAK() {
  return getToken(LLVMParser::WEAK, 0);
}

tree::TerminalNode* LLVMParser::LinkageContext::WEAK_ODR() {
  return getToken(LLVMParser::WEAK_ODR, 0);
}


size_t LLVMParser::LinkageContext::getRuleIndex() const {
  return LLVMParser::RuleLinkage;
}


std::any LLVMParser::LinkageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitLinkage(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::LinkageContext* LLVMParser::linkage() {
  LinkageContext *_localctx = _tracker.createInstance<LinkageContext>(_ctx, getState());
  enterRule(_localctx, 798, LLVMParser::RuleLinkage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3972);
    _la = _input->LA(1);
    if (!(((((_la - 39) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 39)) & 4398046519297) != 0) || ((((_la - 201) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 201)) & 196609) != 0) || _la == LLVMParser::PRIVATE || _la == LLVMParser::WEAK

    || _la == LLVMParser::WEAK_ODR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptExternLinkageContext ------------------------------------------------------------------

LLVMParser::OptExternLinkageContext::OptExternLinkageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::ExternLinkageContext* LLVMParser::OptExternLinkageContext::externLinkage() {
  return getRuleContext<LLVMParser::ExternLinkageContext>(0);
}


size_t LLVMParser::OptExternLinkageContext::getRuleIndex() const {
  return LLVMParser::RuleOptExternLinkage;
}


std::any LLVMParser::OptExternLinkageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptExternLinkage(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptExternLinkageContext* LLVMParser::optExternLinkage() {
  OptExternLinkageContext *_localctx = _tracker.createInstance<OptExternLinkageContext>(_ctx, getState());
  enterRule(_localctx, 800, LLVMParser::RuleOptExternLinkage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3975);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::EXTERNAL

    || _la == LLVMParser::EXTERN_WEAK) {
      setState(3974);
      externLinkage();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExternLinkageContext ------------------------------------------------------------------

LLVMParser::ExternLinkageContext::ExternLinkageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ExternLinkageContext::EXTERN_WEAK() {
  return getToken(LLVMParser::EXTERN_WEAK, 0);
}

tree::TerminalNode* LLVMParser::ExternLinkageContext::EXTERNAL() {
  return getToken(LLVMParser::EXTERNAL, 0);
}


size_t LLVMParser::ExternLinkageContext::getRuleIndex() const {
  return LLVMParser::RuleExternLinkage;
}


std::any LLVMParser::ExternLinkageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitExternLinkage(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ExternLinkageContext* LLVMParser::externLinkage() {
  ExternLinkageContext *_localctx = _tracker.createInstance<ExternLinkageContext>(_ctx, getState());
  enterRule(_localctx, 802, LLVMParser::RuleExternLinkage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3977);
    _la = _input->LA(1);
    if (!(_la == LLVMParser::EXTERNAL

    || _la == LLVMParser::EXTERN_WEAK)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OperandBundlesContext ------------------------------------------------------------------

LLVMParser::OperandBundlesContext::OperandBundlesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OperandBundlesContext::LBRACK() {
  return getToken(LLVMParser::LBRACK, 0);
}

LLVMParser::OperandBundleListContext* LLVMParser::OperandBundlesContext::operandBundleList() {
  return getRuleContext<LLVMParser::OperandBundleListContext>(0);
}

tree::TerminalNode* LLVMParser::OperandBundlesContext::RBRACK() {
  return getToken(LLVMParser::RBRACK, 0);
}


size_t LLVMParser::OperandBundlesContext::getRuleIndex() const {
  return LLVMParser::RuleOperandBundles;
}


std::any LLVMParser::OperandBundlesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOperandBundles(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OperandBundlesContext* LLVMParser::operandBundles() {
  OperandBundlesContext *_localctx = _tracker.createInstance<OperandBundlesContext>(_ctx, getState());
  enterRule(_localctx, 804, LLVMParser::RuleOperandBundles);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3983);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx)) {
    case 1: {
      setState(3979);
      match(LLVMParser::LBRACK);
      setState(3980);
      operandBundleList(0);
      setState(3981);
      match(LLVMParser::RBRACK);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OperandBundleListContext ------------------------------------------------------------------

LLVMParser::OperandBundleListContext::OperandBundleListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::OperandBundleContext* LLVMParser::OperandBundleListContext::operandBundle() {
  return getRuleContext<LLVMParser::OperandBundleContext>(0);
}

LLVMParser::OperandBundleListContext* LLVMParser::OperandBundleListContext::operandBundleList() {
  return getRuleContext<LLVMParser::OperandBundleListContext>(0);
}


size_t LLVMParser::OperandBundleListContext::getRuleIndex() const {
  return LLVMParser::RuleOperandBundleList;
}


std::any LLVMParser::OperandBundleListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOperandBundleList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::OperandBundleListContext* LLVMParser::operandBundleList() {
   return operandBundleList(0);
}

LLVMParser::OperandBundleListContext* LLVMParser::operandBundleList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::OperandBundleListContext *_localctx = _tracker.createInstance<OperandBundleListContext>(_ctx, parentState);
  LLVMParser::OperandBundleListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 806;
  enterRecursionRule(_localctx, 806, LLVMParser::RuleOperandBundleList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3986);
    operandBundle();
    _ctx->stop = _input->LT(-1);
    setState(3992);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<OperandBundleListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleOperandBundleList);
        setState(3988);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3989);
        operandBundle(); 
      }
      setState(3994);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- OperandBundleContext ------------------------------------------------------------------

LLVMParser::OperandBundleContext::OperandBundleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::StringLitContext* LLVMParser::OperandBundleContext::stringLit() {
  return getRuleContext<LLVMParser::StringLitContext>(0);
}

tree::TerminalNode* LLVMParser::OperandBundleContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::TypeValuesContext* LLVMParser::OperandBundleContext::typeValues() {
  return getRuleContext<LLVMParser::TypeValuesContext>(0);
}

tree::TerminalNode* LLVMParser::OperandBundleContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::OperandBundleContext::getRuleIndex() const {
  return LLVMParser::RuleOperandBundle;
}


std::any LLVMParser::OperandBundleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOperandBundle(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OperandBundleContext* LLVMParser::operandBundle() {
  OperandBundleContext *_localctx = _tracker.createInstance<OperandBundleContext>(_ctx, getState());
  enterRule(_localctx, 808, LLVMParser::RuleOperandBundle);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3995);
    stringLit();
    setState(3996);
    match(LLVMParser::LPAREN);
    setState(3997);
    typeValues();
    setState(3998);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OverflowFlagsContext ------------------------------------------------------------------

LLVMParser::OverflowFlagsContext::OverflowFlagsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::OverflowFlagListContext* LLVMParser::OverflowFlagsContext::overflowFlagList() {
  return getRuleContext<LLVMParser::OverflowFlagListContext>(0);
}


size_t LLVMParser::OverflowFlagsContext::getRuleIndex() const {
  return LLVMParser::RuleOverflowFlags;
}


std::any LLVMParser::OverflowFlagsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOverflowFlags(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OverflowFlagsContext* LLVMParser::overflowFlags() {
  OverflowFlagsContext *_localctx = _tracker.createInstance<OverflowFlagsContext>(_ctx, getState());
  enterRule(_localctx, 810, LLVMParser::RuleOverflowFlags);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4001);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::NSW

    || _la == LLVMParser::NUW) {
      setState(4000);
      overflowFlagList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OverflowFlagListContext ------------------------------------------------------------------

LLVMParser::OverflowFlagListContext::OverflowFlagListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::OverflowFlagContext* LLVMParser::OverflowFlagListContext::overflowFlag() {
  return getRuleContext<LLVMParser::OverflowFlagContext>(0);
}

LLVMParser::OverflowFlagListContext* LLVMParser::OverflowFlagListContext::overflowFlagList() {
  return getRuleContext<LLVMParser::OverflowFlagListContext>(0);
}


size_t LLVMParser::OverflowFlagListContext::getRuleIndex() const {
  return LLVMParser::RuleOverflowFlagList;
}


std::any LLVMParser::OverflowFlagListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOverflowFlagList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::OverflowFlagListContext* LLVMParser::overflowFlagList() {
   return overflowFlagList(0);
}

LLVMParser::OverflowFlagListContext* LLVMParser::overflowFlagList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::OverflowFlagListContext *_localctx = _tracker.createInstance<OverflowFlagListContext>(_ctx, parentState);
  LLVMParser::OverflowFlagListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 812;
  enterRecursionRule(_localctx, 812, LLVMParser::RuleOverflowFlagList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4004);
    overflowFlag();
    _ctx->stop = _input->LT(-1);
    setState(4010);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 219, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<OverflowFlagListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleOverflowFlagList);
        setState(4006);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(4007);
        overflowFlag(); 
      }
      setState(4012);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 219, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- OverflowFlagContext ------------------------------------------------------------------

LLVMParser::OverflowFlagContext::OverflowFlagContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OverflowFlagContext::NSW() {
  return getToken(LLVMParser::NSW, 0);
}

tree::TerminalNode* LLVMParser::OverflowFlagContext::NUW() {
  return getToken(LLVMParser::NUW, 0);
}


size_t LLVMParser::OverflowFlagContext::getRuleIndex() const {
  return LLVMParser::RuleOverflowFlag;
}


std::any LLVMParser::OverflowFlagContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOverflowFlag(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OverflowFlagContext* LLVMParser::overflowFlag() {
  OverflowFlagContext *_localctx = _tracker.createInstance<OverflowFlagContext>(_ctx, getState());
  enterRule(_localctx, 814, LLVMParser::RuleOverflowFlag);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4013);
    _la = _input->LA(1);
    if (!(_la == LLVMParser::NSW

    || _la == LLVMParser::NUW)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamAttrsContext ------------------------------------------------------------------

LLVMParser::ParamAttrsContext::ParamAttrsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::ParamAttrListContext* LLVMParser::ParamAttrsContext::paramAttrList() {
  return getRuleContext<LLVMParser::ParamAttrListContext>(0);
}


size_t LLVMParser::ParamAttrsContext::getRuleIndex() const {
  return LLVMParser::RuleParamAttrs;
}


std::any LLVMParser::ParamAttrsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitParamAttrs(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ParamAttrsContext* LLVMParser::paramAttrs() {
  ParamAttrsContext *_localctx = _tracker.createInstance<ParamAttrsContext>(_ctx, getState());
  enterRule(_localctx, 816, LLVMParser::RuleParamAttrs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4016);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 220, _ctx)) {
    case 1: {
      setState(4015);
      paramAttrList(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamAttrListContext ------------------------------------------------------------------

LLVMParser::ParamAttrListContext::ParamAttrListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::ParamAttrContext* LLVMParser::ParamAttrListContext::paramAttr() {
  return getRuleContext<LLVMParser::ParamAttrContext>(0);
}

LLVMParser::ParamAttrListContext* LLVMParser::ParamAttrListContext::paramAttrList() {
  return getRuleContext<LLVMParser::ParamAttrListContext>(0);
}


size_t LLVMParser::ParamAttrListContext::getRuleIndex() const {
  return LLVMParser::RuleParamAttrList;
}


std::any LLVMParser::ParamAttrListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitParamAttrList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::ParamAttrListContext* LLVMParser::paramAttrList() {
   return paramAttrList(0);
}

LLVMParser::ParamAttrListContext* LLVMParser::paramAttrList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::ParamAttrListContext *_localctx = _tracker.createInstance<ParamAttrListContext>(_ctx, parentState);
  LLVMParser::ParamAttrListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 818;
  enterRecursionRule(_localctx, 818, LLVMParser::RuleParamAttrList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4019);
    paramAttr();
    _ctx->stop = _input->LT(-1);
    setState(4025);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ParamAttrListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleParamAttrList);
        setState(4021);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(4022);
        paramAttr(); 
      }
      setState(4027);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ParamAttrContext ------------------------------------------------------------------

LLVMParser::ParamAttrContext::ParamAttrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::AlignmentContext* LLVMParser::ParamAttrContext::alignment() {
  return getRuleContext<LLVMParser::AlignmentContext>(0);
}

LLVMParser::DereferenceableContext* LLVMParser::ParamAttrContext::dereferenceable() {
  return getRuleContext<LLVMParser::DereferenceableContext>(0);
}

LLVMParser::StringLitContext* LLVMParser::ParamAttrContext::stringLit() {
  return getRuleContext<LLVMParser::StringLitContext>(0);
}

tree::TerminalNode* LLVMParser::ParamAttrContext::BYVAL() {
  return getToken(LLVMParser::BYVAL, 0);
}

tree::TerminalNode* LLVMParser::ParamAttrContext::INALLOCA() {
  return getToken(LLVMParser::INALLOCA, 0);
}

tree::TerminalNode* LLVMParser::ParamAttrContext::INREG() {
  return getToken(LLVMParser::INREG, 0);
}

tree::TerminalNode* LLVMParser::ParamAttrContext::NEST() {
  return getToken(LLVMParser::NEST, 0);
}

tree::TerminalNode* LLVMParser::ParamAttrContext::NOALIAS() {
  return getToken(LLVMParser::NOALIAS, 0);
}

tree::TerminalNode* LLVMParser::ParamAttrContext::NOCAPTURE() {
  return getToken(LLVMParser::NOCAPTURE, 0);
}

tree::TerminalNode* LLVMParser::ParamAttrContext::NONNULL() {
  return getToken(LLVMParser::NONNULL, 0);
}

tree::TerminalNode* LLVMParser::ParamAttrContext::READNONE() {
  return getToken(LLVMParser::READNONE, 0);
}

tree::TerminalNode* LLVMParser::ParamAttrContext::READONLY() {
  return getToken(LLVMParser::READONLY, 0);
}

tree::TerminalNode* LLVMParser::ParamAttrContext::RETURNED() {
  return getToken(LLVMParser::RETURNED, 0);
}

tree::TerminalNode* LLVMParser::ParamAttrContext::SIGNEXT() {
  return getToken(LLVMParser::SIGNEXT, 0);
}

tree::TerminalNode* LLVMParser::ParamAttrContext::SRET() {
  return getToken(LLVMParser::SRET, 0);
}

tree::TerminalNode* LLVMParser::ParamAttrContext::SWIFTERROR() {
  return getToken(LLVMParser::SWIFTERROR, 0);
}

tree::TerminalNode* LLVMParser::ParamAttrContext::SWIFTSELF() {
  return getToken(LLVMParser::SWIFTSELF, 0);
}

tree::TerminalNode* LLVMParser::ParamAttrContext::WRITEONLY() {
  return getToken(LLVMParser::WRITEONLY, 0);
}

tree::TerminalNode* LLVMParser::ParamAttrContext::ZEROEXT() {
  return getToken(LLVMParser::ZEROEXT, 0);
}


size_t LLVMParser::ParamAttrContext::getRuleIndex() const {
  return LLVMParser::RuleParamAttr;
}


std::any LLVMParser::ParamAttrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitParamAttr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ParamAttrContext* LLVMParser::paramAttr() {
  ParamAttrContext *_localctx = _tracker.createInstance<ParamAttrContext>(_ctx, getState());
  enterRule(_localctx, 820, LLVMParser::RuleParamAttr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4047);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::ALIGN: {
        enterOuterAlt(_localctx, 1);
        setState(4028);
        alignment();
        break;
      }

      case LLVMParser::DEREFERENCEABLE:
      case LLVMParser::DEREFERENCEABLE_OR_NULL: {
        enterOuterAlt(_localctx, 2);
        setState(4029);
        dereferenceable();
        break;
      }

      case LLVMParser::STRING_LIT: {
        enterOuterAlt(_localctx, 3);
        setState(4030);
        stringLit();
        break;
      }

      case LLVMParser::BYVAL: {
        enterOuterAlt(_localctx, 4);
        setState(4031);
        match(LLVMParser::BYVAL);
        break;
      }

      case LLVMParser::INALLOCA: {
        enterOuterAlt(_localctx, 5);
        setState(4032);
        match(LLVMParser::INALLOCA);
        break;
      }

      case LLVMParser::INREG: {
        enterOuterAlt(_localctx, 6);
        setState(4033);
        match(LLVMParser::INREG);
        break;
      }

      case LLVMParser::NEST: {
        enterOuterAlt(_localctx, 7);
        setState(4034);
        match(LLVMParser::NEST);
        break;
      }

      case LLVMParser::NOALIAS: {
        enterOuterAlt(_localctx, 8);
        setState(4035);
        match(LLVMParser::NOALIAS);
        break;
      }

      case LLVMParser::NOCAPTURE: {
        enterOuterAlt(_localctx, 9);
        setState(4036);
        match(LLVMParser::NOCAPTURE);
        break;
      }

      case LLVMParser::NONNULL: {
        enterOuterAlt(_localctx, 10);
        setState(4037);
        match(LLVMParser::NONNULL);
        break;
      }

      case LLVMParser::READNONE: {
        enterOuterAlt(_localctx, 11);
        setState(4038);
        match(LLVMParser::READNONE);
        break;
      }

      case LLVMParser::READONLY: {
        enterOuterAlt(_localctx, 12);
        setState(4039);
        match(LLVMParser::READONLY);
        break;
      }

      case LLVMParser::RETURNED: {
        enterOuterAlt(_localctx, 13);
        setState(4040);
        match(LLVMParser::RETURNED);
        break;
      }

      case LLVMParser::SIGNEXT: {
        enterOuterAlt(_localctx, 14);
        setState(4041);
        match(LLVMParser::SIGNEXT);
        break;
      }

      case LLVMParser::SRET: {
        enterOuterAlt(_localctx, 15);
        setState(4042);
        match(LLVMParser::SRET);
        break;
      }

      case LLVMParser::SWIFTERROR: {
        enterOuterAlt(_localctx, 16);
        setState(4043);
        match(LLVMParser::SWIFTERROR);
        break;
      }

      case LLVMParser::SWIFTSELF: {
        enterOuterAlt(_localctx, 17);
        setState(4044);
        match(LLVMParser::SWIFTSELF);
        break;
      }

      case LLVMParser::WRITEONLY: {
        enterOuterAlt(_localctx, 18);
        setState(4045);
        match(LLVMParser::WRITEONLY);
        break;
      }

      case LLVMParser::ZEROEXT: {
        enterOuterAlt(_localctx, 19);
        setState(4046);
        match(LLVMParser::ZEROEXT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamsContext ------------------------------------------------------------------

LLVMParser::ParamsContext::ParamsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ParamsContext::DOTS() {
  return getToken(LLVMParser::DOTS, 0);
}

LLVMParser::ParamListContext* LLVMParser::ParamsContext::paramList() {
  return getRuleContext<LLVMParser::ParamListContext>(0);
}

tree::TerminalNode* LLVMParser::ParamsContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::ParamsContext::getRuleIndex() const {
  return LLVMParser::RuleParams;
}


std::any LLVMParser::ParamsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitParams(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ParamsContext* LLVMParser::params() {
  ParamsContext *_localctx = _tracker.createInstance<ParamsContext>(_ctx, getState());
  enterRule(_localctx, 822, LLVMParser::RuleParams);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4055);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 223, _ctx)) {
    case 1: {
      setState(4049);
      match(LLVMParser::DOTS);
      break;
    }

    case 2: {
      setState(4050);
      paramList(0);
      break;
    }

    case 3: {
      setState(4051);
      paramList(0);
      setState(4052);
      match(LLVMParser::COMMA);
      setState(4053);
      match(LLVMParser::DOTS);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamListContext ------------------------------------------------------------------

LLVMParser::ParamListContext::ParamListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::ParamContext* LLVMParser::ParamListContext::param() {
  return getRuleContext<LLVMParser::ParamContext>(0);
}

LLVMParser::ParamListContext* LLVMParser::ParamListContext::paramList() {
  return getRuleContext<LLVMParser::ParamListContext>(0);
}

tree::TerminalNode* LLVMParser::ParamListContext::COMMA() {
  return getToken(LLVMParser::COMMA, 0);
}


size_t LLVMParser::ParamListContext::getRuleIndex() const {
  return LLVMParser::RuleParamList;
}


std::any LLVMParser::ParamListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitParamList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::ParamListContext* LLVMParser::paramList() {
   return paramList(0);
}

LLVMParser::ParamListContext* LLVMParser::paramList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::ParamListContext *_localctx = _tracker.createInstance<ParamListContext>(_ctx, parentState);
  LLVMParser::ParamListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 824;
  enterRecursionRule(_localctx, 824, LLVMParser::RuleParamList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4058);
    param();
    _ctx->stop = _input->LT(-1);
    setState(4065);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 224, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ParamListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleParamList);
        setState(4060);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(4061);
        match(LLVMParser::COMMA);
        setState(4062);
        param(); 
      }
      setState(4067);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 224, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ParamContext ------------------------------------------------------------------

LLVMParser::ParamContext::ParamContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::LlvmTypeContext* LLVMParser::ParamContext::llvmType() {
  return getRuleContext<LLVMParser::LlvmTypeContext>(0);
}

LLVMParser::ParamAttrsContext* LLVMParser::ParamContext::paramAttrs() {
  return getRuleContext<LLVMParser::ParamAttrsContext>(0);
}

LLVMParser::LocalIdentContext* LLVMParser::ParamContext::localIdent() {
  return getRuleContext<LLVMParser::LocalIdentContext>(0);
}


size_t LLVMParser::ParamContext::getRuleIndex() const {
  return LLVMParser::RuleParam;
}


std::any LLVMParser::ParamContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitParam(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ParamContext* LLVMParser::param() {
  ParamContext *_localctx = _tracker.createInstance<ParamContext>(_ctx, getState());
  enterRule(_localctx, 826, LLVMParser::RuleParam);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4075);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 225, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4068);
      llvmType(0);
      setState(4069);
      paramAttrs();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4071);
      llvmType(0);
      setState(4072);
      paramAttrs();
      setState(4073);
      localIdent();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptPreemptionSpecifierContext ------------------------------------------------------------------

LLVMParser::OptPreemptionSpecifierContext::OptPreemptionSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::PreemptionSpecifierContext* LLVMParser::OptPreemptionSpecifierContext::preemptionSpecifier() {
  return getRuleContext<LLVMParser::PreemptionSpecifierContext>(0);
}


size_t LLVMParser::OptPreemptionSpecifierContext::getRuleIndex() const {
  return LLVMParser::RuleOptPreemptionSpecifier;
}


std::any LLVMParser::OptPreemptionSpecifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptPreemptionSpecifier(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptPreemptionSpecifierContext* LLVMParser::optPreemptionSpecifier() {
  OptPreemptionSpecifierContext *_localctx = _tracker.createInstance<OptPreemptionSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 828, LLVMParser::RuleOptPreemptionSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4078);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::DSO_LOCAL

    || _la == LLVMParser::DSO_PREEMPTABLE) {
      setState(4077);
      preemptionSpecifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PreemptionSpecifierContext ------------------------------------------------------------------

LLVMParser::PreemptionSpecifierContext::PreemptionSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::PreemptionSpecifierContext::DSO_LOCAL() {
  return getToken(LLVMParser::DSO_LOCAL, 0);
}

tree::TerminalNode* LLVMParser::PreemptionSpecifierContext::DSO_PREEMPTABLE() {
  return getToken(LLVMParser::DSO_PREEMPTABLE, 0);
}


size_t LLVMParser::PreemptionSpecifierContext::getRuleIndex() const {
  return LLVMParser::RulePreemptionSpecifier;
}


std::any LLVMParser::PreemptionSpecifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitPreemptionSpecifier(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::PreemptionSpecifierContext* LLVMParser::preemptionSpecifier() {
  PreemptionSpecifierContext *_localctx = _tracker.createInstance<PreemptionSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 830, LLVMParser::RulePreemptionSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4080);
    _la = _input->LA(1);
    if (!(_la == LLVMParser::DSO_LOCAL

    || _la == LLVMParser::DSO_PREEMPTABLE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnAttrsContext ------------------------------------------------------------------

LLVMParser::ReturnAttrsContext::ReturnAttrsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::ReturnAttrListContext* LLVMParser::ReturnAttrsContext::returnAttrList() {
  return getRuleContext<LLVMParser::ReturnAttrListContext>(0);
}


size_t LLVMParser::ReturnAttrsContext::getRuleIndex() const {
  return LLVMParser::RuleReturnAttrs;
}


std::any LLVMParser::ReturnAttrsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitReturnAttrs(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ReturnAttrsContext* LLVMParser::returnAttrs() {
  ReturnAttrsContext *_localctx = _tracker.createInstance<ReturnAttrsContext>(_ctx, getState());
  enterRule(_localctx, 832, LLVMParser::RuleReturnAttrs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4083);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::ALIGN || _la == LLVMParser::DEREFERENCEABLE

    || _la == LLVMParser::DEREFERENCEABLE_OR_NULL || ((((_la - 196) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 196)) & 144185556820033537) != 0) || _la == LLVMParser::SIGNEXT || _la == LLVMParser::ZEROEXT

    || _la == LLVMParser::STRING_LIT) {
      setState(4082);
      returnAttrList(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnAttrListContext ------------------------------------------------------------------

LLVMParser::ReturnAttrListContext::ReturnAttrListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::ReturnAttrContext* LLVMParser::ReturnAttrListContext::returnAttr() {
  return getRuleContext<LLVMParser::ReturnAttrContext>(0);
}

LLVMParser::ReturnAttrListContext* LLVMParser::ReturnAttrListContext::returnAttrList() {
  return getRuleContext<LLVMParser::ReturnAttrListContext>(0);
}


size_t LLVMParser::ReturnAttrListContext::getRuleIndex() const {
  return LLVMParser::RuleReturnAttrList;
}


std::any LLVMParser::ReturnAttrListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitReturnAttrList(this);
  else
    return visitor->visitChildren(this);
}


LLVMParser::ReturnAttrListContext* LLVMParser::returnAttrList() {
   return returnAttrList(0);
}

LLVMParser::ReturnAttrListContext* LLVMParser::returnAttrList(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMParser::ReturnAttrListContext *_localctx = _tracker.createInstance<ReturnAttrListContext>(_ctx, parentState);
  LLVMParser::ReturnAttrListContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 834;
  enterRecursionRule(_localctx, 834, LLVMParser::RuleReturnAttrList, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4086);
    returnAttr();
    _ctx->stop = _input->LT(-1);
    setState(4092);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ReturnAttrListContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleReturnAttrList);
        setState(4088);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(4089);
        returnAttr(); 
      }
      setState(4094);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ReturnAttrContext ------------------------------------------------------------------

LLVMParser::ReturnAttrContext::ReturnAttrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMParser::AlignmentContext* LLVMParser::ReturnAttrContext::alignment() {
  return getRuleContext<LLVMParser::AlignmentContext>(0);
}

LLVMParser::DereferenceableContext* LLVMParser::ReturnAttrContext::dereferenceable() {
  return getRuleContext<LLVMParser::DereferenceableContext>(0);
}

LLVMParser::StringLitContext* LLVMParser::ReturnAttrContext::stringLit() {
  return getRuleContext<LLVMParser::StringLitContext>(0);
}

tree::TerminalNode* LLVMParser::ReturnAttrContext::INREG() {
  return getToken(LLVMParser::INREG, 0);
}

tree::TerminalNode* LLVMParser::ReturnAttrContext::NOALIAS() {
  return getToken(LLVMParser::NOALIAS, 0);
}

tree::TerminalNode* LLVMParser::ReturnAttrContext::NONNULL() {
  return getToken(LLVMParser::NONNULL, 0);
}

tree::TerminalNode* LLVMParser::ReturnAttrContext::SIGNEXT() {
  return getToken(LLVMParser::SIGNEXT, 0);
}

tree::TerminalNode* LLVMParser::ReturnAttrContext::ZEROEXT() {
  return getToken(LLVMParser::ZEROEXT, 0);
}


size_t LLVMParser::ReturnAttrContext::getRuleIndex() const {
  return LLVMParser::RuleReturnAttr;
}


std::any LLVMParser::ReturnAttrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitReturnAttr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ReturnAttrContext* LLVMParser::returnAttr() {
  ReturnAttrContext *_localctx = _tracker.createInstance<ReturnAttrContext>(_ctx, getState());
  enterRule(_localctx, 836, LLVMParser::RuleReturnAttr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4103);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMParser::ALIGN: {
        enterOuterAlt(_localctx, 1);
        setState(4095);
        alignment();
        break;
      }

      case LLVMParser::DEREFERENCEABLE:
      case LLVMParser::DEREFERENCEABLE_OR_NULL: {
        enterOuterAlt(_localctx, 2);
        setState(4096);
        dereferenceable();
        break;
      }

      case LLVMParser::STRING_LIT: {
        enterOuterAlt(_localctx, 3);
        setState(4097);
        stringLit();
        break;
      }

      case LLVMParser::INREG: {
        enterOuterAlt(_localctx, 4);
        setState(4098);
        match(LLVMParser::INREG);
        break;
      }

      case LLVMParser::NOALIAS: {
        enterOuterAlt(_localctx, 5);
        setState(4099);
        match(LLVMParser::NOALIAS);
        break;
      }

      case LLVMParser::NONNULL: {
        enterOuterAlt(_localctx, 6);
        setState(4100);
        match(LLVMParser::NONNULL);
        break;
      }

      case LLVMParser::SIGNEXT: {
        enterOuterAlt(_localctx, 7);
        setState(4101);
        match(LLVMParser::SIGNEXT);
        break;
      }

      case LLVMParser::ZEROEXT: {
        enterOuterAlt(_localctx, 8);
        setState(4102);
        match(LLVMParser::ZEROEXT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SectionContext ------------------------------------------------------------------

LLVMParser::SectionContext::SectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::SectionContext::SECTION() {
  return getToken(LLVMParser::SECTION, 0);
}

tree::TerminalNode* LLVMParser::SectionContext::STRING_LIT() {
  return getToken(LLVMParser::STRING_LIT, 0);
}


size_t LLVMParser::SectionContext::getRuleIndex() const {
  return LLVMParser::RuleSection;
}


std::any LLVMParser::SectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitSection(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::SectionContext* LLVMParser::section() {
  SectionContext *_localctx = _tracker.createInstance<SectionContext>(_ctx, getState());
  enterRule(_localctx, 838, LLVMParser::RuleSection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4105);
    match(LLVMParser::SECTION);
    setState(4106);
    match(LLVMParser::STRING_LIT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StackAlignmentContext ------------------------------------------------------------------

LLVMParser::StackAlignmentContext::StackAlignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::StackAlignmentContext::ALIGNSTACK() {
  return getToken(LLVMParser::ALIGNSTACK, 0);
}

tree::TerminalNode* LLVMParser::StackAlignmentContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

tree::TerminalNode* LLVMParser::StackAlignmentContext::INT_LIT() {
  return getToken(LLVMParser::INT_LIT, 0);
}

tree::TerminalNode* LLVMParser::StackAlignmentContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::StackAlignmentContext::getRuleIndex() const {
  return LLVMParser::RuleStackAlignment;
}


std::any LLVMParser::StackAlignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitStackAlignment(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::StackAlignmentContext* LLVMParser::stackAlignment() {
  StackAlignmentContext *_localctx = _tracker.createInstance<StackAlignmentContext>(_ctx, getState());
  enterRule(_localctx, 840, LLVMParser::RuleStackAlignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4108);
    match(LLVMParser::ALIGNSTACK);
    setState(4109);
    match(LLVMParser::LPAREN);
    setState(4110);
    match(LLVMParser::INT_LIT);
    setState(4111);
    match(LLVMParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptSyncScopeContext ------------------------------------------------------------------

LLVMParser::OptSyncScopeContext::OptSyncScopeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::OptSyncScopeContext::SYNCSCOPE() {
  return getToken(LLVMParser::SYNCSCOPE, 0);
}

tree::TerminalNode* LLVMParser::OptSyncScopeContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

tree::TerminalNode* LLVMParser::OptSyncScopeContext::STRING_LIT() {
  return getToken(LLVMParser::STRING_LIT, 0);
}

tree::TerminalNode* LLVMParser::OptSyncScopeContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::OptSyncScopeContext::getRuleIndex() const {
  return LLVMParser::RuleOptSyncScope;
}


std::any LLVMParser::OptSyncScopeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitOptSyncScope(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::OptSyncScopeContext* LLVMParser::optSyncScope() {
  OptSyncScopeContext *_localctx = _tracker.createInstance<OptSyncScopeContext>(_ctx, getState());
  enterRule(_localctx, 842, LLVMParser::RuleOptSyncScope);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4117);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMParser::SYNCSCOPE) {
      setState(4113);
      match(LLVMParser::SYNCSCOPE);
      setState(4114);
      match(LLVMParser::LPAREN);
      setState(4115);
      match(LLVMParser::STRING_LIT);
      setState(4116);
      match(LLVMParser::RPAREN);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThreadLocalContext ------------------------------------------------------------------

LLVMParser::ThreadLocalContext::ThreadLocalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::ThreadLocalContext::THREAD_LOCAL() {
  return getToken(LLVMParser::THREAD_LOCAL, 0);
}

tree::TerminalNode* LLVMParser::ThreadLocalContext::LPAREN() {
  return getToken(LLVMParser::LPAREN, 0);
}

LLVMParser::TlsModelContext* LLVMParser::ThreadLocalContext::tlsModel() {
  return getRuleContext<LLVMParser::TlsModelContext>(0);
}

tree::TerminalNode* LLVMParser::ThreadLocalContext::RPAREN() {
  return getToken(LLVMParser::RPAREN, 0);
}


size_t LLVMParser::ThreadLocalContext::getRuleIndex() const {
  return LLVMParser::RuleThreadLocal;
}


std::any LLVMParser::ThreadLocalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitThreadLocal(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::ThreadLocalContext* LLVMParser::threadLocal() {
  ThreadLocalContext *_localctx = _tracker.createInstance<ThreadLocalContext>(_ctx, getState());
  enterRule(_localctx, 844, LLVMParser::RuleThreadLocal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4125);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 231, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4119);
      match(LLVMParser::THREAD_LOCAL);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4120);
      match(LLVMParser::THREAD_LOCAL);
      setState(4121);
      match(LLVMParser::LPAREN);
      setState(4122);
      tlsModel();
      setState(4123);
      match(LLVMParser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TlsModelContext ------------------------------------------------------------------

LLVMParser::TlsModelContext::TlsModelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::TlsModelContext::INITIALEXEC() {
  return getToken(LLVMParser::INITIALEXEC, 0);
}

tree::TerminalNode* LLVMParser::TlsModelContext::LOCALDYNAMIC() {
  return getToken(LLVMParser::LOCALDYNAMIC, 0);
}

tree::TerminalNode* LLVMParser::TlsModelContext::LOCALEXEC() {
  return getToken(LLVMParser::LOCALEXEC, 0);
}


size_t LLVMParser::TlsModelContext::getRuleIndex() const {
  return LLVMParser::RuleTlsModel;
}


std::any LLVMParser::TlsModelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitTlsModel(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::TlsModelContext* LLVMParser::tlsModel() {
  TlsModelContext *_localctx = _tracker.createInstance<TlsModelContext>(_ctx, getState());
  enterRule(_localctx, 846, LLVMParser::RuleTlsModel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4127);
    _la = _input->LA(1);
    if (!(((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & 805306369) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnnamedAddrContext ------------------------------------------------------------------

LLVMParser::UnnamedAddrContext::UnnamedAddrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::UnnamedAddrContext::LOCAL_UNNAMED_ADDR() {
  return getToken(LLVMParser::LOCAL_UNNAMED_ADDR, 0);
}

tree::TerminalNode* LLVMParser::UnnamedAddrContext::UNNAMED_ADDR() {
  return getToken(LLVMParser::UNNAMED_ADDR, 0);
}


size_t LLVMParser::UnnamedAddrContext::getRuleIndex() const {
  return LLVMParser::RuleUnnamedAddr;
}


std::any LLVMParser::UnnamedAddrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitUnnamedAddr(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::UnnamedAddrContext* LLVMParser::unnamedAddr() {
  UnnamedAddrContext *_localctx = _tracker.createInstance<UnnamedAddrContext>(_ctx, getState());
  enterRule(_localctx, 848, LLVMParser::RuleUnnamedAddr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4129);
    _la = _input->LA(1);
    if (!(_la == LLVMParser::LOCAL_UNNAMED_ADDR || _la == LLVMParser::UNNAMED_ADDR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VisibilityContext ------------------------------------------------------------------

LLVMParser::VisibilityContext::VisibilityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMParser::VisibilityContext::DEFAULT() {
  return getToken(LLVMParser::DEFAULT, 0);
}

tree::TerminalNode* LLVMParser::VisibilityContext::HIDDEN_VISIB() {
  return getToken(LLVMParser::HIDDEN_VISIB, 0);
}

tree::TerminalNode* LLVMParser::VisibilityContext::PROTECTED() {
  return getToken(LLVMParser::PROTECTED, 0);
}


size_t LLVMParser::VisibilityContext::getRuleIndex() const {
  return LLVMParser::RuleVisibility;
}


std::any LLVMParser::VisibilityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMParserVisitor*>(visitor))
    return parserVisitor->visitVisibility(this);
  else
    return visitor->visitChildren(this);
}

LLVMParser::VisibilityContext* LLVMParser::visibility() {
  VisibilityContext *_localctx = _tracker.createInstance<VisibilityContext>(_ctx, getState());
  enterRule(_localctx, 850, LLVMParser::RuleVisibility);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4131);
    _la = _input->LA(1);
    if (!(_la == LLVMParser::DEFAULT || _la == LLVMParser::HIDDEN_VISIB || _la == LLVMParser::PROTECTED)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool LLVMParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 2: return topLevelEntityListSempred(antlrcpp::downCast<TopLevelEntityListContext *>(context), predicateIndex);
    case 15: return globalAttrListSempred(antlrcpp::downCast<GlobalAttrListContext *>(context), predicateIndex);
    case 30: return metadataNodeListSempred(antlrcpp::downCast<MetadataNodeListContext *>(context), predicateIndex);
    case 35: return useListOrderListSempred(antlrcpp::downCast<UseListOrderListContext *>(context), predicateIndex);
    case 45: return llvmTypeSempred(antlrcpp::downCast<LlvmTypeContext *>(context), predicateIndex);
    case 60: return typeListSempred(antlrcpp::downCast<TypeListContext *>(context), predicateIndex);
    case 110: return gepConstIndexListSempred(antlrcpp::downCast<GepConstIndexListContext *>(context), predicateIndex);
    case 129: return basicBlockListSempred(antlrcpp::downCast<BasicBlockListContext *>(context), predicateIndex);
    case 133: return instructionListSempred(antlrcpp::downCast<InstructionListContext *>(context), predicateIndex);
    case 186: return incListSempred(antlrcpp::downCast<IncListContext *>(context), predicateIndex);
    case 195: return clauseListSempred(antlrcpp::downCast<ClauseListContext *>(context), predicateIndex);
    case 205: return caseListSempred(antlrcpp::downCast<CaseListContext *>(context), predicateIndex);
    case 208: return labelListSempred(antlrcpp::downCast<LabelListContext *>(context), predicateIndex);
    case 219: return mdFieldListSempred(antlrcpp::downCast<MdFieldListContext *>(context), predicateIndex);
    case 226: return metadataAttachmentListSempred(antlrcpp::downCast<MetadataAttachmentListContext *>(context), predicateIndex);
    case 228: return commaSepMetadataAttachmentListSempred(antlrcpp::downCast<CommaSepMetadataAttachmentListContext *>(context), predicateIndex);
    case 232: return diCompileUnitFieldListSempred(antlrcpp::downCast<DiCompileUnitFieldListContext *>(context), predicateIndex);
    case 236: return diFileFieldListSempred(antlrcpp::downCast<DiFileFieldListContext *>(context), predicateIndex);
    case 240: return diBasicTypeFieldListSempred(antlrcpp::downCast<DiBasicTypeFieldListContext *>(context), predicateIndex);
    case 244: return diSubroutineTypeFieldListSempred(antlrcpp::downCast<DiSubroutineTypeFieldListContext *>(context), predicateIndex);
    case 248: return diDerivedTypeFieldListSempred(antlrcpp::downCast<DiDerivedTypeFieldListContext *>(context), predicateIndex);
    case 252: return diCompositeTypeFieldListSempred(antlrcpp::downCast<DiCompositeTypeFieldListContext *>(context), predicateIndex);
    case 256: return diSubrangeFieldListSempred(antlrcpp::downCast<DiSubrangeFieldListContext *>(context), predicateIndex);
    case 260: return diEnumeratorFieldListSempred(antlrcpp::downCast<DiEnumeratorFieldListContext *>(context), predicateIndex);
    case 264: return diTemplateTypeParameterFieldListSempred(antlrcpp::downCast<DiTemplateTypeParameterFieldListContext *>(context), predicateIndex);
    case 268: return diTemplateValueParameterFieldListSempred(antlrcpp::downCast<DiTemplateValueParameterFieldListContext *>(context), predicateIndex);
    case 272: return diModuleFieldListSempred(antlrcpp::downCast<DiModuleFieldListContext *>(context), predicateIndex);
    case 276: return diNamespaceFieldListSempred(antlrcpp::downCast<DiNamespaceFieldListContext *>(context), predicateIndex);
    case 280: return diGlobalVariableFieldListSempred(antlrcpp::downCast<DiGlobalVariableFieldListContext *>(context), predicateIndex);
    case 284: return diSubprogramFieldListSempred(antlrcpp::downCast<DiSubprogramFieldListContext *>(context), predicateIndex);
    case 288: return diLexicalBlockFieldListSempred(antlrcpp::downCast<DiLexicalBlockFieldListContext *>(context), predicateIndex);
    case 292: return diLexicalBlockFileFieldListSempred(antlrcpp::downCast<DiLexicalBlockFileFieldListContext *>(context), predicateIndex);
    case 296: return diLocationFieldListSempred(antlrcpp::downCast<DiLocationFieldListContext *>(context), predicateIndex);
    case 300: return diLocalVariableFieldListSempred(antlrcpp::downCast<DiLocalVariableFieldListContext *>(context), predicateIndex);
    case 304: return diExpressionFieldListSempred(antlrcpp::downCast<DiExpressionFieldListContext *>(context), predicateIndex);
    case 308: return diGlobalVariableExpressionFieldListSempred(antlrcpp::downCast<DiGlobalVariableExpressionFieldListContext *>(context), predicateIndex);
    case 312: return diObjCPropertyFieldListSempred(antlrcpp::downCast<DiObjCPropertyFieldListContext *>(context), predicateIndex);
    case 316: return diImportedEntityFieldListSempred(antlrcpp::downCast<DiImportedEntityFieldListContext *>(context), predicateIndex);
    case 320: return diMacroFieldListSempred(antlrcpp::downCast<DiMacroFieldListContext *>(context), predicateIndex);
    case 324: return diMacroFileFieldListSempred(antlrcpp::downCast<DiMacroFileFieldListContext *>(context), predicateIndex);
    case 328: return genericDINodeFieldListSempred(antlrcpp::downCast<GenericDINodeFieldListContext *>(context), predicateIndex);
    case 351: return diFlagListSempred(antlrcpp::downCast<DiFlagListContext *>(context), predicateIndex);
    case 362: return typeValueListSempred(antlrcpp::downCast<TypeValueListContext *>(context), predicateIndex);
    case 363: return commaSepTypeValueListSempred(antlrcpp::downCast<CommaSepTypeValueListContext *>(context), predicateIndex);
    case 366: return typeConstListSempred(antlrcpp::downCast<TypeConstListContext *>(context), predicateIndex);
    case 371: return argListSempred(antlrcpp::downCast<ArgListContext *>(context), predicateIndex);
    case 383: return exceptionArgListSempred(antlrcpp::downCast<ExceptionArgListContext *>(context), predicateIndex);
    case 387: return fastMathFlagListSempred(antlrcpp::downCast<FastMathFlagListContext *>(context), predicateIndex);
    case 391: return funcAttrListSempred(antlrcpp::downCast<FuncAttrListContext *>(context), predicateIndex);
    case 395: return indexListSempred(antlrcpp::downCast<IndexListContext *>(context), predicateIndex);
    case 403: return operandBundleListSempred(antlrcpp::downCast<OperandBundleListContext *>(context), predicateIndex);
    case 406: return overflowFlagListSempred(antlrcpp::downCast<OverflowFlagListContext *>(context), predicateIndex);
    case 409: return paramAttrListSempred(antlrcpp::downCast<ParamAttrListContext *>(context), predicateIndex);
    case 412: return paramListSempred(antlrcpp::downCast<ParamListContext *>(context), predicateIndex);
    case 417: return returnAttrListSempred(antlrcpp::downCast<ReturnAttrListContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool LLVMParser::topLevelEntityListSempred(TopLevelEntityListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::globalAttrListSempred(GlobalAttrListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::metadataNodeListSempred(MetadataNodeListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 2: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::useListOrderListSempred(UseListOrderListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 3: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::llvmTypeSempred(LlvmTypeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 4: return precpred(_ctx, 3);
    case 5: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::typeListSempred(TypeListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 6: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::gepConstIndexListSempred(GepConstIndexListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 7: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::basicBlockListSempred(BasicBlockListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 8: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::instructionListSempred(InstructionListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 9: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::incListSempred(IncListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 10: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::clauseListSempred(ClauseListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 11: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::caseListSempred(CaseListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 12: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::labelListSempred(LabelListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 13: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::mdFieldListSempred(MdFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 14: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::metadataAttachmentListSempred(MetadataAttachmentListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 15: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::commaSepMetadataAttachmentListSempred(CommaSepMetadataAttachmentListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 16: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diCompileUnitFieldListSempred(DiCompileUnitFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 17: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diFileFieldListSempred(DiFileFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 18: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diBasicTypeFieldListSempred(DiBasicTypeFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 19: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diSubroutineTypeFieldListSempred(DiSubroutineTypeFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 20: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diDerivedTypeFieldListSempred(DiDerivedTypeFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 21: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diCompositeTypeFieldListSempred(DiCompositeTypeFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 22: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diSubrangeFieldListSempred(DiSubrangeFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 23: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diEnumeratorFieldListSempred(DiEnumeratorFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 24: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diTemplateTypeParameterFieldListSempred(DiTemplateTypeParameterFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 25: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diTemplateValueParameterFieldListSempred(DiTemplateValueParameterFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 26: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diModuleFieldListSempred(DiModuleFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 27: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diNamespaceFieldListSempred(DiNamespaceFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 28: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diGlobalVariableFieldListSempred(DiGlobalVariableFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 29: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diSubprogramFieldListSempred(DiSubprogramFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 30: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diLexicalBlockFieldListSempred(DiLexicalBlockFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 31: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diLexicalBlockFileFieldListSempred(DiLexicalBlockFileFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 32: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diLocationFieldListSempred(DiLocationFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 33: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diLocalVariableFieldListSempred(DiLocalVariableFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 34: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diExpressionFieldListSempred(DiExpressionFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 35: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diGlobalVariableExpressionFieldListSempred(DiGlobalVariableExpressionFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 36: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diObjCPropertyFieldListSempred(DiObjCPropertyFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 37: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diImportedEntityFieldListSempred(DiImportedEntityFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 38: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diMacroFieldListSempred(DiMacroFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 39: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diMacroFileFieldListSempred(DiMacroFileFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 40: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::genericDINodeFieldListSempred(GenericDINodeFieldListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 41: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::diFlagListSempred(DiFlagListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 42: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::typeValueListSempred(TypeValueListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 43: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::commaSepTypeValueListSempred(CommaSepTypeValueListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 44: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::typeConstListSempred(TypeConstListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 45: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::argListSempred(ArgListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 46: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::exceptionArgListSempred(ExceptionArgListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 47: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::fastMathFlagListSempred(FastMathFlagListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 48: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::funcAttrListSempred(FuncAttrListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 49: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::indexListSempred(IndexListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 50: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::operandBundleListSempred(OperandBundleListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 51: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::overflowFlagListSempred(OverflowFlagListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 52: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::paramAttrListSempred(ParamAttrListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 53: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::paramListSempred(ParamListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 54: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool LLVMParser::returnAttrListSempred(ReturnAttrListContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 55: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

void LLVMParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  llvmparserParserInitialize();
#else
  ::antlr4::internal::call_once(llvmparserParserOnceFlag, llvmparserParserInitialize);
#endif
}
