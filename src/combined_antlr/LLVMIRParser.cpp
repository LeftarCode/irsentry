
// Generated from ./LLVMIR.g4 by ANTLR 4.13.2


#include "LLVMIRVisitor.h"

#include "LLVMIRParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct LLVMIRParserStaticData final {
  LLVMIRParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  LLVMIRParserStaticData(const LLVMIRParserStaticData&) = delete;
  LLVMIRParserStaticData(LLVMIRParserStaticData&&) = delete;
  LLVMIRParserStaticData& operator=(const LLVMIRParserStaticData&) = delete;
  LLVMIRParserStaticData& operator=(LLVMIRParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag llvmirParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<LLVMIRParserStaticData> llvmirParserStaticData = nullptr;

void llvmirParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (llvmirParserStaticData != nullptr) {
    return;
  }
#else
  assert(llvmirParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<LLVMIRParserStaticData>(
    std::vector<std::string>{
      "compilationUnit", "targetDef", "sourceFilename", "targetDataLayout", 
      "targetTriple", "topLevelEntity", "moduleAsm", "typeDef", "comdatDef", 
      "globalDecl", "globalDef", "indirectSymbolDef", "funcDecl", "funcDef", 
      "attrGroupDef", "namedMetadataDef", "metadataDef", "useListOrder", 
      "useListOrderBB", "funcHeader", "indirectSymbol", "callingConv", "callingConvInt", 
      "funcHdrField", "gc", "prefix", "prologue", "personality", "returnAttribute", 
      "funcBody", "basicBlock", "instruction", "terminator", "localDefTerm", 
      "valueTerminator", "retTerm", "brTerm", "condBrTerm", "switchTerm", 
      "indirectBrTerm", "resumeTerm", "catchRetTerm", "cleanupRetTerm", 
      "unreachableTerm", "invokeTerm", "callBrTerm", "catchSwitchTerm", 
      "label", "case", "unwindTarget", "handlers", "metadataNode", "diExpression", 
      "diExpressionField", "globalField", "section", "comdat", "partition", 
      "constant", "boolConst", "intConst", "floatConst", "nullConst", "noneConst", 
      "structConst", "arrayConst", "vectorConst", "zeroInitializerConst", 
      "undefConst", "poisonConst", "blockAddressConst", "dsoLocalEquivalentConst", 
      "noCFIConst", "constantExpr", "typeConst", "metadataAttachment", "mdNode", 
      "mdTuple", "metadata", "diArgList", "typeValue", "value", "inlineAsm", 
      "mdString", "mdFieldOrInt", "diSPFlag", "funcAttribute", "type", "params", 
      "param", "paramAttribute", "attrString", "attrPair", "align", "alignPair", 
      "alignStack", "alignStackPair", "allocKind", "allocSize", "unwindTable", 
      "vectorScaleRange", "byRefAttr", "byval", "dereferenceable", "elementType", 
      "inAlloca", "paramAttr", "preallocated", "structRetAttr", "firstClassType", 
      "concreteType", "intType", "floatType", "pointerType", "vectorType", 
      "labelType", "arrayType", "structType", "namedType", "mmxType", "tokenType", 
      "opaquePointerType", "addrSpace", "threadLocal", "metadataType", "bitCastExpr", 
      "getElementPtrExpr", "gepIndex", "addrSpaceCastExpr", "intToPtrExpr", 
      "iCmpExpr", "fCmpExpr", "selectExpr", "truncExpr", "zExtExpr", "sExtExpr", 
      "fpTruncExpr", "fpExtExpr", "fpToUiExpr", "fpToSiExpr", "uiToFpExpr", 
      "siToFpExpr", "ptrToIntExpr", "extractElementExpr", "insertElementExpr", 
      "shuffleVectorExpr", "shlExpr", "lShrExpr", "aShrExpr", "andExpr", 
      "orExpr", "xorExpr", "addExpr", "subExpr", "mulExpr", "fNegExpr", 
      "localDefInst", "valueInstruction", "storeInst", "syncScope", "fenceInst", 
      "fNegInst", "addInst", "fAddInst", "subInst", "fSubInst", "mulInst", 
      "fMulInst", "uDivInst", "sDivInst", "fDivInst", "uRemInst", "sRemInst", 
      "fRemInst", "shlInst", "lShrInst", "aShrInst", "andInst", "orInst", 
      "xorInst", "extractElementInst", "insertElementInst", "shuffleVectorInst", 
      "extractValueInst", "insertValueInst", "allocaInst", "loadInst", "cmpXchgInst", 
      "atomicRMWInst", "getElementPtrInst", "truncInst", "zExtInst", "sExtInst", 
      "fpTruncInst", "fpExtInst", "fpToUiInst", "fpToSiInst", "uiToFpInst", 
      "siToFpInst", "ptrToIntInst", "intToPtrInst", "bitCastInst", "addrSpaceCastInst", 
      "iCmpInst", "fCmpInst", "phiInst", "selectInst", "freezeInst", "callInst", 
      "vaargInst", "landingPadInst", "catchPadInst", "cleanupPadInst", "inc", 
      "operandBundle", "clause", "args", "arg", "exceptionArg", "exceptionPad", 
      "externalLinkage", "internalLinkage", "linkage", "preemption", "visibility", 
      "dllStorageClass", "tlsModel", "unnamedAddr", "externallyInitialized", 
      "immutable", "funcAttr", "distinct", "inBounds", "returnAttr", "overflowFlag", 
      "iPred", "fPred", "atomicOrdering", "callingConvEnum", "fastMathFlag", 
      "atomicOp", "floatKind", "specializedMDNode", "diBasicType", "diCommonBlock", 
      "diCompileUnit", "diCompositeType", "diCompositeTypeField", "diDerivedType", 
      "diDerivedTypeField", "diEnumerator", "diEnumeratorField", "diFile", 
      "diFileField", "diGlobalVariable", "diGlobalVariableField", "diGlobalVariableExpression", 
      "diGlobalVariableExpressionField", "diImportedEntity", "diImportedEntityField", 
      "diLabel", "diLabelField", "diLexicalBlock", "diLexicalBlockField", 
      "diLexicalBlockFile", "diLexicalBlockFileField", "diLocalVariable", 
      "diLocalVariableField", "diLocation", "diLocationField", "diMacro", 
      "diMacroField", "diMacroFile", "diMacroFileField", "diModule", "diModuleField", 
      "diNamespace", "diNamespaceField", "diObjCProperty", "diObjCPropertyField", 
      "diStringType", "diStringTypeField", "diSubprogram", "diSubprogramField", 
      "diSubrange", "diSubrangeField", "diSubroutineType", "diTemplateTypeParameter", 
      "diTemplateValueParameter", "genericDiNode", "diTemplateTypeParameterField", 
      "diCompileUnitField", "diCommonBlockField", "diBasicTypeField", "genericDINodeField", 
      "tagField", "headerField", "operandsField", "diTemplateValueParameterField", 
      "nameField", "typeField", "defaultedField", "valueField", "mdField", 
      "diSubroutineTypeField", "flagsField", "diFlags", "ccField", "alignField", 
      "allocatedField", "annotationsField", "argField", "associatedField", 
      "attributesField", "baseTypeField", "checksumField", "checksumkindField", 
      "columnField", "configMacrosField", "containingTypeField", "countField", 
      "debugInfoForProfilingField", "declarationField", "directoryField", 
      "discriminatorField", "dataLocationField", "discriminatorIntField", 
      "dwarfAddressSpaceField", "dwoIdField", "elementsField", "emissionKindField", 
      "encodingField", "entityField", "enumsField", "exportSymbolsField", 
      "exprField", "extraDataField", "fileField", "filenameField", "flagsStringField", 
      "getterField", "globalsField", "identifierField", "importsField", 
      "includePathField", "inlinedAtField", "isDeclField", "isDefinitionField", 
      "isImplicitCodeField", "isLocalField", "isOptimizedField", "isUnsignedField", 
      "apiNotesField", "languageField", "lineField", "linkageNameField", 
      "lowerBoundField", "macrosField", "nameTableKindField", "nodesField", 
      "offsetField", "producerField", "rangesBaseAddressField", "rankField", 
      "retainedNodesField", "retainedTypesField", "runtimeLangField", "runtimeVersionField", 
      "scopeField", "scopeLineField", "sdkField", "setterField", "sizeField", 
      "sourceField", "spFlagsField", "splitDebugFilenameField", "splitDebugInliningField", 
      "strideField", "stringLengthField", "stringLengthExpressionField", 
      "stringLocationExpressionField", "sysrootField", "targetFuncNameField", 
      "templateParamsField", "thisAdjustmentField", "thrownTypesField", 
      "typeMacinfoField", "typesField", "unitField", "upperBoundField", 
      "valueIntField", "valueStringField", "varField", "virtualIndexField", 
      "virtualityField", "vtableHolderField"
    },
    std::vector<std::string>{
      "", "'source_filename'", "'='", "'target'", "'datalayout'", "'triple'", 
      "'module'", "'asm'", "'type'", "'comdat'", "'any'", "'exactmatch'", 
      "'largest'", "'nodeduplicate'", "'samesize'", "','", "'alias'", "'ifunc'", 
      "'declare'", "'define'", "'attributes'", "'{'", "'}'", "'!'", "'uselistorder'", 
      "'uselistorder_bb'", "'('", "')'", "'cc'", "'gc'", "'prefix'", "'prologue'", 
      "'personality'", "'ret'", "'void'", "'br'", "'switch'", "'['", "']'", 
      "'indirectbr'", "'resume'", "'catchret'", "'from'", "'to'", "'cleanupret'", 
      "'unwind'", "'unreachable'", "'invoke'", "'callbr'", "'catchswitch'", 
      "'within'", "'label'", "'caller'", "'!DIExpression'", "'no_sanitize_address'", 
      "'no_sanitize_hwaddress'", "'sanitize_address_dyninit'", "'sanitize_memtag'", 
      "'section'", "'partition'", "'true'", "'false'", "'null'", "'none'", 
      "'<'", "'>'", "'c'", "'zeroinitializer'", "'undef'", "'poison'", "'blockaddress'", 
      "'dso_local_equivalent'", "'no_cfi'", "'!DIArgList'", "'sideeffect'", 
      "'alignstack'", "'inteldialect'", "'opaque'", "'*'", "'...'", "'align'", 
      "'allockind'", "'allocsize'", "'uwtable'", "'async'", "'sync'", "'vscale_range'", 
      "'byref'", "'byval'", "'dereferenceable'", "'dereferenceable_or_null'", 
      "'elementtype'", "'inalloca'", "'allocalign'", "'allocptr'", "'immarg'", 
      "'inreg'", "'nest'", "'noalias'", "'nocapture'", "'nofree'", "'nonnull'", 
      "'noundef'", "'readnone'", "'readonly'", "'returned'", "'signext'", 
      "'swiftasync'", "'swifterror'", "'swiftself'", "'writeonly'", "'zeroext'", 
      "'preallocated'", "'sret'", "'x'", "'vscale'", "'x86_mmx'", "'token'", 
      "'ptr'", "'addrspace'", "'thread_local'", "'metadata'", "'bitcast'", 
      "'getelementptr'", "'inrange'", "'addrspacecast'", "'inttoptr'", "'icmp'", 
      "'fcmp'", "'select'", "'trunc'", "'zext'", "'sext'", "'fptrunc'", 
      "'fpext'", "'fptoui'", "'fptosi'", "'uitofp'", "'sitofp'", "'ptrtoint'", 
      "'extractelement'", "'insertelement'", "'shufflevector'", "'shl'", 
      "'lshr'", "'exact'", "'ashr'", "'and'", "'or'", "'xor'", "'add'", 
      "'sub'", "'mul'", "'fneg'", "'store'", "'volatile'", "'atomic'", "'syncscope'", 
      "'fence'", "'fadd'", "'fsub'", "'fmul'", "'udiv'", "'sdiv'", "'fdiv'", 
      "'urem'", "'srem'", "'frem'", "'extractvalue'", "'insertvalue'", "'alloca'", 
      "'load'", "'cmpxchg'", "'weak'", "'atomicrmw'", "'phi'", "'freeze'", 
      "'musttail'", "'notail'", "'tail'", "'call'", "'va_arg'", "'landingpad'", 
      "'cleanup'", "'catchpad'", "'cleanuppad'", "'catch'", "'filter'", 
      "'extern_weak'", "'external'", "'appending'", "'available_externally'", 
      "'common'", "'internal'", "'linkonce'", "'linkonce_odr'", "'private'", 
      "'weak_odr'", "'dso_local'", "'dso_preemptable'", "'default'", "'hidden'", 
      "'protected'", "'dllexport'", "'dllimport'", "'initialexec'", "'localdynamic'", 
      "'localexec'", "'local_unnamed_addr'", "'unnamed_addr'", "'externally_initialized'", 
      "'constant'", "'global'", "'alwaysinline'", "'argmemonly'", "'builtin'", 
      "'cold'", "'convergent'", "'disable_sanitizer_instrumentation'", "'fn_ret_thunk_extern'", 
      "'hot'", "'inaccessiblemem_or_argmemonly'", "'inaccessiblememonly'", 
      "'inlinehint'", "'jumptable'", "'minsize'", "'mustprogress'", "'naked'", 
      "'nobuiltin'", "'nocallback'", "'nocf_check'", "'noduplicate'", "'noimplicitfloat'", 
      "'noinline'", "'nomerge'", "'nonlazybind'", "'noprofile'", "'norecurse'", 
      "'noredzone'", "'noreturn'", "'nosanitize_bounds'", "'nosanitize_coverage'", 
      "'nosync'", "'nounwind'", "'null_pointer_is_valid'", "'optforfuzzing'", 
      "'optnone'", "'optsize'", "'presplitcoroutine'", "'returns_twice'", 
      "'safestack'", "'sanitize_address'", "'sanitize_hwaddress'", "'sanitize_memory'", 
      "'sanitize_thread'", "'shadowcallstack'", "'speculatable'", "'speculative_load_hardening'", 
      "'ssp'", "'sspreq'", "'sspstrong'", "'strictfp'", "'willreturn'", 
      "'distinct'", "'inbounds'", "'nsw'", "'nuw'", "'eq'", "'ne'", "'sge'", 
      "'sgt'", "'sle'", "'slt'", "'uge'", "'ugt'", "'ule'", "'ult'", "'oeq'", 
      "'oge'", "'ogt'", "'ole'", "'olt'", "'one'", "'ord'", "'ueq'", "'une'", 
      "'uno'", "'acq_rel'", "'acquire'", "'monotonic'", "'release'", "'seq_cst'", 
      "'unordered'", "'aarch64_sve_vector_pcs'", "'aarch64_vector_pcs'", 
      "'amdgpu_cs'", "'amdgpu_es'", "'amdgpu_gfx'", "'amdgpu_gs'", "'amdgpu_hs'", 
      "'amdgpu_kernel'", "'amdgpu_ls'", "'amdgpu_ps'", "'amdgpu_vs'", "'anyregcc'", 
      "'arm_aapcs_vfpcc'", "'arm_aapcscc'", "'arm_apcscc'", "'avr_intrcc'", 
      "'avr_signalcc'", "'ccc'", "'cfguard_checkcc'", "'coldcc'", "'cxx_fast_tlscc'", 
      "'fastcc'", "'ghccc'", "'hhvm_ccc'", "'hhvmcc'", "'intel_ocl_bicc'", 
      "'msp430_intrcc'", "'preserve_allcc'", "'preserve_mostcc'", "'ptx_device'", 
      "'ptx_kernel'", "'spir_func'", "'spir_kernel'", "'swiftcc'", "'swifttailcc'", 
      "'tailcc'", "'webkit_jscc'", "'win64cc'", "'x86_64_sysvcc'", "'x86_fastcallcc'", 
      "'x86_intrcc'", "'x86_regcallcc'", "'x86_stdcallcc'", "'x86_thiscallcc'", 
      "'x86_vectorcallcc'", "'afn'", "'arcp'", "'contract'", "'fast'", "'ninf'", 
      "'nnan'", "'nsz'", "'reassoc'", "'fmax'", "'fmin'", "'max'", "'min'", 
      "'nand'", "'umax'", "'umin'", "'xchg'", "'half'", "'bfloat'", "'float'", 
      "'double'", "'x86_fp80'", "'fp128'", "'ppc_fp128'", "'!DIBasicType'", 
      "'!DICommonBlock'", "'!DICompileUnit'", "'!DICompositeType'", "'!DIDerivedType'", 
      "'!DIEnumerator'", "'!DIFile'", "'!DIGlobalVariable'", "'!DIGlobalVariableExpression'", 
      "'!DIImportedEntity'", "'!DILabel'", "'!DILexicalBlock'", "'!DILexicalBlockFile'", 
      "'!DILocalVariable'", "'!DILocation'", "'!DIMacro'", "'!DIMacroFile'", 
      "'!DIModule'", "'!DINamespace'", "'!DIObjCProperty'", "'!DIStringType'", 
      "'!DISubprogram'", "'!DISubrange'", "'!DISubroutineType'", "'!DITemplateTypeParameter'", 
      "'!DITemplateValueParameter'", "'!GenericDINode'", "'tag:'", "'header:'", 
      "'operands:'", "'name:'", "'type:'", "'defaulted:'", "'value:'", "'flags:'", 
      "'|'", "'cc:'", "'align:'", "'allocated:'", "'annotations:'", "'arg:'", 
      "'associated:'", "'attributes:'", "'baseType:'", "'checksum:'", "'checksumkind:'", 
      "'column:'", "'configMacros:'", "'containingType:'", "'count:'", "'debugInfoForProfiling:'", 
      "'declaration:'", "'directory:'", "'discriminator:'", "'dataLocation:'", 
      "'dwarfAddressSpace:'", "'dwoId:'", "'elements:'", "'emissionKind:'", 
      "'DebugDirectivesOnly'", "'FullDebug'", "'LineTablesOnly'", "'NoDebug'", 
      "'encoding:'", "'entity:'", "'enums:'", "'exportSymbols:'", "'expr:'", 
      "'extraData:'", "'file:'", "'filename:'", "'getter:'", "'globals:'", 
      "'identifier:'", "'imports:'", "'includePath:'", "'inlinedAt:'", "'isDecl:'", 
      "'isDefinition:'", "'isImplicitCode:'", "'isLocal:'", "'isOptimized:'", 
      "'isUnsigned:'", "'apinotes:'", "'language:'", "'line:'", "'linkageName:'", 
      "'lowerBound:'", "'macros:'", "'nameTableKind:'", "'GNU'", "'None'", 
      "'Default'", "'nodes:'", "'offset:'", "'producer:'", "'rangesBaseAddress:'", 
      "'rank:'", "'retainedNodes:'", "'retainedTypes:'", "'runtimeLang:'", 
      "'runtimeVersion:'", "'scope:'", "'scopeLine:'", "'sdk:'", "'setter:'", 
      "'size:'", "'source:'", "'spFlags:'", "'splitDebugFilename:'", "'splitDebugInlining:'", 
      "'stride:'", "'stringLength:'", "'stringLengthExpression:'", "'stringLocationExpression:'", 
      "'sysroot:'", "'targetFuncName:'", "'templateParams:'", "'thisAdjustment:'", 
      "'thrownTypes:'", "'types:'", "'unit:'", "'upperBound:'", "'var:'", 
      "'virtualIndex:'", "'virtuality:'", "'vtableHolder:'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "Comment", "WhiteSpace", 
      "IntLit", "FloatLit", "StringLit", "GlobalIdent", "LocalIdent", "LabelIdent", 
      "AttrGroupId", "ComdatName", "MetadataName", "MetadataId", "IntType", 
      "DwarfTag", "DwarfAttEncoding", "DiFlag", "DispFlag", "DwarfLang", 
      "DwarfCc", "ChecksumKind", "DwarfVirtuality", "DwarfMacinfo", "DwarfOp"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,510,4306,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,
  	7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,
  	7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,
  	7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,
  	7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,
  	7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,
  	7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,
  	7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,
  	7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
  	7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
  	7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,
  	7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,
  	7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,
  	7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,
  	7,254,2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,
  	7,260,2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,
  	7,266,2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,
  	7,272,2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,
  	7,278,2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,
  	7,284,2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,
  	7,290,2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
  	7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,
  	7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,
  	7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,
  	7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,
  	7,320,2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,
  	7,326,2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,
  	7,332,2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,
  	7,338,2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,
  	7,344,2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,
  	7,350,2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,
  	7,356,2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
  	7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,
  	7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,
  	7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,
  	7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,
  	7,386,2,387,7,387,2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,
  	7,392,2,393,7,393,2,394,7,394,2,395,7,395,1,0,5,0,794,8,0,10,0,12,0,797,
  	9,0,1,0,1,0,1,1,1,1,3,1,803,8,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,
  	4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
  	1,5,1,5,3,5,834,8,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
  	8,1,8,1,9,1,9,1,9,1,9,3,9,854,8,9,1,9,3,9,857,8,9,1,9,3,9,860,8,9,1,9,
  	3,9,863,8,9,1,9,3,9,866,8,9,1,9,3,9,869,8,9,1,9,3,9,872,8,9,1,9,1,9,1,
  	9,1,9,5,9,878,8,9,10,9,12,9,881,9,9,1,9,1,9,5,9,885,8,9,10,9,12,9,888,
  	9,9,1,9,5,9,891,8,9,10,9,12,9,894,9,9,1,10,1,10,1,10,3,10,899,8,10,1,
  	10,3,10,902,8,10,1,10,3,10,905,8,10,1,10,3,10,908,8,10,1,10,3,10,911,
  	8,10,1,10,3,10,914,8,10,1,10,3,10,917,8,10,1,10,3,10,920,8,10,1,10,1,
  	10,1,10,1,10,1,10,5,10,927,8,10,10,10,12,10,930,9,10,1,10,1,10,5,10,934,
  	8,10,10,10,12,10,937,9,10,1,10,5,10,940,8,10,10,10,12,10,943,9,10,1,11,
  	1,11,1,11,3,11,948,8,11,1,11,3,11,951,8,11,1,11,3,11,954,8,11,1,11,3,
  	11,957,8,11,1,11,3,11,960,8,11,1,11,3,11,963,8,11,1,11,1,11,1,11,1,11,
  	1,11,1,11,5,11,971,8,11,10,11,12,11,974,9,11,1,12,1,12,5,12,978,8,12,
  	10,12,12,12,981,9,12,1,12,1,12,1,13,1,13,1,13,5,13,988,8,13,10,13,12,
  	13,991,9,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,5,14,1000,8,14,10,14,12,
  	14,1003,9,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,5,15,1014,8,
  	15,10,15,12,15,1017,9,15,3,15,1019,8,15,1,15,1,15,1,16,1,16,1,16,3,16,
  	1026,8,16,1,16,1,16,3,16,1030,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
  	5,17,1039,8,17,10,17,12,17,1042,9,17,1,17,1,17,1,18,1,18,1,18,1,18,1,
  	18,1,18,1,18,1,18,1,18,5,18,1055,8,18,10,18,12,18,1058,9,18,1,18,1,18,
  	1,19,3,19,1063,8,19,1,19,3,19,1066,8,19,1,19,3,19,1069,8,19,1,19,3,19,
  	1072,8,19,1,19,3,19,1075,8,19,1,19,5,19,1078,8,19,10,19,12,19,1081,9,
  	19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,1089,8,19,1,19,3,19,1092,8,19,1,
  	19,5,19,1095,8,19,10,19,12,19,1098,9,19,1,20,1,20,1,20,1,20,1,20,3,20,
  	1105,8,20,1,21,1,21,3,21,1109,8,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,
  	1,23,1,23,1,23,1,23,1,23,3,23,1123,8,23,1,24,1,24,1,24,1,25,1,25,1,25,
  	1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,3,28,1140,8,28,1,29,1,29,
  	4,29,1144,8,29,11,29,12,29,1145,1,29,5,29,1149,8,29,10,29,12,29,1152,
  	9,29,1,29,1,29,1,30,3,30,1157,8,30,1,30,5,30,1160,8,30,10,30,12,30,1163,
  	9,30,1,30,1,30,1,31,1,31,1,31,1,31,3,31,1171,8,31,1,32,1,32,1,32,1,32,
  	1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,1184,8,32,1,33,1,33,1,33,1,33,
  	1,34,1,34,1,34,3,34,1193,8,34,1,35,1,35,1,35,1,35,5,35,1199,8,35,10,35,
  	12,35,1202,9,35,1,35,1,35,1,35,1,35,1,35,5,35,1209,8,35,10,35,12,35,1212,
  	9,35,3,35,1214,8,35,1,36,1,36,1,36,1,36,5,36,1220,8,36,10,36,12,36,1223,
  	9,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,5,37,1234,8,37,10,37,
  	12,37,1237,9,37,1,38,1,38,1,38,1,38,1,38,1,38,5,38,1245,8,38,10,38,12,
  	38,1248,9,38,1,38,1,38,1,38,5,38,1253,8,38,10,38,12,38,1256,9,38,1,39,
  	1,39,1,39,1,39,1,39,1,39,1,39,3,39,1265,8,39,3,39,1267,8,39,1,39,1,39,
  	1,39,5,39,1272,8,39,10,39,12,39,1275,9,39,1,40,1,40,1,40,1,40,5,40,1281,
  	8,40,10,40,12,40,1284,9,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,5,41,1293,
  	8,41,10,41,12,41,1296,9,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,5,42,1305,
  	8,42,10,42,12,42,1308,9,42,1,43,1,43,1,43,5,43,1313,8,43,10,43,12,43,
  	1316,9,43,1,44,1,44,3,44,1320,8,44,1,44,5,44,1323,8,44,10,44,12,44,1326,
  	9,44,1,44,3,44,1329,8,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,1337,8,44,
  	10,44,12,44,1340,9,44,1,44,1,44,1,44,1,44,4,44,1346,8,44,11,44,12,44,
  	1347,1,44,1,44,3,44,1352,8,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,1360,
  	8,44,10,44,12,44,1363,9,44,1,45,1,45,3,45,1367,8,45,1,45,5,45,1370,8,
  	45,10,45,12,45,1373,9,45,1,45,3,45,1376,8,45,1,45,1,45,1,45,1,45,1,45,
  	1,45,5,45,1384,8,45,10,45,12,45,1387,9,45,1,45,1,45,1,45,1,45,4,45,1393,
  	8,45,11,45,12,45,1394,1,45,1,45,3,45,1399,8,45,1,45,1,45,1,45,1,45,1,
  	45,1,45,5,45,1407,8,45,10,45,12,45,1410,9,45,3,45,1412,8,45,1,45,1,45,
  	1,45,5,45,1417,8,45,10,45,12,45,1420,9,45,1,46,1,46,1,46,1,46,1,46,1,
  	46,1,46,1,46,1,46,1,46,5,46,1432,8,46,10,46,12,46,1435,9,46,1,47,1,47,
  	1,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,3,49,1447,8,49,1,50,1,50,1,50,
  	5,50,1452,8,50,10,50,12,50,1455,9,50,1,51,1,51,3,51,1459,8,51,1,52,1,
  	52,1,52,1,52,1,52,5,52,1466,8,52,10,52,12,52,1469,9,52,3,52,1471,8,52,
  	1,52,1,52,1,53,1,53,1,54,1,54,1,54,1,54,1,54,3,54,1482,8,54,1,55,1,55,
  	1,55,1,56,1,56,1,56,1,56,3,56,1491,8,56,1,57,1,57,1,57,1,58,1,58,1,58,
  	1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,
  	1512,8,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,
  	1,64,1,64,5,64,1528,8,64,10,64,12,64,1531,9,64,3,64,1533,8,64,1,64,1,
  	64,1,64,1,64,1,64,1,64,5,64,1541,8,64,10,64,12,64,1544,9,64,3,64,1546,
  	8,64,1,64,1,64,3,64,1550,8,64,1,65,1,65,1,65,1,65,1,65,1,65,5,65,1558,
  	8,65,10,65,12,65,1561,9,65,3,65,1563,8,65,1,65,3,65,1566,8,65,1,66,1,
  	66,1,66,1,66,5,66,1572,8,66,10,66,12,66,1575,9,66,3,66,1577,8,66,1,66,
  	1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
  	1,71,1,71,1,71,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
  	1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
  	1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1630,8,73,1,74,1,74,1,74,
  	1,75,1,75,1,75,1,76,1,76,1,76,3,76,1641,8,76,1,77,1,77,1,77,1,77,1,77,
  	5,77,1648,8,77,10,77,12,77,1651,9,77,3,77,1653,8,77,1,77,1,77,1,78,1,
  	78,1,78,1,78,1,78,1,78,3,78,1663,8,78,1,79,1,79,1,79,1,79,1,79,5,79,1670,
  	8,79,10,79,12,79,1673,9,79,3,79,1675,8,79,1,79,1,79,1,80,1,80,1,80,1,
  	81,1,81,1,81,3,81,1685,8,81,1,82,1,82,3,82,1689,8,82,1,82,3,82,1692,8,
  	82,1,82,3,82,1695,8,82,1,82,3,82,1698,8,82,1,82,1,82,1,82,1,82,1,83,1,
  	83,1,83,1,84,1,84,3,84,1709,8,84,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,
  	86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,1725,8,86,1,87,1,87,1,87,1,87,1,
  	87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1741,8,87,1,87,1,
  	87,1,87,1,87,1,87,1,87,1,87,3,87,1750,8,87,1,87,5,87,1753,8,87,10,87,
  	12,87,1756,9,87,1,88,3,88,1759,8,88,1,88,1,88,1,88,5,88,1764,8,88,10,
  	88,12,88,1767,9,88,1,88,1,88,3,88,1771,8,88,3,88,1773,8,88,1,89,1,89,
  	5,89,1777,8,89,10,89,12,89,1780,9,89,1,89,3,89,1783,8,89,1,90,1,90,1,
  	90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,1797,8,90,1,91,1,
  	91,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,1,93,3,93,1811,8,93,1,
  	94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,96,1,96,1,96,1,96,1,97,1,
  	97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,3,98,1836,8,98,1,98,1,98,1,
  	99,1,99,1,99,1,99,1,99,3,99,1845,8,99,1,100,1,100,1,100,1,100,1,100,1,
  	100,3,100,1853,8,100,1,100,3,100,1856,8,100,1,101,1,101,1,101,1,101,1,
  	101,1,102,1,102,1,102,1,102,1,102,3,102,1868,8,102,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,3,103,1878,8,103,1,104,1,104,1,104,1,104,
  	1,104,1,105,1,105,1,105,1,105,1,105,1,106,1,106,1,107,1,107,1,107,1,107,
  	1,107,1,108,1,108,1,108,1,108,1,108,1,109,1,109,3,109,1904,8,109,1,110,
  	1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,1916,8,110,
  	1,111,1,111,1,112,1,112,1,113,1,113,3,113,1924,8,113,1,113,1,113,1,113,
  	3,113,1929,8,113,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
  	1,114,1,114,1,114,1,114,1,114,3,114,1945,8,114,1,115,1,115,1,116,1,116,
  	1,116,1,116,1,116,1,116,1,117,1,117,1,117,1,117,5,117,1959,8,117,10,117,
  	12,117,1962,9,117,3,117,1964,8,117,1,117,1,117,1,117,1,117,1,117,1,117,
  	5,117,1972,8,117,10,117,12,117,1975,9,117,3,117,1977,8,117,1,117,1,117,
  	3,117,1981,8,117,1,118,1,118,1,119,1,119,1,120,1,120,1,121,1,121,3,121,
  	1991,8,121,1,122,1,122,1,122,1,122,1,122,1,123,1,123,1,123,1,123,1,123,
  	3,123,2003,8,123,1,124,1,124,1,125,1,125,1,125,1,125,1,125,1,125,1,125,
  	1,126,1,126,3,126,2016,8,126,1,126,1,126,1,126,1,126,1,126,1,126,5,126,
  	2024,8,126,10,126,12,126,2027,9,126,1,126,1,126,1,127,3,127,2032,8,127,
  	1,127,1,127,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,129,1,129,1,129,
  	1,129,1,129,1,129,1,129,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,
  	1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,132,1,132,1,132,1,132,
  	1,132,1,132,1,132,1,132,1,132,1,133,1,133,1,133,1,133,1,133,1,133,1,133,
  	1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,135,1,135,1,135,1,135,1,135,
  	1,135,1,135,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,137,1,137,1,137,
  	1,137,1,137,1,137,1,137,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,139,
  	1,139,1,139,1,139,1,139,1,139,1,139,1,140,1,140,1,140,1,140,1,140,1,140,
  	1,140,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,142,1,142,1,142,1,142,
  	1,142,1,142,1,142,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,144,1,144,
  	1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,145,1,145,1,145,1,145,1,145,
  	1,145,1,145,1,145,1,145,1,146,1,146,5,146,2172,8,146,10,146,12,146,2175,
  	9,146,1,146,1,146,1,146,1,146,1,146,1,146,1,147,1,147,3,147,2185,8,147,
  	1,147,1,147,1,147,1,147,1,147,1,147,1,148,1,148,3,148,2195,8,148,1,148,
  	1,148,1,148,1,148,1,148,1,148,1,149,1,149,1,149,1,149,1,149,1,149,1,149,
  	1,150,1,150,1,150,1,150,1,150,1,150,1,150,1,151,1,151,1,151,1,151,1,151,
  	1,151,1,151,1,152,1,152,5,152,2226,8,152,10,152,12,152,2229,9,152,1,152,
  	1,152,1,152,1,152,1,152,1,152,1,153,1,153,5,153,2239,8,153,10,153,12,
  	153,2242,9,153,1,153,1,153,1,153,1,153,1,153,1,153,1,154,1,154,5,154,
  	2252,8,154,10,154,12,154,2255,9,154,1,154,1,154,1,154,1,154,1,154,1,154,
  	1,155,1,155,1,155,1,155,1,155,1,156,1,156,1,156,1,156,1,157,1,157,1,157,
  	1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,
  	1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,
  	1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,
  	1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,
  	1,157,3,157,2324,8,157,1,158,1,158,3,158,2328,8,158,1,158,1,158,1,158,
  	1,158,1,158,3,158,2335,8,158,1,158,1,158,5,158,2339,8,158,10,158,12,158,
  	2342,9,158,1,158,1,158,1,158,3,158,2347,8,158,1,158,1,158,1,158,1,158,
  	3,158,2353,8,158,1,158,1,158,1,158,3,158,2358,8,158,1,158,1,158,5,158,
  	2362,8,158,10,158,12,158,2365,9,158,3,158,2367,8,158,1,159,1,159,1,159,
  	1,159,1,159,1,160,1,160,3,160,2376,8,160,1,160,1,160,1,160,5,160,2381,
  	8,160,10,160,12,160,2384,9,160,1,161,1,161,5,161,2388,8,161,10,161,12,
  	161,2391,9,161,1,161,1,161,1,161,5,161,2396,8,161,10,161,12,161,2399,
  	9,161,1,162,1,162,5,162,2403,8,162,10,162,12,162,2406,9,162,1,162,1,162,
  	1,162,1,162,1,162,5,162,2413,8,162,10,162,12,162,2416,9,162,1,163,1,163,
  	5,163,2420,8,163,10,163,12,163,2423,9,163,1,163,1,163,1,163,1,163,1,163,
  	5,163,2430,8,163,10,163,12,163,2433,9,163,1,164,1,164,5,164,2437,8,164,
  	10,164,12,164,2440,9,164,1,164,1,164,1,164,1,164,1,164,5,164,2447,8,164,
  	10,164,12,164,2450,9,164,1,165,1,165,5,165,2454,8,165,10,165,12,165,2457,
  	9,165,1,165,1,165,1,165,1,165,1,165,5,165,2464,8,165,10,165,12,165,2467,
  	9,165,1,166,1,166,5,166,2471,8,166,10,166,12,166,2474,9,166,1,166,1,166,
  	1,166,1,166,1,166,5,166,2481,8,166,10,166,12,166,2484,9,166,1,167,1,167,
  	5,167,2488,8,167,10,167,12,167,2491,9,167,1,167,1,167,1,167,1,167,1,167,
  	5,167,2498,8,167,10,167,12,167,2501,9,167,1,168,1,168,3,168,2505,8,168,
  	1,168,1,168,1,168,1,168,1,168,5,168,2512,8,168,10,168,12,168,2515,9,168,
  	1,169,1,169,3,169,2519,8,169,1,169,1,169,1,169,1,169,1,169,5,169,2526,
  	8,169,10,169,12,169,2529,9,169,1,170,1,170,5,170,2533,8,170,10,170,12,
  	170,2536,9,170,1,170,1,170,1,170,1,170,1,170,5,170,2543,8,170,10,170,
  	12,170,2546,9,170,1,171,1,171,1,171,1,171,1,171,1,171,5,171,2554,8,171,
  	10,171,12,171,2557,9,171,1,172,1,172,1,172,1,172,1,172,1,172,5,172,2565,
  	8,172,10,172,12,172,2568,9,172,1,173,1,173,5,173,2572,8,173,10,173,12,
  	173,2575,9,173,1,173,1,173,1,173,1,173,1,173,5,173,2582,8,173,10,173,
  	12,173,2585,9,173,1,174,1,174,5,174,2589,8,174,10,174,12,174,2592,9,174,
  	1,174,1,174,1,174,1,174,1,174,5,174,2599,8,174,10,174,12,174,2602,9,174,
  	1,175,1,175,3,175,2606,8,175,1,175,1,175,1,175,1,175,1,175,5,175,2613,
  	8,175,10,175,12,175,2616,9,175,1,176,1,176,3,176,2620,8,176,1,176,1,176,
  	1,176,1,176,1,176,5,176,2627,8,176,10,176,12,176,2630,9,176,1,177,1,177,
  	1,177,1,177,1,177,1,177,5,177,2638,8,177,10,177,12,177,2641,9,177,1,178,
  	1,178,1,178,1,178,1,178,1,178,5,178,2649,8,178,10,178,12,178,2652,9,178,
  	1,179,1,179,1,179,1,179,1,179,1,179,5,179,2660,8,179,10,179,12,179,2663,
  	9,179,1,180,1,180,1,180,1,180,1,180,1,180,5,180,2671,8,180,10,180,12,
  	180,2674,9,180,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,5,181,
  	2684,8,181,10,181,12,181,2687,9,181,1,182,1,182,1,182,1,182,1,182,1,182,
  	1,182,1,182,5,182,2697,8,182,10,182,12,182,2700,9,182,1,183,1,183,1,183,
  	1,183,4,183,2706,8,183,11,183,12,183,2707,1,183,1,183,5,183,2712,8,183,
  	10,183,12,183,2715,9,183,1,184,1,184,1,184,1,184,1,184,1,184,4,184,2723,
  	8,184,11,184,12,184,2724,1,184,1,184,5,184,2729,8,184,10,184,12,184,2732,
  	9,184,1,185,1,185,3,185,2736,8,185,1,185,3,185,2739,8,185,1,185,1,185,
  	1,185,3,185,2744,8,185,1,185,1,185,3,185,2748,8,185,1,185,1,185,3,185,
  	2752,8,185,1,185,1,185,5,185,2756,8,185,10,185,12,185,2759,9,185,1,186,
  	1,186,3,186,2763,8,186,1,186,1,186,1,186,1,186,1,186,3,186,2770,8,186,
  	1,186,1,186,5,186,2774,8,186,10,186,12,186,2777,9,186,1,186,1,186,1,186,
  	3,186,2782,8,186,1,186,1,186,1,186,1,186,3,186,2788,8,186,1,186,1,186,
  	1,186,3,186,2793,8,186,1,186,1,186,5,186,2797,8,186,10,186,12,186,2800,
  	9,186,3,186,2802,8,186,1,187,1,187,3,187,2806,8,187,1,187,3,187,2809,
  	8,187,1,187,1,187,1,187,1,187,1,187,1,187,3,187,2817,8,187,1,187,1,187,
  	1,187,1,187,3,187,2823,8,187,1,187,1,187,5,187,2827,8,187,10,187,12,187,
  	2830,9,187,1,188,1,188,3,188,2834,8,188,1,188,1,188,1,188,1,188,1,188,
  	3,188,2841,8,188,1,188,1,188,1,188,3,188,2846,8,188,1,188,1,188,5,188,
  	2850,8,188,10,188,12,188,2853,9,188,1,189,1,189,3,189,2857,8,189,1,189,
  	1,189,1,189,1,189,1,189,5,189,2864,8,189,10,189,12,189,2867,9,189,1,189,
  	1,189,5,189,2871,8,189,10,189,12,189,2874,9,189,1,190,1,190,1,190,1,190,
  	1,190,1,190,5,190,2882,8,190,10,190,12,190,2885,9,190,1,191,1,191,1,191,
  	1,191,1,191,1,191,5,191,2893,8,191,10,191,12,191,2896,9,191,1,192,1,192,
  	1,192,1,192,1,192,1,192,5,192,2904,8,192,10,192,12,192,2907,9,192,1,193,
  	1,193,1,193,1,193,1,193,1,193,5,193,2915,8,193,10,193,12,193,2918,9,193,
  	1,194,1,194,1,194,1,194,1,194,1,194,5,194,2926,8,194,10,194,12,194,2929,
  	9,194,1,195,1,195,1,195,1,195,1,195,1,195,5,195,2937,8,195,10,195,12,
  	195,2940,9,195,1,196,1,196,1,196,1,196,1,196,1,196,5,196,2948,8,196,10,
  	196,12,196,2951,9,196,1,197,1,197,1,197,1,197,1,197,1,197,5,197,2959,
  	8,197,10,197,12,197,2962,9,197,1,198,1,198,1,198,1,198,1,198,1,198,5,
  	198,2970,8,198,10,198,12,198,2973,9,198,1,199,1,199,1,199,1,199,1,199,
  	1,199,5,199,2981,8,199,10,199,12,199,2984,9,199,1,200,1,200,1,200,1,200,
  	1,200,1,200,5,200,2992,8,200,10,200,12,200,2995,9,200,1,201,1,201,1,201,
  	1,201,1,201,1,201,5,201,3003,8,201,10,201,12,201,3006,9,201,1,202,1,202,
  	1,202,1,202,1,202,1,202,5,202,3014,8,202,10,202,12,202,3017,9,202,1,203,
  	1,203,1,203,1,203,1,203,1,203,1,203,5,203,3026,8,203,10,203,12,203,3029,
  	9,203,1,204,1,204,5,204,3033,8,204,10,204,12,204,3036,9,204,1,204,1,204,
  	1,204,1,204,1,204,1,204,5,204,3044,8,204,10,204,12,204,3047,9,204,1,205,
  	1,205,5,205,3051,8,205,10,205,12,205,3054,9,205,1,205,1,205,1,205,1,205,
  	5,205,3060,8,205,10,205,12,205,3063,9,205,1,205,1,205,5,205,3067,8,205,
  	10,205,12,205,3070,9,205,1,206,1,206,5,206,3074,8,206,10,206,12,206,3077,
  	9,206,1,206,1,206,1,206,1,206,1,206,1,206,1,206,5,206,3086,8,206,10,206,
  	12,206,3089,9,206,1,207,1,207,1,207,1,208,3,208,3095,8,208,1,208,1,208,
  	5,208,3099,8,208,10,208,12,208,3102,9,208,1,208,3,208,3105,8,208,1,208,
  	5,208,3108,8,208,10,208,12,208,3111,9,208,1,208,3,208,3114,8,208,1,208,
  	1,208,1,208,1,208,1,208,1,208,5,208,3122,8,208,10,208,12,208,3125,9,208,
  	1,208,1,208,1,208,1,208,5,208,3131,8,208,10,208,12,208,3134,9,208,1,208,
  	1,208,3,208,3138,8,208,1,208,1,208,5,208,3142,8,208,10,208,12,208,3145,
  	9,208,1,209,1,209,1,209,1,209,1,209,1,209,5,209,3153,8,209,10,209,12,
  	209,3156,9,209,1,210,1,210,1,210,3,210,3161,8,210,1,210,5,210,3164,8,
  	210,10,210,12,210,3167,9,210,1,210,1,210,5,210,3171,8,210,10,210,12,210,
  	3174,9,210,1,211,1,211,1,211,1,211,1,211,1,211,1,211,5,211,3183,8,211,
  	10,211,12,211,3186,9,211,3,211,3188,8,211,1,211,1,211,1,211,5,211,3193,
  	8,211,10,211,12,211,3196,9,211,1,212,1,212,1,212,1,212,1,212,1,212,1,
  	212,5,212,3205,8,212,10,212,12,212,3208,9,212,3,212,3210,8,212,1,212,
  	1,212,1,212,5,212,3215,8,212,10,212,12,212,3218,9,212,1,213,1,213,1,213,
  	1,213,1,213,1,213,1,214,1,214,1,214,1,214,1,214,5,214,3231,8,214,10,214,
  	12,214,3234,9,214,3,214,3236,8,214,1,214,1,214,1,215,1,215,1,215,1,216,
  	3,216,3244,8,216,1,216,1,216,1,216,5,216,3249,8,216,10,216,12,216,3252,
  	9,216,1,216,1,216,3,216,3256,8,216,3,216,3258,8,216,1,217,1,217,5,217,
  	3262,8,217,10,217,12,217,3265,9,217,1,217,1,217,1,217,1,217,1,217,3,217,
  	3272,8,217,1,218,1,218,1,218,1,218,1,218,1,218,3,218,3280,8,218,1,219,
  	1,219,3,219,3284,8,219,1,220,1,220,1,221,1,221,1,222,1,222,3,222,3292,
  	8,222,1,223,1,223,1,224,1,224,1,225,1,225,1,226,1,226,1,227,1,227,1,228,
  	1,228,1,229,1,229,1,230,1,230,1,231,1,231,1,232,1,232,1,233,1,233,1,234,
  	1,234,1,235,1,235,1,236,1,236,1,237,1,237,1,238,1,238,1,239,1,239,1,240,
  	1,240,1,241,1,241,1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,
  	1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,
  	1,242,1,242,1,242,1,242,1,242,1,242,1,242,3,242,3360,8,242,1,243,1,243,
  	1,243,1,243,1,243,5,243,3367,8,243,10,243,12,243,3370,9,243,3,243,3372,
  	8,243,1,243,1,243,1,244,1,244,1,244,1,244,1,244,5,244,3381,8,244,10,244,
  	12,244,3384,9,244,3,244,3386,8,244,1,244,1,244,1,245,1,245,1,245,1,245,
  	1,245,5,245,3395,8,245,10,245,12,245,3398,9,245,3,245,3400,8,245,1,245,
  	1,245,1,246,1,246,1,246,1,246,1,246,5,246,3409,8,246,10,246,12,246,3412,
  	9,246,3,246,3414,8,246,1,246,1,246,1,247,1,247,1,247,1,247,1,247,1,247,
  	1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
  	1,247,1,247,1,247,3,247,3439,8,247,1,248,1,248,1,248,1,248,1,248,5,248,
  	3446,8,248,10,248,12,248,3449,9,248,3,248,3451,8,248,1,248,1,248,1,249,
  	1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,
  	3,249,3468,8,249,1,250,1,250,1,250,1,250,1,250,5,250,3475,8,250,10,250,
  	12,250,3478,9,250,3,250,3480,8,250,1,250,1,250,1,251,1,251,1,251,3,251,
  	3487,8,251,1,252,1,252,1,252,1,252,1,252,5,252,3494,8,252,10,252,12,252,
  	3497,9,252,3,252,3499,8,252,1,252,1,252,1,253,1,253,1,253,1,253,1,253,
  	3,253,3508,8,253,1,254,1,254,1,254,1,254,1,254,5,254,3515,8,254,10,254,
  	12,254,3518,9,254,3,254,3520,8,254,1,254,1,254,1,255,1,255,1,255,1,255,
  	1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,3,255,3536,8,255,1,256,
  	1,256,1,256,1,256,1,256,5,256,3543,8,256,10,256,12,256,3546,9,256,3,256,
  	3548,8,256,1,256,1,256,1,257,1,257,3,257,3554,8,257,1,258,1,258,1,258,
  	1,258,1,258,5,258,3561,8,258,10,258,12,258,3564,9,258,3,258,3566,8,258,
  	1,258,1,258,1,259,1,259,1,259,1,259,1,259,1,259,1,259,3,259,3577,8,259,
  	1,260,1,260,1,260,1,260,1,260,5,260,3584,8,260,10,260,12,260,3587,9,260,
  	3,260,3589,8,260,1,260,1,260,1,261,1,261,1,261,1,261,3,261,3597,8,261,
  	1,262,1,262,1,262,1,262,1,262,5,262,3604,8,262,10,262,12,262,3607,9,262,
  	3,262,3609,8,262,1,262,1,262,1,263,1,263,1,263,1,263,3,263,3617,8,263,
  	1,264,1,264,1,264,1,264,1,264,5,264,3624,8,264,10,264,12,264,3627,9,264,
  	3,264,3629,8,264,1,264,1,264,1,265,1,265,1,265,3,265,3636,8,265,1,266,
  	1,266,1,266,1,266,1,266,5,266,3643,8,266,10,266,12,266,3646,9,266,3,266,
  	3648,8,266,1,266,1,266,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
  	1,267,3,267,3661,8,267,1,268,1,268,1,268,1,268,1,268,5,268,3668,8,268,
  	10,268,12,268,3671,9,268,3,268,3673,8,268,1,268,1,268,1,269,1,269,1,269,
  	1,269,1,269,3,269,3682,8,269,1,270,1,270,1,270,1,270,1,270,5,270,3689,
  	8,270,10,270,12,270,3692,9,270,3,270,3694,8,270,1,270,1,270,1,271,1,271,
  	1,271,1,271,3,271,3702,8,271,1,272,1,272,1,272,1,272,1,272,5,272,3709,
  	8,272,10,272,12,272,3712,9,272,3,272,3714,8,272,1,272,1,272,1,273,1,273,
  	1,273,1,273,3,273,3722,8,273,1,274,1,274,1,274,1,274,1,274,5,274,3729,
  	8,274,10,274,12,274,3732,9,274,3,274,3734,8,274,1,274,1,274,1,275,1,275,
  	1,275,1,275,1,275,1,275,1,275,1,275,3,275,3746,8,275,1,276,1,276,1,276,
  	1,276,1,276,5,276,3753,8,276,10,276,12,276,3756,9,276,3,276,3758,8,276,
  	1,276,1,276,1,277,1,277,1,277,3,277,3765,8,277,1,278,1,278,1,278,1,278,
  	1,278,5,278,3772,8,278,10,278,12,278,3775,9,278,3,278,3777,8,278,1,278,
  	1,278,1,279,1,279,1,279,1,279,1,279,1,279,1,279,3,279,3788,8,279,1,280,
  	1,280,1,280,1,280,1,280,5,280,3795,8,280,10,280,12,280,3798,9,280,3,280,
  	3800,8,280,1,280,1,280,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,
  	3,281,3812,8,281,1,282,1,282,1,282,1,282,1,282,5,282,3819,8,282,10,282,
  	12,282,3822,9,282,3,282,3824,8,282,1,282,1,282,1,283,1,283,1,283,1,283,
  	1,283,1,283,1,283,1,283,1,283,1,283,1,283,1,283,1,283,1,283,1,283,1,283,
  	1,283,1,283,1,283,1,283,1,283,1,283,1,283,3,283,3851,8,283,1,284,1,284,
  	1,284,1,284,1,284,5,284,3858,8,284,10,284,12,284,3861,9,284,3,284,3863,
  	8,284,1,284,1,284,1,285,1,285,1,285,1,285,3,285,3871,8,285,1,286,1,286,
  	1,286,1,286,1,286,5,286,3878,8,286,10,286,12,286,3881,9,286,3,286,3883,
  	8,286,1,286,1,286,1,287,1,287,1,287,1,287,1,287,5,287,3892,8,287,10,287,
  	12,287,3895,9,287,3,287,3897,8,287,1,287,1,287,1,288,1,288,1,288,1,288,
  	1,288,1,288,3,288,3907,8,288,1,288,1,288,1,289,1,289,1,289,1,289,1,289,
  	5,289,3916,8,289,10,289,12,289,3919,9,289,3,289,3921,8,289,1,289,1,289,
  	1,290,1,290,1,290,3,290,3928,8,290,1,291,1,291,1,291,1,291,1,291,1,291,
  	1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,
  	1,291,1,291,3,291,3950,8,291,1,292,1,292,1,292,1,292,1,292,3,292,3957,
  	8,292,1,293,1,293,1,293,1,293,1,293,1,293,3,293,3965,8,293,1,294,1,294,
  	1,294,3,294,3970,8,294,1,295,1,295,1,295,1,296,1,296,1,296,1,297,1,297,
  	1,297,1,297,1,297,5,297,3983,8,297,10,297,12,297,3986,9,297,3,297,3988,
  	8,297,1,297,1,297,1,298,1,298,1,298,1,298,1,298,3,298,3997,8,298,1,299,
  	1,299,1,299,1,300,1,300,1,300,1,301,1,301,1,301,1,302,1,302,1,302,1,303,
  	1,303,3,303,4013,8,303,1,304,1,304,1,304,3,304,4018,8,304,1,305,1,305,
  	1,305,1,306,1,306,1,306,5,306,4026,8,306,10,306,12,306,4029,9,306,1,307,
  	1,307,1,307,3,307,4034,8,307,1,308,1,308,1,308,1,309,1,309,1,309,1,310,
  	1,310,1,310,1,311,1,311,1,311,1,312,1,312,1,312,1,313,1,313,1,313,1,314,
  	1,314,1,314,1,315,1,315,1,315,1,316,1,316,1,316,1,317,1,317,1,317,1,318,
  	1,318,1,318,1,319,1,319,1,319,1,320,1,320,1,320,1,321,1,321,1,321,1,322,
  	1,322,1,322,1,323,1,323,1,323,1,324,1,324,1,324,1,325,1,325,1,325,1,326,
  	1,326,1,326,1,327,1,327,1,327,1,328,1,328,1,328,1,329,1,329,1,329,1,330,
  	1,330,1,330,1,331,1,331,1,331,1,332,1,332,1,332,1,333,1,333,1,333,1,334,
  	1,334,1,334,1,335,1,335,1,335,1,336,1,336,1,336,1,337,1,337,1,337,1,338,
  	1,338,1,338,1,339,1,339,1,339,1,340,1,340,1,340,1,341,1,341,1,341,1,342,
  	1,342,1,342,1,343,1,343,1,343,1,344,1,344,1,344,1,345,1,345,1,345,1,346,
  	1,346,1,346,1,347,1,347,1,347,1,348,1,348,1,348,1,349,1,349,1,349,1,350,
  	1,350,1,350,1,351,1,351,1,351,1,352,1,352,1,352,1,353,1,353,1,353,1,354,
  	1,354,1,354,1,355,1,355,1,355,1,356,1,356,1,356,1,357,1,357,1,357,1,358,
  	1,358,1,358,1,359,1,359,1,359,1,360,1,360,1,360,1,361,1,361,1,361,1,362,
  	1,362,1,362,1,363,1,363,1,363,1,364,1,364,1,364,1,365,1,365,1,365,1,366,
  	1,366,1,366,1,367,1,367,1,367,1,368,1,368,1,368,1,369,1,369,1,369,1,370,
  	1,370,1,370,1,371,1,371,1,371,1,372,1,372,1,372,1,373,1,373,1,373,1,374,
  	1,374,1,374,1,374,5,374,4238,8,374,10,374,12,374,4241,9,374,1,375,1,375,
  	1,375,1,376,1,376,1,376,1,377,1,377,1,377,1,378,1,378,1,378,1,379,1,379,
  	1,379,1,380,1,380,1,380,1,381,1,381,1,381,1,382,1,382,1,382,1,383,1,383,
  	1,383,1,384,1,384,1,384,1,385,1,385,1,385,1,386,1,386,1,386,1,387,1,387,
  	1,387,1,388,1,388,1,388,1,389,1,389,1,389,1,390,1,390,1,390,1,391,1,391,
  	1,391,1,392,1,392,1,392,1,393,1,393,1,393,1,394,1,394,1,394,1,395,1,395,
  	1,395,1,395,0,1,174,396,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
  	34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
  	80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
  	120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
  	156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
  	192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
  	228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,
  	264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,
  	300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,
  	336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,
  	372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,
  	408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,
  	444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,
  	480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,
  	516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,550,
  	552,554,556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,
  	588,590,592,594,596,598,600,602,604,606,608,610,612,614,616,618,620,622,
  	624,626,628,630,632,634,636,638,640,642,644,646,648,650,652,654,656,658,
  	660,662,664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,
  	696,698,700,702,704,706,708,710,712,714,716,718,720,722,724,726,728,730,
  	732,734,736,738,740,742,744,746,748,750,752,754,756,758,760,762,764,766,
  	768,770,772,774,776,778,780,782,784,786,788,790,0,31,1,0,10,14,1,0,16,
  	17,3,0,490,490,502,502,510,510,1,0,54,57,1,0,60,61,2,0,490,490,504,504,
  	1,0,84,85,1,0,93,111,1,0,177,179,1,0,186,187,1,0,188,189,2,0,173,173,
  	190,197,1,0,198,199,1,0,200,202,1,0,203,204,1,0,205,207,1,0,208,209,1,
  	0,211,212,5,0,57,57,100,100,103,104,110,110,213,262,5,0,96,96,98,98,101,
  	102,106,106,111,111,1,0,265,266,1,0,267,276,2,0,60,61,273,286,1,0,287,
  	292,1,0,293,337,1,0,338,345,3,0,147,151,159,160,346,353,1,0,354,360,1,
  	0,420,423,2,0,490,490,502,502,1,0,451,453,4628,0,795,1,0,0,0,2,802,1,
  	0,0,0,4,804,1,0,0,0,6,808,1,0,0,0,8,813,1,0,0,0,10,833,1,0,0,0,12,835,
  	1,0,0,0,14,839,1,0,0,0,16,844,1,0,0,0,18,849,1,0,0,0,20,895,1,0,0,0,22,
  	944,1,0,0,0,24,975,1,0,0,0,26,984,1,0,0,0,28,994,1,0,0,0,30,1006,1,0,
  	0,0,32,1022,1,0,0,0,34,1031,1,0,0,0,36,1045,1,0,0,0,38,1062,1,0,0,0,40,
  	1104,1,0,0,0,42,1108,1,0,0,0,44,1110,1,0,0,0,46,1122,1,0,0,0,48,1124,
  	1,0,0,0,50,1127,1,0,0,0,52,1130,1,0,0,0,54,1133,1,0,0,0,56,1139,1,0,0,
  	0,58,1141,1,0,0,0,60,1156,1,0,0,0,62,1170,1,0,0,0,64,1183,1,0,0,0,66,
  	1185,1,0,0,0,68,1192,1,0,0,0,70,1213,1,0,0,0,72,1215,1,0,0,0,74,1224,
  	1,0,0,0,76,1238,1,0,0,0,78,1257,1,0,0,0,80,1276,1,0,0,0,82,1285,1,0,0,
  	0,84,1297,1,0,0,0,86,1309,1,0,0,0,88,1317,1,0,0,0,90,1364,1,0,0,0,92,
  	1421,1,0,0,0,94,1436,1,0,0,0,96,1439,1,0,0,0,98,1446,1,0,0,0,100,1448,
  	1,0,0,0,102,1458,1,0,0,0,104,1460,1,0,0,0,106,1474,1,0,0,0,108,1481,1,
  	0,0,0,110,1483,1,0,0,0,112,1486,1,0,0,0,114,1492,1,0,0,0,116,1511,1,0,
  	0,0,118,1513,1,0,0,0,120,1515,1,0,0,0,122,1517,1,0,0,0,124,1519,1,0,0,
  	0,126,1521,1,0,0,0,128,1549,1,0,0,0,130,1565,1,0,0,0,132,1567,1,0,0,0,
  	134,1580,1,0,0,0,136,1582,1,0,0,0,138,1584,1,0,0,0,140,1586,1,0,0,0,142,
  	1593,1,0,0,0,144,1596,1,0,0,0,146,1629,1,0,0,0,148,1631,1,0,0,0,150,1634,
  	1,0,0,0,152,1640,1,0,0,0,154,1642,1,0,0,0,156,1662,1,0,0,0,158,1664,1,
  	0,0,0,160,1678,1,0,0,0,162,1684,1,0,0,0,164,1686,1,0,0,0,166,1703,1,0,
  	0,0,168,1708,1,0,0,0,170,1710,1,0,0,0,172,1724,1,0,0,0,174,1740,1,0,0,
  	0,176,1772,1,0,0,0,178,1774,1,0,0,0,180,1796,1,0,0,0,182,1798,1,0,0,0,
  	184,1800,1,0,0,0,186,1810,1,0,0,0,188,1812,1,0,0,0,190,1816,1,0,0,0,192,
  	1821,1,0,0,0,194,1825,1,0,0,0,196,1830,1,0,0,0,198,1844,1,0,0,0,200,1846,
  	1,0,0,0,202,1857,1,0,0,0,204,1862,1,0,0,0,206,1877,1,0,0,0,208,1879,1,
  	0,0,0,210,1884,1,0,0,0,212,1889,1,0,0,0,214,1891,1,0,0,0,216,1896,1,0,
  	0,0,218,1903,1,0,0,0,220,1915,1,0,0,0,222,1917,1,0,0,0,224,1919,1,0,0,
  	0,226,1928,1,0,0,0,228,1944,1,0,0,0,230,1946,1,0,0,0,232,1948,1,0,0,0,
  	234,1980,1,0,0,0,236,1982,1,0,0,0,238,1984,1,0,0,0,240,1986,1,0,0,0,242,
  	1988,1,0,0,0,244,1992,1,0,0,0,246,1997,1,0,0,0,248,2004,1,0,0,0,250,2006,
  	1,0,0,0,252,2013,1,0,0,0,254,2031,1,0,0,0,256,2035,1,0,0,0,258,2042,1,
  	0,0,0,260,2049,1,0,0,0,262,2057,1,0,0,0,264,2065,1,0,0,0,266,2074,1,0,
  	0,0,268,2081,1,0,0,0,270,2088,1,0,0,0,272,2095,1,0,0,0,274,2102,1,0,0,
  	0,276,2109,1,0,0,0,278,2116,1,0,0,0,280,2123,1,0,0,0,282,2130,1,0,0,0,
  	284,2137,1,0,0,0,286,2144,1,0,0,0,288,2151,1,0,0,0,290,2160,1,0,0,0,292,
  	2169,1,0,0,0,294,2182,1,0,0,0,296,2192,1,0,0,0,298,2202,1,0,0,0,300,2209,
  	1,0,0,0,302,2216,1,0,0,0,304,2223,1,0,0,0,306,2236,1,0,0,0,308,2249,1,
  	0,0,0,310,2262,1,0,0,0,312,2267,1,0,0,0,314,2323,1,0,0,0,316,2366,1,0,
  	0,0,318,2368,1,0,0,0,320,2373,1,0,0,0,322,2385,1,0,0,0,324,2400,1,0,0,
  	0,326,2417,1,0,0,0,328,2434,1,0,0,0,330,2451,1,0,0,0,332,2468,1,0,0,0,
  	334,2485,1,0,0,0,336,2502,1,0,0,0,338,2516,1,0,0,0,340,2530,1,0,0,0,342,
  	2547,1,0,0,0,344,2558,1,0,0,0,346,2569,1,0,0,0,348,2586,1,0,0,0,350,2603,
  	1,0,0,0,352,2617,1,0,0,0,354,2631,1,0,0,0,356,2642,1,0,0,0,358,2653,1,
  	0,0,0,360,2664,1,0,0,0,362,2675,1,0,0,0,364,2688,1,0,0,0,366,2701,1,0,
  	0,0,368,2716,1,0,0,0,370,2733,1,0,0,0,372,2801,1,0,0,0,374,2803,1,0,0,
  	0,376,2831,1,0,0,0,378,2854,1,0,0,0,380,2875,1,0,0,0,382,2886,1,0,0,0,
  	384,2897,1,0,0,0,386,2908,1,0,0,0,388,2919,1,0,0,0,390,2930,1,0,0,0,392,
  	2941,1,0,0,0,394,2952,1,0,0,0,396,2963,1,0,0,0,398,2974,1,0,0,0,400,2985,
  	1,0,0,0,402,2996,1,0,0,0,404,3007,1,0,0,0,406,3018,1,0,0,0,408,3030,1,
  	0,0,0,410,3048,1,0,0,0,412,3071,1,0,0,0,414,3090,1,0,0,0,416,3094,1,0,
  	0,0,418,3146,1,0,0,0,420,3157,1,0,0,0,422,3175,1,0,0,0,424,3197,1,0,0,
  	0,426,3219,1,0,0,0,428,3225,1,0,0,0,430,3239,1,0,0,0,432,3257,1,0,0,0,
  	434,3271,1,0,0,0,436,3279,1,0,0,0,438,3283,1,0,0,0,440,3285,1,0,0,0,442,
  	3287,1,0,0,0,444,3291,1,0,0,0,446,3293,1,0,0,0,448,3295,1,0,0,0,450,3297,
  	1,0,0,0,452,3299,1,0,0,0,454,3301,1,0,0,0,456,3303,1,0,0,0,458,3305,1,
  	0,0,0,460,3307,1,0,0,0,462,3309,1,0,0,0,464,3311,1,0,0,0,466,3313,1,0,
  	0,0,468,3315,1,0,0,0,470,3317,1,0,0,0,472,3319,1,0,0,0,474,3321,1,0,0,
  	0,476,3323,1,0,0,0,478,3325,1,0,0,0,480,3327,1,0,0,0,482,3329,1,0,0,0,
  	484,3359,1,0,0,0,486,3361,1,0,0,0,488,3375,1,0,0,0,490,3389,1,0,0,0,492,
  	3403,1,0,0,0,494,3438,1,0,0,0,496,3440,1,0,0,0,498,3467,1,0,0,0,500,3469,
  	1,0,0,0,502,3486,1,0,0,0,504,3488,1,0,0,0,506,3507,1,0,0,0,508,3509,1,
  	0,0,0,510,3535,1,0,0,0,512,3537,1,0,0,0,514,3553,1,0,0,0,516,3555,1,0,
  	0,0,518,3576,1,0,0,0,520,3578,1,0,0,0,522,3596,1,0,0,0,524,3598,1,0,0,
  	0,526,3616,1,0,0,0,528,3618,1,0,0,0,530,3635,1,0,0,0,532,3637,1,0,0,0,
  	534,3660,1,0,0,0,536,3662,1,0,0,0,538,3681,1,0,0,0,540,3683,1,0,0,0,542,
  	3701,1,0,0,0,544,3703,1,0,0,0,546,3721,1,0,0,0,548,3723,1,0,0,0,550,3745,
  	1,0,0,0,552,3747,1,0,0,0,554,3764,1,0,0,0,556,3766,1,0,0,0,558,3787,1,
  	0,0,0,560,3789,1,0,0,0,562,3811,1,0,0,0,564,3813,1,0,0,0,566,3850,1,0,
  	0,0,568,3852,1,0,0,0,570,3870,1,0,0,0,572,3872,1,0,0,0,574,3886,1,0,0,
  	0,576,3900,1,0,0,0,578,3910,1,0,0,0,580,3927,1,0,0,0,582,3949,1,0,0,0,
  	584,3956,1,0,0,0,586,3964,1,0,0,0,588,3969,1,0,0,0,590,3971,1,0,0,0,592,
  	3974,1,0,0,0,594,3977,1,0,0,0,596,3996,1,0,0,0,598,3998,1,0,0,0,600,4001,
  	1,0,0,0,602,4004,1,0,0,0,604,4007,1,0,0,0,606,4012,1,0,0,0,608,4017,1,
  	0,0,0,610,4019,1,0,0,0,612,4022,1,0,0,0,614,4033,1,0,0,0,616,4035,1,0,
  	0,0,618,4038,1,0,0,0,620,4041,1,0,0,0,622,4044,1,0,0,0,624,4047,1,0,0,
  	0,626,4050,1,0,0,0,628,4053,1,0,0,0,630,4056,1,0,0,0,632,4059,1,0,0,0,
  	634,4062,1,0,0,0,636,4065,1,0,0,0,638,4068,1,0,0,0,640,4071,1,0,0,0,642,
  	4074,1,0,0,0,644,4077,1,0,0,0,646,4080,1,0,0,0,648,4083,1,0,0,0,650,4086,
  	1,0,0,0,652,4089,1,0,0,0,654,4092,1,0,0,0,656,4095,1,0,0,0,658,4098,1,
  	0,0,0,660,4101,1,0,0,0,662,4104,1,0,0,0,664,4107,1,0,0,0,666,4110,1,0,
  	0,0,668,4113,1,0,0,0,670,4116,1,0,0,0,672,4119,1,0,0,0,674,4122,1,0,0,
  	0,676,4125,1,0,0,0,678,4128,1,0,0,0,680,4131,1,0,0,0,682,4134,1,0,0,0,
  	684,4137,1,0,0,0,686,4140,1,0,0,0,688,4143,1,0,0,0,690,4146,1,0,0,0,692,
  	4149,1,0,0,0,694,4152,1,0,0,0,696,4155,1,0,0,0,698,4158,1,0,0,0,700,4161,
  	1,0,0,0,702,4164,1,0,0,0,704,4167,1,0,0,0,706,4170,1,0,0,0,708,4173,1,
  	0,0,0,710,4176,1,0,0,0,712,4179,1,0,0,0,714,4182,1,0,0,0,716,4185,1,0,
  	0,0,718,4188,1,0,0,0,720,4191,1,0,0,0,722,4194,1,0,0,0,724,4197,1,0,0,
  	0,726,4200,1,0,0,0,728,4203,1,0,0,0,730,4206,1,0,0,0,732,4209,1,0,0,0,
  	734,4212,1,0,0,0,736,4215,1,0,0,0,738,4218,1,0,0,0,740,4221,1,0,0,0,742,
  	4224,1,0,0,0,744,4227,1,0,0,0,746,4230,1,0,0,0,748,4233,1,0,0,0,750,4242,
  	1,0,0,0,752,4245,1,0,0,0,754,4248,1,0,0,0,756,4251,1,0,0,0,758,4254,1,
  	0,0,0,760,4257,1,0,0,0,762,4260,1,0,0,0,764,4263,1,0,0,0,766,4266,1,0,
  	0,0,768,4269,1,0,0,0,770,4272,1,0,0,0,772,4275,1,0,0,0,774,4278,1,0,0,
  	0,776,4281,1,0,0,0,778,4284,1,0,0,0,780,4287,1,0,0,0,782,4290,1,0,0,0,
  	784,4293,1,0,0,0,786,4296,1,0,0,0,788,4299,1,0,0,0,790,4302,1,0,0,0,792,
  	794,3,10,5,0,793,792,1,0,0,0,794,797,1,0,0,0,795,793,1,0,0,0,795,796,
  	1,0,0,0,796,798,1,0,0,0,797,795,1,0,0,0,798,799,5,0,0,1,799,1,1,0,0,0,
  	800,803,3,6,3,0,801,803,3,8,4,0,802,800,1,0,0,0,802,801,1,0,0,0,803,3,
  	1,0,0,0,804,805,5,1,0,0,805,806,5,2,0,0,806,807,5,492,0,0,807,5,1,0,0,
  	0,808,809,5,3,0,0,809,810,5,4,0,0,810,811,5,2,0,0,811,812,5,492,0,0,812,
  	7,1,0,0,0,813,814,5,3,0,0,814,815,5,5,0,0,815,816,5,2,0,0,816,817,5,492,
  	0,0,817,9,1,0,0,0,818,834,3,4,2,0,819,834,3,2,1,0,820,834,3,12,6,0,821,
  	834,3,14,7,0,822,834,3,16,8,0,823,834,3,18,9,0,824,834,3,20,10,0,825,
  	834,3,22,11,0,826,834,3,24,12,0,827,834,3,26,13,0,828,834,3,28,14,0,829,
  	834,3,30,15,0,830,834,3,32,16,0,831,834,3,34,17,0,832,834,3,36,18,0,833,
  	818,1,0,0,0,833,819,1,0,0,0,833,820,1,0,0,0,833,821,1,0,0,0,833,822,1,
  	0,0,0,833,823,1,0,0,0,833,824,1,0,0,0,833,825,1,0,0,0,833,826,1,0,0,0,
  	833,827,1,0,0,0,833,828,1,0,0,0,833,829,1,0,0,0,833,830,1,0,0,0,833,831,
  	1,0,0,0,833,832,1,0,0,0,834,11,1,0,0,0,835,836,5,6,0,0,836,837,5,7,0,
  	0,837,838,5,492,0,0,838,13,1,0,0,0,839,840,5,494,0,0,840,841,5,2,0,0,
  	841,842,5,8,0,0,842,843,3,174,87,0,843,15,1,0,0,0,844,845,5,497,0,0,845,
  	846,5,2,0,0,846,847,5,9,0,0,847,848,7,0,0,0,848,17,1,0,0,0,849,850,5,
  	493,0,0,850,851,5,2,0,0,851,853,3,440,220,0,852,854,3,446,223,0,853,852,
  	1,0,0,0,853,854,1,0,0,0,854,856,1,0,0,0,855,857,3,448,224,0,856,855,1,
  	0,0,0,856,857,1,0,0,0,857,859,1,0,0,0,858,860,3,450,225,0,859,858,1,0,
  	0,0,859,860,1,0,0,0,860,862,1,0,0,0,861,863,3,246,123,0,862,861,1,0,0,
  	0,862,863,1,0,0,0,863,865,1,0,0,0,864,866,3,454,227,0,865,864,1,0,0,0,
  	865,866,1,0,0,0,866,868,1,0,0,0,867,869,3,244,122,0,868,867,1,0,0,0,868,
  	869,1,0,0,0,869,871,1,0,0,0,870,872,3,456,228,0,871,870,1,0,0,0,871,872,
  	1,0,0,0,872,873,1,0,0,0,873,874,3,458,229,0,874,879,3,174,87,0,875,876,
  	5,15,0,0,876,878,3,108,54,0,877,875,1,0,0,0,878,881,1,0,0,0,879,877,1,
  	0,0,0,879,880,1,0,0,0,880,886,1,0,0,0,881,879,1,0,0,0,882,883,5,15,0,
  	0,883,885,3,150,75,0,884,882,1,0,0,0,885,888,1,0,0,0,886,884,1,0,0,0,
  	886,887,1,0,0,0,887,892,1,0,0,0,888,886,1,0,0,0,889,891,3,172,86,0,890,
  	889,1,0,0,0,891,894,1,0,0,0,892,890,1,0,0,0,892,893,1,0,0,0,893,19,1,
  	0,0,0,894,892,1,0,0,0,895,896,5,493,0,0,896,898,5,2,0,0,897,899,3,442,
  	221,0,898,897,1,0,0,0,898,899,1,0,0,0,899,901,1,0,0,0,900,902,3,446,223,
  	0,901,900,1,0,0,0,901,902,1,0,0,0,902,904,1,0,0,0,903,905,3,448,224,0,
  	904,903,1,0,0,0,904,905,1,0,0,0,905,907,1,0,0,0,906,908,3,450,225,0,907,
  	906,1,0,0,0,907,908,1,0,0,0,908,910,1,0,0,0,909,911,3,246,123,0,910,909,
  	1,0,0,0,910,911,1,0,0,0,911,913,1,0,0,0,912,914,3,454,227,0,913,912,1,
  	0,0,0,913,914,1,0,0,0,914,916,1,0,0,0,915,917,3,244,122,0,916,915,1,0,
  	0,0,916,917,1,0,0,0,917,919,1,0,0,0,918,920,3,456,228,0,919,918,1,0,0,
  	0,919,920,1,0,0,0,920,921,1,0,0,0,921,922,3,458,229,0,922,923,3,174,87,
  	0,923,928,3,116,58,0,924,925,5,15,0,0,925,927,3,108,54,0,926,924,1,0,
  	0,0,927,930,1,0,0,0,928,926,1,0,0,0,928,929,1,0,0,0,929,935,1,0,0,0,930,
  	928,1,0,0,0,931,932,5,15,0,0,932,934,3,150,75,0,933,931,1,0,0,0,934,937,
  	1,0,0,0,935,933,1,0,0,0,935,936,1,0,0,0,936,941,1,0,0,0,937,935,1,0,0,
  	0,938,940,3,172,86,0,939,938,1,0,0,0,940,943,1,0,0,0,941,939,1,0,0,0,
  	941,942,1,0,0,0,942,21,1,0,0,0,943,941,1,0,0,0,944,945,5,493,0,0,945,
  	947,5,2,0,0,946,948,3,444,222,0,947,946,1,0,0,0,947,948,1,0,0,0,948,950,
  	1,0,0,0,949,951,3,446,223,0,950,949,1,0,0,0,950,951,1,0,0,0,951,953,1,
  	0,0,0,952,954,3,448,224,0,953,952,1,0,0,0,953,954,1,0,0,0,954,956,1,0,
  	0,0,955,957,3,450,225,0,956,955,1,0,0,0,956,957,1,0,0,0,957,959,1,0,0,
  	0,958,960,3,246,123,0,959,958,1,0,0,0,959,960,1,0,0,0,960,962,1,0,0,0,
  	961,963,3,454,227,0,962,961,1,0,0,0,962,963,1,0,0,0,963,964,1,0,0,0,964,
  	965,7,1,0,0,965,966,3,174,87,0,966,967,5,15,0,0,967,972,3,40,20,0,968,
  	969,5,15,0,0,969,971,3,114,57,0,970,968,1,0,0,0,971,974,1,0,0,0,972,970,
  	1,0,0,0,972,973,1,0,0,0,973,23,1,0,0,0,974,972,1,0,0,0,975,979,5,18,0,
  	0,976,978,3,150,75,0,977,976,1,0,0,0,978,981,1,0,0,0,979,977,1,0,0,0,
  	979,980,1,0,0,0,980,982,1,0,0,0,981,979,1,0,0,0,982,983,3,38,19,0,983,
  	25,1,0,0,0,984,985,5,19,0,0,985,989,3,38,19,0,986,988,3,150,75,0,987,
  	986,1,0,0,0,988,991,1,0,0,0,989,987,1,0,0,0,989,990,1,0,0,0,990,992,1,
  	0,0,0,991,989,1,0,0,0,992,993,3,58,29,0,993,27,1,0,0,0,994,995,5,20,0,
  	0,995,996,5,496,0,0,996,997,5,2,0,0,997,1001,5,21,0,0,998,1000,3,172,
  	86,0,999,998,1,0,0,0,1000,1003,1,0,0,0,1001,999,1,0,0,0,1001,1002,1,0,
  	0,0,1002,1004,1,0,0,0,1003,1001,1,0,0,0,1004,1005,5,22,0,0,1005,29,1,
  	0,0,0,1006,1007,5,498,0,0,1007,1008,5,2,0,0,1008,1009,5,23,0,0,1009,1018,
  	5,21,0,0,1010,1015,3,102,51,0,1011,1012,5,15,0,0,1012,1014,3,102,51,0,
  	1013,1011,1,0,0,0,1014,1017,1,0,0,0,1015,1013,1,0,0,0,1015,1016,1,0,0,
  	0,1016,1019,1,0,0,0,1017,1015,1,0,0,0,1018,1010,1,0,0,0,1018,1019,1,0,
  	0,0,1019,1020,1,0,0,0,1020,1021,5,22,0,0,1021,31,1,0,0,0,1022,1023,5,
  	499,0,0,1023,1025,5,2,0,0,1024,1026,3,462,231,0,1025,1024,1,0,0,0,1025,
  	1026,1,0,0,0,1026,1029,1,0,0,0,1027,1030,3,154,77,0,1028,1030,3,484,242,
  	0,1029,1027,1,0,0,0,1029,1028,1,0,0,0,1030,33,1,0,0,0,1031,1032,5,24,
  	0,0,1032,1033,3,160,80,0,1033,1034,5,15,0,0,1034,1035,5,21,0,0,1035,1040,
  	5,490,0,0,1036,1037,5,15,0,0,1037,1039,5,490,0,0,1038,1036,1,0,0,0,1039,
  	1042,1,0,0,0,1040,1038,1,0,0,0,1040,1041,1,0,0,0,1041,1043,1,0,0,0,1042,
  	1040,1,0,0,0,1043,1044,5,22,0,0,1044,35,1,0,0,0,1045,1046,5,25,0,0,1046,
  	1047,5,493,0,0,1047,1048,5,15,0,0,1048,1049,5,494,0,0,1049,1050,5,15,
  	0,0,1050,1051,5,21,0,0,1051,1056,5,490,0,0,1052,1053,5,15,0,0,1053,1055,
  	5,490,0,0,1054,1052,1,0,0,0,1055,1058,1,0,0,0,1056,1054,1,0,0,0,1056,
  	1057,1,0,0,0,1057,1059,1,0,0,0,1058,1056,1,0,0,0,1059,1060,5,22,0,0,1060,
  	37,1,0,0,0,1061,1063,3,444,222,0,1062,1061,1,0,0,0,1062,1063,1,0,0,0,
  	1063,1065,1,0,0,0,1064,1066,3,446,223,0,1065,1064,1,0,0,0,1065,1066,1,
  	0,0,0,1066,1068,1,0,0,0,1067,1069,3,448,224,0,1068,1067,1,0,0,0,1068,
  	1069,1,0,0,0,1069,1071,1,0,0,0,1070,1072,3,450,225,0,1071,1070,1,0,0,
  	0,1071,1072,1,0,0,0,1072,1074,1,0,0,0,1073,1075,3,42,21,0,1074,1073,1,
  	0,0,0,1074,1075,1,0,0,0,1075,1079,1,0,0,0,1076,1078,3,56,28,0,1077,1076,
  	1,0,0,0,1078,1081,1,0,0,0,1079,1077,1,0,0,0,1079,1080,1,0,0,0,1080,1082,
  	1,0,0,0,1081,1079,1,0,0,0,1082,1083,3,174,87,0,1083,1084,5,493,0,0,1084,
  	1085,5,26,0,0,1085,1086,3,176,88,0,1086,1088,5,27,0,0,1087,1089,3,454,
  	227,0,1088,1087,1,0,0,0,1088,1089,1,0,0,0,1089,1091,1,0,0,0,1090,1092,
  	3,244,122,0,1091,1090,1,0,0,0,1091,1092,1,0,0,0,1092,1096,1,0,0,0,1093,
  	1095,3,46,23,0,1094,1093,1,0,0,0,1095,1098,1,0,0,0,1096,1094,1,0,0,0,
  	1096,1097,1,0,0,0,1097,39,1,0,0,0,1098,1096,1,0,0,0,1099,1105,3,148,74,
  	0,1100,1105,3,250,125,0,1101,1105,3,252,126,0,1102,1105,3,256,128,0,1103,
  	1105,3,258,129,0,1104,1099,1,0,0,0,1104,1100,1,0,0,0,1104,1101,1,0,0,
  	0,1104,1102,1,0,0,0,1104,1103,1,0,0,0,1105,41,1,0,0,0,1106,1109,3,476,
  	238,0,1107,1109,3,44,22,0,1108,1106,1,0,0,0,1108,1107,1,0,0,0,1109,43,
  	1,0,0,0,1110,1111,5,28,0,0,1111,1112,5,490,0,0,1112,45,1,0,0,0,1113,1123,
  	3,172,86,0,1114,1123,3,110,55,0,1115,1123,3,114,57,0,1116,1123,3,112,
  	56,0,1117,1123,3,186,93,0,1118,1123,3,48,24,0,1119,1123,3,50,25,0,1120,
  	1123,3,52,26,0,1121,1123,3,54,27,0,1122,1113,1,0,0,0,1122,1114,1,0,0,
  	0,1122,1115,1,0,0,0,1122,1116,1,0,0,0,1122,1117,1,0,0,0,1122,1118,1,0,
  	0,0,1122,1119,1,0,0,0,1122,1120,1,0,0,0,1122,1121,1,0,0,0,1123,47,1,0,
  	0,0,1124,1125,5,29,0,0,1125,1126,5,492,0,0,1126,49,1,0,0,0,1127,1128,
  	5,30,0,0,1128,1129,3,148,74,0,1129,51,1,0,0,0,1130,1131,5,31,0,0,1131,
  	1132,3,148,74,0,1132,53,1,0,0,0,1133,1134,5,32,0,0,1134,1135,3,148,74,
  	0,1135,55,1,0,0,0,1136,1140,3,466,233,0,1137,1140,3,206,103,0,1138,1140,
  	3,186,93,0,1139,1136,1,0,0,0,1139,1137,1,0,0,0,1139,1138,1,0,0,0,1140,
  	57,1,0,0,0,1141,1143,5,21,0,0,1142,1144,3,60,30,0,1143,1142,1,0,0,0,1144,
  	1145,1,0,0,0,1145,1143,1,0,0,0,1145,1146,1,0,0,0,1146,1150,1,0,0,0,1147,
  	1149,3,34,17,0,1148,1147,1,0,0,0,1149,1152,1,0,0,0,1150,1148,1,0,0,0,
  	1150,1151,1,0,0,0,1151,1153,1,0,0,0,1152,1150,1,0,0,0,1153,1154,5,22,
  	0,0,1154,59,1,0,0,0,1155,1157,5,495,0,0,1156,1155,1,0,0,0,1156,1157,1,
  	0,0,0,1157,1161,1,0,0,0,1158,1160,3,62,31,0,1159,1158,1,0,0,0,1160,1163,
  	1,0,0,0,1161,1159,1,0,0,0,1161,1162,1,0,0,0,1162,1164,1,0,0,0,1163,1161,
  	1,0,0,0,1164,1165,3,64,32,0,1165,61,1,0,0,0,1166,1171,3,312,156,0,1167,
  	1171,3,314,157,0,1168,1171,3,316,158,0,1169,1171,3,320,160,0,1170,1166,
  	1,0,0,0,1170,1167,1,0,0,0,1170,1168,1,0,0,0,1170,1169,1,0,0,0,1171,63,
  	1,0,0,0,1172,1184,3,66,33,0,1173,1184,3,68,34,0,1174,1184,3,70,35,0,1175,
  	1184,3,72,36,0,1176,1184,3,74,37,0,1177,1184,3,76,38,0,1178,1184,3,78,
  	39,0,1179,1184,3,80,40,0,1180,1184,3,82,41,0,1181,1184,3,84,42,0,1182,
  	1184,3,86,43,0,1183,1172,1,0,0,0,1183,1173,1,0,0,0,1183,1174,1,0,0,0,
  	1183,1175,1,0,0,0,1183,1176,1,0,0,0,1183,1177,1,0,0,0,1183,1178,1,0,0,
  	0,1183,1179,1,0,0,0,1183,1180,1,0,0,0,1183,1181,1,0,0,0,1183,1182,1,0,
  	0,0,1184,65,1,0,0,0,1185,1186,5,494,0,0,1186,1187,5,2,0,0,1187,1188,3,
  	68,34,0,1188,67,1,0,0,0,1189,1193,3,88,44,0,1190,1193,3,90,45,0,1191,
  	1193,3,92,46,0,1192,1189,1,0,0,0,1192,1190,1,0,0,0,1192,1191,1,0,0,0,
  	1193,69,1,0,0,0,1194,1195,5,33,0,0,1195,1200,5,34,0,0,1196,1197,5,15,
  	0,0,1197,1199,3,150,75,0,1198,1196,1,0,0,0,1199,1202,1,0,0,0,1200,1198,
  	1,0,0,0,1200,1201,1,0,0,0,1201,1214,1,0,0,0,1202,1200,1,0,0,0,1203,1204,
  	5,33,0,0,1204,1205,3,220,110,0,1205,1210,3,162,81,0,1206,1207,5,15,0,
  	0,1207,1209,3,150,75,0,1208,1206,1,0,0,0,1209,1212,1,0,0,0,1210,1208,
  	1,0,0,0,1210,1211,1,0,0,0,1211,1214,1,0,0,0,1212,1210,1,0,0,0,1213,1194,
  	1,0,0,0,1213,1203,1,0,0,0,1214,71,1,0,0,0,1215,1216,5,35,0,0,1216,1221,
  	3,94,47,0,1217,1218,5,15,0,0,1218,1220,3,150,75,0,1219,1217,1,0,0,0,1220,
  	1223,1,0,0,0,1221,1219,1,0,0,0,1221,1222,1,0,0,0,1222,73,1,0,0,0,1223,
  	1221,1,0,0,0,1224,1225,5,35,0,0,1225,1226,5,500,0,0,1226,1227,3,162,81,
  	0,1227,1228,5,15,0,0,1228,1229,3,94,47,0,1229,1230,5,15,0,0,1230,1235,
  	3,94,47,0,1231,1232,5,15,0,0,1232,1234,3,150,75,0,1233,1231,1,0,0,0,1234,
  	1237,1,0,0,0,1235,1233,1,0,0,0,1235,1236,1,0,0,0,1236,75,1,0,0,0,1237,
  	1235,1,0,0,0,1238,1239,5,36,0,0,1239,1240,3,160,80,0,1240,1241,5,15,0,
  	0,1241,1242,3,94,47,0,1242,1246,5,37,0,0,1243,1245,3,96,48,0,1244,1243,
  	1,0,0,0,1245,1248,1,0,0,0,1246,1244,1,0,0,0,1246,1247,1,0,0,0,1247,1249,
  	1,0,0,0,1248,1246,1,0,0,0,1249,1254,5,38,0,0,1250,1251,5,15,0,0,1251,
  	1253,3,150,75,0,1252,1250,1,0,0,0,1253,1256,1,0,0,0,1254,1252,1,0,0,0,
  	1254,1255,1,0,0,0,1255,77,1,0,0,0,1256,1254,1,0,0,0,1257,1258,5,39,0,
  	0,1258,1259,3,160,80,0,1259,1260,5,15,0,0,1260,1266,5,37,0,0,1261,1264,
  	3,94,47,0,1262,1263,5,15,0,0,1263,1265,3,94,47,0,1264,1262,1,0,0,0,1264,
  	1265,1,0,0,0,1265,1267,1,0,0,0,1266,1261,1,0,0,0,1266,1267,1,0,0,0,1267,
  	1268,1,0,0,0,1268,1273,5,38,0,0,1269,1270,5,15,0,0,1270,1272,3,150,75,
  	0,1271,1269,1,0,0,0,1272,1275,1,0,0,0,1273,1271,1,0,0,0,1273,1274,1,0,
  	0,0,1274,79,1,0,0,0,1275,1273,1,0,0,0,1276,1277,5,40,0,0,1277,1282,3,
  	160,80,0,1278,1279,5,15,0,0,1279,1281,3,150,75,0,1280,1278,1,0,0,0,1281,
  	1284,1,0,0,0,1282,1280,1,0,0,0,1282,1283,1,0,0,0,1283,81,1,0,0,0,1284,
  	1282,1,0,0,0,1285,1286,5,41,0,0,1286,1287,5,42,0,0,1287,1288,3,162,81,
  	0,1288,1289,5,43,0,0,1289,1294,3,94,47,0,1290,1291,5,15,0,0,1291,1293,
  	3,150,75,0,1292,1290,1,0,0,0,1293,1296,1,0,0,0,1294,1292,1,0,0,0,1294,
  	1295,1,0,0,0,1295,83,1,0,0,0,1296,1294,1,0,0,0,1297,1298,5,44,0,0,1298,
  	1299,5,42,0,0,1299,1300,3,162,81,0,1300,1301,5,45,0,0,1301,1306,3,98,
  	49,0,1302,1303,5,15,0,0,1303,1305,3,150,75,0,1304,1302,1,0,0,0,1305,1308,
  	1,0,0,0,1306,1304,1,0,0,0,1306,1307,1,0,0,0,1307,85,1,0,0,0,1308,1306,
  	1,0,0,0,1309,1314,5,46,0,0,1310,1311,5,15,0,0,1311,1313,3,150,75,0,1312,
  	1310,1,0,0,0,1313,1316,1,0,0,0,1314,1312,1,0,0,0,1314,1315,1,0,0,0,1315,
  	87,1,0,0,0,1316,1314,1,0,0,0,1317,1319,5,47,0,0,1318,1320,3,42,21,0,1319,
  	1318,1,0,0,0,1319,1320,1,0,0,0,1320,1324,1,0,0,0,1321,1323,3,56,28,0,
  	1322,1321,1,0,0,0,1323,1326,1,0,0,0,1324,1322,1,0,0,0,1324,1325,1,0,0,
  	0,1325,1328,1,0,0,0,1326,1324,1,0,0,0,1327,1329,3,244,122,0,1328,1327,
  	1,0,0,0,1328,1329,1,0,0,0,1329,1330,1,0,0,0,1330,1331,3,174,87,0,1331,
  	1332,3,162,81,0,1332,1333,5,26,0,0,1333,1334,3,432,216,0,1334,1338,5,
  	27,0,0,1335,1337,3,172,86,0,1336,1335,1,0,0,0,1337,1340,1,0,0,0,1338,
  	1336,1,0,0,0,1338,1339,1,0,0,0,1339,1351,1,0,0,0,1340,1338,1,0,0,0,1341,
  	1345,5,37,0,0,1342,1343,3,428,214,0,1343,1344,5,15,0,0,1344,1346,1,0,
  	0,0,1345,1342,1,0,0,0,1346,1347,1,0,0,0,1347,1345,1,0,0,0,1347,1348,1,
  	0,0,0,1348,1349,1,0,0,0,1349,1350,5,38,0,0,1350,1352,1,0,0,0,1351,1341,
  	1,0,0,0,1351,1352,1,0,0,0,1352,1353,1,0,0,0,1353,1354,5,43,0,0,1354,1355,
  	3,94,47,0,1355,1356,5,45,0,0,1356,1361,3,94,47,0,1357,1358,5,15,0,0,1358,
  	1360,3,150,75,0,1359,1357,1,0,0,0,1360,1363,1,0,0,0,1361,1359,1,0,0,0,
  	1361,1362,1,0,0,0,1362,89,1,0,0,0,1363,1361,1,0,0,0,1364,1366,5,48,0,
  	0,1365,1367,3,42,21,0,1366,1365,1,0,0,0,1366,1367,1,0,0,0,1367,1371,1,
  	0,0,0,1368,1370,3,56,28,0,1369,1368,1,0,0,0,1370,1373,1,0,0,0,1371,1369,
  	1,0,0,0,1371,1372,1,0,0,0,1372,1375,1,0,0,0,1373,1371,1,0,0,0,1374,1376,
  	3,244,122,0,1375,1374,1,0,0,0,1375,1376,1,0,0,0,1376,1377,1,0,0,0,1377,
  	1378,3,174,87,0,1378,1379,3,162,81,0,1379,1380,5,26,0,0,1380,1381,3,432,
  	216,0,1381,1385,5,27,0,0,1382,1384,3,172,86,0,1383,1382,1,0,0,0,1384,
  	1387,1,0,0,0,1385,1383,1,0,0,0,1385,1386,1,0,0,0,1386,1398,1,0,0,0,1387,
  	1385,1,0,0,0,1388,1392,5,37,0,0,1389,1390,3,428,214,0,1390,1391,5,15,
  	0,0,1391,1393,1,0,0,0,1392,1389,1,0,0,0,1393,1394,1,0,0,0,1394,1392,1,
  	0,0,0,1394,1395,1,0,0,0,1395,1396,1,0,0,0,1396,1397,5,38,0,0,1397,1399,
  	1,0,0,0,1398,1388,1,0,0,0,1398,1399,1,0,0,0,1399,1400,1,0,0,0,1400,1401,
  	5,43,0,0,1401,1402,3,94,47,0,1402,1411,5,37,0,0,1403,1408,3,94,47,0,1404,
  	1405,5,15,0,0,1405,1407,3,94,47,0,1406,1404,1,0,0,0,1407,1410,1,0,0,0,
  	1408,1406,1,0,0,0,1408,1409,1,0,0,0,1409,1412,1,0,0,0,1410,1408,1,0,0,
  	0,1411,1403,1,0,0,0,1411,1412,1,0,0,0,1412,1413,1,0,0,0,1413,1418,5,38,
  	0,0,1414,1415,5,15,0,0,1415,1417,3,150,75,0,1416,1414,1,0,0,0,1417,1420,
  	1,0,0,0,1418,1416,1,0,0,0,1418,1419,1,0,0,0,1419,91,1,0,0,0,1420,1418,
  	1,0,0,0,1421,1422,5,49,0,0,1422,1423,5,50,0,0,1423,1424,3,438,219,0,1424,
  	1425,5,37,0,0,1425,1426,3,100,50,0,1426,1427,5,38,0,0,1427,1428,5,45,
  	0,0,1428,1433,3,98,49,0,1429,1430,5,15,0,0,1430,1432,3,150,75,0,1431,
  	1429,1,0,0,0,1432,1435,1,0,0,0,1433,1431,1,0,0,0,1433,1434,1,0,0,0,1434,
  	93,1,0,0,0,1435,1433,1,0,0,0,1436,1437,5,51,0,0,1437,1438,5,494,0,0,1438,
  	95,1,0,0,0,1439,1440,3,148,74,0,1440,1441,5,15,0,0,1441,1442,3,94,47,
  	0,1442,97,1,0,0,0,1443,1444,5,43,0,0,1444,1447,5,52,0,0,1445,1447,3,94,
  	47,0,1446,1443,1,0,0,0,1446,1445,1,0,0,0,1447,99,1,0,0,0,1448,1453,3,
  	94,47,0,1449,1450,5,15,0,0,1450,1452,3,94,47,0,1451,1449,1,0,0,0,1452,
  	1455,1,0,0,0,1453,1451,1,0,0,0,1453,1454,1,0,0,0,1454,101,1,0,0,0,1455,
  	1453,1,0,0,0,1456,1459,5,499,0,0,1457,1459,3,104,52,0,1458,1456,1,0,0,
  	0,1458,1457,1,0,0,0,1459,103,1,0,0,0,1460,1461,5,53,0,0,1461,1470,5,26,
  	0,0,1462,1467,3,106,53,0,1463,1464,5,15,0,0,1464,1466,3,106,53,0,1465,
  	1463,1,0,0,0,1466,1469,1,0,0,0,1467,1465,1,0,0,0,1467,1468,1,0,0,0,1468,
  	1471,1,0,0,0,1469,1467,1,0,0,0,1470,1462,1,0,0,0,1470,1471,1,0,0,0,1471,
  	1472,1,0,0,0,1472,1473,5,27,0,0,1473,105,1,0,0,0,1474,1475,7,2,0,0,1475,
  	107,1,0,0,0,1476,1482,3,110,55,0,1477,1482,3,114,57,0,1478,1482,3,112,
  	56,0,1479,1482,3,186,93,0,1480,1482,7,3,0,0,1481,1476,1,0,0,0,1481,1477,
  	1,0,0,0,1481,1478,1,0,0,0,1481,1479,1,0,0,0,1481,1480,1,0,0,0,1482,109,
  	1,0,0,0,1483,1484,5,58,0,0,1484,1485,5,492,0,0,1485,111,1,0,0,0,1486,
  	1490,5,9,0,0,1487,1488,5,26,0,0,1488,1489,5,497,0,0,1489,1491,5,27,0,
  	0,1490,1487,1,0,0,0,1490,1491,1,0,0,0,1491,113,1,0,0,0,1492,1493,5,59,
  	0,0,1493,1494,5,492,0,0,1494,115,1,0,0,0,1495,1512,3,118,59,0,1496,1512,
  	3,120,60,0,1497,1512,3,122,61,0,1498,1512,3,124,62,0,1499,1512,3,126,
  	63,0,1500,1512,3,128,64,0,1501,1512,3,130,65,0,1502,1512,3,132,66,0,1503,
  	1512,3,134,67,0,1504,1512,5,493,0,0,1505,1512,3,136,68,0,1506,1512,3,
  	138,69,0,1507,1512,3,140,70,0,1508,1512,3,142,71,0,1509,1512,3,144,72,
  	0,1510,1512,3,146,73,0,1511,1495,1,0,0,0,1511,1496,1,0,0,0,1511,1497,
  	1,0,0,0,1511,1498,1,0,0,0,1511,1499,1,0,0,0,1511,1500,1,0,0,0,1511,1501,
  	1,0,0,0,1511,1502,1,0,0,0,1511,1503,1,0,0,0,1511,1504,1,0,0,0,1511,1505,
  	1,0,0,0,1511,1506,1,0,0,0,1511,1507,1,0,0,0,1511,1508,1,0,0,0,1511,1509,
  	1,0,0,0,1511,1510,1,0,0,0,1512,117,1,0,0,0,1513,1514,7,4,0,0,1514,119,
  	1,0,0,0,1515,1516,5,490,0,0,1516,121,1,0,0,0,1517,1518,5,491,0,0,1518,
  	123,1,0,0,0,1519,1520,5,62,0,0,1520,125,1,0,0,0,1521,1522,5,63,0,0,1522,
  	127,1,0,0,0,1523,1532,5,21,0,0,1524,1529,3,148,74,0,1525,1526,5,15,0,
  	0,1526,1528,3,148,74,0,1527,1525,1,0,0,0,1528,1531,1,0,0,0,1529,1527,
  	1,0,0,0,1529,1530,1,0,0,0,1530,1533,1,0,0,0,1531,1529,1,0,0,0,1532,1524,
  	1,0,0,0,1532,1533,1,0,0,0,1533,1534,1,0,0,0,1534,1550,5,22,0,0,1535,1536,
  	5,64,0,0,1536,1545,5,21,0,0,1537,1542,3,148,74,0,1538,1539,5,15,0,0,1539,
  	1541,3,148,74,0,1540,1538,1,0,0,0,1541,1544,1,0,0,0,1542,1540,1,0,0,0,
  	1542,1543,1,0,0,0,1543,1546,1,0,0,0,1544,1542,1,0,0,0,1545,1537,1,0,0,
  	0,1545,1546,1,0,0,0,1546,1547,1,0,0,0,1547,1548,5,22,0,0,1548,1550,5,
  	65,0,0,1549,1523,1,0,0,0,1549,1535,1,0,0,0,1550,129,1,0,0,0,1551,1552,
  	5,66,0,0,1552,1566,5,492,0,0,1553,1562,5,37,0,0,1554,1559,3,148,74,0,
  	1555,1556,5,15,0,0,1556,1558,3,148,74,0,1557,1555,1,0,0,0,1558,1561,1,
  	0,0,0,1559,1557,1,0,0,0,1559,1560,1,0,0,0,1560,1563,1,0,0,0,1561,1559,
  	1,0,0,0,1562,1554,1,0,0,0,1562,1563,1,0,0,0,1563,1564,1,0,0,0,1564,1566,
  	5,38,0,0,1565,1551,1,0,0,0,1565,1553,1,0,0,0,1566,131,1,0,0,0,1567,1576,
  	5,64,0,0,1568,1573,3,148,74,0,1569,1570,5,15,0,0,1570,1572,3,148,74,0,
  	1571,1569,1,0,0,0,1572,1575,1,0,0,0,1573,1571,1,0,0,0,1573,1574,1,0,0,
  	0,1574,1577,1,0,0,0,1575,1573,1,0,0,0,1576,1568,1,0,0,0,1576,1577,1,0,
  	0,0,1577,1578,1,0,0,0,1578,1579,5,65,0,0,1579,133,1,0,0,0,1580,1581,5,
  	67,0,0,1581,135,1,0,0,0,1582,1583,5,68,0,0,1583,137,1,0,0,0,1584,1585,
  	5,69,0,0,1585,139,1,0,0,0,1586,1587,5,70,0,0,1587,1588,5,26,0,0,1588,
  	1589,5,493,0,0,1589,1590,5,15,0,0,1590,1591,5,494,0,0,1591,1592,5,27,
  	0,0,1592,141,1,0,0,0,1593,1594,5,71,0,0,1594,1595,5,493,0,0,1595,143,
  	1,0,0,0,1596,1597,5,72,0,0,1597,1598,5,493,0,0,1598,145,1,0,0,0,1599,
  	1630,3,310,155,0,1600,1630,3,304,152,0,1601,1630,3,306,153,0,1602,1630,
  	3,308,154,0,1603,1630,3,292,146,0,1604,1630,3,294,147,0,1605,1630,3,296,
  	148,0,1606,1630,3,298,149,0,1607,1630,3,300,150,0,1608,1630,3,302,151,
  	0,1609,1630,3,286,143,0,1610,1630,3,288,144,0,1611,1630,3,290,145,0,1612,
  	1630,3,252,126,0,1613,1630,3,266,133,0,1614,1630,3,268,134,0,1615,1630,
  	3,270,135,0,1616,1630,3,272,136,0,1617,1630,3,274,137,0,1618,1630,3,276,
  	138,0,1619,1630,3,278,139,0,1620,1630,3,280,140,0,1621,1630,3,282,141,
  	0,1622,1630,3,284,142,0,1623,1630,3,258,129,0,1624,1630,3,250,125,0,1625,
  	1630,3,256,128,0,1626,1630,3,260,130,0,1627,1630,3,262,131,0,1628,1630,
  	3,264,132,0,1629,1599,1,0,0,0,1629,1600,1,0,0,0,1629,1601,1,0,0,0,1629,
  	1602,1,0,0,0,1629,1603,1,0,0,0,1629,1604,1,0,0,0,1629,1605,1,0,0,0,1629,
  	1606,1,0,0,0,1629,1607,1,0,0,0,1629,1608,1,0,0,0,1629,1609,1,0,0,0,1629,
  	1610,1,0,0,0,1629,1611,1,0,0,0,1629,1612,1,0,0,0,1629,1613,1,0,0,0,1629,
  	1614,1,0,0,0,1629,1615,1,0,0,0,1629,1616,1,0,0,0,1629,1617,1,0,0,0,1629,
  	1618,1,0,0,0,1629,1619,1,0,0,0,1629,1620,1,0,0,0,1629,1621,1,0,0,0,1629,
  	1622,1,0,0,0,1629,1623,1,0,0,0,1629,1624,1,0,0,0,1629,1625,1,0,0,0,1629,
  	1626,1,0,0,0,1629,1627,1,0,0,0,1629,1628,1,0,0,0,1630,147,1,0,0,0,1631,
  	1632,3,218,109,0,1632,1633,3,116,58,0,1633,149,1,0,0,0,1634,1635,5,498,
  	0,0,1635,1636,3,152,76,0,1636,151,1,0,0,0,1637,1641,3,154,77,0,1638,1641,
  	5,499,0,0,1639,1641,3,484,242,0,1640,1637,1,0,0,0,1640,1638,1,0,0,0,1640,
  	1639,1,0,0,0,1641,153,1,0,0,0,1642,1643,5,23,0,0,1643,1652,5,21,0,0,1644,
  	1649,3,606,303,0,1645,1646,5,15,0,0,1646,1648,3,606,303,0,1647,1645,1,
  	0,0,0,1648,1651,1,0,0,0,1649,1647,1,0,0,0,1649,1650,1,0,0,0,1650,1653,
  	1,0,0,0,1651,1649,1,0,0,0,1652,1644,1,0,0,0,1652,1653,1,0,0,0,1653,1654,
  	1,0,0,0,1654,1655,5,22,0,0,1655,155,1,0,0,0,1656,1663,3,160,80,0,1657,
  	1663,3,166,83,0,1658,1663,3,154,77,0,1659,1663,5,499,0,0,1660,1663,3,
  	158,79,0,1661,1663,3,484,242,0,1662,1656,1,0,0,0,1662,1657,1,0,0,0,1662,
  	1658,1,0,0,0,1662,1659,1,0,0,0,1662,1660,1,0,0,0,1662,1661,1,0,0,0,1663,
  	157,1,0,0,0,1664,1665,5,73,0,0,1665,1674,5,26,0,0,1666,1671,3,160,80,
  	0,1667,1668,5,15,0,0,1668,1670,3,160,80,0,1669,1667,1,0,0,0,1670,1673,
  	1,0,0,0,1671,1669,1,0,0,0,1671,1672,1,0,0,0,1672,1675,1,0,0,0,1673,1671,
  	1,0,0,0,1674,1666,1,0,0,0,1674,1675,1,0,0,0,1675,1676,1,0,0,0,1676,1677,
  	5,27,0,0,1677,159,1,0,0,0,1678,1679,3,218,109,0,1679,1680,3,162,81,0,
  	1680,161,1,0,0,0,1681,1685,3,116,58,0,1682,1685,5,494,0,0,1683,1685,3,
  	164,82,0,1684,1681,1,0,0,0,1684,1682,1,0,0,0,1684,1683,1,0,0,0,1685,163,
  	1,0,0,0,1686,1688,5,7,0,0,1687,1689,5,74,0,0,1688,1687,1,0,0,0,1688,1689,
  	1,0,0,0,1689,1691,1,0,0,0,1690,1692,5,75,0,0,1691,1690,1,0,0,0,1691,1692,
  	1,0,0,0,1692,1694,1,0,0,0,1693,1695,5,76,0,0,1694,1693,1,0,0,0,1694,1695,
  	1,0,0,0,1695,1697,1,0,0,0,1696,1698,5,45,0,0,1697,1696,1,0,0,0,1697,1698,
  	1,0,0,0,1698,1699,1,0,0,0,1699,1700,5,492,0,0,1700,1701,5,15,0,0,1701,
  	1702,5,492,0,0,1702,165,1,0,0,0,1703,1704,5,23,0,0,1704,1705,5,492,0,
  	0,1705,167,1,0,0,0,1706,1709,5,490,0,0,1707,1709,3,606,303,0,1708,1706,
  	1,0,0,0,1708,1707,1,0,0,0,1709,169,1,0,0,0,1710,1711,7,5,0,0,1711,171,
  	1,0,0,0,1712,1725,3,182,91,0,1713,1725,3,184,92,0,1714,1725,5,496,0,0,
  	1715,1725,3,188,94,0,1716,1725,3,190,95,0,1717,1725,3,192,96,0,1718,1725,
  	3,194,97,0,1719,1725,3,196,98,0,1720,1725,3,460,230,0,1721,1725,3,214,
  	107,0,1722,1725,3,198,99,0,1723,1725,3,200,100,0,1724,1712,1,0,0,0,1724,
  	1713,1,0,0,0,1724,1714,1,0,0,0,1724,1715,1,0,0,0,1724,1716,1,0,0,0,1724,
  	1717,1,0,0,0,1724,1718,1,0,0,0,1724,1719,1,0,0,0,1724,1720,1,0,0,0,1724,
  	1721,1,0,0,0,1724,1722,1,0,0,0,1724,1723,1,0,0,0,1725,173,1,0,0,0,1726,
  	1727,6,87,-1,0,1727,1741,5,34,0,0,1728,1741,5,77,0,0,1729,1741,3,222,
  	111,0,1730,1741,3,224,112,0,1731,1741,3,242,121,0,1732,1741,3,228,114,
  	0,1733,1741,3,230,115,0,1734,1741,3,232,116,0,1735,1741,3,234,117,0,1736,
  	1741,3,236,118,0,1737,1741,3,238,119,0,1738,1741,3,240,120,0,1739,1741,
  	3,248,124,0,1740,1726,1,0,0,0,1740,1728,1,0,0,0,1740,1729,1,0,0,0,1740,
  	1730,1,0,0,0,1740,1731,1,0,0,0,1740,1732,1,0,0,0,1740,1733,1,0,0,0,1740,
  	1734,1,0,0,0,1740,1735,1,0,0,0,1740,1736,1,0,0,0,1740,1737,1,0,0,0,1740,
  	1738,1,0,0,0,1740,1739,1,0,0,0,1741,1754,1,0,0,0,1742,1743,10,13,0,0,
  	1743,1744,5,26,0,0,1744,1745,3,176,88,0,1745,1746,5,27,0,0,1746,1753,
  	1,0,0,0,1747,1749,10,10,0,0,1748,1750,3,244,122,0,1749,1748,1,0,0,0,1749,
  	1750,1,0,0,0,1750,1751,1,0,0,0,1751,1753,5,78,0,0,1752,1742,1,0,0,0,1752,
  	1747,1,0,0,0,1753,1756,1,0,0,0,1754,1752,1,0,0,0,1754,1755,1,0,0,0,1755,
  	175,1,0,0,0,1756,1754,1,0,0,0,1757,1759,5,79,0,0,1758,1757,1,0,0,0,1758,
  	1759,1,0,0,0,1759,1773,1,0,0,0,1760,1765,3,178,89,0,1761,1762,5,15,0,
  	0,1762,1764,3,178,89,0,1763,1761,1,0,0,0,1764,1767,1,0,0,0,1765,1763,
  	1,0,0,0,1765,1766,1,0,0,0,1766,1770,1,0,0,0,1767,1765,1,0,0,0,1768,1769,
  	5,15,0,0,1769,1771,5,79,0,0,1770,1768,1,0,0,0,1770,1771,1,0,0,0,1771,
  	1773,1,0,0,0,1772,1758,1,0,0,0,1772,1760,1,0,0,0,1773,177,1,0,0,0,1774,
  	1778,3,174,87,0,1775,1777,3,180,90,0,1776,1775,1,0,0,0,1777,1780,1,0,
  	0,0,1778,1776,1,0,0,0,1778,1779,1,0,0,0,1779,1782,1,0,0,0,1780,1778,1,
  	0,0,0,1781,1783,5,494,0,0,1782,1781,1,0,0,0,1782,1783,1,0,0,0,1783,179,
  	1,0,0,0,1784,1797,3,182,91,0,1785,1797,3,184,92,0,1786,1797,3,186,93,
  	0,1787,1797,3,190,95,0,1788,1797,3,202,101,0,1789,1797,3,204,102,0,1790,
  	1797,3,206,103,0,1791,1797,3,208,104,0,1792,1797,3,210,105,0,1793,1797,
  	3,212,106,0,1794,1797,3,214,107,0,1795,1797,3,216,108,0,1796,1784,1,0,
  	0,0,1796,1785,1,0,0,0,1796,1786,1,0,0,0,1796,1787,1,0,0,0,1796,1788,1,
  	0,0,0,1796,1789,1,0,0,0,1796,1790,1,0,0,0,1796,1791,1,0,0,0,1796,1792,
  	1,0,0,0,1796,1793,1,0,0,0,1796,1794,1,0,0,0,1796,1795,1,0,0,0,1797,181,
  	1,0,0,0,1798,1799,5,492,0,0,1799,183,1,0,0,0,1800,1801,5,492,0,0,1801,
  	1802,5,2,0,0,1802,1803,5,492,0,0,1803,185,1,0,0,0,1804,1805,5,80,0,0,
  	1805,1811,5,490,0,0,1806,1807,5,80,0,0,1807,1808,5,26,0,0,1808,1809,5,
  	490,0,0,1809,1811,5,27,0,0,1810,1804,1,0,0,0,1810,1806,1,0,0,0,1811,187,
  	1,0,0,0,1812,1813,5,80,0,0,1813,1814,5,2,0,0,1814,1815,5,490,0,0,1815,
  	189,1,0,0,0,1816,1817,5,75,0,0,1817,1818,5,26,0,0,1818,1819,5,490,0,0,
  	1819,1820,5,27,0,0,1820,191,1,0,0,0,1821,1822,5,75,0,0,1822,1823,5,2,
  	0,0,1823,1824,5,490,0,0,1824,193,1,0,0,0,1825,1826,5,81,0,0,1826,1827,
  	5,26,0,0,1827,1828,5,492,0,0,1828,1829,5,27,0,0,1829,195,1,0,0,0,1830,
  	1831,5,82,0,0,1831,1832,5,26,0,0,1832,1835,5,490,0,0,1833,1834,5,15,0,
  	0,1834,1836,5,490,0,0,1835,1833,1,0,0,0,1835,1836,1,0,0,0,1836,1837,1,
  	0,0,0,1837,1838,5,27,0,0,1838,197,1,0,0,0,1839,1845,5,83,0,0,1840,1841,
  	5,83,0,0,1841,1842,5,26,0,0,1842,1843,7,6,0,0,1843,1845,5,27,0,0,1844,
  	1839,1,0,0,0,1844,1840,1,0,0,0,1845,199,1,0,0,0,1846,1855,5,86,0,0,1847,
  	1852,5,26,0,0,1848,1853,5,490,0,0,1849,1850,5,490,0,0,1850,1851,5,15,
  	0,0,1851,1853,5,490,0,0,1852,1848,1,0,0,0,1852,1849,1,0,0,0,1853,1854,
  	1,0,0,0,1854,1856,5,27,0,0,1855,1847,1,0,0,0,1855,1856,1,0,0,0,1856,201,
  	1,0,0,0,1857,1858,5,87,0,0,1858,1859,5,26,0,0,1859,1860,3,174,87,0,1860,
  	1861,5,27,0,0,1861,203,1,0,0,0,1862,1867,5,88,0,0,1863,1864,5,26,0,0,
  	1864,1865,3,174,87,0,1865,1866,5,27,0,0,1866,1868,1,0,0,0,1867,1863,1,
  	0,0,0,1867,1868,1,0,0,0,1868,205,1,0,0,0,1869,1870,5,89,0,0,1870,1871,
  	5,26,0,0,1871,1872,5,490,0,0,1872,1878,5,27,0,0,1873,1874,5,90,0,0,1874,
  	1875,5,26,0,0,1875,1876,5,490,0,0,1876,1878,5,27,0,0,1877,1869,1,0,0,
  	0,1877,1873,1,0,0,0,1878,207,1,0,0,0,1879,1880,5,91,0,0,1880,1881,5,26,
  	0,0,1881,1882,3,174,87,0,1882,1883,5,27,0,0,1883,209,1,0,0,0,1884,1885,
  	5,92,0,0,1885,1886,5,26,0,0,1886,1887,3,174,87,0,1887,1888,5,27,0,0,1888,
  	211,1,0,0,0,1889,1890,7,7,0,0,1890,213,1,0,0,0,1891,1892,5,112,0,0,1892,
  	1893,5,26,0,0,1893,1894,3,174,87,0,1894,1895,5,27,0,0,1895,215,1,0,0,
  	0,1896,1897,5,113,0,0,1897,1898,5,26,0,0,1898,1899,3,174,87,0,1899,1900,
  	5,27,0,0,1900,217,1,0,0,0,1901,1904,3,220,110,0,1902,1904,3,248,124,0,
  	1903,1901,1,0,0,0,1903,1902,1,0,0,0,1904,219,1,0,0,0,1905,1916,3,222,
  	111,0,1906,1916,3,224,112,0,1907,1916,3,226,113,0,1908,1916,3,228,114,
  	0,1909,1916,3,230,115,0,1910,1916,3,232,116,0,1911,1916,3,234,117,0,1912,
  	1916,3,236,118,0,1913,1916,3,238,119,0,1914,1916,3,240,120,0,1915,1905,
  	1,0,0,0,1915,1906,1,0,0,0,1915,1907,1,0,0,0,1915,1908,1,0,0,0,1915,1909,
  	1,0,0,0,1915,1910,1,0,0,0,1915,1911,1,0,0,0,1915,1912,1,0,0,0,1915,1913,
  	1,0,0,0,1915,1914,1,0,0,0,1916,221,1,0,0,0,1917,1918,5,500,0,0,1918,223,
  	1,0,0,0,1919,1920,3,482,241,0,1920,225,1,0,0,0,1921,1923,3,174,87,0,1922,
  	1924,3,244,122,0,1923,1922,1,0,0,0,1923,1924,1,0,0,0,1924,1925,1,0,0,
  	0,1925,1926,5,78,0,0,1926,1929,1,0,0,0,1927,1929,3,242,121,0,1928,1921,
  	1,0,0,0,1928,1927,1,0,0,0,1929,227,1,0,0,0,1930,1931,5,64,0,0,1931,1932,
  	5,490,0,0,1932,1933,5,114,0,0,1933,1934,3,174,87,0,1934,1935,5,65,0,0,
  	1935,1945,1,0,0,0,1936,1937,5,64,0,0,1937,1938,5,115,0,0,1938,1939,5,
  	114,0,0,1939,1940,5,490,0,0,1940,1941,5,114,0,0,1941,1942,3,174,87,0,
  	1942,1943,5,65,0,0,1943,1945,1,0,0,0,1944,1930,1,0,0,0,1944,1936,1,0,
  	0,0,1945,229,1,0,0,0,1946,1947,5,51,0,0,1947,231,1,0,0,0,1948,1949,5,
  	37,0,0,1949,1950,5,490,0,0,1950,1951,5,114,0,0,1951,1952,3,174,87,0,1952,
  	1953,5,38,0,0,1953,233,1,0,0,0,1954,1963,5,21,0,0,1955,1960,3,174,87,
  	0,1956,1957,5,15,0,0,1957,1959,3,174,87,0,1958,1956,1,0,0,0,1959,1962,
  	1,0,0,0,1960,1958,1,0,0,0,1960,1961,1,0,0,0,1961,1964,1,0,0,0,1962,1960,
  	1,0,0,0,1963,1955,1,0,0,0,1963,1964,1,0,0,0,1964,1965,1,0,0,0,1965,1981,
  	5,22,0,0,1966,1967,5,64,0,0,1967,1976,5,21,0,0,1968,1973,3,174,87,0,1969,
  	1970,5,15,0,0,1970,1972,3,174,87,0,1971,1969,1,0,0,0,1972,1975,1,0,0,
  	0,1973,1971,1,0,0,0,1973,1974,1,0,0,0,1974,1977,1,0,0,0,1975,1973,1,0,
  	0,0,1976,1968,1,0,0,0,1976,1977,1,0,0,0,1977,1978,1,0,0,0,1978,1979,5,
  	22,0,0,1979,1981,5,65,0,0,1980,1954,1,0,0,0,1980,1966,1,0,0,0,1981,235,
  	1,0,0,0,1982,1983,5,494,0,0,1983,237,1,0,0,0,1984,1985,5,116,0,0,1985,
  	239,1,0,0,0,1986,1987,5,117,0,0,1987,241,1,0,0,0,1988,1990,5,118,0,0,
  	1989,1991,3,244,122,0,1990,1989,1,0,0,0,1990,1991,1,0,0,0,1991,243,1,
  	0,0,0,1992,1993,5,119,0,0,1993,1994,5,26,0,0,1994,1995,5,490,0,0,1995,
  	1996,5,27,0,0,1996,245,1,0,0,0,1997,2002,5,120,0,0,1998,1999,5,26,0,0,
  	1999,2000,3,452,226,0,2000,2001,5,27,0,0,2001,2003,1,0,0,0,2002,1998,
  	1,0,0,0,2002,2003,1,0,0,0,2003,247,1,0,0,0,2004,2005,5,121,0,0,2005,249,
  	1,0,0,0,2006,2007,5,122,0,0,2007,2008,5,26,0,0,2008,2009,3,148,74,0,2009,
  	2010,5,43,0,0,2010,2011,3,174,87,0,2011,2012,5,27,0,0,2012,251,1,0,0,
  	0,2013,2015,5,123,0,0,2014,2016,3,464,232,0,2015,2014,1,0,0,0,2015,2016,
  	1,0,0,0,2016,2017,1,0,0,0,2017,2018,5,26,0,0,2018,2019,3,174,87,0,2019,
  	2020,5,15,0,0,2020,2025,3,148,74,0,2021,2022,5,15,0,0,2022,2024,3,254,
  	127,0,2023,2021,1,0,0,0,2024,2027,1,0,0,0,2025,2023,1,0,0,0,2025,2026,
  	1,0,0,0,2026,2028,1,0,0,0,2027,2025,1,0,0,0,2028,2029,5,27,0,0,2029,253,
  	1,0,0,0,2030,2032,5,124,0,0,2031,2030,1,0,0,0,2031,2032,1,0,0,0,2032,
  	2033,1,0,0,0,2033,2034,3,148,74,0,2034,255,1,0,0,0,2035,2036,5,125,0,
  	0,2036,2037,5,26,0,0,2037,2038,3,148,74,0,2038,2039,5,43,0,0,2039,2040,
  	3,174,87,0,2040,2041,5,27,0,0,2041,257,1,0,0,0,2042,2043,5,126,0,0,2043,
  	2044,5,26,0,0,2044,2045,3,148,74,0,2045,2046,5,43,0,0,2046,2047,3,174,
  	87,0,2047,2048,5,27,0,0,2048,259,1,0,0,0,2049,2050,5,127,0,0,2050,2051,
  	3,470,235,0,2051,2052,5,26,0,0,2052,2053,3,148,74,0,2053,2054,5,15,0,
  	0,2054,2055,3,148,74,0,2055,2056,5,27,0,0,2056,261,1,0,0,0,2057,2058,
  	5,128,0,0,2058,2059,3,472,236,0,2059,2060,5,26,0,0,2060,2061,3,148,74,
  	0,2061,2062,5,15,0,0,2062,2063,3,148,74,0,2063,2064,5,27,0,0,2064,263,
  	1,0,0,0,2065,2066,5,129,0,0,2066,2067,5,26,0,0,2067,2068,3,148,74,0,2068,
  	2069,5,15,0,0,2069,2070,3,148,74,0,2070,2071,5,15,0,0,2071,2072,3,148,
  	74,0,2072,2073,5,27,0,0,2073,265,1,0,0,0,2074,2075,5,130,0,0,2075,2076,
  	5,26,0,0,2076,2077,3,148,74,0,2077,2078,5,43,0,0,2078,2079,3,174,87,0,
  	2079,2080,5,27,0,0,2080,267,1,0,0,0,2081,2082,5,131,0,0,2082,2083,5,26,
  	0,0,2083,2084,3,148,74,0,2084,2085,5,43,0,0,2085,2086,3,174,87,0,2086,
  	2087,5,27,0,0,2087,269,1,0,0,0,2088,2089,5,132,0,0,2089,2090,5,26,0,0,
  	2090,2091,3,148,74,0,2091,2092,5,43,0,0,2092,2093,3,174,87,0,2093,2094,
  	5,27,0,0,2094,271,1,0,0,0,2095,2096,5,133,0,0,2096,2097,5,26,0,0,2097,
  	2098,3,148,74,0,2098,2099,5,43,0,0,2099,2100,3,174,87,0,2100,2101,5,27,
  	0,0,2101,273,1,0,0,0,2102,2103,5,134,0,0,2103,2104,5,26,0,0,2104,2105,
  	3,148,74,0,2105,2106,5,43,0,0,2106,2107,3,174,87,0,2107,2108,5,27,0,0,
  	2108,275,1,0,0,0,2109,2110,5,135,0,0,2110,2111,5,26,0,0,2111,2112,3,148,
  	74,0,2112,2113,5,43,0,0,2113,2114,3,174,87,0,2114,2115,5,27,0,0,2115,
  	277,1,0,0,0,2116,2117,5,136,0,0,2117,2118,5,26,0,0,2118,2119,3,148,74,
  	0,2119,2120,5,43,0,0,2120,2121,3,174,87,0,2121,2122,5,27,0,0,2122,279,
  	1,0,0,0,2123,2124,5,137,0,0,2124,2125,5,26,0,0,2125,2126,3,148,74,0,2126,
  	2127,5,43,0,0,2127,2128,3,174,87,0,2128,2129,5,27,0,0,2129,281,1,0,0,
  	0,2130,2131,5,138,0,0,2131,2132,5,26,0,0,2132,2133,3,148,74,0,2133,2134,
  	5,43,0,0,2134,2135,3,174,87,0,2135,2136,5,27,0,0,2136,283,1,0,0,0,2137,
  	2138,5,139,0,0,2138,2139,5,26,0,0,2139,2140,3,148,74,0,2140,2141,5,43,
  	0,0,2141,2142,3,174,87,0,2142,2143,5,27,0,0,2143,285,1,0,0,0,2144,2145,
  	5,140,0,0,2145,2146,5,26,0,0,2146,2147,3,148,74,0,2147,2148,5,15,0,0,
  	2148,2149,3,148,74,0,2149,2150,5,27,0,0,2150,287,1,0,0,0,2151,2152,5,
  	141,0,0,2152,2153,5,26,0,0,2153,2154,3,148,74,0,2154,2155,5,15,0,0,2155,
  	2156,3,148,74,0,2156,2157,5,15,0,0,2157,2158,3,148,74,0,2158,2159,5,27,
  	0,0,2159,289,1,0,0,0,2160,2161,5,142,0,0,2161,2162,5,26,0,0,2162,2163,
  	3,148,74,0,2163,2164,5,15,0,0,2164,2165,3,148,74,0,2165,2166,5,15,0,0,
  	2166,2167,3,148,74,0,2167,2168,5,27,0,0,2168,291,1,0,0,0,2169,2173,5,
  	143,0,0,2170,2172,3,468,234,0,2171,2170,1,0,0,0,2172,2175,1,0,0,0,2173,
  	2171,1,0,0,0,2173,2174,1,0,0,0,2174,2176,1,0,0,0,2175,2173,1,0,0,0,2176,
  	2177,5,26,0,0,2177,2178,3,148,74,0,2178,2179,5,15,0,0,2179,2180,3,148,
  	74,0,2180,2181,5,27,0,0,2181,293,1,0,0,0,2182,2184,5,144,0,0,2183,2185,
  	5,145,0,0,2184,2183,1,0,0,0,2184,2185,1,0,0,0,2185,2186,1,0,0,0,2186,
  	2187,5,26,0,0,2187,2188,3,148,74,0,2188,2189,5,15,0,0,2189,2190,3,148,
  	74,0,2190,2191,5,27,0,0,2191,295,1,0,0,0,2192,2194,5,146,0,0,2193,2195,
  	5,145,0,0,2194,2193,1,0,0,0,2194,2195,1,0,0,0,2195,2196,1,0,0,0,2196,
  	2197,5,26,0,0,2197,2198,3,148,74,0,2198,2199,5,15,0,0,2199,2200,3,148,
  	74,0,2200,2201,5,27,0,0,2201,297,1,0,0,0,2202,2203,5,147,0,0,2203,2204,
  	5,26,0,0,2204,2205,3,148,74,0,2205,2206,5,15,0,0,2206,2207,3,148,74,0,
  	2207,2208,5,27,0,0,2208,299,1,0,0,0,2209,2210,5,148,0,0,2210,2211,5,26,
  	0,0,2211,2212,3,148,74,0,2212,2213,5,15,0,0,2213,2214,3,148,74,0,2214,
  	2215,5,27,0,0,2215,301,1,0,0,0,2216,2217,5,149,0,0,2217,2218,5,26,0,0,
  	2218,2219,3,148,74,0,2219,2220,5,15,0,0,2220,2221,3,148,74,0,2221,2222,
  	5,27,0,0,2222,303,1,0,0,0,2223,2227,5,150,0,0,2224,2226,3,468,234,0,2225,
  	2224,1,0,0,0,2226,2229,1,0,0,0,2227,2225,1,0,0,0,2227,2228,1,0,0,0,2228,
  	2230,1,0,0,0,2229,2227,1,0,0,0,2230,2231,5,26,0,0,2231,2232,3,148,74,
  	0,2232,2233,5,15,0,0,2233,2234,3,148,74,0,2234,2235,5,27,0,0,2235,305,
  	1,0,0,0,2236,2240,5,151,0,0,2237,2239,3,468,234,0,2238,2237,1,0,0,0,2239,
  	2242,1,0,0,0,2240,2238,1,0,0,0,2240,2241,1,0,0,0,2241,2243,1,0,0,0,2242,
  	2240,1,0,0,0,2243,2244,5,26,0,0,2244,2245,3,148,74,0,2245,2246,5,15,0,
  	0,2246,2247,3,148,74,0,2247,2248,5,27,0,0,2248,307,1,0,0,0,2249,2253,
  	5,152,0,0,2250,2252,3,468,234,0,2251,2250,1,0,0,0,2252,2255,1,0,0,0,2253,
  	2251,1,0,0,0,2253,2254,1,0,0,0,2254,2256,1,0,0,0,2255,2253,1,0,0,0,2256,
  	2257,5,26,0,0,2257,2258,3,148,74,0,2258,2259,5,15,0,0,2259,2260,3,148,
  	74,0,2260,2261,5,27,0,0,2261,309,1,0,0,0,2262,2263,5,153,0,0,2263,2264,
  	5,26,0,0,2264,2265,3,148,74,0,2265,2266,5,27,0,0,2266,311,1,0,0,0,2267,
  	2268,5,494,0,0,2268,2269,5,2,0,0,2269,2270,3,314,157,0,2270,313,1,0,0,
  	0,2271,2324,3,322,161,0,2272,2324,3,324,162,0,2273,2324,3,326,163,0,2274,
  	2324,3,328,164,0,2275,2324,3,330,165,0,2276,2324,3,332,166,0,2277,2324,
  	3,334,167,0,2278,2324,3,336,168,0,2279,2324,3,338,169,0,2280,2324,3,340,
  	170,0,2281,2324,3,342,171,0,2282,2324,3,344,172,0,2283,2324,3,346,173,
  	0,2284,2324,3,348,174,0,2285,2324,3,350,175,0,2286,2324,3,352,176,0,2287,
  	2324,3,354,177,0,2288,2324,3,356,178,0,2289,2324,3,358,179,0,2290,2324,
  	3,360,180,0,2291,2324,3,362,181,0,2292,2324,3,364,182,0,2293,2324,3,366,
  	183,0,2294,2324,3,368,184,0,2295,2324,3,370,185,0,2296,2324,3,372,186,
  	0,2297,2324,3,374,187,0,2298,2324,3,376,188,0,2299,2324,3,378,189,0,2300,
  	2324,3,380,190,0,2301,2324,3,382,191,0,2302,2324,3,384,192,0,2303,2324,
  	3,386,193,0,2304,2324,3,388,194,0,2305,2324,3,390,195,0,2306,2324,3,392,
  	196,0,2307,2324,3,394,197,0,2308,2324,3,396,198,0,2309,2324,3,398,199,
  	0,2310,2324,3,400,200,0,2311,2324,3,402,201,0,2312,2324,3,404,202,0,2313,
  	2324,3,406,203,0,2314,2324,3,408,204,0,2315,2324,3,410,205,0,2316,2324,
  	3,412,206,0,2317,2324,3,414,207,0,2318,2324,3,416,208,0,2319,2324,3,418,
  	209,0,2320,2324,3,420,210,0,2321,2324,3,422,211,0,2322,2324,3,424,212,
  	0,2323,2271,1,0,0,0,2323,2272,1,0,0,0,2323,2273,1,0,0,0,2323,2274,1,0,
  	0,0,2323,2275,1,0,0,0,2323,2276,1,0,0,0,2323,2277,1,0,0,0,2323,2278,1,
  	0,0,0,2323,2279,1,0,0,0,2323,2280,1,0,0,0,2323,2281,1,0,0,0,2323,2282,
  	1,0,0,0,2323,2283,1,0,0,0,2323,2284,1,0,0,0,2323,2285,1,0,0,0,2323,2286,
  	1,0,0,0,2323,2287,1,0,0,0,2323,2288,1,0,0,0,2323,2289,1,0,0,0,2323,2290,
  	1,0,0,0,2323,2291,1,0,0,0,2323,2292,1,0,0,0,2323,2293,1,0,0,0,2323,2294,
  	1,0,0,0,2323,2295,1,0,0,0,2323,2296,1,0,0,0,2323,2297,1,0,0,0,2323,2298,
  	1,0,0,0,2323,2299,1,0,0,0,2323,2300,1,0,0,0,2323,2301,1,0,0,0,2323,2302,
  	1,0,0,0,2323,2303,1,0,0,0,2323,2304,1,0,0,0,2323,2305,1,0,0,0,2323,2306,
  	1,0,0,0,2323,2307,1,0,0,0,2323,2308,1,0,0,0,2323,2309,1,0,0,0,2323,2310,
  	1,0,0,0,2323,2311,1,0,0,0,2323,2312,1,0,0,0,2323,2313,1,0,0,0,2323,2314,
  	1,0,0,0,2323,2315,1,0,0,0,2323,2316,1,0,0,0,2323,2317,1,0,0,0,2323,2318,
  	1,0,0,0,2323,2319,1,0,0,0,2323,2320,1,0,0,0,2323,2321,1,0,0,0,2323,2322,
  	1,0,0,0,2324,315,1,0,0,0,2325,2327,5,154,0,0,2326,2328,5,155,0,0,2327,
  	2326,1,0,0,0,2327,2328,1,0,0,0,2328,2329,1,0,0,0,2329,2330,3,160,80,0,
  	2330,2331,5,15,0,0,2331,2334,3,160,80,0,2332,2333,5,15,0,0,2333,2335,
  	3,186,93,0,2334,2332,1,0,0,0,2334,2335,1,0,0,0,2335,2340,1,0,0,0,2336,
  	2337,5,15,0,0,2337,2339,3,150,75,0,2338,2336,1,0,0,0,2339,2342,1,0,0,
  	0,2340,2338,1,0,0,0,2340,2341,1,0,0,0,2341,2367,1,0,0,0,2342,2340,1,0,
  	0,0,2343,2344,5,154,0,0,2344,2346,5,156,0,0,2345,2347,5,155,0,0,2346,
  	2345,1,0,0,0,2346,2347,1,0,0,0,2347,2348,1,0,0,0,2348,2349,3,160,80,0,
  	2349,2350,5,15,0,0,2350,2352,3,160,80,0,2351,2353,3,318,159,0,2352,2351,
  	1,0,0,0,2352,2353,1,0,0,0,2353,2354,1,0,0,0,2354,2357,3,474,237,0,2355,
  	2356,5,15,0,0,2356,2358,3,186,93,0,2357,2355,1,0,0,0,2357,2358,1,0,0,
  	0,2358,2363,1,0,0,0,2359,2360,5,15,0,0,2360,2362,3,150,75,0,2361,2359,
  	1,0,0,0,2362,2365,1,0,0,0,2363,2361,1,0,0,0,2363,2364,1,0,0,0,2364,2367,
  	1,0,0,0,2365,2363,1,0,0,0,2366,2325,1,0,0,0,2366,2343,1,0,0,0,2367,317,
  	1,0,0,0,2368,2369,5,157,0,0,2369,2370,5,26,0,0,2370,2371,5,492,0,0,2371,
  	2372,5,27,0,0,2372,319,1,0,0,0,2373,2375,5,158,0,0,2374,2376,3,318,159,
  	0,2375,2374,1,0,0,0,2375,2376,1,0,0,0,2376,2377,1,0,0,0,2377,2382,3,474,
  	237,0,2378,2379,5,15,0,0,2379,2381,3,150,75,0,2380,2378,1,0,0,0,2381,
  	2384,1,0,0,0,2382,2380,1,0,0,0,2382,2383,1,0,0,0,2383,321,1,0,0,0,2384,
  	2382,1,0,0,0,2385,2389,5,153,0,0,2386,2388,3,478,239,0,2387,2386,1,0,
  	0,0,2388,2391,1,0,0,0,2389,2387,1,0,0,0,2389,2390,1,0,0,0,2390,2392,1,
  	0,0,0,2391,2389,1,0,0,0,2392,2397,3,160,80,0,2393,2394,5,15,0,0,2394,
  	2396,3,150,75,0,2395,2393,1,0,0,0,2396,2399,1,0,0,0,2397,2395,1,0,0,0,
  	2397,2398,1,0,0,0,2398,323,1,0,0,0,2399,2397,1,0,0,0,2400,2404,5,150,
  	0,0,2401,2403,3,468,234,0,2402,2401,1,0,0,0,2403,2406,1,0,0,0,2404,2402,
  	1,0,0,0,2404,2405,1,0,0,0,2405,2407,1,0,0,0,2406,2404,1,0,0,0,2407,2408,
  	3,160,80,0,2408,2409,5,15,0,0,2409,2414,3,162,81,0,2410,2411,5,15,0,0,
  	2411,2413,3,150,75,0,2412,2410,1,0,0,0,2413,2416,1,0,0,0,2414,2412,1,
  	0,0,0,2414,2415,1,0,0,0,2415,325,1,0,0,0,2416,2414,1,0,0,0,2417,2421,
  	5,159,0,0,2418,2420,3,478,239,0,2419,2418,1,0,0,0,2420,2423,1,0,0,0,2421,
  	2419,1,0,0,0,2421,2422,1,0,0,0,2422,2424,1,0,0,0,2423,2421,1,0,0,0,2424,
  	2425,3,160,80,0,2425,2426,5,15,0,0,2426,2431,3,162,81,0,2427,2428,5,15,
  	0,0,2428,2430,3,150,75,0,2429,2427,1,0,0,0,2430,2433,1,0,0,0,2431,2429,
  	1,0,0,0,2431,2432,1,0,0,0,2432,327,1,0,0,0,2433,2431,1,0,0,0,2434,2438,
  	5,151,0,0,2435,2437,3,468,234,0,2436,2435,1,0,0,0,2437,2440,1,0,0,0,2438,
  	2436,1,0,0,0,2438,2439,1,0,0,0,2439,2441,1,0,0,0,2440,2438,1,0,0,0,2441,
  	2442,3,160,80,0,2442,2443,5,15,0,0,2443,2448,3,162,81,0,2444,2445,5,15,
  	0,0,2445,2447,3,150,75,0,2446,2444,1,0,0,0,2447,2450,1,0,0,0,2448,2446,
  	1,0,0,0,2448,2449,1,0,0,0,2449,329,1,0,0,0,2450,2448,1,0,0,0,2451,2455,
  	5,160,0,0,2452,2454,3,478,239,0,2453,2452,1,0,0,0,2454,2457,1,0,0,0,2455,
  	2453,1,0,0,0,2455,2456,1,0,0,0,2456,2458,1,0,0,0,2457,2455,1,0,0,0,2458,
  	2459,3,160,80,0,2459,2460,5,15,0,0,2460,2465,3,162,81,0,2461,2462,5,15,
  	0,0,2462,2464,3,150,75,0,2463,2461,1,0,0,0,2464,2467,1,0,0,0,2465,2463,
  	1,0,0,0,2465,2466,1,0,0,0,2466,331,1,0,0,0,2467,2465,1,0,0,0,2468,2472,
  	5,152,0,0,2469,2471,3,468,234,0,2470,2469,1,0,0,0,2471,2474,1,0,0,0,2472,
  	2470,1,0,0,0,2472,2473,1,0,0,0,2473,2475,1,0,0,0,2474,2472,1,0,0,0,2475,
  	2476,3,160,80,0,2476,2477,5,15,0,0,2477,2482,3,162,81,0,2478,2479,5,15,
  	0,0,2479,2481,3,150,75,0,2480,2478,1,0,0,0,2481,2484,1,0,0,0,2482,2480,
  	1,0,0,0,2482,2483,1,0,0,0,2483,333,1,0,0,0,2484,2482,1,0,0,0,2485,2489,
  	5,161,0,0,2486,2488,3,478,239,0,2487,2486,1,0,0,0,2488,2491,1,0,0,0,2489,
  	2487,1,0,0,0,2489,2490,1,0,0,0,2490,2492,1,0,0,0,2491,2489,1,0,0,0,2492,
  	2493,3,160,80,0,2493,2494,5,15,0,0,2494,2499,3,162,81,0,2495,2496,5,15,
  	0,0,2496,2498,3,150,75,0,2497,2495,1,0,0,0,2498,2501,1,0,0,0,2499,2497,
  	1,0,0,0,2499,2500,1,0,0,0,2500,335,1,0,0,0,2501,2499,1,0,0,0,2502,2504,
  	5,162,0,0,2503,2505,5,145,0,0,2504,2503,1,0,0,0,2504,2505,1,0,0,0,2505,
  	2506,1,0,0,0,2506,2507,3,160,80,0,2507,2508,5,15,0,0,2508,2513,3,162,
  	81,0,2509,2510,5,15,0,0,2510,2512,3,150,75,0,2511,2509,1,0,0,0,2512,2515,
  	1,0,0,0,2513,2511,1,0,0,0,2513,2514,1,0,0,0,2514,337,1,0,0,0,2515,2513,
  	1,0,0,0,2516,2518,5,163,0,0,2517,2519,5,145,0,0,2518,2517,1,0,0,0,2518,
  	2519,1,0,0,0,2519,2520,1,0,0,0,2520,2521,3,160,80,0,2521,2522,5,15,0,
  	0,2522,2527,3,162,81,0,2523,2524,5,15,0,0,2524,2526,3,150,75,0,2525,2523,
  	1,0,0,0,2526,2529,1,0,0,0,2527,2525,1,0,0,0,2527,2528,1,0,0,0,2528,339,
  	1,0,0,0,2529,2527,1,0,0,0,2530,2534,5,164,0,0,2531,2533,3,478,239,0,2532,
  	2531,1,0,0,0,2533,2536,1,0,0,0,2534,2532,1,0,0,0,2534,2535,1,0,0,0,2535,
  	2537,1,0,0,0,2536,2534,1,0,0,0,2537,2538,3,160,80,0,2538,2539,5,15,0,
  	0,2539,2544,3,162,81,0,2540,2541,5,15,0,0,2541,2543,3,150,75,0,2542,2540,
  	1,0,0,0,2543,2546,1,0,0,0,2544,2542,1,0,0,0,2544,2545,1,0,0,0,2545,341,
  	1,0,0,0,2546,2544,1,0,0,0,2547,2548,5,165,0,0,2548,2549,3,160,80,0,2549,
  	2550,5,15,0,0,2550,2555,3,162,81,0,2551,2552,5,15,0,0,2552,2554,3,150,
  	75,0,2553,2551,1,0,0,0,2554,2557,1,0,0,0,2555,2553,1,0,0,0,2555,2556,
  	1,0,0,0,2556,343,1,0,0,0,2557,2555,1,0,0,0,2558,2559,5,166,0,0,2559,2560,
  	3,160,80,0,2560,2561,5,15,0,0,2561,2566,3,162,81,0,2562,2563,5,15,0,0,
  	2563,2565,3,150,75,0,2564,2562,1,0,0,0,2565,2568,1,0,0,0,2566,2564,1,
  	0,0,0,2566,2567,1,0,0,0,2567,345,1,0,0,0,2568,2566,1,0,0,0,2569,2573,
  	5,167,0,0,2570,2572,3,478,239,0,2571,2570,1,0,0,0,2572,2575,1,0,0,0,2573,
  	2571,1,0,0,0,2573,2574,1,0,0,0,2574,2576,1,0,0,0,2575,2573,1,0,0,0,2576,
  	2577,3,160,80,0,2577,2578,5,15,0,0,2578,2583,3,162,81,0,2579,2580,5,15,
  	0,0,2580,2582,3,150,75,0,2581,2579,1,0,0,0,2582,2585,1,0,0,0,2583,2581,
  	1,0,0,0,2583,2584,1,0,0,0,2584,347,1,0,0,0,2585,2583,1,0,0,0,2586,2590,
  	5,143,0,0,2587,2589,3,468,234,0,2588,2587,1,0,0,0,2589,2592,1,0,0,0,2590,
  	2588,1,0,0,0,2590,2591,1,0,0,0,2591,2593,1,0,0,0,2592,2590,1,0,0,0,2593,
  	2594,3,160,80,0,2594,2595,5,15,0,0,2595,2600,3,162,81,0,2596,2597,5,15,
  	0,0,2597,2599,3,150,75,0,2598,2596,1,0,0,0,2599,2602,1,0,0,0,2600,2598,
  	1,0,0,0,2600,2601,1,0,0,0,2601,349,1,0,0,0,2602,2600,1,0,0,0,2603,2605,
  	5,144,0,0,2604,2606,5,145,0,0,2605,2604,1,0,0,0,2605,2606,1,0,0,0,2606,
  	2607,1,0,0,0,2607,2608,3,160,80,0,2608,2609,5,15,0,0,2609,2614,3,162,
  	81,0,2610,2611,5,15,0,0,2611,2613,3,150,75,0,2612,2610,1,0,0,0,2613,2616,
  	1,0,0,0,2614,2612,1,0,0,0,2614,2615,1,0,0,0,2615,351,1,0,0,0,2616,2614,
  	1,0,0,0,2617,2619,5,146,0,0,2618,2620,5,145,0,0,2619,2618,1,0,0,0,2619,
  	2620,1,0,0,0,2620,2621,1,0,0,0,2621,2622,3,160,80,0,2622,2623,5,15,0,
  	0,2623,2628,3,162,81,0,2624,2625,5,15,0,0,2625,2627,3,150,75,0,2626,2624,
  	1,0,0,0,2627,2630,1,0,0,0,2628,2626,1,0,0,0,2628,2629,1,0,0,0,2629,353,
  	1,0,0,0,2630,2628,1,0,0,0,2631,2632,5,147,0,0,2632,2633,3,160,80,0,2633,
  	2634,5,15,0,0,2634,2639,3,162,81,0,2635,2636,5,15,0,0,2636,2638,3,150,
  	75,0,2637,2635,1,0,0,0,2638,2641,1,0,0,0,2639,2637,1,0,0,0,2639,2640,
  	1,0,0,0,2640,355,1,0,0,0,2641,2639,1,0,0,0,2642,2643,5,148,0,0,2643,2644,
  	3,160,80,0,2644,2645,5,15,0,0,2645,2650,3,162,81,0,2646,2647,5,15,0,0,
  	2647,2649,3,150,75,0,2648,2646,1,0,0,0,2649,2652,1,0,0,0,2650,2648,1,
  	0,0,0,2650,2651,1,0,0,0,2651,357,1,0,0,0,2652,2650,1,0,0,0,2653,2654,
  	5,149,0,0,2654,2655,3,160,80,0,2655,2656,5,15,0,0,2656,2661,3,162,81,
  	0,2657,2658,5,15,0,0,2658,2660,3,150,75,0,2659,2657,1,0,0,0,2660,2663,
  	1,0,0,0,2661,2659,1,0,0,0,2661,2662,1,0,0,0,2662,359,1,0,0,0,2663,2661,
  	1,0,0,0,2664,2665,5,140,0,0,2665,2666,3,160,80,0,2666,2667,5,15,0,0,2667,
  	2672,3,160,80,0,2668,2669,5,15,0,0,2669,2671,3,150,75,0,2670,2668,1,0,
  	0,0,2671,2674,1,0,0,0,2672,2670,1,0,0,0,2672,2673,1,0,0,0,2673,361,1,
  	0,0,0,2674,2672,1,0,0,0,2675,2676,5,141,0,0,2676,2677,3,160,80,0,2677,
  	2678,5,15,0,0,2678,2679,3,160,80,0,2679,2680,5,15,0,0,2680,2685,3,160,
  	80,0,2681,2682,5,15,0,0,2682,2684,3,150,75,0,2683,2681,1,0,0,0,2684,2687,
  	1,0,0,0,2685,2683,1,0,0,0,2685,2686,1,0,0,0,2686,363,1,0,0,0,2687,2685,
  	1,0,0,0,2688,2689,5,142,0,0,2689,2690,3,160,80,0,2690,2691,5,15,0,0,2691,
  	2692,3,160,80,0,2692,2693,5,15,0,0,2693,2698,3,160,80,0,2694,2695,5,15,
  	0,0,2695,2697,3,150,75,0,2696,2694,1,0,0,0,2697,2700,1,0,0,0,2698,2696,
  	1,0,0,0,2698,2699,1,0,0,0,2699,365,1,0,0,0,2700,2698,1,0,0,0,2701,2702,
  	5,168,0,0,2702,2705,3,160,80,0,2703,2704,5,15,0,0,2704,2706,5,490,0,0,
  	2705,2703,1,0,0,0,2706,2707,1,0,0,0,2707,2705,1,0,0,0,2707,2708,1,0,0,
  	0,2708,2713,1,0,0,0,2709,2710,5,15,0,0,2710,2712,3,150,75,0,2711,2709,
  	1,0,0,0,2712,2715,1,0,0,0,2713,2711,1,0,0,0,2713,2714,1,0,0,0,2714,367,
  	1,0,0,0,2715,2713,1,0,0,0,2716,2717,5,169,0,0,2717,2718,3,160,80,0,2718,
  	2719,5,15,0,0,2719,2722,3,160,80,0,2720,2721,5,15,0,0,2721,2723,5,490,
  	0,0,2722,2720,1,0,0,0,2723,2724,1,0,0,0,2724,2722,1,0,0,0,2724,2725,1,
  	0,0,0,2725,2730,1,0,0,0,2726,2727,5,15,0,0,2727,2729,3,150,75,0,2728,
  	2726,1,0,0,0,2729,2732,1,0,0,0,2730,2728,1,0,0,0,2730,2731,1,0,0,0,2731,
  	369,1,0,0,0,2732,2730,1,0,0,0,2733,2735,5,170,0,0,2734,2736,5,92,0,0,
  	2735,2734,1,0,0,0,2735,2736,1,0,0,0,2736,2738,1,0,0,0,2737,2739,5,108,
  	0,0,2738,2737,1,0,0,0,2738,2739,1,0,0,0,2739,2740,1,0,0,0,2740,2743,3,
  	174,87,0,2741,2742,5,15,0,0,2742,2744,3,160,80,0,2743,2741,1,0,0,0,2743,
  	2744,1,0,0,0,2744,2747,1,0,0,0,2745,2746,5,15,0,0,2746,2748,3,186,93,
  	0,2747,2745,1,0,0,0,2747,2748,1,0,0,0,2748,2751,1,0,0,0,2749,2750,5,15,
  	0,0,2750,2752,3,244,122,0,2751,2749,1,0,0,0,2751,2752,1,0,0,0,2752,2757,
  	1,0,0,0,2753,2754,5,15,0,0,2754,2756,3,150,75,0,2755,2753,1,0,0,0,2756,
  	2759,1,0,0,0,2757,2755,1,0,0,0,2757,2758,1,0,0,0,2758,371,1,0,0,0,2759,
  	2757,1,0,0,0,2760,2762,5,171,0,0,2761,2763,5,155,0,0,2762,2761,1,0,0,
  	0,2762,2763,1,0,0,0,2763,2764,1,0,0,0,2764,2765,3,174,87,0,2765,2766,
  	5,15,0,0,2766,2769,3,160,80,0,2767,2768,5,15,0,0,2768,2770,3,186,93,0,
  	2769,2767,1,0,0,0,2769,2770,1,0,0,0,2770,2775,1,0,0,0,2771,2772,5,15,
  	0,0,2772,2774,3,150,75,0,2773,2771,1,0,0,0,2774,2777,1,0,0,0,2775,2773,
  	1,0,0,0,2775,2776,1,0,0,0,2776,2802,1,0,0,0,2777,2775,1,0,0,0,2778,2779,
  	5,171,0,0,2779,2781,5,156,0,0,2780,2782,5,155,0,0,2781,2780,1,0,0,0,2781,
  	2782,1,0,0,0,2782,2783,1,0,0,0,2783,2784,3,174,87,0,2784,2785,5,15,0,
  	0,2785,2787,3,160,80,0,2786,2788,3,318,159,0,2787,2786,1,0,0,0,2787,2788,
  	1,0,0,0,2788,2789,1,0,0,0,2789,2792,3,474,237,0,2790,2791,5,15,0,0,2791,
  	2793,3,186,93,0,2792,2790,1,0,0,0,2792,2793,1,0,0,0,2793,2798,1,0,0,0,
  	2794,2795,5,15,0,0,2795,2797,3,150,75,0,2796,2794,1,0,0,0,2797,2800,1,
  	0,0,0,2798,2796,1,0,0,0,2798,2799,1,0,0,0,2799,2802,1,0,0,0,2800,2798,
  	1,0,0,0,2801,2760,1,0,0,0,2801,2778,1,0,0,0,2802,373,1,0,0,0,2803,2805,
  	5,172,0,0,2804,2806,5,173,0,0,2805,2804,1,0,0,0,2805,2806,1,0,0,0,2806,
  	2808,1,0,0,0,2807,2809,5,155,0,0,2808,2807,1,0,0,0,2808,2809,1,0,0,0,
  	2809,2810,1,0,0,0,2810,2811,3,160,80,0,2811,2812,5,15,0,0,2812,2813,3,
  	160,80,0,2813,2814,5,15,0,0,2814,2816,3,160,80,0,2815,2817,3,318,159,
  	0,2816,2815,1,0,0,0,2816,2817,1,0,0,0,2817,2818,1,0,0,0,2818,2819,3,474,
  	237,0,2819,2822,3,474,237,0,2820,2821,5,15,0,0,2821,2823,3,186,93,0,2822,
  	2820,1,0,0,0,2822,2823,1,0,0,0,2823,2828,1,0,0,0,2824,2825,5,15,0,0,2825,
  	2827,3,150,75,0,2826,2824,1,0,0,0,2827,2830,1,0,0,0,2828,2826,1,0,0,0,
  	2828,2829,1,0,0,0,2829,375,1,0,0,0,2830,2828,1,0,0,0,2831,2833,5,174,
  	0,0,2832,2834,5,155,0,0,2833,2832,1,0,0,0,2833,2834,1,0,0,0,2834,2835,
  	1,0,0,0,2835,2836,3,480,240,0,2836,2837,3,160,80,0,2837,2838,5,15,0,0,
  	2838,2840,3,160,80,0,2839,2841,3,318,159,0,2840,2839,1,0,0,0,2840,2841,
  	1,0,0,0,2841,2842,1,0,0,0,2842,2845,3,474,237,0,2843,2844,5,15,0,0,2844,
  	2846,3,186,93,0,2845,2843,1,0,0,0,2845,2846,1,0,0,0,2846,2851,1,0,0,0,
  	2847,2848,5,15,0,0,2848,2850,3,150,75,0,2849,2847,1,0,0,0,2850,2853,1,
  	0,0,0,2851,2849,1,0,0,0,2851,2852,1,0,0,0,2852,377,1,0,0,0,2853,2851,
  	1,0,0,0,2854,2856,5,123,0,0,2855,2857,3,464,232,0,2856,2855,1,0,0,0,2856,
  	2857,1,0,0,0,2857,2858,1,0,0,0,2858,2859,3,174,87,0,2859,2860,5,15,0,
  	0,2860,2865,3,160,80,0,2861,2862,5,15,0,0,2862,2864,3,160,80,0,2863,2861,
  	1,0,0,0,2864,2867,1,0,0,0,2865,2863,1,0,0,0,2865,2866,1,0,0,0,2866,2872,
  	1,0,0,0,2867,2865,1,0,0,0,2868,2869,5,15,0,0,2869,2871,3,150,75,0,2870,
  	2868,1,0,0,0,2871,2874,1,0,0,0,2872,2870,1,0,0,0,2872,2873,1,0,0,0,2873,
  	379,1,0,0,0,2874,2872,1,0,0,0,2875,2876,5,130,0,0,2876,2877,3,160,80,
  	0,2877,2878,5,43,0,0,2878,2883,3,174,87,0,2879,2880,5,15,0,0,2880,2882,
  	3,150,75,0,2881,2879,1,0,0,0,2882,2885,1,0,0,0,2883,2881,1,0,0,0,2883,
  	2884,1,0,0,0,2884,381,1,0,0,0,2885,2883,1,0,0,0,2886,2887,5,131,0,0,2887,
  	2888,3,160,80,0,2888,2889,5,43,0,0,2889,2894,3,174,87,0,2890,2891,5,15,
  	0,0,2891,2893,3,150,75,0,2892,2890,1,0,0,0,2893,2896,1,0,0,0,2894,2892,
  	1,0,0,0,2894,2895,1,0,0,0,2895,383,1,0,0,0,2896,2894,1,0,0,0,2897,2898,
  	5,132,0,0,2898,2899,3,160,80,0,2899,2900,5,43,0,0,2900,2905,3,174,87,
  	0,2901,2902,5,15,0,0,2902,2904,3,150,75,0,2903,2901,1,0,0,0,2904,2907,
  	1,0,0,0,2905,2903,1,0,0,0,2905,2906,1,0,0,0,2906,385,1,0,0,0,2907,2905,
  	1,0,0,0,2908,2909,5,133,0,0,2909,2910,3,160,80,0,2910,2911,5,43,0,0,2911,
  	2916,3,174,87,0,2912,2913,5,15,0,0,2913,2915,3,150,75,0,2914,2912,1,0,
  	0,0,2915,2918,1,0,0,0,2916,2914,1,0,0,0,2916,2917,1,0,0,0,2917,387,1,
  	0,0,0,2918,2916,1,0,0,0,2919,2920,5,134,0,0,2920,2921,3,160,80,0,2921,
  	2922,5,43,0,0,2922,2927,3,174,87,0,2923,2924,5,15,0,0,2924,2926,3,150,
  	75,0,2925,2923,1,0,0,0,2926,2929,1,0,0,0,2927,2925,1,0,0,0,2927,2928,
  	1,0,0,0,2928,389,1,0,0,0,2929,2927,1,0,0,0,2930,2931,5,135,0,0,2931,2932,
  	3,160,80,0,2932,2933,5,43,0,0,2933,2938,3,174,87,0,2934,2935,5,15,0,0,
  	2935,2937,3,150,75,0,2936,2934,1,0,0,0,2937,2940,1,0,0,0,2938,2936,1,
  	0,0,0,2938,2939,1,0,0,0,2939,391,1,0,0,0,2940,2938,1,0,0,0,2941,2942,
  	5,136,0,0,2942,2943,3,160,80,0,2943,2944,5,43,0,0,2944,2949,3,174,87,
  	0,2945,2946,5,15,0,0,2946,2948,3,150,75,0,2947,2945,1,0,0,0,2948,2951,
  	1,0,0,0,2949,2947,1,0,0,0,2949,2950,1,0,0,0,2950,393,1,0,0,0,2951,2949,
  	1,0,0,0,2952,2953,5,137,0,0,2953,2954,3,160,80,0,2954,2955,5,43,0,0,2955,
  	2960,3,174,87,0,2956,2957,5,15,0,0,2957,2959,3,150,75,0,2958,2956,1,0,
  	0,0,2959,2962,1,0,0,0,2960,2958,1,0,0,0,2960,2961,1,0,0,0,2961,395,1,
  	0,0,0,2962,2960,1,0,0,0,2963,2964,5,138,0,0,2964,2965,3,160,80,0,2965,
  	2966,5,43,0,0,2966,2971,3,174,87,0,2967,2968,5,15,0,0,2968,2970,3,150,
  	75,0,2969,2967,1,0,0,0,2970,2973,1,0,0,0,2971,2969,1,0,0,0,2971,2972,
  	1,0,0,0,2972,397,1,0,0,0,2973,2971,1,0,0,0,2974,2975,5,139,0,0,2975,2976,
  	3,160,80,0,2976,2977,5,43,0,0,2977,2982,3,174,87,0,2978,2979,5,15,0,0,
  	2979,2981,3,150,75,0,2980,2978,1,0,0,0,2981,2984,1,0,0,0,2982,2980,1,
  	0,0,0,2982,2983,1,0,0,0,2983,399,1,0,0,0,2984,2982,1,0,0,0,2985,2986,
  	5,126,0,0,2986,2987,3,160,80,0,2987,2988,5,43,0,0,2988,2993,3,174,87,
  	0,2989,2990,5,15,0,0,2990,2992,3,150,75,0,2991,2989,1,0,0,0,2992,2995,
  	1,0,0,0,2993,2991,1,0,0,0,2993,2994,1,0,0,0,2994,401,1,0,0,0,2995,2993,
  	1,0,0,0,2996,2997,5,122,0,0,2997,2998,3,160,80,0,2998,2999,5,43,0,0,2999,
  	3004,3,174,87,0,3000,3001,5,15,0,0,3001,3003,3,150,75,0,3002,3000,1,0,
  	0,0,3003,3006,1,0,0,0,3004,3002,1,0,0,0,3004,3005,1,0,0,0,3005,403,1,
  	0,0,0,3006,3004,1,0,0,0,3007,3008,5,125,0,0,3008,3009,3,160,80,0,3009,
  	3010,5,43,0,0,3010,3015,3,174,87,0,3011,3012,5,15,0,0,3012,3014,3,150,
  	75,0,3013,3011,1,0,0,0,3014,3017,1,0,0,0,3015,3013,1,0,0,0,3015,3016,
  	1,0,0,0,3016,405,1,0,0,0,3017,3015,1,0,0,0,3018,3019,5,127,0,0,3019,3020,
  	3,470,235,0,3020,3021,3,160,80,0,3021,3022,5,15,0,0,3022,3027,3,162,81,
  	0,3023,3024,5,15,0,0,3024,3026,3,150,75,0,3025,3023,1,0,0,0,3026,3029,
  	1,0,0,0,3027,3025,1,0,0,0,3027,3028,1,0,0,0,3028,407,1,0,0,0,3029,3027,
  	1,0,0,0,3030,3034,5,128,0,0,3031,3033,3,478,239,0,3032,3031,1,0,0,0,3033,
  	3036,1,0,0,0,3034,3032,1,0,0,0,3034,3035,1,0,0,0,3035,3037,1,0,0,0,3036,
  	3034,1,0,0,0,3037,3038,3,472,236,0,3038,3039,3,160,80,0,3039,3040,5,15,
  	0,0,3040,3045,3,162,81,0,3041,3042,5,15,0,0,3042,3044,3,150,75,0,3043,
  	3041,1,0,0,0,3044,3047,1,0,0,0,3045,3043,1,0,0,0,3045,3046,1,0,0,0,3046,
  	409,1,0,0,0,3047,3045,1,0,0,0,3048,3052,5,175,0,0,3049,3051,3,478,239,
  	0,3050,3049,1,0,0,0,3051,3054,1,0,0,0,3052,3050,1,0,0,0,3052,3053,1,0,
  	0,0,3053,3055,1,0,0,0,3054,3052,1,0,0,0,3055,3056,3,174,87,0,3056,3061,
  	3,426,213,0,3057,3058,5,15,0,0,3058,3060,3,426,213,0,3059,3057,1,0,0,
  	0,3060,3063,1,0,0,0,3061,3059,1,0,0,0,3061,3062,1,0,0,0,3062,3068,1,0,
  	0,0,3063,3061,1,0,0,0,3064,3065,5,15,0,0,3065,3067,3,150,75,0,3066,3064,
  	1,0,0,0,3067,3070,1,0,0,0,3068,3066,1,0,0,0,3068,3069,1,0,0,0,3069,411,
  	1,0,0,0,3070,3068,1,0,0,0,3071,3075,5,129,0,0,3072,3074,3,478,239,0,3073,
  	3072,1,0,0,0,3074,3077,1,0,0,0,3075,3073,1,0,0,0,3075,3076,1,0,0,0,3076,
  	3078,1,0,0,0,3077,3075,1,0,0,0,3078,3079,3,160,80,0,3079,3080,5,15,0,
  	0,3080,3081,3,160,80,0,3081,3082,5,15,0,0,3082,3087,3,160,80,0,3083,3084,
  	5,15,0,0,3084,3086,3,150,75,0,3085,3083,1,0,0,0,3086,3089,1,0,0,0,3087,
  	3085,1,0,0,0,3087,3088,1,0,0,0,3088,413,1,0,0,0,3089,3087,1,0,0,0,3090,
  	3091,5,176,0,0,3091,3092,3,160,80,0,3092,415,1,0,0,0,3093,3095,7,8,0,
  	0,3094,3093,1,0,0,0,3094,3095,1,0,0,0,3095,3096,1,0,0,0,3096,3100,5,180,
  	0,0,3097,3099,3,478,239,0,3098,3097,1,0,0,0,3099,3102,1,0,0,0,3100,3098,
  	1,0,0,0,3100,3101,1,0,0,0,3101,3104,1,0,0,0,3102,3100,1,0,0,0,3103,3105,
  	3,42,21,0,3104,3103,1,0,0,0,3104,3105,1,0,0,0,3105,3109,1,0,0,0,3106,
  	3108,3,56,28,0,3107,3106,1,0,0,0,3108,3111,1,0,0,0,3109,3107,1,0,0,0,
  	3109,3110,1,0,0,0,3110,3113,1,0,0,0,3111,3109,1,0,0,0,3112,3114,3,244,
  	122,0,3113,3112,1,0,0,0,3113,3114,1,0,0,0,3114,3115,1,0,0,0,3115,3116,
  	3,174,87,0,3116,3117,3,162,81,0,3117,3118,5,26,0,0,3118,3119,3,432,216,
  	0,3119,3123,5,27,0,0,3120,3122,3,172,86,0,3121,3120,1,0,0,0,3122,3125,
  	1,0,0,0,3123,3121,1,0,0,0,3123,3124,1,0,0,0,3124,3137,1,0,0,0,3125,3123,
  	1,0,0,0,3126,3127,5,37,0,0,3127,3132,3,428,214,0,3128,3129,5,15,0,0,3129,
  	3131,3,428,214,0,3130,3128,1,0,0,0,3131,3134,1,0,0,0,3132,3130,1,0,0,
  	0,3132,3133,1,0,0,0,3133,3135,1,0,0,0,3134,3132,1,0,0,0,3135,3136,5,38,
  	0,0,3136,3138,1,0,0,0,3137,3126,1,0,0,0,3137,3138,1,0,0,0,3138,3143,1,
  	0,0,0,3139,3140,5,15,0,0,3140,3142,3,150,75,0,3141,3139,1,0,0,0,3142,
  	3145,1,0,0,0,3143,3141,1,0,0,0,3143,3144,1,0,0,0,3144,417,1,0,0,0,3145,
  	3143,1,0,0,0,3146,3147,5,181,0,0,3147,3148,3,160,80,0,3148,3149,5,15,
  	0,0,3149,3154,3,174,87,0,3150,3151,5,15,0,0,3151,3153,3,150,75,0,3152,
  	3150,1,0,0,0,3153,3156,1,0,0,0,3154,3152,1,0,0,0,3154,3155,1,0,0,0,3155,
  	419,1,0,0,0,3156,3154,1,0,0,0,3157,3158,5,182,0,0,3158,3160,3,174,87,
  	0,3159,3161,5,183,0,0,3160,3159,1,0,0,0,3160,3161,1,0,0,0,3161,3165,1,
  	0,0,0,3162,3164,3,430,215,0,3163,3162,1,0,0,0,3164,3167,1,0,0,0,3165,
  	3163,1,0,0,0,3165,3166,1,0,0,0,3166,3172,1,0,0,0,3167,3165,1,0,0,0,3168,
  	3169,5,15,0,0,3169,3171,3,150,75,0,3170,3168,1,0,0,0,3171,3174,1,0,0,
  	0,3172,3170,1,0,0,0,3172,3173,1,0,0,0,3173,421,1,0,0,0,3174,3172,1,0,
  	0,0,3175,3176,5,184,0,0,3176,3177,5,50,0,0,3177,3178,5,494,0,0,3178,3187,
  	5,37,0,0,3179,3184,3,436,218,0,3180,3181,5,15,0,0,3181,3183,3,436,218,
  	0,3182,3180,1,0,0,0,3183,3186,1,0,0,0,3184,3182,1,0,0,0,3184,3185,1,0,
  	0,0,3185,3188,1,0,0,0,3186,3184,1,0,0,0,3187,3179,1,0,0,0,3187,3188,1,
  	0,0,0,3188,3189,1,0,0,0,3189,3194,5,38,0,0,3190,3191,5,15,0,0,3191,3193,
  	3,150,75,0,3192,3190,1,0,0,0,3193,3196,1,0,0,0,3194,3192,1,0,0,0,3194,
  	3195,1,0,0,0,3195,423,1,0,0,0,3196,3194,1,0,0,0,3197,3198,5,185,0,0,3198,
  	3199,5,50,0,0,3199,3200,3,438,219,0,3200,3209,5,37,0,0,3201,3206,3,436,
  	218,0,3202,3203,5,15,0,0,3203,3205,3,436,218,0,3204,3202,1,0,0,0,3205,
  	3208,1,0,0,0,3206,3204,1,0,0,0,3206,3207,1,0,0,0,3207,3210,1,0,0,0,3208,
  	3206,1,0,0,0,3209,3201,1,0,0,0,3209,3210,1,0,0,0,3210,3211,1,0,0,0,3211,
  	3216,5,38,0,0,3212,3213,5,15,0,0,3213,3215,3,150,75,0,3214,3212,1,0,0,
  	0,3215,3218,1,0,0,0,3216,3214,1,0,0,0,3216,3217,1,0,0,0,3217,425,1,0,
  	0,0,3218,3216,1,0,0,0,3219,3220,5,37,0,0,3220,3221,3,162,81,0,3221,3222,
  	5,15,0,0,3222,3223,5,494,0,0,3223,3224,5,38,0,0,3224,427,1,0,0,0,3225,
  	3226,5,492,0,0,3226,3235,5,26,0,0,3227,3232,3,160,80,0,3228,3229,5,15,
  	0,0,3229,3231,3,160,80,0,3230,3228,1,0,0,0,3231,3234,1,0,0,0,3232,3230,
  	1,0,0,0,3232,3233,1,0,0,0,3233,3236,1,0,0,0,3234,3232,1,0,0,0,3235,3227,
  	1,0,0,0,3235,3236,1,0,0,0,3236,3237,1,0,0,0,3237,3238,5,27,0,0,3238,429,
  	1,0,0,0,3239,3240,7,9,0,0,3240,3241,3,160,80,0,3241,431,1,0,0,0,3242,
  	3244,5,79,0,0,3243,3242,1,0,0,0,3243,3244,1,0,0,0,3244,3258,1,0,0,0,3245,
  	3250,3,434,217,0,3246,3247,5,15,0,0,3247,3249,3,434,217,0,3248,3246,1,
  	0,0,0,3249,3252,1,0,0,0,3250,3248,1,0,0,0,3250,3251,1,0,0,0,3251,3255,
  	1,0,0,0,3252,3250,1,0,0,0,3253,3254,5,15,0,0,3254,3256,5,79,0,0,3255,
  	3253,1,0,0,0,3255,3256,1,0,0,0,3256,3258,1,0,0,0,3257,3243,1,0,0,0,3257,
  	3245,1,0,0,0,3258,433,1,0,0,0,3259,3263,3,220,110,0,3260,3262,3,180,90,
  	0,3261,3260,1,0,0,0,3262,3265,1,0,0,0,3263,3261,1,0,0,0,3263,3264,1,0,
  	0,0,3264,3266,1,0,0,0,3265,3263,1,0,0,0,3266,3267,3,162,81,0,3267,3272,
  	1,0,0,0,3268,3269,3,248,124,0,3269,3270,3,156,78,0,3270,3272,1,0,0,0,
  	3271,3259,1,0,0,0,3271,3268,1,0,0,0,3272,435,1,0,0,0,3273,3274,3,220,
  	110,0,3274,3275,3,162,81,0,3275,3280,1,0,0,0,3276,3277,3,248,124,0,3277,
  	3278,3,156,78,0,3278,3280,1,0,0,0,3279,3273,1,0,0,0,3279,3276,1,0,0,0,
  	3280,437,1,0,0,0,3281,3284,3,126,63,0,3282,3284,5,494,0,0,3283,3281,1,
  	0,0,0,3283,3282,1,0,0,0,3284,439,1,0,0,0,3285,3286,7,10,0,0,3286,441,
  	1,0,0,0,3287,3288,7,11,0,0,3288,443,1,0,0,0,3289,3292,3,442,221,0,3290,
  	3292,3,440,220,0,3291,3289,1,0,0,0,3291,3290,1,0,0,0,3292,445,1,0,0,0,
  	3293,3294,7,12,0,0,3294,447,1,0,0,0,3295,3296,7,13,0,0,3296,449,1,0,0,
  	0,3297,3298,7,14,0,0,3298,451,1,0,0,0,3299,3300,7,15,0,0,3300,453,1,0,
  	0,0,3301,3302,7,16,0,0,3302,455,1,0,0,0,3303,3304,5,210,0,0,3304,457,
  	1,0,0,0,3305,3306,7,17,0,0,3306,459,1,0,0,0,3307,3308,7,18,0,0,3308,461,
  	1,0,0,0,3309,3310,5,263,0,0,3310,463,1,0,0,0,3311,3312,5,264,0,0,3312,
  	465,1,0,0,0,3313,3314,7,19,0,0,3314,467,1,0,0,0,3315,3316,7,20,0,0,3316,
  	469,1,0,0,0,3317,3318,7,21,0,0,3318,471,1,0,0,0,3319,3320,7,22,0,0,3320,
  	473,1,0,0,0,3321,3322,7,23,0,0,3322,475,1,0,0,0,3323,3324,7,24,0,0,3324,
  	477,1,0,0,0,3325,3326,7,25,0,0,3326,479,1,0,0,0,3327,3328,7,26,0,0,3328,
  	481,1,0,0,0,3329,3330,7,27,0,0,3330,483,1,0,0,0,3331,3360,3,486,243,0,
  	3332,3360,3,488,244,0,3333,3360,3,490,245,0,3334,3360,3,492,246,0,3335,
  	3360,3,496,248,0,3336,3360,3,500,250,0,3337,3360,3,104,52,0,3338,3360,
  	3,504,252,0,3339,3360,3,508,254,0,3340,3360,3,512,256,0,3341,3360,3,516,
  	258,0,3342,3360,3,520,260,0,3343,3360,3,524,262,0,3344,3360,3,528,264,
  	0,3345,3360,3,532,266,0,3346,3360,3,536,268,0,3347,3360,3,540,270,0,3348,
  	3360,3,544,272,0,3349,3360,3,548,274,0,3350,3360,3,552,276,0,3351,3360,
  	3,556,278,0,3352,3360,3,560,280,0,3353,3360,3,564,282,0,3354,3360,3,568,
  	284,0,3355,3360,3,572,286,0,3356,3360,3,574,287,0,3357,3360,3,576,288,
  	0,3358,3360,3,578,289,0,3359,3331,1,0,0,0,3359,3332,1,0,0,0,3359,3333,
  	1,0,0,0,3359,3334,1,0,0,0,3359,3335,1,0,0,0,3359,3336,1,0,0,0,3359,3337,
  	1,0,0,0,3359,3338,1,0,0,0,3359,3339,1,0,0,0,3359,3340,1,0,0,0,3359,3341,
  	1,0,0,0,3359,3342,1,0,0,0,3359,3343,1,0,0,0,3359,3344,1,0,0,0,3359,3345,
  	1,0,0,0,3359,3346,1,0,0,0,3359,3347,1,0,0,0,3359,3348,1,0,0,0,3359,3349,
  	1,0,0,0,3359,3350,1,0,0,0,3359,3351,1,0,0,0,3359,3352,1,0,0,0,3359,3353,
  	1,0,0,0,3359,3354,1,0,0,0,3359,3355,1,0,0,0,3359,3356,1,0,0,0,3359,3357,
  	1,0,0,0,3359,3358,1,0,0,0,3360,485,1,0,0,0,3361,3362,5,361,0,0,3362,3371,
  	5,26,0,0,3363,3368,3,586,293,0,3364,3365,5,15,0,0,3365,3367,3,586,293,
  	0,3366,3364,1,0,0,0,3367,3370,1,0,0,0,3368,3366,1,0,0,0,3368,3369,1,0,
  	0,0,3369,3372,1,0,0,0,3370,3368,1,0,0,0,3371,3363,1,0,0,0,3371,3372,1,
  	0,0,0,3372,3373,1,0,0,0,3373,3374,5,27,0,0,3374,487,1,0,0,0,3375,3376,
  	5,362,0,0,3376,3385,5,26,0,0,3377,3382,3,584,292,0,3378,3379,5,15,0,0,
  	3379,3381,3,584,292,0,3380,3378,1,0,0,0,3381,3384,1,0,0,0,3382,3380,1,
  	0,0,0,3382,3383,1,0,0,0,3383,3386,1,0,0,0,3384,3382,1,0,0,0,3385,3377,
  	1,0,0,0,3385,3386,1,0,0,0,3386,3387,1,0,0,0,3387,3388,5,27,0,0,3388,489,
  	1,0,0,0,3389,3390,5,363,0,0,3390,3399,5,26,0,0,3391,3396,3,582,291,0,
  	3392,3393,5,15,0,0,3393,3395,3,582,291,0,3394,3392,1,0,0,0,3395,3398,
  	1,0,0,0,3396,3394,1,0,0,0,3396,3397,1,0,0,0,3397,3400,1,0,0,0,3398,3396,
  	1,0,0,0,3399,3391,1,0,0,0,3399,3400,1,0,0,0,3400,3401,1,0,0,0,3401,3402,
  	5,27,0,0,3402,491,1,0,0,0,3403,3404,5,364,0,0,3404,3413,5,26,0,0,3405,
  	3410,3,494,247,0,3406,3407,5,15,0,0,3407,3409,3,494,247,0,3408,3406,1,
  	0,0,0,3409,3412,1,0,0,0,3410,3408,1,0,0,0,3410,3411,1,0,0,0,3411,3414,
  	1,0,0,0,3412,3410,1,0,0,0,3413,3405,1,0,0,0,3413,3414,1,0,0,0,3414,3415,
  	1,0,0,0,3415,3416,5,27,0,0,3416,493,1,0,0,0,3417,3439,3,590,295,0,3418,
  	3439,3,598,299,0,3419,3439,3,736,368,0,3420,3439,3,674,337,0,3421,3439,
  	3,708,354,0,3422,3439,3,628,314,0,3423,3439,3,744,372,0,3424,3439,3,616,
  	308,0,3425,3439,3,720,360,0,3426,3439,3,610,305,0,3427,3439,3,658,329,
  	0,3428,3439,3,732,366,0,3429,3439,3,790,395,0,3430,3439,3,766,383,0,3431,
  	3439,3,684,342,0,3432,3439,3,648,324,0,3433,3439,3,650,325,0,3434,3439,
  	3,624,312,0,3435,3439,3,618,309,0,3436,3439,3,726,363,0,3437,3439,3,620,
  	310,0,3438,3417,1,0,0,0,3438,3418,1,0,0,0,3438,3419,1,0,0,0,3438,3420,
  	1,0,0,0,3438,3421,1,0,0,0,3438,3422,1,0,0,0,3438,3423,1,0,0,0,3438,3424,
  	1,0,0,0,3438,3425,1,0,0,0,3438,3426,1,0,0,0,3438,3427,1,0,0,0,3438,3428,
  	1,0,0,0,3438,3429,1,0,0,0,3438,3430,1,0,0,0,3438,3431,1,0,0,0,3438,3432,
  	1,0,0,0,3438,3433,1,0,0,0,3438,3434,1,0,0,0,3438,3435,1,0,0,0,3438,3436,
  	1,0,0,0,3438,3437,1,0,0,0,3439,495,1,0,0,0,3440,3441,5,365,0,0,3441,3450,
  	5,26,0,0,3442,3447,3,498,249,0,3443,3444,5,15,0,0,3444,3446,3,498,249,
  	0,3445,3443,1,0,0,0,3446,3449,1,0,0,0,3447,3445,1,0,0,0,3447,3448,1,0,
  	0,0,3448,3451,1,0,0,0,3449,3447,1,0,0,0,3450,3442,1,0,0,0,3450,3451,1,
  	0,0,0,3451,3452,1,0,0,0,3452,3453,5,27,0,0,3453,497,1,0,0,0,3454,3468,
  	3,590,295,0,3455,3468,3,598,299,0,3456,3468,3,736,368,0,3457,3468,3,674,
  	337,0,3458,3468,3,708,354,0,3459,3468,3,628,314,0,3460,3468,3,744,372,
  	0,3461,3468,3,616,308,0,3462,3468,3,720,360,0,3463,3468,3,610,305,0,3464,
  	3468,3,672,336,0,3465,3468,3,654,327,0,3466,3468,3,620,310,0,3467,3454,
  	1,0,0,0,3467,3455,1,0,0,0,3467,3456,1,0,0,0,3467,3457,1,0,0,0,3467,3458,
  	1,0,0,0,3467,3459,1,0,0,0,3467,3460,1,0,0,0,3467,3461,1,0,0,0,3467,3462,
  	1,0,0,0,3467,3463,1,0,0,0,3467,3464,1,0,0,0,3467,3465,1,0,0,0,3467,3466,
  	1,0,0,0,3468,499,1,0,0,0,3469,3470,5,366,0,0,3470,3479,5,26,0,0,3471,
  	3476,3,502,251,0,3472,3473,5,15,0,0,3473,3475,3,502,251,0,3474,3472,1,
  	0,0,0,3475,3478,1,0,0,0,3476,3474,1,0,0,0,3476,3477,1,0,0,0,3477,3480,
  	1,0,0,0,3478,3476,1,0,0,0,3479,3471,1,0,0,0,3479,3480,1,0,0,0,3480,3481,
  	1,0,0,0,3481,3482,5,27,0,0,3482,501,1,0,0,0,3483,3487,3,598,299,0,3484,
  	3487,3,780,390,0,3485,3487,3,702,351,0,3486,3483,1,0,0,0,3486,3484,1,
  	0,0,0,3486,3485,1,0,0,0,3487,503,1,0,0,0,3488,3489,5,367,0,0,3489,3498,
  	5,26,0,0,3490,3495,3,506,253,0,3491,3492,5,15,0,0,3492,3494,3,506,253,
  	0,3493,3491,1,0,0,0,3494,3497,1,0,0,0,3495,3493,1,0,0,0,3495,3496,1,0,
  	0,0,3496,3499,1,0,0,0,3497,3495,1,0,0,0,3498,3490,1,0,0,0,3498,3499,1,
  	0,0,0,3499,3500,1,0,0,0,3500,3501,5,27,0,0,3501,505,1,0,0,0,3502,3508,
  	3,676,338,0,3503,3508,3,646,323,0,3504,3508,3,632,316,0,3505,3508,3,630,
  	315,0,3506,3508,3,746,373,0,3507,3502,1,0,0,0,3507,3503,1,0,0,0,3507,
  	3504,1,0,0,0,3507,3505,1,0,0,0,3507,3506,1,0,0,0,3508,507,1,0,0,0,3509,
  	3510,5,368,0,0,3510,3519,5,26,0,0,3511,3516,3,510,255,0,3512,3513,5,15,
  	0,0,3513,3515,3,510,255,0,3514,3512,1,0,0,0,3515,3518,1,0,0,0,3516,3514,
  	1,0,0,0,3516,3517,1,0,0,0,3517,3520,1,0,0,0,3518,3516,1,0,0,0,3519,3511,
  	1,0,0,0,3519,3520,1,0,0,0,3520,3521,1,0,0,0,3521,3522,5,27,0,0,3522,509,
  	1,0,0,0,3523,3536,3,598,299,0,3524,3536,3,736,368,0,3525,3536,3,710,355,
  	0,3526,3536,3,674,337,0,3527,3536,3,708,354,0,3528,3536,3,600,300,0,3529,
  	3536,3,698,349,0,3530,3536,3,694,347,0,3531,3536,3,766,383,0,3532,3536,
  	3,644,322,0,3533,3536,3,616,308,0,3534,3536,3,620,310,0,3535,3523,1,0,
  	0,0,3535,3524,1,0,0,0,3535,3525,1,0,0,0,3535,3526,1,0,0,0,3535,3527,1,
  	0,0,0,3535,3528,1,0,0,0,3535,3529,1,0,0,0,3535,3530,1,0,0,0,3535,3531,
  	1,0,0,0,3535,3532,1,0,0,0,3535,3533,1,0,0,0,3535,3534,1,0,0,0,3536,511,
  	1,0,0,0,3537,3538,5,369,0,0,3538,3547,5,26,0,0,3539,3544,3,514,257,0,
  	3540,3541,5,15,0,0,3541,3543,3,514,257,0,3542,3540,1,0,0,0,3543,3546,
  	1,0,0,0,3544,3542,1,0,0,0,3544,3545,1,0,0,0,3545,3548,1,0,0,0,3546,3544,
  	1,0,0,0,3547,3539,1,0,0,0,3547,3548,1,0,0,0,3548,3549,1,0,0,0,3549,3550,
  	5,27,0,0,3550,513,1,0,0,0,3551,3554,3,784,392,0,3552,3554,3,670,335,0,
  	3553,3551,1,0,0,0,3553,3552,1,0,0,0,3554,515,1,0,0,0,3555,3556,5,370,
  	0,0,3556,3565,5,26,0,0,3557,3562,3,518,259,0,3558,3559,5,15,0,0,3559,
  	3561,3,518,259,0,3560,3558,1,0,0,0,3561,3564,1,0,0,0,3562,3560,1,0,0,
  	0,3562,3563,1,0,0,0,3563,3566,1,0,0,0,3564,3562,1,0,0,0,3565,3557,1,0,
  	0,0,3565,3566,1,0,0,0,3566,3567,1,0,0,0,3567,3568,5,27,0,0,3568,517,1,
  	0,0,0,3569,3577,3,590,295,0,3570,3577,3,736,368,0,3571,3577,3,664,332,
  	0,3572,3577,3,674,337,0,3573,3577,3,708,354,0,3574,3577,3,598,299,0,3575,
  	3577,3,658,329,0,3576,3569,1,0,0,0,3576,3570,1,0,0,0,3576,3571,1,0,0,
  	0,3576,3572,1,0,0,0,3576,3573,1,0,0,0,3576,3574,1,0,0,0,3576,3575,1,0,
  	0,0,3577,519,1,0,0,0,3578,3579,5,371,0,0,3579,3588,5,26,0,0,3580,3585,
  	3,522,261,0,3581,3582,5,15,0,0,3582,3584,3,522,261,0,3583,3581,1,0,0,
  	0,3584,3587,1,0,0,0,3585,3583,1,0,0,0,3585,3586,1,0,0,0,3586,3589,1,0,
  	0,0,3587,3585,1,0,0,0,3588,3580,1,0,0,0,3588,3589,1,0,0,0,3589,3590,1,
  	0,0,0,3590,3591,5,27,0,0,3591,521,1,0,0,0,3592,3597,3,736,368,0,3593,
  	3597,3,598,299,0,3594,3597,3,674,337,0,3595,3597,3,708,354,0,3596,3592,
  	1,0,0,0,3596,3593,1,0,0,0,3596,3594,1,0,0,0,3596,3595,1,0,0,0,3597,523,
  	1,0,0,0,3598,3599,5,372,0,0,3599,3608,5,26,0,0,3600,3605,3,526,263,0,
  	3601,3602,5,15,0,0,3602,3604,3,526,263,0,3603,3601,1,0,0,0,3604,3607,
  	1,0,0,0,3605,3603,1,0,0,0,3605,3606,1,0,0,0,3606,3609,1,0,0,0,3607,3605,
  	1,0,0,0,3608,3600,1,0,0,0,3608,3609,1,0,0,0,3609,3610,1,0,0,0,3610,3611,
  	5,27,0,0,3611,525,1,0,0,0,3612,3617,3,736,368,0,3613,3617,3,674,337,0,
  	3614,3617,3,708,354,0,3615,3617,3,634,317,0,3616,3612,1,0,0,0,3616,3613,
  	1,0,0,0,3616,3614,1,0,0,0,3616,3615,1,0,0,0,3617,527,1,0,0,0,3618,3619,
  	5,373,0,0,3619,3628,5,26,0,0,3620,3625,3,530,265,0,3621,3622,5,15,0,0,
  	3622,3624,3,530,265,0,3623,3621,1,0,0,0,3624,3627,1,0,0,0,3625,3623,1,
  	0,0,0,3625,3626,1,0,0,0,3626,3629,1,0,0,0,3627,3625,1,0,0,0,3628,3620,
  	1,0,0,0,3628,3629,1,0,0,0,3629,3630,1,0,0,0,3630,3631,5,27,0,0,3631,529,
  	1,0,0,0,3632,3636,3,736,368,0,3633,3636,3,674,337,0,3634,3636,3,652,326,
  	0,3635,3632,1,0,0,0,3635,3633,1,0,0,0,3635,3634,1,0,0,0,3636,531,1,0,
  	0,0,3637,3638,5,374,0,0,3638,3647,5,26,0,0,3639,3644,3,534,267,0,3640,
  	3641,5,15,0,0,3641,3643,3,534,267,0,3642,3640,1,0,0,0,3643,3646,1,0,0,
  	0,3644,3642,1,0,0,0,3644,3645,1,0,0,0,3645,3648,1,0,0,0,3646,3644,1,0,
  	0,0,3647,3639,1,0,0,0,3647,3648,1,0,0,0,3648,3649,1,0,0,0,3649,3650,5,
  	27,0,0,3650,533,1,0,0,0,3651,3661,3,736,368,0,3652,3661,3,598,299,0,3653,
  	3661,3,622,311,0,3654,3661,3,674,337,0,3655,3661,3,708,354,0,3656,3661,
  	3,600,300,0,3657,3661,3,610,305,0,3658,3661,3,616,308,0,3659,3661,3,620,
  	310,0,3660,3651,1,0,0,0,3660,3652,1,0,0,0,3660,3653,1,0,0,0,3660,3654,
  	1,0,0,0,3660,3655,1,0,0,0,3660,3656,1,0,0,0,3660,3657,1,0,0,0,3660,3658,
  	1,0,0,0,3660,3659,1,0,0,0,3661,535,1,0,0,0,3662,3663,5,375,0,0,3663,3672,
  	5,26,0,0,3664,3669,3,538,269,0,3665,3666,5,15,0,0,3666,3668,3,538,269,
  	0,3667,3665,1,0,0,0,3668,3671,1,0,0,0,3669,3667,1,0,0,0,3669,3670,1,0,
  	0,0,3670,3673,1,0,0,0,3671,3669,1,0,0,0,3672,3664,1,0,0,0,3672,3673,1,
  	0,0,0,3673,3674,1,0,0,0,3674,3675,5,27,0,0,3675,537,1,0,0,0,3676,3682,
  	3,708,354,0,3677,3682,3,634,317,0,3678,3682,3,736,368,0,3679,3682,3,690,
  	345,0,3680,3682,3,696,348,0,3681,3676,1,0,0,0,3681,3677,1,0,0,0,3681,
  	3678,1,0,0,0,3681,3679,1,0,0,0,3681,3680,1,0,0,0,3682,539,1,0,0,0,3683,
  	3684,5,376,0,0,3684,3693,5,26,0,0,3685,3690,3,542,271,0,3686,3687,5,15,
  	0,0,3687,3689,3,542,271,0,3688,3686,1,0,0,0,3689,3692,1,0,0,0,3690,3688,
  	1,0,0,0,3690,3691,1,0,0,0,3691,3694,1,0,0,0,3692,3690,1,0,0,0,3693,3685,
  	1,0,0,0,3693,3694,1,0,0,0,3694,3695,1,0,0,0,3695,3696,5,27,0,0,3696,541,
  	1,0,0,0,3697,3702,3,772,386,0,3698,3702,3,708,354,0,3699,3702,3,598,299,
  	0,3700,3702,3,782,391,0,3701,3697,1,0,0,0,3701,3698,1,0,0,0,3701,3699,
  	1,0,0,0,3701,3700,1,0,0,0,3702,543,1,0,0,0,3703,3704,5,377,0,0,3704,3713,
  	5,26,0,0,3705,3710,3,546,273,0,3706,3707,5,15,0,0,3707,3709,3,546,273,
  	0,3708,3706,1,0,0,0,3709,3712,1,0,0,0,3710,3708,1,0,0,0,3710,3711,1,0,
  	0,0,3711,3714,1,0,0,0,3712,3710,1,0,0,0,3713,3705,1,0,0,0,3713,3714,1,
  	0,0,0,3714,3715,1,0,0,0,3715,3716,5,27,0,0,3716,545,1,0,0,0,3717,3722,
  	3,772,386,0,3718,3722,3,708,354,0,3719,3722,3,674,337,0,3720,3722,3,718,
  	359,0,3721,3717,1,0,0,0,3721,3718,1,0,0,0,3721,3719,1,0,0,0,3721,3720,
  	1,0,0,0,3722,547,1,0,0,0,3723,3724,5,378,0,0,3724,3733,5,26,0,0,3725,
  	3730,3,550,275,0,3726,3727,5,15,0,0,3727,3729,3,550,275,0,3728,3726,1,
  	0,0,0,3729,3732,1,0,0,0,3730,3728,1,0,0,0,3730,3731,1,0,0,0,3731,3734,
  	1,0,0,0,3732,3730,1,0,0,0,3733,3725,1,0,0,0,3733,3734,1,0,0,0,3734,3735,
  	1,0,0,0,3735,3736,5,27,0,0,3736,549,1,0,0,0,3737,3746,3,736,368,0,3738,
  	3746,3,598,299,0,3739,3746,3,636,318,0,3740,3746,3,688,344,0,3741,3746,
  	3,704,352,0,3742,3746,3,674,337,0,3743,3746,3,708,354,0,3744,3746,3,692,
  	346,0,3745,3737,1,0,0,0,3745,3738,1,0,0,0,3745,3739,1,0,0,0,3745,3740,
  	1,0,0,0,3745,3741,1,0,0,0,3745,3742,1,0,0,0,3745,3743,1,0,0,0,3745,3744,
  	1,0,0,0,3746,551,1,0,0,0,3747,3748,5,379,0,0,3748,3757,5,26,0,0,3749,
  	3754,3,554,277,0,3750,3751,5,15,0,0,3751,3753,3,554,277,0,3752,3750,1,
  	0,0,0,3753,3756,1,0,0,0,3754,3752,1,0,0,0,3754,3755,1,0,0,0,3755,3758,
  	1,0,0,0,3756,3754,1,0,0,0,3757,3749,1,0,0,0,3757,3758,1,0,0,0,3758,3759,
  	1,0,0,0,3759,3760,5,27,0,0,3760,553,1,0,0,0,3761,3765,3,736,368,0,3762,
  	3765,3,598,299,0,3763,3765,3,668,334,0,3764,3761,1,0,0,0,3764,3762,1,
  	0,0,0,3764,3763,1,0,0,0,3765,555,1,0,0,0,3766,3767,5,380,0,0,3767,3776,
  	5,26,0,0,3768,3773,3,558,279,0,3769,3770,5,15,0,0,3770,3772,3,558,279,
  	0,3771,3769,1,0,0,0,3772,3775,1,0,0,0,3773,3771,1,0,0,0,3773,3774,1,0,
  	0,0,3774,3777,1,0,0,0,3775,3773,1,0,0,0,3776,3768,1,0,0,0,3776,3777,1,
  	0,0,0,3777,3778,1,0,0,0,3778,3779,5,27,0,0,3779,557,1,0,0,0,3780,3788,
  	3,598,299,0,3781,3788,3,674,337,0,3782,3788,3,708,354,0,3783,3788,3,742,
  	371,0,3784,3788,3,680,340,0,3785,3788,3,626,313,0,3786,3788,3,600,300,
  	0,3787,3780,1,0,0,0,3787,3781,1,0,0,0,3787,3782,1,0,0,0,3787,3783,1,0,
  	0,0,3787,3784,1,0,0,0,3787,3785,1,0,0,0,3787,3786,1,0,0,0,3788,559,1,
  	0,0,0,3789,3790,5,381,0,0,3790,3799,5,26,0,0,3791,3796,3,562,281,0,3792,
  	3793,5,15,0,0,3793,3795,3,562,281,0,3794,3792,1,0,0,0,3795,3798,1,0,0,
  	0,3796,3794,1,0,0,0,3796,3797,1,0,0,0,3797,3800,1,0,0,0,3798,3796,1,0,
  	0,0,3799,3791,1,0,0,0,3799,3800,1,0,0,0,3800,3801,1,0,0,0,3801,3802,5,
  	27,0,0,3802,561,1,0,0,0,3803,3812,3,590,295,0,3804,3812,3,598,299,0,3805,
  	3812,3,756,378,0,3806,3812,3,758,379,0,3807,3812,3,760,380,0,3808,3812,
  	3,744,372,0,3809,3812,3,616,308,0,3810,3812,3,662,331,0,3811,3803,1,0,
  	0,0,3811,3804,1,0,0,0,3811,3805,1,0,0,0,3811,3806,1,0,0,0,3811,3807,1,
  	0,0,0,3811,3808,1,0,0,0,3811,3809,1,0,0,0,3811,3810,1,0,0,0,3812,563,
  	1,0,0,0,3813,3814,5,382,0,0,3814,3823,5,26,0,0,3815,3820,3,566,283,0,
  	3816,3817,5,15,0,0,3817,3819,3,566,283,0,3818,3816,1,0,0,0,3819,3822,
  	1,0,0,0,3820,3818,1,0,0,0,3820,3821,1,0,0,0,3821,3824,1,0,0,0,3822,3820,
  	1,0,0,0,3823,3815,1,0,0,0,3823,3824,1,0,0,0,3824,3825,1,0,0,0,3825,3826,
  	5,27,0,0,3826,565,1,0,0,0,3827,3851,3,736,368,0,3828,3851,3,598,299,0,
  	3829,3851,3,710,355,0,3830,3851,3,674,337,0,3831,3851,3,708,354,0,3832,
  	3851,3,600,300,0,3833,3851,3,698,349,0,3834,3851,3,694,347,0,3835,3851,
  	3,738,369,0,3836,3851,3,638,319,0,3837,3851,3,788,394,0,3838,3851,3,786,
  	393,0,3839,3851,3,768,384,0,3840,3851,3,610,305,0,3841,3851,3,748,374,
  	0,3842,3851,3,700,350,0,3843,3851,3,776,388,0,3844,3851,3,766,383,0,3845,
  	3851,3,644,322,0,3846,3851,3,728,364,0,3847,3851,3,770,385,0,3848,3851,
  	3,620,310,0,3849,3851,3,764,382,0,3850,3827,1,0,0,0,3850,3828,1,0,0,0,
  	3850,3829,1,0,0,0,3850,3830,1,0,0,0,3850,3831,1,0,0,0,3850,3832,1,0,0,
  	0,3850,3833,1,0,0,0,3850,3834,1,0,0,0,3850,3835,1,0,0,0,3850,3836,1,0,
  	0,0,3850,3837,1,0,0,0,3850,3838,1,0,0,0,3850,3839,1,0,0,0,3850,3840,1,
  	0,0,0,3850,3841,1,0,0,0,3850,3842,1,0,0,0,3850,3843,1,0,0,0,3850,3844,
  	1,0,0,0,3850,3845,1,0,0,0,3850,3846,1,0,0,0,3850,3847,1,0,0,0,3850,3848,
  	1,0,0,0,3850,3849,1,0,0,0,3851,567,1,0,0,0,3852,3853,5,383,0,0,3853,3862,
  	5,26,0,0,3854,3859,3,570,285,0,3855,3856,5,15,0,0,3856,3858,3,570,285,
  	0,3857,3855,1,0,0,0,3858,3861,1,0,0,0,3859,3857,1,0,0,0,3859,3860,1,0,
  	0,0,3860,3863,1,0,0,0,3861,3859,1,0,0,0,3862,3854,1,0,0,0,3862,3863,1,
  	0,0,0,3863,3864,1,0,0,0,3864,3865,5,27,0,0,3865,569,1,0,0,0,3866,3871,
  	3,640,320,0,3867,3871,3,712,356,0,3868,3871,3,778,389,0,3869,3871,3,754,
  	377,0,3870,3866,1,0,0,0,3870,3867,1,0,0,0,3870,3868,1,0,0,0,3870,3869,
  	1,0,0,0,3871,571,1,0,0,0,3872,3873,5,384,0,0,3873,3882,5,26,0,0,3874,
  	3879,3,608,304,0,3875,3876,5,15,0,0,3876,3878,3,608,304,0,3877,3875,1,
  	0,0,0,3878,3881,1,0,0,0,3879,3877,1,0,0,0,3879,3880,1,0,0,0,3880,3883,
  	1,0,0,0,3881,3879,1,0,0,0,3882,3874,1,0,0,0,3882,3883,1,0,0,0,3883,3884,
  	1,0,0,0,3884,3885,5,27,0,0,3885,573,1,0,0,0,3886,3887,5,385,0,0,3887,
  	3896,5,26,0,0,3888,3893,3,580,290,0,3889,3890,5,15,0,0,3890,3892,3,580,
  	290,0,3891,3889,1,0,0,0,3892,3895,1,0,0,0,3893,3891,1,0,0,0,3893,3894,
  	1,0,0,0,3894,3897,1,0,0,0,3895,3893,1,0,0,0,3896,3888,1,0,0,0,3896,3897,
  	1,0,0,0,3897,3898,1,0,0,0,3898,3899,5,27,0,0,3899,575,1,0,0,0,3900,3901,
  	5,386,0,0,3901,3906,5,26,0,0,3902,3903,3,596,298,0,3903,3904,5,15,0,0,
  	3904,3905,3,596,298,0,3905,3907,1,0,0,0,3906,3902,1,0,0,0,3906,3907,1,
  	0,0,0,3907,3908,1,0,0,0,3908,3909,5,27,0,0,3909,577,1,0,0,0,3910,3911,
  	5,387,0,0,3911,3920,5,26,0,0,3912,3917,3,588,294,0,3913,3914,5,15,0,0,
  	3914,3916,3,588,294,0,3915,3913,1,0,0,0,3916,3919,1,0,0,0,3917,3915,1,
  	0,0,0,3917,3918,1,0,0,0,3918,3921,1,0,0,0,3919,3917,1,0,0,0,3920,3912,
  	1,0,0,0,3920,3921,1,0,0,0,3921,3922,1,0,0,0,3922,3923,5,27,0,0,3923,579,
  	1,0,0,0,3924,3928,3,598,299,0,3925,3928,3,600,300,0,3926,3928,3,602,301,
  	0,3927,3924,1,0,0,0,3927,3925,1,0,0,0,3927,3926,1,0,0,0,3928,581,1,0,
  	0,0,3929,3950,3,706,353,0,3930,3950,3,674,337,0,3931,3950,3,722,361,0,
  	3932,3950,3,700,350,0,3933,3950,3,678,339,0,3934,3950,3,734,367,0,3935,
  	3950,3,750,375,0,3936,3950,3,660,330,0,3937,3950,3,666,333,0,3938,3950,
  	3,730,365,0,3939,3950,3,682,341,0,3940,3950,3,686,343,0,3941,3950,3,714,
  	357,0,3942,3950,3,656,328,0,3943,3950,3,752,376,0,3944,3950,3,642,321,
  	0,3945,3950,3,716,358,0,3946,3950,3,724,362,0,3947,3950,3,762,381,0,3948,
  	3950,3,740,370,0,3949,3929,1,0,0,0,3949,3930,1,0,0,0,3949,3931,1,0,0,
  	0,3949,3932,1,0,0,0,3949,3933,1,0,0,0,3949,3934,1,0,0,0,3949,3935,1,0,
  	0,0,3949,3936,1,0,0,0,3949,3937,1,0,0,0,3949,3938,1,0,0,0,3949,3939,1,
  	0,0,0,3949,3940,1,0,0,0,3949,3941,1,0,0,0,3949,3942,1,0,0,0,3949,3943,
  	1,0,0,0,3949,3944,1,0,0,0,3949,3945,1,0,0,0,3949,3946,1,0,0,0,3949,3947,
  	1,0,0,0,3949,3948,1,0,0,0,3950,583,1,0,0,0,3951,3957,3,736,368,0,3952,
  	3957,3,644,322,0,3953,3957,3,598,299,0,3954,3957,3,674,337,0,3955,3957,
  	3,708,354,0,3956,3951,1,0,0,0,3956,3952,1,0,0,0,3956,3953,1,0,0,0,3956,
  	3954,1,0,0,0,3956,3955,1,0,0,0,3957,585,1,0,0,0,3958,3965,3,590,295,0,
  	3959,3965,3,598,299,0,3960,3965,3,744,372,0,3961,3965,3,616,308,0,3962,
  	3965,3,662,331,0,3963,3965,3,610,305,0,3964,3958,1,0,0,0,3964,3959,1,
  	0,0,0,3964,3960,1,0,0,0,3964,3961,1,0,0,0,3964,3962,1,0,0,0,3964,3963,
  	1,0,0,0,3965,587,1,0,0,0,3966,3970,3,590,295,0,3967,3970,3,592,296,0,
  	3968,3970,3,594,297,0,3969,3966,1,0,0,0,3969,3967,1,0,0,0,3969,3968,1,
  	0,0,0,3970,589,1,0,0,0,3971,3972,5,388,0,0,3972,3973,5,501,0,0,3973,591,
  	1,0,0,0,3974,3975,5,389,0,0,3975,3976,5,492,0,0,3976,593,1,0,0,0,3977,
  	3978,5,390,0,0,3978,3987,5,21,0,0,3979,3984,3,606,303,0,3980,3981,5,15,
  	0,0,3981,3983,3,606,303,0,3982,3980,1,0,0,0,3983,3986,1,0,0,0,3984,3982,
  	1,0,0,0,3984,3985,1,0,0,0,3985,3988,1,0,0,0,3986,3984,1,0,0,0,3987,3979,
  	1,0,0,0,3987,3988,1,0,0,0,3988,3989,1,0,0,0,3989,3990,5,22,0,0,3990,595,
  	1,0,0,0,3991,3997,3,590,295,0,3992,3997,3,598,299,0,3993,3997,3,600,300,
  	0,3994,3997,3,602,301,0,3995,3997,3,604,302,0,3996,3991,1,0,0,0,3996,
  	3992,1,0,0,0,3996,3993,1,0,0,0,3996,3994,1,0,0,0,3996,3995,1,0,0,0,3997,
  	597,1,0,0,0,3998,3999,5,391,0,0,3999,4000,5,492,0,0,4000,599,1,0,0,0,
  	4001,4002,5,392,0,0,4002,4003,3,606,303,0,4003,601,1,0,0,0,4004,4005,
  	5,393,0,0,4005,4006,3,118,59,0,4006,603,1,0,0,0,4007,4008,5,394,0,0,4008,
  	4009,3,606,303,0,4009,605,1,0,0,0,4010,4013,3,124,62,0,4011,4013,3,156,
  	78,0,4012,4010,1,0,0,0,4012,4011,1,0,0,0,4013,607,1,0,0,0,4014,4018,3,
  	610,305,0,4015,4018,3,614,307,0,4016,4018,3,774,387,0,4017,4014,1,0,0,
  	0,4017,4015,1,0,0,0,4017,4016,1,0,0,0,4018,609,1,0,0,0,4019,4020,5,395,
  	0,0,4020,4021,3,612,306,0,4021,611,1,0,0,0,4022,4027,5,503,0,0,4023,4024,
  	5,396,0,0,4024,4026,5,503,0,0,4025,4023,1,0,0,0,4026,4029,1,0,0,0,4027,
  	4025,1,0,0,0,4027,4028,1,0,0,0,4028,613,1,0,0,0,4029,4027,1,0,0,0,4030,
  	4031,5,397,0,0,4031,4034,5,506,0,0,4032,4034,5,490,0,0,4033,4030,1,0,
  	0,0,4033,4032,1,0,0,0,4034,615,1,0,0,0,4035,4036,5,398,0,0,4036,4037,
  	5,490,0,0,4037,617,1,0,0,0,4038,4039,5,399,0,0,4039,4040,3,606,303,0,
  	4040,619,1,0,0,0,4041,4042,5,400,0,0,4042,4043,3,606,303,0,4043,621,1,
  	0,0,0,4044,4045,5,401,0,0,4045,4046,5,490,0,0,4046,623,1,0,0,0,4047,4048,
  	5,402,0,0,4048,4049,3,606,303,0,4049,625,1,0,0,0,4050,4051,5,403,0,0,
  	4051,4052,5,490,0,0,4052,627,1,0,0,0,4053,4054,5,404,0,0,4054,4055,3,
  	606,303,0,4055,629,1,0,0,0,4056,4057,5,405,0,0,4057,4058,5,492,0,0,4058,
  	631,1,0,0,0,4059,4060,5,406,0,0,4060,4061,5,507,0,0,4061,633,1,0,0,0,
  	4062,4063,5,407,0,0,4063,4064,5,490,0,0,4064,635,1,0,0,0,4065,4066,5,
  	408,0,0,4066,4067,5,492,0,0,4067,637,1,0,0,0,4068,4069,5,409,0,0,4069,
  	4070,3,606,303,0,4070,639,1,0,0,0,4071,4072,5,410,0,0,4072,4073,3,168,
  	84,0,4073,641,1,0,0,0,4074,4075,5,411,0,0,4075,4076,3,118,59,0,4076,643,
  	1,0,0,0,4077,4078,5,412,0,0,4078,4079,3,606,303,0,4079,645,1,0,0,0,4080,
  	4081,5,413,0,0,4081,4082,5,492,0,0,4082,647,1,0,0,0,4083,4084,5,414,0,
  	0,4084,4085,3,606,303,0,4085,649,1,0,0,0,4086,4087,5,415,0,0,4087,4088,
  	3,606,303,0,4088,651,1,0,0,0,4089,4090,5,414,0,0,4090,4091,5,490,0,0,
  	4091,653,1,0,0,0,4092,4093,5,416,0,0,4093,4094,5,490,0,0,4094,655,1,0,
  	0,0,4095,4096,5,417,0,0,4096,4097,5,490,0,0,4097,657,1,0,0,0,4098,4099,
  	5,418,0,0,4099,4100,3,606,303,0,4100,659,1,0,0,0,4101,4102,5,419,0,0,
  	4102,4103,7,28,0,0,4103,661,1,0,0,0,4104,4105,5,424,0,0,4105,4106,7,29,
  	0,0,4106,663,1,0,0,0,4107,4108,5,425,0,0,4108,4109,3,606,303,0,4109,665,
  	1,0,0,0,4110,4111,5,426,0,0,4111,4112,3,606,303,0,4112,667,1,0,0,0,4113,
  	4114,5,427,0,0,4114,4115,3,118,59,0,4115,669,1,0,0,0,4116,4117,5,428,
  	0,0,4117,4118,3,606,303,0,4118,671,1,0,0,0,4119,4120,5,429,0,0,4120,4121,
  	3,606,303,0,4121,673,1,0,0,0,4122,4123,5,430,0,0,4123,4124,3,606,303,
  	0,4124,675,1,0,0,0,4125,4126,5,431,0,0,4126,4127,5,492,0,0,4127,677,1,
  	0,0,0,4128,4129,5,395,0,0,4129,4130,5,492,0,0,4130,679,1,0,0,0,4131,4132,
  	5,432,0,0,4132,4133,5,492,0,0,4133,681,1,0,0,0,4134,4135,5,433,0,0,4135,
  	4136,3,606,303,0,4136,683,1,0,0,0,4137,4138,5,434,0,0,4138,4139,5,492,
  	0,0,4139,685,1,0,0,0,4140,4141,5,435,0,0,4141,4142,3,606,303,0,4142,687,
  	1,0,0,0,4143,4144,5,436,0,0,4144,4145,5,492,0,0,4145,689,1,0,0,0,4146,
  	4147,5,437,0,0,4147,4148,3,606,303,0,4148,691,1,0,0,0,4149,4150,5,438,
  	0,0,4150,4151,3,118,59,0,4151,693,1,0,0,0,4152,4153,5,439,0,0,4153,4154,
  	3,118,59,0,4154,695,1,0,0,0,4155,4156,5,440,0,0,4156,4157,3,118,59,0,
  	4157,697,1,0,0,0,4158,4159,5,441,0,0,4159,4160,3,118,59,0,4160,699,1,
  	0,0,0,4161,4162,5,442,0,0,4162,4163,3,118,59,0,4163,701,1,0,0,0,4164,
  	4165,5,443,0,0,4165,4166,3,118,59,0,4166,703,1,0,0,0,4167,4168,5,444,
  	0,0,4168,4169,5,492,0,0,4169,705,1,0,0,0,4170,4171,5,445,0,0,4171,4172,
  	5,505,0,0,4172,707,1,0,0,0,4173,4174,5,446,0,0,4174,4175,5,490,0,0,4175,
  	709,1,0,0,0,4176,4177,5,447,0,0,4177,4178,5,492,0,0,4178,711,1,0,0,0,
  	4179,4180,5,448,0,0,4180,4181,3,168,84,0,4181,713,1,0,0,0,4182,4183,5,
  	449,0,0,4183,4184,3,606,303,0,4184,715,1,0,0,0,4185,4186,5,450,0,0,4186,
  	4187,7,30,0,0,4187,717,1,0,0,0,4188,4189,5,454,0,0,4189,4190,3,606,303,
  	0,4190,719,1,0,0,0,4191,4192,5,455,0,0,4192,4193,5,490,0,0,4193,721,1,
  	0,0,0,4194,4195,5,456,0,0,4195,4196,5,492,0,0,4196,723,1,0,0,0,4197,4198,
  	5,457,0,0,4198,4199,3,118,59,0,4199,725,1,0,0,0,4200,4201,5,458,0,0,4201,
  	4202,3,168,84,0,4202,727,1,0,0,0,4203,4204,5,459,0,0,4204,4205,3,606,
  	303,0,4205,729,1,0,0,0,4206,4207,5,460,0,0,4207,4208,3,606,303,0,4208,
  	731,1,0,0,0,4209,4210,5,461,0,0,4210,4211,5,505,0,0,4211,733,1,0,0,0,
  	4212,4213,5,462,0,0,4213,4214,5,490,0,0,4214,735,1,0,0,0,4215,4216,5,
  	463,0,0,4216,4217,3,606,303,0,4217,737,1,0,0,0,4218,4219,5,464,0,0,4219,
  	4220,5,490,0,0,4220,739,1,0,0,0,4221,4222,5,465,0,0,4222,4223,5,492,0,
  	0,4223,741,1,0,0,0,4224,4225,5,466,0,0,4225,4226,5,492,0,0,4226,743,1,
  	0,0,0,4227,4228,5,467,0,0,4228,4229,5,490,0,0,4229,745,1,0,0,0,4230,4231,
  	5,468,0,0,4231,4232,5,492,0,0,4232,747,1,0,0,0,4233,4234,5,469,0,0,4234,
  	4239,3,170,85,0,4235,4236,5,396,0,0,4236,4238,3,170,85,0,4237,4235,1,
  	0,0,0,4238,4241,1,0,0,0,4239,4237,1,0,0,0,4239,4240,1,0,0,0,4240,749,
  	1,0,0,0,4241,4239,1,0,0,0,4242,4243,5,470,0,0,4243,4244,5,492,0,0,4244,
  	751,1,0,0,0,4245,4246,5,471,0,0,4246,4247,3,118,59,0,4247,753,1,0,0,0,
  	4248,4249,5,472,0,0,4249,4250,3,168,84,0,4250,755,1,0,0,0,4251,4252,5,
  	473,0,0,4252,4253,3,606,303,0,4253,757,1,0,0,0,4254,4255,5,474,0,0,4255,
  	4256,3,606,303,0,4256,759,1,0,0,0,4257,4258,5,475,0,0,4258,4259,3,606,
  	303,0,4259,761,1,0,0,0,4260,4261,5,476,0,0,4261,4262,5,492,0,0,4262,763,
  	1,0,0,0,4263,4264,5,477,0,0,4264,4265,5,492,0,0,4265,765,1,0,0,0,4266,
  	4267,5,478,0,0,4267,4268,3,606,303,0,4268,767,1,0,0,0,4269,4270,5,479,
  	0,0,4270,4271,5,490,0,0,4271,769,1,0,0,0,4272,4273,5,480,0,0,4273,4274,
  	3,606,303,0,4274,771,1,0,0,0,4275,4276,5,392,0,0,4276,4277,5,509,0,0,
  	4277,773,1,0,0,0,4278,4279,5,481,0,0,4279,4280,3,606,303,0,4280,775,1,
  	0,0,0,4281,4282,5,482,0,0,4282,4283,3,606,303,0,4283,777,1,0,0,0,4284,
  	4285,5,483,0,0,4285,4286,3,168,84,0,4286,779,1,0,0,0,4287,4288,5,394,
  	0,0,4288,4289,5,490,0,0,4289,781,1,0,0,0,4290,4291,5,394,0,0,4291,4292,
  	5,492,0,0,4292,783,1,0,0,0,4293,4294,5,484,0,0,4294,4295,3,606,303,0,
  	4295,785,1,0,0,0,4296,4297,5,485,0,0,4297,4298,5,490,0,0,4298,787,1,0,
  	0,0,4299,4300,5,486,0,0,4300,4301,5,508,0,0,4301,789,1,0,0,0,4302,4303,
  	5,487,0,0,4303,4304,3,606,303,0,4304,791,1,0,0,0,377,795,802,833,853,
  	856,859,862,865,868,871,879,886,892,898,901,904,907,910,913,916,919,928,
  	935,941,947,950,953,956,959,962,972,979,989,1001,1015,1018,1025,1029,
  	1040,1056,1062,1065,1068,1071,1074,1079,1088,1091,1096,1104,1108,1122,
  	1139,1145,1150,1156,1161,1170,1183,1192,1200,1210,1213,1221,1235,1246,
  	1254,1264,1266,1273,1282,1294,1306,1314,1319,1324,1328,1338,1347,1351,
  	1361,1366,1371,1375,1385,1394,1398,1408,1411,1418,1433,1446,1453,1458,
  	1467,1470,1481,1490,1511,1529,1532,1542,1545,1549,1559,1562,1565,1573,
  	1576,1629,1640,1649,1652,1662,1671,1674,1684,1688,1691,1694,1697,1708,
  	1724,1740,1749,1752,1754,1758,1765,1770,1772,1778,1782,1796,1810,1835,
  	1844,1852,1855,1867,1877,1903,1915,1923,1928,1944,1960,1963,1973,1976,
  	1980,1990,2002,2015,2025,2031,2173,2184,2194,2227,2240,2253,2323,2327,
  	2334,2340,2346,2352,2357,2363,2366,2375,2382,2389,2397,2404,2414,2421,
  	2431,2438,2448,2455,2465,2472,2482,2489,2499,2504,2513,2518,2527,2534,
  	2544,2555,2566,2573,2583,2590,2600,2605,2614,2619,2628,2639,2650,2661,
  	2672,2685,2698,2707,2713,2724,2730,2735,2738,2743,2747,2751,2757,2762,
  	2769,2775,2781,2787,2792,2798,2801,2805,2808,2816,2822,2828,2833,2840,
  	2845,2851,2856,2865,2872,2883,2894,2905,2916,2927,2938,2949,2960,2971,
  	2982,2993,3004,3015,3027,3034,3045,3052,3061,3068,3075,3087,3094,3100,
  	3104,3109,3113,3123,3132,3137,3143,3154,3160,3165,3172,3184,3187,3194,
  	3206,3209,3216,3232,3235,3243,3250,3255,3257,3263,3271,3279,3283,3291,
  	3359,3368,3371,3382,3385,3396,3399,3410,3413,3438,3447,3450,3467,3476,
  	3479,3486,3495,3498,3507,3516,3519,3535,3544,3547,3553,3562,3565,3576,
  	3585,3588,3596,3605,3608,3616,3625,3628,3635,3644,3647,3660,3669,3672,
  	3681,3690,3693,3701,3710,3713,3721,3730,3733,3745,3754,3757,3764,3773,
  	3776,3787,3796,3799,3811,3820,3823,3850,3859,3862,3870,3879,3882,3893,
  	3896,3906,3917,3920,3927,3949,3956,3964,3969,3984,3987,3996,4012,4017,
  	4027,4033,4239
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  llvmirParserStaticData = std::move(staticData);
}

}

LLVMIRParser::LLVMIRParser(TokenStream *input) : LLVMIRParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

LLVMIRParser::LLVMIRParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  LLVMIRParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *llvmirParserStaticData->atn, llvmirParserStaticData->decisionToDFA, llvmirParserStaticData->sharedContextCache, options);
}

LLVMIRParser::~LLVMIRParser() {
  delete _interpreter;
}

const atn::ATN& LLVMIRParser::getATN() const {
  return *llvmirParserStaticData->atn;
}

std::string LLVMIRParser::getGrammarFileName() const {
  return "LLVMIR.g4";
}

const std::vector<std::string>& LLVMIRParser::getRuleNames() const {
  return llvmirParserStaticData->ruleNames;
}

const dfa::Vocabulary& LLVMIRParser::getVocabulary() const {
  return llvmirParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView LLVMIRParser::getSerializedATN() const {
  return llvmirParserStaticData->serializedATN;
}


//----------------- CompilationUnitContext ------------------------------------------------------------------

LLVMIRParser::CompilationUnitContext::CompilationUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::CompilationUnitContext::EOF() {
  return getToken(LLVMIRParser::EOF, 0);
}

std::vector<LLVMIRParser::TopLevelEntityContext *> LLVMIRParser::CompilationUnitContext::topLevelEntity() {
  return getRuleContexts<LLVMIRParser::TopLevelEntityContext>();
}

LLVMIRParser::TopLevelEntityContext* LLVMIRParser::CompilationUnitContext::topLevelEntity(size_t i) {
  return getRuleContext<LLVMIRParser::TopLevelEntityContext>(i);
}


size_t LLVMIRParser::CompilationUnitContext::getRuleIndex() const {
  return LLVMIRParser::RuleCompilationUnit;
}


std::any LLVMIRParser::CompilationUnitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitCompilationUnit(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::CompilationUnitContext* LLVMIRParser::compilationUnit() {
  CompilationUnitContext *_localctx = _tracker.createInstance<CompilationUnitContext>(_ctx, getState());
  enterRule(_localctx, 0, LLVMIRParser::RuleCompilationUnit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(795);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 52166730) != 0) || ((((_la - 493) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 493)) & 115) != 0)) {
      setState(792);
      topLevelEntity();
      setState(797);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(798);
    match(LLVMIRParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TargetDefContext ------------------------------------------------------------------

LLVMIRParser::TargetDefContext::TargetDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TargetDataLayoutContext* LLVMIRParser::TargetDefContext::targetDataLayout() {
  return getRuleContext<LLVMIRParser::TargetDataLayoutContext>(0);
}

LLVMIRParser::TargetTripleContext* LLVMIRParser::TargetDefContext::targetTriple() {
  return getRuleContext<LLVMIRParser::TargetTripleContext>(0);
}


size_t LLVMIRParser::TargetDefContext::getRuleIndex() const {
  return LLVMIRParser::RuleTargetDef;
}


std::any LLVMIRParser::TargetDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitTargetDef(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::TargetDefContext* LLVMIRParser::targetDef() {
  TargetDefContext *_localctx = _tracker.createInstance<TargetDefContext>(_ctx, getState());
  enterRule(_localctx, 2, LLVMIRParser::RuleTargetDef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(802);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(800);
      targetDataLayout();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(801);
      targetTriple();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SourceFilenameContext ------------------------------------------------------------------

LLVMIRParser::SourceFilenameContext::SourceFilenameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::SourceFilenameContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::SourceFilenameContext::getRuleIndex() const {
  return LLVMIRParser::RuleSourceFilename;
}


std::any LLVMIRParser::SourceFilenameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitSourceFilename(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::SourceFilenameContext* LLVMIRParser::sourceFilename() {
  SourceFilenameContext *_localctx = _tracker.createInstance<SourceFilenameContext>(_ctx, getState());
  enterRule(_localctx, 4, LLVMIRParser::RuleSourceFilename);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(804);
    match(LLVMIRParser::T__0);
    setState(805);
    match(LLVMIRParser::T__1);
    setState(806);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TargetDataLayoutContext ------------------------------------------------------------------

LLVMIRParser::TargetDataLayoutContext::TargetDataLayoutContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::TargetDataLayoutContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::TargetDataLayoutContext::getRuleIndex() const {
  return LLVMIRParser::RuleTargetDataLayout;
}


std::any LLVMIRParser::TargetDataLayoutContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitTargetDataLayout(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::TargetDataLayoutContext* LLVMIRParser::targetDataLayout() {
  TargetDataLayoutContext *_localctx = _tracker.createInstance<TargetDataLayoutContext>(_ctx, getState());
  enterRule(_localctx, 6, LLVMIRParser::RuleTargetDataLayout);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(808);
    match(LLVMIRParser::T__2);
    setState(809);
    match(LLVMIRParser::T__3);
    setState(810);
    match(LLVMIRParser::T__1);
    setState(811);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TargetTripleContext ------------------------------------------------------------------

LLVMIRParser::TargetTripleContext::TargetTripleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::TargetTripleContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::TargetTripleContext::getRuleIndex() const {
  return LLVMIRParser::RuleTargetTriple;
}


std::any LLVMIRParser::TargetTripleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitTargetTriple(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::TargetTripleContext* LLVMIRParser::targetTriple() {
  TargetTripleContext *_localctx = _tracker.createInstance<TargetTripleContext>(_ctx, getState());
  enterRule(_localctx, 8, LLVMIRParser::RuleTargetTriple);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(813);
    match(LLVMIRParser::T__2);
    setState(814);
    match(LLVMIRParser::T__4);
    setState(815);
    match(LLVMIRParser::T__1);
    setState(816);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TopLevelEntityContext ------------------------------------------------------------------

LLVMIRParser::TopLevelEntityContext::TopLevelEntityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::SourceFilenameContext* LLVMIRParser::TopLevelEntityContext::sourceFilename() {
  return getRuleContext<LLVMIRParser::SourceFilenameContext>(0);
}

LLVMIRParser::TargetDefContext* LLVMIRParser::TopLevelEntityContext::targetDef() {
  return getRuleContext<LLVMIRParser::TargetDefContext>(0);
}

LLVMIRParser::ModuleAsmContext* LLVMIRParser::TopLevelEntityContext::moduleAsm() {
  return getRuleContext<LLVMIRParser::ModuleAsmContext>(0);
}

LLVMIRParser::TypeDefContext* LLVMIRParser::TopLevelEntityContext::typeDef() {
  return getRuleContext<LLVMIRParser::TypeDefContext>(0);
}

LLVMIRParser::ComdatDefContext* LLVMIRParser::TopLevelEntityContext::comdatDef() {
  return getRuleContext<LLVMIRParser::ComdatDefContext>(0);
}

LLVMIRParser::GlobalDeclContext* LLVMIRParser::TopLevelEntityContext::globalDecl() {
  return getRuleContext<LLVMIRParser::GlobalDeclContext>(0);
}

LLVMIRParser::GlobalDefContext* LLVMIRParser::TopLevelEntityContext::globalDef() {
  return getRuleContext<LLVMIRParser::GlobalDefContext>(0);
}

LLVMIRParser::IndirectSymbolDefContext* LLVMIRParser::TopLevelEntityContext::indirectSymbolDef() {
  return getRuleContext<LLVMIRParser::IndirectSymbolDefContext>(0);
}

LLVMIRParser::FuncDeclContext* LLVMIRParser::TopLevelEntityContext::funcDecl() {
  return getRuleContext<LLVMIRParser::FuncDeclContext>(0);
}

LLVMIRParser::FuncDefContext* LLVMIRParser::TopLevelEntityContext::funcDef() {
  return getRuleContext<LLVMIRParser::FuncDefContext>(0);
}

LLVMIRParser::AttrGroupDefContext* LLVMIRParser::TopLevelEntityContext::attrGroupDef() {
  return getRuleContext<LLVMIRParser::AttrGroupDefContext>(0);
}

LLVMIRParser::NamedMetadataDefContext* LLVMIRParser::TopLevelEntityContext::namedMetadataDef() {
  return getRuleContext<LLVMIRParser::NamedMetadataDefContext>(0);
}

LLVMIRParser::MetadataDefContext* LLVMIRParser::TopLevelEntityContext::metadataDef() {
  return getRuleContext<LLVMIRParser::MetadataDefContext>(0);
}

LLVMIRParser::UseListOrderContext* LLVMIRParser::TopLevelEntityContext::useListOrder() {
  return getRuleContext<LLVMIRParser::UseListOrderContext>(0);
}

LLVMIRParser::UseListOrderBBContext* LLVMIRParser::TopLevelEntityContext::useListOrderBB() {
  return getRuleContext<LLVMIRParser::UseListOrderBBContext>(0);
}


size_t LLVMIRParser::TopLevelEntityContext::getRuleIndex() const {
  return LLVMIRParser::RuleTopLevelEntity;
}


std::any LLVMIRParser::TopLevelEntityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitTopLevelEntity(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::TopLevelEntityContext* LLVMIRParser::topLevelEntity() {
  TopLevelEntityContext *_localctx = _tracker.createInstance<TopLevelEntityContext>(_ctx, getState());
  enterRule(_localctx, 10, LLVMIRParser::RuleTopLevelEntity);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(833);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(818);
      sourceFilename();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(819);
      targetDef();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(820);
      moduleAsm();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(821);
      typeDef();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(822);
      comdatDef();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(823);
      globalDecl();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(824);
      globalDef();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(825);
      indirectSymbolDef();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(826);
      funcDecl();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(827);
      funcDef();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(828);
      attrGroupDef();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(829);
      namedMetadataDef();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(830);
      metadataDef();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(831);
      useListOrder();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(832);
      useListOrderBB();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleAsmContext ------------------------------------------------------------------

LLVMIRParser::ModuleAsmContext::ModuleAsmContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::ModuleAsmContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::ModuleAsmContext::getRuleIndex() const {
  return LLVMIRParser::RuleModuleAsm;
}


std::any LLVMIRParser::ModuleAsmContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitModuleAsm(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ModuleAsmContext* LLVMIRParser::moduleAsm() {
  ModuleAsmContext *_localctx = _tracker.createInstance<ModuleAsmContext>(_ctx, getState());
  enterRule(_localctx, 12, LLVMIRParser::RuleModuleAsm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(835);
    match(LLVMIRParser::T__5);
    setState(836);
    match(LLVMIRParser::T__6);
    setState(837);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeDefContext ------------------------------------------------------------------

LLVMIRParser::TypeDefContext::TypeDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::TypeDefContext::LocalIdent() {
  return getToken(LLVMIRParser::LocalIdent, 0);
}

LLVMIRParser::TypeContext* LLVMIRParser::TypeDefContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}


size_t LLVMIRParser::TypeDefContext::getRuleIndex() const {
  return LLVMIRParser::RuleTypeDef;
}


std::any LLVMIRParser::TypeDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitTypeDef(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::TypeDefContext* LLVMIRParser::typeDef() {
  TypeDefContext *_localctx = _tracker.createInstance<TypeDefContext>(_ctx, getState());
  enterRule(_localctx, 14, LLVMIRParser::RuleTypeDef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(839);
    match(LLVMIRParser::LocalIdent);
    setState(840);
    match(LLVMIRParser::T__1);
    setState(841);
    match(LLVMIRParser::T__7);
    setState(842);
    type(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComdatDefContext ------------------------------------------------------------------

LLVMIRParser::ComdatDefContext::ComdatDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::ComdatDefContext::ComdatName() {
  return getToken(LLVMIRParser::ComdatName, 0);
}


size_t LLVMIRParser::ComdatDefContext::getRuleIndex() const {
  return LLVMIRParser::RuleComdatDef;
}


std::any LLVMIRParser::ComdatDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitComdatDef(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ComdatDefContext* LLVMIRParser::comdatDef() {
  ComdatDefContext *_localctx = _tracker.createInstance<ComdatDefContext>(_ctx, getState());
  enterRule(_localctx, 16, LLVMIRParser::RuleComdatDef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(844);
    match(LLVMIRParser::ComdatName);
    setState(845);
    match(LLVMIRParser::T__1);
    setState(846);
    match(LLVMIRParser::T__8);
    setState(847);
    antlrcpp::downCast<ComdatDefContext *>(_localctx)->selectionKind = _input->LT(1);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 31744) != 0))) {
      antlrcpp::downCast<ComdatDefContext *>(_localctx)->selectionKind = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlobalDeclContext ------------------------------------------------------------------

LLVMIRParser::GlobalDeclContext::GlobalDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::GlobalDeclContext::GlobalIdent() {
  return getToken(LLVMIRParser::GlobalIdent, 0);
}

LLVMIRParser::ExternalLinkageContext* LLVMIRParser::GlobalDeclContext::externalLinkage() {
  return getRuleContext<LLVMIRParser::ExternalLinkageContext>(0);
}

LLVMIRParser::ImmutableContext* LLVMIRParser::GlobalDeclContext::immutable() {
  return getRuleContext<LLVMIRParser::ImmutableContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::GlobalDeclContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

LLVMIRParser::PreemptionContext* LLVMIRParser::GlobalDeclContext::preemption() {
  return getRuleContext<LLVMIRParser::PreemptionContext>(0);
}

LLVMIRParser::VisibilityContext* LLVMIRParser::GlobalDeclContext::visibility() {
  return getRuleContext<LLVMIRParser::VisibilityContext>(0);
}

LLVMIRParser::DllStorageClassContext* LLVMIRParser::GlobalDeclContext::dllStorageClass() {
  return getRuleContext<LLVMIRParser::DllStorageClassContext>(0);
}

LLVMIRParser::ThreadLocalContext* LLVMIRParser::GlobalDeclContext::threadLocal() {
  return getRuleContext<LLVMIRParser::ThreadLocalContext>(0);
}

LLVMIRParser::UnnamedAddrContext* LLVMIRParser::GlobalDeclContext::unnamedAddr() {
  return getRuleContext<LLVMIRParser::UnnamedAddrContext>(0);
}

LLVMIRParser::AddrSpaceContext* LLVMIRParser::GlobalDeclContext::addrSpace() {
  return getRuleContext<LLVMIRParser::AddrSpaceContext>(0);
}

LLVMIRParser::ExternallyInitializedContext* LLVMIRParser::GlobalDeclContext::externallyInitialized() {
  return getRuleContext<LLVMIRParser::ExternallyInitializedContext>(0);
}

std::vector<LLVMIRParser::GlobalFieldContext *> LLVMIRParser::GlobalDeclContext::globalField() {
  return getRuleContexts<LLVMIRParser::GlobalFieldContext>();
}

LLVMIRParser::GlobalFieldContext* LLVMIRParser::GlobalDeclContext::globalField(size_t i) {
  return getRuleContext<LLVMIRParser::GlobalFieldContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::GlobalDeclContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::GlobalDeclContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}

std::vector<LLVMIRParser::FuncAttributeContext *> LLVMIRParser::GlobalDeclContext::funcAttribute() {
  return getRuleContexts<LLVMIRParser::FuncAttributeContext>();
}

LLVMIRParser::FuncAttributeContext* LLVMIRParser::GlobalDeclContext::funcAttribute(size_t i) {
  return getRuleContext<LLVMIRParser::FuncAttributeContext>(i);
}


size_t LLVMIRParser::GlobalDeclContext::getRuleIndex() const {
  return LLVMIRParser::RuleGlobalDecl;
}


std::any LLVMIRParser::GlobalDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitGlobalDecl(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::GlobalDeclContext* LLVMIRParser::globalDecl() {
  GlobalDeclContext *_localctx = _tracker.createInstance<GlobalDeclContext>(_ctx, getState());
  enterRule(_localctx, 18, LLVMIRParser::RuleGlobalDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(849);
    match(LLVMIRParser::GlobalIdent);
    setState(850);
    match(LLVMIRParser::T__1);
    setState(851);
    externalLinkage();
    setState(853);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__197

    || _la == LLVMIRParser::T__198) {
      setState(852);
      preemption();
    }
    setState(856);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 200) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 200)) & 7) != 0)) {
      setState(855);
      visibility();
    }
    setState(859);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__202

    || _la == LLVMIRParser::T__203) {
      setState(858);
      dllStorageClass();
    }
    setState(862);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__119) {
      setState(861);
      threadLocal();
    }
    setState(865);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__207

    || _la == LLVMIRParser::T__208) {
      setState(864);
      unnamedAddr();
    }
    setState(868);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__118) {
      setState(867);
      addrSpace();
    }
    setState(871);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__209) {
      setState(870);
      externallyInitialized();
    }
    setState(873);
    immutable();
    setState(874);
    type(0);
    setState(879);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(875);
        match(LLVMIRParser::T__14);
        setState(876);
        globalField(); 
      }
      setState(881);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx);
    }
    setState(886);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(882);
      match(LLVMIRParser::T__14);
      setState(883);
      metadataAttachment();
      setState(888);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(892);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 57) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 57)) & 45255899262222337) != 0) || ((((_la - 213) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 213)) & 1125899906842623) != 0) || _la == LLVMIRParser::StringLit

    || _la == LLVMIRParser::AttrGroupId) {
      setState(889);
      funcAttribute();
      setState(894);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlobalDefContext ------------------------------------------------------------------

LLVMIRParser::GlobalDefContext::GlobalDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::GlobalDefContext::GlobalIdent() {
  return getToken(LLVMIRParser::GlobalIdent, 0);
}

LLVMIRParser::ImmutableContext* LLVMIRParser::GlobalDefContext::immutable() {
  return getRuleContext<LLVMIRParser::ImmutableContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::GlobalDefContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

LLVMIRParser::ConstantContext* LLVMIRParser::GlobalDefContext::constant() {
  return getRuleContext<LLVMIRParser::ConstantContext>(0);
}

LLVMIRParser::InternalLinkageContext* LLVMIRParser::GlobalDefContext::internalLinkage() {
  return getRuleContext<LLVMIRParser::InternalLinkageContext>(0);
}

LLVMIRParser::PreemptionContext* LLVMIRParser::GlobalDefContext::preemption() {
  return getRuleContext<LLVMIRParser::PreemptionContext>(0);
}

LLVMIRParser::VisibilityContext* LLVMIRParser::GlobalDefContext::visibility() {
  return getRuleContext<LLVMIRParser::VisibilityContext>(0);
}

LLVMIRParser::DllStorageClassContext* LLVMIRParser::GlobalDefContext::dllStorageClass() {
  return getRuleContext<LLVMIRParser::DllStorageClassContext>(0);
}

LLVMIRParser::ThreadLocalContext* LLVMIRParser::GlobalDefContext::threadLocal() {
  return getRuleContext<LLVMIRParser::ThreadLocalContext>(0);
}

LLVMIRParser::UnnamedAddrContext* LLVMIRParser::GlobalDefContext::unnamedAddr() {
  return getRuleContext<LLVMIRParser::UnnamedAddrContext>(0);
}

LLVMIRParser::AddrSpaceContext* LLVMIRParser::GlobalDefContext::addrSpace() {
  return getRuleContext<LLVMIRParser::AddrSpaceContext>(0);
}

LLVMIRParser::ExternallyInitializedContext* LLVMIRParser::GlobalDefContext::externallyInitialized() {
  return getRuleContext<LLVMIRParser::ExternallyInitializedContext>(0);
}

std::vector<LLVMIRParser::GlobalFieldContext *> LLVMIRParser::GlobalDefContext::globalField() {
  return getRuleContexts<LLVMIRParser::GlobalFieldContext>();
}

LLVMIRParser::GlobalFieldContext* LLVMIRParser::GlobalDefContext::globalField(size_t i) {
  return getRuleContext<LLVMIRParser::GlobalFieldContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::GlobalDefContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::GlobalDefContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}

std::vector<LLVMIRParser::FuncAttributeContext *> LLVMIRParser::GlobalDefContext::funcAttribute() {
  return getRuleContexts<LLVMIRParser::FuncAttributeContext>();
}

LLVMIRParser::FuncAttributeContext* LLVMIRParser::GlobalDefContext::funcAttribute(size_t i) {
  return getRuleContext<LLVMIRParser::FuncAttributeContext>(i);
}


size_t LLVMIRParser::GlobalDefContext::getRuleIndex() const {
  return LLVMIRParser::RuleGlobalDef;
}


std::any LLVMIRParser::GlobalDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitGlobalDef(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::GlobalDefContext* LLVMIRParser::globalDef() {
  GlobalDefContext *_localctx = _tracker.createInstance<GlobalDefContext>(_ctx, getState());
  enterRule(_localctx, 20, LLVMIRParser::RuleGlobalDef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(895);
    match(LLVMIRParser::GlobalIdent);
    setState(896);
    match(LLVMIRParser::T__1);
    setState(898);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 173) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 173)) & 33423361) != 0)) {
      setState(897);
      internalLinkage();
    }
    setState(901);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__197

    || _la == LLVMIRParser::T__198) {
      setState(900);
      preemption();
    }
    setState(904);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 200) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 200)) & 7) != 0)) {
      setState(903);
      visibility();
    }
    setState(907);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__202

    || _la == LLVMIRParser::T__203) {
      setState(906);
      dllStorageClass();
    }
    setState(910);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__119) {
      setState(909);
      threadLocal();
    }
    setState(913);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__207

    || _la == LLVMIRParser::T__208) {
      setState(912);
      unnamedAddr();
    }
    setState(916);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__118) {
      setState(915);
      addrSpace();
    }
    setState(919);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__209) {
      setState(918);
      externallyInitialized();
    }
    setState(921);
    immutable();
    setState(922);
    type(0);
    setState(923);
    constant();
    setState(928);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(924);
        match(LLVMIRParser::T__14);
        setState(925);
        globalField(); 
      }
      setState(930);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
    }
    setState(935);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(931);
      match(LLVMIRParser::T__14);
      setState(932);
      metadataAttachment();
      setState(937);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(941);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 57) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 57)) & 45255899262222337) != 0) || ((((_la - 213) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 213)) & 1125899906842623) != 0) || _la == LLVMIRParser::StringLit

    || _la == LLVMIRParser::AttrGroupId) {
      setState(938);
      funcAttribute();
      setState(943);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndirectSymbolDefContext ------------------------------------------------------------------

LLVMIRParser::IndirectSymbolDefContext::IndirectSymbolDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::IndirectSymbolDefContext::GlobalIdent() {
  return getToken(LLVMIRParser::GlobalIdent, 0);
}

LLVMIRParser::TypeContext* LLVMIRParser::IndirectSymbolDefContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

LLVMIRParser::IndirectSymbolContext* LLVMIRParser::IndirectSymbolDefContext::indirectSymbol() {
  return getRuleContext<LLVMIRParser::IndirectSymbolContext>(0);
}

LLVMIRParser::LinkageContext* LLVMIRParser::IndirectSymbolDefContext::linkage() {
  return getRuleContext<LLVMIRParser::LinkageContext>(0);
}

LLVMIRParser::PreemptionContext* LLVMIRParser::IndirectSymbolDefContext::preemption() {
  return getRuleContext<LLVMIRParser::PreemptionContext>(0);
}

LLVMIRParser::VisibilityContext* LLVMIRParser::IndirectSymbolDefContext::visibility() {
  return getRuleContext<LLVMIRParser::VisibilityContext>(0);
}

LLVMIRParser::DllStorageClassContext* LLVMIRParser::IndirectSymbolDefContext::dllStorageClass() {
  return getRuleContext<LLVMIRParser::DllStorageClassContext>(0);
}

LLVMIRParser::ThreadLocalContext* LLVMIRParser::IndirectSymbolDefContext::threadLocal() {
  return getRuleContext<LLVMIRParser::ThreadLocalContext>(0);
}

LLVMIRParser::UnnamedAddrContext* LLVMIRParser::IndirectSymbolDefContext::unnamedAddr() {
  return getRuleContext<LLVMIRParser::UnnamedAddrContext>(0);
}

std::vector<LLVMIRParser::PartitionContext *> LLVMIRParser::IndirectSymbolDefContext::partition() {
  return getRuleContexts<LLVMIRParser::PartitionContext>();
}

LLVMIRParser::PartitionContext* LLVMIRParser::IndirectSymbolDefContext::partition(size_t i) {
  return getRuleContext<LLVMIRParser::PartitionContext>(i);
}


size_t LLVMIRParser::IndirectSymbolDefContext::getRuleIndex() const {
  return LLVMIRParser::RuleIndirectSymbolDef;
}


std::any LLVMIRParser::IndirectSymbolDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitIndirectSymbolDef(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::IndirectSymbolDefContext* LLVMIRParser::indirectSymbolDef() {
  IndirectSymbolDefContext *_localctx = _tracker.createInstance<IndirectSymbolDefContext>(_ctx, getState());
  enterRule(_localctx, 22, LLVMIRParser::RuleIndirectSymbolDef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(944);
    match(LLVMIRParser::GlobalIdent);
    setState(945);
    match(LLVMIRParser::T__1);
    setState(947);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 173) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 173)) & 33521665) != 0)) {
      setState(946);
      linkage();
    }
    setState(950);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__197

    || _la == LLVMIRParser::T__198) {
      setState(949);
      preemption();
    }
    setState(953);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 200) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 200)) & 7) != 0)) {
      setState(952);
      visibility();
    }
    setState(956);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__202

    || _la == LLVMIRParser::T__203) {
      setState(955);
      dllStorageClass();
    }
    setState(959);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__119) {
      setState(958);
      threadLocal();
    }
    setState(962);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__207

    || _la == LLVMIRParser::T__208) {
      setState(961);
      unnamedAddr();
    }
    setState(964);
    antlrcpp::downCast<IndirectSymbolDefContext *>(_localctx)->indirectSymbolKind = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == LLVMIRParser::T__15

    || _la == LLVMIRParser::T__16)) {
      antlrcpp::downCast<IndirectSymbolDefContext *>(_localctx)->indirectSymbolKind = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(965);
    type(0);
    setState(966);
    match(LLVMIRParser::T__14);
    setState(967);
    indirectSymbol();
    setState(972);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(968);
      match(LLVMIRParser::T__14);
      setState(969);
      partition();
      setState(974);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuncDeclContext ------------------------------------------------------------------

LLVMIRParser::FuncDeclContext::FuncDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::FuncHeaderContext* LLVMIRParser::FuncDeclContext::funcHeader() {
  return getRuleContext<LLVMIRParser::FuncHeaderContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::FuncDeclContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::FuncDeclContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::FuncDeclContext::getRuleIndex() const {
  return LLVMIRParser::RuleFuncDecl;
}


std::any LLVMIRParser::FuncDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFuncDecl(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FuncDeclContext* LLVMIRParser::funcDecl() {
  FuncDeclContext *_localctx = _tracker.createInstance<FuncDeclContext>(_ctx, getState());
  enterRule(_localctx, 24, LLVMIRParser::RuleFuncDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(975);
    match(LLVMIRParser::T__17);
    setState(979);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::MetadataName) {
      setState(976);
      metadataAttachment();
      setState(981);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(982);
    funcHeader();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuncDefContext ------------------------------------------------------------------

LLVMIRParser::FuncDefContext::FuncDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::FuncHeaderContext* LLVMIRParser::FuncDefContext::funcHeader() {
  return getRuleContext<LLVMIRParser::FuncHeaderContext>(0);
}

LLVMIRParser::FuncBodyContext* LLVMIRParser::FuncDefContext::funcBody() {
  return getRuleContext<LLVMIRParser::FuncBodyContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::FuncDefContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::FuncDefContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::FuncDefContext::getRuleIndex() const {
  return LLVMIRParser::RuleFuncDef;
}


std::any LLVMIRParser::FuncDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFuncDef(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FuncDefContext* LLVMIRParser::funcDef() {
  FuncDefContext *_localctx = _tracker.createInstance<FuncDefContext>(_ctx, getState());
  enterRule(_localctx, 26, LLVMIRParser::RuleFuncDef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(984);
    match(LLVMIRParser::T__18);
    setState(985);
    funcHeader();
    setState(989);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::MetadataName) {
      setState(986);
      metadataAttachment();
      setState(991);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(992);
    funcBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttrGroupDefContext ------------------------------------------------------------------

LLVMIRParser::AttrGroupDefContext::AttrGroupDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::AttrGroupDefContext::AttrGroupId() {
  return getToken(LLVMIRParser::AttrGroupId, 0);
}

std::vector<LLVMIRParser::FuncAttributeContext *> LLVMIRParser::AttrGroupDefContext::funcAttribute() {
  return getRuleContexts<LLVMIRParser::FuncAttributeContext>();
}

LLVMIRParser::FuncAttributeContext* LLVMIRParser::AttrGroupDefContext::funcAttribute(size_t i) {
  return getRuleContext<LLVMIRParser::FuncAttributeContext>(i);
}


size_t LLVMIRParser::AttrGroupDefContext::getRuleIndex() const {
  return LLVMIRParser::RuleAttrGroupDef;
}


std::any LLVMIRParser::AttrGroupDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAttrGroupDef(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AttrGroupDefContext* LLVMIRParser::attrGroupDef() {
  AttrGroupDefContext *_localctx = _tracker.createInstance<AttrGroupDefContext>(_ctx, getState());
  enterRule(_localctx, 28, LLVMIRParser::RuleAttrGroupDef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(994);
    match(LLVMIRParser::T__19);
    setState(995);
    match(LLVMIRParser::AttrGroupId);
    setState(996);
    match(LLVMIRParser::T__1);
    setState(997);
    match(LLVMIRParser::T__20);
    setState(1001);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 57) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 57)) & 45255899262222337) != 0) || ((((_la - 213) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 213)) & 1125899906842623) != 0) || _la == LLVMIRParser::StringLit

    || _la == LLVMIRParser::AttrGroupId) {
      setState(998);
      funcAttribute();
      setState(1003);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1004);
    match(LLVMIRParser::T__21);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedMetadataDefContext ------------------------------------------------------------------

LLVMIRParser::NamedMetadataDefContext::NamedMetadataDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::NamedMetadataDefContext::MetadataName() {
  return getToken(LLVMIRParser::MetadataName, 0);
}

std::vector<LLVMIRParser::MetadataNodeContext *> LLVMIRParser::NamedMetadataDefContext::metadataNode() {
  return getRuleContexts<LLVMIRParser::MetadataNodeContext>();
}

LLVMIRParser::MetadataNodeContext* LLVMIRParser::NamedMetadataDefContext::metadataNode(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataNodeContext>(i);
}


size_t LLVMIRParser::NamedMetadataDefContext::getRuleIndex() const {
  return LLVMIRParser::RuleNamedMetadataDef;
}


std::any LLVMIRParser::NamedMetadataDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitNamedMetadataDef(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::NamedMetadataDefContext* LLVMIRParser::namedMetadataDef() {
  NamedMetadataDefContext *_localctx = _tracker.createInstance<NamedMetadataDefContext>(_ctx, getState());
  enterRule(_localctx, 30, LLVMIRParser::RuleNamedMetadataDef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1006);
    match(LLVMIRParser::MetadataName);
    setState(1007);
    match(LLVMIRParser::T__1);
    setState(1008);
    match(LLVMIRParser::T__22);
    setState(1009);
    match(LLVMIRParser::T__20);
    setState(1018);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__52 || _la == LLVMIRParser::MetadataId) {
      setState(1010);
      metadataNode();
      setState(1015);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(1011);
        match(LLVMIRParser::T__14);
        setState(1012);
        metadataNode();
        setState(1017);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1020);
    match(LLVMIRParser::T__21);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetadataDefContext ------------------------------------------------------------------

LLVMIRParser::MetadataDefContext::MetadataDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::MetadataDefContext::MetadataId() {
  return getToken(LLVMIRParser::MetadataId, 0);
}

LLVMIRParser::MdTupleContext* LLVMIRParser::MetadataDefContext::mdTuple() {
  return getRuleContext<LLVMIRParser::MdTupleContext>(0);
}

LLVMIRParser::SpecializedMDNodeContext* LLVMIRParser::MetadataDefContext::specializedMDNode() {
  return getRuleContext<LLVMIRParser::SpecializedMDNodeContext>(0);
}

LLVMIRParser::DistinctContext* LLVMIRParser::MetadataDefContext::distinct() {
  return getRuleContext<LLVMIRParser::DistinctContext>(0);
}


size_t LLVMIRParser::MetadataDefContext::getRuleIndex() const {
  return LLVMIRParser::RuleMetadataDef;
}


std::any LLVMIRParser::MetadataDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitMetadataDef(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::MetadataDefContext* LLVMIRParser::metadataDef() {
  MetadataDefContext *_localctx = _tracker.createInstance<MetadataDefContext>(_ctx, getState());
  enterRule(_localctx, 32, LLVMIRParser::RuleMetadataDef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1022);
    match(LLVMIRParser::MetadataId);
    setState(1023);
    match(LLVMIRParser::T__1);
    setState(1025);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__262) {
      setState(1024);
      distinct();
    }
    setState(1029);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__22: {
        setState(1027);
        mdTuple();
        break;
      }

      case LLVMIRParser::T__52:
      case LLVMIRParser::T__360:
      case LLVMIRParser::T__361:
      case LLVMIRParser::T__362:
      case LLVMIRParser::T__363:
      case LLVMIRParser::T__364:
      case LLVMIRParser::T__365:
      case LLVMIRParser::T__366:
      case LLVMIRParser::T__367:
      case LLVMIRParser::T__368:
      case LLVMIRParser::T__369:
      case LLVMIRParser::T__370:
      case LLVMIRParser::T__371:
      case LLVMIRParser::T__372:
      case LLVMIRParser::T__373:
      case LLVMIRParser::T__374:
      case LLVMIRParser::T__375:
      case LLVMIRParser::T__376:
      case LLVMIRParser::T__377:
      case LLVMIRParser::T__378:
      case LLVMIRParser::T__379:
      case LLVMIRParser::T__380:
      case LLVMIRParser::T__381:
      case LLVMIRParser::T__382:
      case LLVMIRParser::T__383:
      case LLVMIRParser::T__384:
      case LLVMIRParser::T__385:
      case LLVMIRParser::T__386: {
        setState(1028);
        specializedMDNode();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UseListOrderContext ------------------------------------------------------------------

LLVMIRParser::UseListOrderContext::UseListOrderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::UseListOrderContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

std::vector<tree::TerminalNode *> LLVMIRParser::UseListOrderContext::IntLit() {
  return getTokens(LLVMIRParser::IntLit);
}

tree::TerminalNode* LLVMIRParser::UseListOrderContext::IntLit(size_t i) {
  return getToken(LLVMIRParser::IntLit, i);
}


size_t LLVMIRParser::UseListOrderContext::getRuleIndex() const {
  return LLVMIRParser::RuleUseListOrder;
}


std::any LLVMIRParser::UseListOrderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitUseListOrder(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::UseListOrderContext* LLVMIRParser::useListOrder() {
  UseListOrderContext *_localctx = _tracker.createInstance<UseListOrderContext>(_ctx, getState());
  enterRule(_localctx, 34, LLVMIRParser::RuleUseListOrder);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1031);
    match(LLVMIRParser::T__23);
    setState(1032);
    typeValue();
    setState(1033);
    match(LLVMIRParser::T__14);
    setState(1034);
    match(LLVMIRParser::T__20);
    setState(1035);
    match(LLVMIRParser::IntLit);
    setState(1040);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(1036);
      match(LLVMIRParser::T__14);
      setState(1037);
      match(LLVMIRParser::IntLit);
      setState(1042);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1043);
    match(LLVMIRParser::T__21);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UseListOrderBBContext ------------------------------------------------------------------

LLVMIRParser::UseListOrderBBContext::UseListOrderBBContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::UseListOrderBBContext::GlobalIdent() {
  return getToken(LLVMIRParser::GlobalIdent, 0);
}

tree::TerminalNode* LLVMIRParser::UseListOrderBBContext::LocalIdent() {
  return getToken(LLVMIRParser::LocalIdent, 0);
}

std::vector<tree::TerminalNode *> LLVMIRParser::UseListOrderBBContext::IntLit() {
  return getTokens(LLVMIRParser::IntLit);
}

tree::TerminalNode* LLVMIRParser::UseListOrderBBContext::IntLit(size_t i) {
  return getToken(LLVMIRParser::IntLit, i);
}


size_t LLVMIRParser::UseListOrderBBContext::getRuleIndex() const {
  return LLVMIRParser::RuleUseListOrderBB;
}


std::any LLVMIRParser::UseListOrderBBContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitUseListOrderBB(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::UseListOrderBBContext* LLVMIRParser::useListOrderBB() {
  UseListOrderBBContext *_localctx = _tracker.createInstance<UseListOrderBBContext>(_ctx, getState());
  enterRule(_localctx, 36, LLVMIRParser::RuleUseListOrderBB);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1045);
    match(LLVMIRParser::T__24);
    setState(1046);
    match(LLVMIRParser::GlobalIdent);
    setState(1047);
    match(LLVMIRParser::T__14);
    setState(1048);
    match(LLVMIRParser::LocalIdent);
    setState(1049);
    match(LLVMIRParser::T__14);
    setState(1050);
    match(LLVMIRParser::T__20);
    setState(1051);
    match(LLVMIRParser::IntLit);
    setState(1056);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(1052);
      match(LLVMIRParser::T__14);
      setState(1053);
      match(LLVMIRParser::IntLit);
      setState(1058);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1059);
    match(LLVMIRParser::T__21);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuncHeaderContext ------------------------------------------------------------------

LLVMIRParser::FuncHeaderContext::FuncHeaderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeContext* LLVMIRParser::FuncHeaderContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

tree::TerminalNode* LLVMIRParser::FuncHeaderContext::GlobalIdent() {
  return getToken(LLVMIRParser::GlobalIdent, 0);
}

LLVMIRParser::ParamsContext* LLVMIRParser::FuncHeaderContext::params() {
  return getRuleContext<LLVMIRParser::ParamsContext>(0);
}

LLVMIRParser::LinkageContext* LLVMIRParser::FuncHeaderContext::linkage() {
  return getRuleContext<LLVMIRParser::LinkageContext>(0);
}

LLVMIRParser::PreemptionContext* LLVMIRParser::FuncHeaderContext::preemption() {
  return getRuleContext<LLVMIRParser::PreemptionContext>(0);
}

LLVMIRParser::VisibilityContext* LLVMIRParser::FuncHeaderContext::visibility() {
  return getRuleContext<LLVMIRParser::VisibilityContext>(0);
}

LLVMIRParser::DllStorageClassContext* LLVMIRParser::FuncHeaderContext::dllStorageClass() {
  return getRuleContext<LLVMIRParser::DllStorageClassContext>(0);
}

LLVMIRParser::CallingConvContext* LLVMIRParser::FuncHeaderContext::callingConv() {
  return getRuleContext<LLVMIRParser::CallingConvContext>(0);
}

std::vector<LLVMIRParser::ReturnAttributeContext *> LLVMIRParser::FuncHeaderContext::returnAttribute() {
  return getRuleContexts<LLVMIRParser::ReturnAttributeContext>();
}

LLVMIRParser::ReturnAttributeContext* LLVMIRParser::FuncHeaderContext::returnAttribute(size_t i) {
  return getRuleContext<LLVMIRParser::ReturnAttributeContext>(i);
}

LLVMIRParser::UnnamedAddrContext* LLVMIRParser::FuncHeaderContext::unnamedAddr() {
  return getRuleContext<LLVMIRParser::UnnamedAddrContext>(0);
}

LLVMIRParser::AddrSpaceContext* LLVMIRParser::FuncHeaderContext::addrSpace() {
  return getRuleContext<LLVMIRParser::AddrSpaceContext>(0);
}

std::vector<LLVMIRParser::FuncHdrFieldContext *> LLVMIRParser::FuncHeaderContext::funcHdrField() {
  return getRuleContexts<LLVMIRParser::FuncHdrFieldContext>();
}

LLVMIRParser::FuncHdrFieldContext* LLVMIRParser::FuncHeaderContext::funcHdrField(size_t i) {
  return getRuleContext<LLVMIRParser::FuncHdrFieldContext>(i);
}


size_t LLVMIRParser::FuncHeaderContext::getRuleIndex() const {
  return LLVMIRParser::RuleFuncHeader;
}


std::any LLVMIRParser::FuncHeaderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFuncHeader(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FuncHeaderContext* LLVMIRParser::funcHeader() {
  FuncHeaderContext *_localctx = _tracker.createInstance<FuncHeaderContext>(_ctx, getState());
  enterRule(_localctx, 38, LLVMIRParser::RuleFuncHeader);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1062);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 173) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 173)) & 33521665) != 0)) {
      setState(1061);
      linkage();
    }
    setState(1065);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__197

    || _la == LLVMIRParser::T__198) {
      setState(1064);
      preemption();
    }
    setState(1068);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 200) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 200)) & 7) != 0)) {
      setState(1067);
      visibility();
    }
    setState(1071);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__202

    || _la == LLVMIRParser::T__203) {
      setState(1070);
      dllStorageClass();
    }
    setState(1074);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__27 || ((((_la - 293) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 293)) & 35184372088831) != 0)) {
      setState(1073);
      callingConv();
    }
    setState(1079);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 80) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 80)) & 2221213185) != 0)) {
      setState(1076);
      returnAttribute();
      setState(1081);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1082);
    type(0);
    setState(1083);
    match(LLVMIRParser::GlobalIdent);
    setState(1084);
    match(LLVMIRParser::T__25);
    setState(1085);
    params();
    setState(1086);
    match(LLVMIRParser::T__26);
    setState(1088);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__207

    || _la == LLVMIRParser::T__208) {
      setState(1087);
      unnamedAddr();
    }
    setState(1091);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__118) {
      setState(1090);
      addrSpace();
    }
    setState(1096);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1008806324584055296) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 172637555169) != 0) || ((((_la - 213) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 213)) & 1125899906842623) != 0) || _la == LLVMIRParser::StringLit

    || _la == LLVMIRParser::AttrGroupId) {
      setState(1093);
      funcHdrField();
      setState(1098);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndirectSymbolContext ------------------------------------------------------------------

LLVMIRParser::IndirectSymbolContext::IndirectSymbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeConstContext* LLVMIRParser::IndirectSymbolContext::typeConst() {
  return getRuleContext<LLVMIRParser::TypeConstContext>(0);
}

LLVMIRParser::BitCastExprContext* LLVMIRParser::IndirectSymbolContext::bitCastExpr() {
  return getRuleContext<LLVMIRParser::BitCastExprContext>(0);
}

LLVMIRParser::GetElementPtrExprContext* LLVMIRParser::IndirectSymbolContext::getElementPtrExpr() {
  return getRuleContext<LLVMIRParser::GetElementPtrExprContext>(0);
}

LLVMIRParser::AddrSpaceCastExprContext* LLVMIRParser::IndirectSymbolContext::addrSpaceCastExpr() {
  return getRuleContext<LLVMIRParser::AddrSpaceCastExprContext>(0);
}

LLVMIRParser::IntToPtrExprContext* LLVMIRParser::IndirectSymbolContext::intToPtrExpr() {
  return getRuleContext<LLVMIRParser::IntToPtrExprContext>(0);
}


size_t LLVMIRParser::IndirectSymbolContext::getRuleIndex() const {
  return LLVMIRParser::RuleIndirectSymbol;
}


std::any LLVMIRParser::IndirectSymbolContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitIndirectSymbol(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::IndirectSymbolContext* LLVMIRParser::indirectSymbol() {
  IndirectSymbolContext *_localctx = _tracker.createInstance<IndirectSymbolContext>(_ctx, getState());
  enterRule(_localctx, 40, LLVMIRParser::RuleIndirectSymbol);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1104);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__20:
      case LLVMIRParser::T__33:
      case LLVMIRParser::T__36:
      case LLVMIRParser::T__50:
      case LLVMIRParser::T__63:
      case LLVMIRParser::T__76:
      case LLVMIRParser::T__115:
      case LLVMIRParser::T__116:
      case LLVMIRParser::T__117:
      case LLVMIRParser::T__120:
      case LLVMIRParser::T__353:
      case LLVMIRParser::T__354:
      case LLVMIRParser::T__355:
      case LLVMIRParser::T__356:
      case LLVMIRParser::T__357:
      case LLVMIRParser::T__358:
      case LLVMIRParser::T__359:
      case LLVMIRParser::LocalIdent:
      case LLVMIRParser::IntType: {
        enterOuterAlt(_localctx, 1);
        setState(1099);
        typeConst();
        break;
      }

      case LLVMIRParser::T__121: {
        enterOuterAlt(_localctx, 2);
        setState(1100);
        bitCastExpr();
        break;
      }

      case LLVMIRParser::T__122: {
        enterOuterAlt(_localctx, 3);
        setState(1101);
        getElementPtrExpr();
        break;
      }

      case LLVMIRParser::T__124: {
        enterOuterAlt(_localctx, 4);
        setState(1102);
        addrSpaceCastExpr();
        break;
      }

      case LLVMIRParser::T__125: {
        enterOuterAlt(_localctx, 5);
        setState(1103);
        intToPtrExpr();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallingConvContext ------------------------------------------------------------------

LLVMIRParser::CallingConvContext::CallingConvContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::CallingConvEnumContext* LLVMIRParser::CallingConvContext::callingConvEnum() {
  return getRuleContext<LLVMIRParser::CallingConvEnumContext>(0);
}

LLVMIRParser::CallingConvIntContext* LLVMIRParser::CallingConvContext::callingConvInt() {
  return getRuleContext<LLVMIRParser::CallingConvIntContext>(0);
}


size_t LLVMIRParser::CallingConvContext::getRuleIndex() const {
  return LLVMIRParser::RuleCallingConv;
}


std::any LLVMIRParser::CallingConvContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitCallingConv(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::CallingConvContext* LLVMIRParser::callingConv() {
  CallingConvContext *_localctx = _tracker.createInstance<CallingConvContext>(_ctx, getState());
  enterRule(_localctx, 42, LLVMIRParser::RuleCallingConv);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1108);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__292:
      case LLVMIRParser::T__293:
      case LLVMIRParser::T__294:
      case LLVMIRParser::T__295:
      case LLVMIRParser::T__296:
      case LLVMIRParser::T__297:
      case LLVMIRParser::T__298:
      case LLVMIRParser::T__299:
      case LLVMIRParser::T__300:
      case LLVMIRParser::T__301:
      case LLVMIRParser::T__302:
      case LLVMIRParser::T__303:
      case LLVMIRParser::T__304:
      case LLVMIRParser::T__305:
      case LLVMIRParser::T__306:
      case LLVMIRParser::T__307:
      case LLVMIRParser::T__308:
      case LLVMIRParser::T__309:
      case LLVMIRParser::T__310:
      case LLVMIRParser::T__311:
      case LLVMIRParser::T__312:
      case LLVMIRParser::T__313:
      case LLVMIRParser::T__314:
      case LLVMIRParser::T__315:
      case LLVMIRParser::T__316:
      case LLVMIRParser::T__317:
      case LLVMIRParser::T__318:
      case LLVMIRParser::T__319:
      case LLVMIRParser::T__320:
      case LLVMIRParser::T__321:
      case LLVMIRParser::T__322:
      case LLVMIRParser::T__323:
      case LLVMIRParser::T__324:
      case LLVMIRParser::T__325:
      case LLVMIRParser::T__326:
      case LLVMIRParser::T__327:
      case LLVMIRParser::T__328:
      case LLVMIRParser::T__329:
      case LLVMIRParser::T__330:
      case LLVMIRParser::T__331:
      case LLVMIRParser::T__332:
      case LLVMIRParser::T__333:
      case LLVMIRParser::T__334:
      case LLVMIRParser::T__335:
      case LLVMIRParser::T__336: {
        enterOuterAlt(_localctx, 1);
        setState(1106);
        callingConvEnum();
        break;
      }

      case LLVMIRParser::T__27: {
        enterOuterAlt(_localctx, 2);
        setState(1107);
        callingConvInt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallingConvIntContext ------------------------------------------------------------------

LLVMIRParser::CallingConvIntContext::CallingConvIntContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::CallingConvIntContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::CallingConvIntContext::getRuleIndex() const {
  return LLVMIRParser::RuleCallingConvInt;
}


std::any LLVMIRParser::CallingConvIntContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitCallingConvInt(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::CallingConvIntContext* LLVMIRParser::callingConvInt() {
  CallingConvIntContext *_localctx = _tracker.createInstance<CallingConvIntContext>(_ctx, getState());
  enterRule(_localctx, 44, LLVMIRParser::RuleCallingConvInt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1110);
    match(LLVMIRParser::T__27);
    setState(1111);
    match(LLVMIRParser::IntLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuncHdrFieldContext ------------------------------------------------------------------

LLVMIRParser::FuncHdrFieldContext::FuncHdrFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::FuncAttributeContext* LLVMIRParser::FuncHdrFieldContext::funcAttribute() {
  return getRuleContext<LLVMIRParser::FuncAttributeContext>(0);
}

LLVMIRParser::SectionContext* LLVMIRParser::FuncHdrFieldContext::section() {
  return getRuleContext<LLVMIRParser::SectionContext>(0);
}

LLVMIRParser::PartitionContext* LLVMIRParser::FuncHdrFieldContext::partition() {
  return getRuleContext<LLVMIRParser::PartitionContext>(0);
}

LLVMIRParser::ComdatContext* LLVMIRParser::FuncHdrFieldContext::comdat() {
  return getRuleContext<LLVMIRParser::ComdatContext>(0);
}

LLVMIRParser::AlignContext* LLVMIRParser::FuncHdrFieldContext::align() {
  return getRuleContext<LLVMIRParser::AlignContext>(0);
}

LLVMIRParser::GcContext* LLVMIRParser::FuncHdrFieldContext::gc() {
  return getRuleContext<LLVMIRParser::GcContext>(0);
}

LLVMIRParser::PrefixContext* LLVMIRParser::FuncHdrFieldContext::prefix() {
  return getRuleContext<LLVMIRParser::PrefixContext>(0);
}

LLVMIRParser::PrologueContext* LLVMIRParser::FuncHdrFieldContext::prologue() {
  return getRuleContext<LLVMIRParser::PrologueContext>(0);
}

LLVMIRParser::PersonalityContext* LLVMIRParser::FuncHdrFieldContext::personality() {
  return getRuleContext<LLVMIRParser::PersonalityContext>(0);
}


size_t LLVMIRParser::FuncHdrFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleFuncHdrField;
}


std::any LLVMIRParser::FuncHdrFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFuncHdrField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FuncHdrFieldContext* LLVMIRParser::funcHdrField() {
  FuncHdrFieldContext *_localctx = _tracker.createInstance<FuncHdrFieldContext>(_ctx, getState());
  enterRule(_localctx, 46, LLVMIRParser::RuleFuncHdrField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1122);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1113);
      funcAttribute();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1114);
      section();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1115);
      partition();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1116);
      comdat();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1117);
      align();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1118);
      gc();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1119);
      prefix();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1120);
      prologue();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1121);
      personality();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GcContext ------------------------------------------------------------------

LLVMIRParser::GcContext::GcContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::GcContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::GcContext::getRuleIndex() const {
  return LLVMIRParser::RuleGc;
}


std::any LLVMIRParser::GcContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitGc(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::GcContext* LLVMIRParser::gc() {
  GcContext *_localctx = _tracker.createInstance<GcContext>(_ctx, getState());
  enterRule(_localctx, 48, LLVMIRParser::RuleGc);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1124);
    match(LLVMIRParser::T__28);
    setState(1125);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrefixContext ------------------------------------------------------------------

LLVMIRParser::PrefixContext::PrefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeConstContext* LLVMIRParser::PrefixContext::typeConst() {
  return getRuleContext<LLVMIRParser::TypeConstContext>(0);
}


size_t LLVMIRParser::PrefixContext::getRuleIndex() const {
  return LLVMIRParser::RulePrefix;
}


std::any LLVMIRParser::PrefixContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitPrefix(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::PrefixContext* LLVMIRParser::prefix() {
  PrefixContext *_localctx = _tracker.createInstance<PrefixContext>(_ctx, getState());
  enterRule(_localctx, 50, LLVMIRParser::RulePrefix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1127);
    match(LLVMIRParser::T__29);
    setState(1128);
    typeConst();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrologueContext ------------------------------------------------------------------

LLVMIRParser::PrologueContext::PrologueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeConstContext* LLVMIRParser::PrologueContext::typeConst() {
  return getRuleContext<LLVMIRParser::TypeConstContext>(0);
}


size_t LLVMIRParser::PrologueContext::getRuleIndex() const {
  return LLVMIRParser::RulePrologue;
}


std::any LLVMIRParser::PrologueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitPrologue(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::PrologueContext* LLVMIRParser::prologue() {
  PrologueContext *_localctx = _tracker.createInstance<PrologueContext>(_ctx, getState());
  enterRule(_localctx, 52, LLVMIRParser::RulePrologue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1130);
    match(LLVMIRParser::T__30);
    setState(1131);
    typeConst();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PersonalityContext ------------------------------------------------------------------

LLVMIRParser::PersonalityContext::PersonalityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeConstContext* LLVMIRParser::PersonalityContext::typeConst() {
  return getRuleContext<LLVMIRParser::TypeConstContext>(0);
}


size_t LLVMIRParser::PersonalityContext::getRuleIndex() const {
  return LLVMIRParser::RulePersonality;
}


std::any LLVMIRParser::PersonalityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitPersonality(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::PersonalityContext* LLVMIRParser::personality() {
  PersonalityContext *_localctx = _tracker.createInstance<PersonalityContext>(_ctx, getState());
  enterRule(_localctx, 54, LLVMIRParser::RulePersonality);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1133);
    match(LLVMIRParser::T__31);
    setState(1134);
    typeConst();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnAttributeContext ------------------------------------------------------------------

LLVMIRParser::ReturnAttributeContext::ReturnAttributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::ReturnAttrContext* LLVMIRParser::ReturnAttributeContext::returnAttr() {
  return getRuleContext<LLVMIRParser::ReturnAttrContext>(0);
}

LLVMIRParser::DereferenceableContext* LLVMIRParser::ReturnAttributeContext::dereferenceable() {
  return getRuleContext<LLVMIRParser::DereferenceableContext>(0);
}

LLVMIRParser::AlignContext* LLVMIRParser::ReturnAttributeContext::align() {
  return getRuleContext<LLVMIRParser::AlignContext>(0);
}


size_t LLVMIRParser::ReturnAttributeContext::getRuleIndex() const {
  return LLVMIRParser::RuleReturnAttribute;
}


std::any LLVMIRParser::ReturnAttributeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitReturnAttribute(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ReturnAttributeContext* LLVMIRParser::returnAttribute() {
  ReturnAttributeContext *_localctx = _tracker.createInstance<ReturnAttributeContext>(_ctx, getState());
  enterRule(_localctx, 56, LLVMIRParser::RuleReturnAttribute);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1139);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__95:
      case LLVMIRParser::T__97:
      case LLVMIRParser::T__100:
      case LLVMIRParser::T__101:
      case LLVMIRParser::T__105:
      case LLVMIRParser::T__110: {
        enterOuterAlt(_localctx, 1);
        setState(1136);
        returnAttr();
        break;
      }

      case LLVMIRParser::T__88:
      case LLVMIRParser::T__89: {
        enterOuterAlt(_localctx, 2);
        setState(1137);
        dereferenceable();
        break;
      }

      case LLVMIRParser::T__79: {
        enterOuterAlt(_localctx, 3);
        setState(1138);
        align();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuncBodyContext ------------------------------------------------------------------

LLVMIRParser::FuncBodyContext::FuncBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::BasicBlockContext *> LLVMIRParser::FuncBodyContext::basicBlock() {
  return getRuleContexts<LLVMIRParser::BasicBlockContext>();
}

LLVMIRParser::BasicBlockContext* LLVMIRParser::FuncBodyContext::basicBlock(size_t i) {
  return getRuleContext<LLVMIRParser::BasicBlockContext>(i);
}

std::vector<LLVMIRParser::UseListOrderContext *> LLVMIRParser::FuncBodyContext::useListOrder() {
  return getRuleContexts<LLVMIRParser::UseListOrderContext>();
}

LLVMIRParser::UseListOrderContext* LLVMIRParser::FuncBodyContext::useListOrder(size_t i) {
  return getRuleContext<LLVMIRParser::UseListOrderContext>(i);
}


size_t LLVMIRParser::FuncBodyContext::getRuleIndex() const {
  return LLVMIRParser::RuleFuncBody;
}


std::any LLVMIRParser::FuncBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFuncBody(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FuncBodyContext* LLVMIRParser::funcBody() {
  FuncBodyContext *_localctx = _tracker.createInstance<FuncBodyContext>(_ctx, getState());
  enterRule(_localctx, 58, LLVMIRParser::RuleFuncBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1141);
    match(LLVMIRParser::T__20);
    setState(1143); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1142);
      basicBlock();
      setState(1145); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1077083308556288) != 0) || ((((_la - 122) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 122)) & -2308094869165309957) != 0) || _la == LLVMIRParser::LocalIdent

    || _la == LLVMIRParser::LabelIdent);
    setState(1150);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__23) {
      setState(1147);
      useListOrder();
      setState(1152);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1153);
    match(LLVMIRParser::T__21);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BasicBlockContext ------------------------------------------------------------------

LLVMIRParser::BasicBlockContext::BasicBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TerminatorContext* LLVMIRParser::BasicBlockContext::terminator() {
  return getRuleContext<LLVMIRParser::TerminatorContext>(0);
}

tree::TerminalNode* LLVMIRParser::BasicBlockContext::LabelIdent() {
  return getToken(LLVMIRParser::LabelIdent, 0);
}

std::vector<LLVMIRParser::InstructionContext *> LLVMIRParser::BasicBlockContext::instruction() {
  return getRuleContexts<LLVMIRParser::InstructionContext>();
}

LLVMIRParser::InstructionContext* LLVMIRParser::BasicBlockContext::instruction(size_t i) {
  return getRuleContext<LLVMIRParser::InstructionContext>(i);
}


size_t LLVMIRParser::BasicBlockContext::getRuleIndex() const {
  return LLVMIRParser::RuleBasicBlock;
}


std::any LLVMIRParser::BasicBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitBasicBlock(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::BasicBlockContext* LLVMIRParser::basicBlock() {
  BasicBlockContext *_localctx = _tracker.createInstance<BasicBlockContext>(_ctx, getState());
  enterRule(_localctx, 60, LLVMIRParser::RuleBasicBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1156);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::LabelIdent) {
      setState(1155);
      match(LLVMIRParser::LabelIdent);
    }
    setState(1161);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1158);
        instruction(); 
      }
      setState(1163);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx);
    }
    setState(1164);
    terminator();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InstructionContext ------------------------------------------------------------------

LLVMIRParser::InstructionContext::InstructionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::LocalDefInstContext* LLVMIRParser::InstructionContext::localDefInst() {
  return getRuleContext<LLVMIRParser::LocalDefInstContext>(0);
}

LLVMIRParser::ValueInstructionContext* LLVMIRParser::InstructionContext::valueInstruction() {
  return getRuleContext<LLVMIRParser::ValueInstructionContext>(0);
}

LLVMIRParser::StoreInstContext* LLVMIRParser::InstructionContext::storeInst() {
  return getRuleContext<LLVMIRParser::StoreInstContext>(0);
}

LLVMIRParser::FenceInstContext* LLVMIRParser::InstructionContext::fenceInst() {
  return getRuleContext<LLVMIRParser::FenceInstContext>(0);
}


size_t LLVMIRParser::InstructionContext::getRuleIndex() const {
  return LLVMIRParser::RuleInstruction;
}


std::any LLVMIRParser::InstructionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitInstruction(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::InstructionContext* LLVMIRParser::instruction() {
  InstructionContext *_localctx = _tracker.createInstance<InstructionContext>(_ctx, getState());
  enterRule(_localctx, 62, LLVMIRParser::RuleInstruction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1170);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::LocalIdent: {
        enterOuterAlt(_localctx, 1);
        setState(1166);
        localDefInst();
        break;
      }

      case LLVMIRParser::T__121:
      case LLVMIRParser::T__122:
      case LLVMIRParser::T__124:
      case LLVMIRParser::T__125:
      case LLVMIRParser::T__126:
      case LLVMIRParser::T__127:
      case LLVMIRParser::T__128:
      case LLVMIRParser::T__129:
      case LLVMIRParser::T__130:
      case LLVMIRParser::T__131:
      case LLVMIRParser::T__132:
      case LLVMIRParser::T__133:
      case LLVMIRParser::T__134:
      case LLVMIRParser::T__135:
      case LLVMIRParser::T__136:
      case LLVMIRParser::T__137:
      case LLVMIRParser::T__138:
      case LLVMIRParser::T__139:
      case LLVMIRParser::T__140:
      case LLVMIRParser::T__141:
      case LLVMIRParser::T__142:
      case LLVMIRParser::T__143:
      case LLVMIRParser::T__145:
      case LLVMIRParser::T__146:
      case LLVMIRParser::T__147:
      case LLVMIRParser::T__148:
      case LLVMIRParser::T__149:
      case LLVMIRParser::T__150:
      case LLVMIRParser::T__151:
      case LLVMIRParser::T__152:
      case LLVMIRParser::T__158:
      case LLVMIRParser::T__159:
      case LLVMIRParser::T__160:
      case LLVMIRParser::T__161:
      case LLVMIRParser::T__162:
      case LLVMIRParser::T__163:
      case LLVMIRParser::T__164:
      case LLVMIRParser::T__165:
      case LLVMIRParser::T__166:
      case LLVMIRParser::T__167:
      case LLVMIRParser::T__168:
      case LLVMIRParser::T__169:
      case LLVMIRParser::T__170:
      case LLVMIRParser::T__171:
      case LLVMIRParser::T__173:
      case LLVMIRParser::T__174:
      case LLVMIRParser::T__175:
      case LLVMIRParser::T__176:
      case LLVMIRParser::T__177:
      case LLVMIRParser::T__178:
      case LLVMIRParser::T__179:
      case LLVMIRParser::T__180:
      case LLVMIRParser::T__181:
      case LLVMIRParser::T__183:
      case LLVMIRParser::T__184: {
        enterOuterAlt(_localctx, 2);
        setState(1167);
        valueInstruction();
        break;
      }

      case LLVMIRParser::T__153: {
        enterOuterAlt(_localctx, 3);
        setState(1168);
        storeInst();
        break;
      }

      case LLVMIRParser::T__157: {
        enterOuterAlt(_localctx, 4);
        setState(1169);
        fenceInst();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TerminatorContext ------------------------------------------------------------------

LLVMIRParser::TerminatorContext::TerminatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::LocalDefTermContext* LLVMIRParser::TerminatorContext::localDefTerm() {
  return getRuleContext<LLVMIRParser::LocalDefTermContext>(0);
}

LLVMIRParser::ValueTerminatorContext* LLVMIRParser::TerminatorContext::valueTerminator() {
  return getRuleContext<LLVMIRParser::ValueTerminatorContext>(0);
}

LLVMIRParser::RetTermContext* LLVMIRParser::TerminatorContext::retTerm() {
  return getRuleContext<LLVMIRParser::RetTermContext>(0);
}

LLVMIRParser::BrTermContext* LLVMIRParser::TerminatorContext::brTerm() {
  return getRuleContext<LLVMIRParser::BrTermContext>(0);
}

LLVMIRParser::CondBrTermContext* LLVMIRParser::TerminatorContext::condBrTerm() {
  return getRuleContext<LLVMIRParser::CondBrTermContext>(0);
}

LLVMIRParser::SwitchTermContext* LLVMIRParser::TerminatorContext::switchTerm() {
  return getRuleContext<LLVMIRParser::SwitchTermContext>(0);
}

LLVMIRParser::IndirectBrTermContext* LLVMIRParser::TerminatorContext::indirectBrTerm() {
  return getRuleContext<LLVMIRParser::IndirectBrTermContext>(0);
}

LLVMIRParser::ResumeTermContext* LLVMIRParser::TerminatorContext::resumeTerm() {
  return getRuleContext<LLVMIRParser::ResumeTermContext>(0);
}

LLVMIRParser::CatchRetTermContext* LLVMIRParser::TerminatorContext::catchRetTerm() {
  return getRuleContext<LLVMIRParser::CatchRetTermContext>(0);
}

LLVMIRParser::CleanupRetTermContext* LLVMIRParser::TerminatorContext::cleanupRetTerm() {
  return getRuleContext<LLVMIRParser::CleanupRetTermContext>(0);
}

LLVMIRParser::UnreachableTermContext* LLVMIRParser::TerminatorContext::unreachableTerm() {
  return getRuleContext<LLVMIRParser::UnreachableTermContext>(0);
}


size_t LLVMIRParser::TerminatorContext::getRuleIndex() const {
  return LLVMIRParser::RuleTerminator;
}


std::any LLVMIRParser::TerminatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitTerminator(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::TerminatorContext* LLVMIRParser::terminator() {
  TerminatorContext *_localctx = _tracker.createInstance<TerminatorContext>(_ctx, getState());
  enterRule(_localctx, 64, LLVMIRParser::RuleTerminator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1183);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1172);
      localDefTerm();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1173);
      valueTerminator();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1174);
      retTerm();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1175);
      brTerm();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1176);
      condBrTerm();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1177);
      switchTerm();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1178);
      indirectBrTerm();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1179);
      resumeTerm();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1180);
      catchRetTerm();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1181);
      cleanupRetTerm();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1182);
      unreachableTerm();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalDefTermContext ------------------------------------------------------------------

LLVMIRParser::LocalDefTermContext::LocalDefTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::LocalDefTermContext::LocalIdent() {
  return getToken(LLVMIRParser::LocalIdent, 0);
}

LLVMIRParser::ValueTerminatorContext* LLVMIRParser::LocalDefTermContext::valueTerminator() {
  return getRuleContext<LLVMIRParser::ValueTerminatorContext>(0);
}


size_t LLVMIRParser::LocalDefTermContext::getRuleIndex() const {
  return LLVMIRParser::RuleLocalDefTerm;
}


std::any LLVMIRParser::LocalDefTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitLocalDefTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::LocalDefTermContext* LLVMIRParser::localDefTerm() {
  LocalDefTermContext *_localctx = _tracker.createInstance<LocalDefTermContext>(_ctx, getState());
  enterRule(_localctx, 66, LLVMIRParser::RuleLocalDefTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1185);
    match(LLVMIRParser::LocalIdent);
    setState(1186);
    match(LLVMIRParser::T__1);
    setState(1187);
    valueTerminator();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueTerminatorContext ------------------------------------------------------------------

LLVMIRParser::ValueTerminatorContext::ValueTerminatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::InvokeTermContext* LLVMIRParser::ValueTerminatorContext::invokeTerm() {
  return getRuleContext<LLVMIRParser::InvokeTermContext>(0);
}

LLVMIRParser::CallBrTermContext* LLVMIRParser::ValueTerminatorContext::callBrTerm() {
  return getRuleContext<LLVMIRParser::CallBrTermContext>(0);
}

LLVMIRParser::CatchSwitchTermContext* LLVMIRParser::ValueTerminatorContext::catchSwitchTerm() {
  return getRuleContext<LLVMIRParser::CatchSwitchTermContext>(0);
}


size_t LLVMIRParser::ValueTerminatorContext::getRuleIndex() const {
  return LLVMIRParser::RuleValueTerminator;
}


std::any LLVMIRParser::ValueTerminatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitValueTerminator(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ValueTerminatorContext* LLVMIRParser::valueTerminator() {
  ValueTerminatorContext *_localctx = _tracker.createInstance<ValueTerminatorContext>(_ctx, getState());
  enterRule(_localctx, 68, LLVMIRParser::RuleValueTerminator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1192);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__46: {
        enterOuterAlt(_localctx, 1);
        setState(1189);
        invokeTerm();
        break;
      }

      case LLVMIRParser::T__47: {
        enterOuterAlt(_localctx, 2);
        setState(1190);
        callBrTerm();
        break;
      }

      case LLVMIRParser::T__48: {
        enterOuterAlt(_localctx, 3);
        setState(1191);
        catchSwitchTerm();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RetTermContext ------------------------------------------------------------------

LLVMIRParser::RetTermContext::RetTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::RetTermContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::RetTermContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}

LLVMIRParser::ConcreteTypeContext* LLVMIRParser::RetTermContext::concreteType() {
  return getRuleContext<LLVMIRParser::ConcreteTypeContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::RetTermContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}


size_t LLVMIRParser::RetTermContext::getRuleIndex() const {
  return LLVMIRParser::RuleRetTerm;
}


std::any LLVMIRParser::RetTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitRetTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::RetTermContext* LLVMIRParser::retTerm() {
  RetTermContext *_localctx = _tracker.createInstance<RetTermContext>(_ctx, getState());
  enterRule(_localctx, 70, LLVMIRParser::RuleRetTerm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1213);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1194);
      match(LLVMIRParser::T__32);
      setState(1195);
      match(LLVMIRParser::T__33);
      setState(1200);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(1196);
        match(LLVMIRParser::T__14);
        setState(1197);
        metadataAttachment();
        setState(1202);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1203);
      match(LLVMIRParser::T__32);
      setState(1204);
      concreteType();
      setState(1205);
      value();
      setState(1210);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(1206);
        match(LLVMIRParser::T__14);
        setState(1207);
        metadataAttachment();
        setState(1212);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BrTermContext ------------------------------------------------------------------

LLVMIRParser::BrTermContext::BrTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::LabelContext* LLVMIRParser::BrTermContext::label() {
  return getRuleContext<LLVMIRParser::LabelContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::BrTermContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::BrTermContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::BrTermContext::getRuleIndex() const {
  return LLVMIRParser::RuleBrTerm;
}


std::any LLVMIRParser::BrTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitBrTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::BrTermContext* LLVMIRParser::brTerm() {
  BrTermContext *_localctx = _tracker.createInstance<BrTermContext>(_ctx, getState());
  enterRule(_localctx, 72, LLVMIRParser::RuleBrTerm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1215);
    match(LLVMIRParser::T__34);
    setState(1216);
    label();
    setState(1221);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(1217);
      match(LLVMIRParser::T__14);
      setState(1218);
      metadataAttachment();
      setState(1223);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CondBrTermContext ------------------------------------------------------------------

LLVMIRParser::CondBrTermContext::CondBrTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::CondBrTermContext::IntType() {
  return getToken(LLVMIRParser::IntType, 0);
}

LLVMIRParser::ValueContext* LLVMIRParser::CondBrTermContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

std::vector<LLVMIRParser::LabelContext *> LLVMIRParser::CondBrTermContext::label() {
  return getRuleContexts<LLVMIRParser::LabelContext>();
}

LLVMIRParser::LabelContext* LLVMIRParser::CondBrTermContext::label(size_t i) {
  return getRuleContext<LLVMIRParser::LabelContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::CondBrTermContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::CondBrTermContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::CondBrTermContext::getRuleIndex() const {
  return LLVMIRParser::RuleCondBrTerm;
}


std::any LLVMIRParser::CondBrTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitCondBrTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::CondBrTermContext* LLVMIRParser::condBrTerm() {
  CondBrTermContext *_localctx = _tracker.createInstance<CondBrTermContext>(_ctx, getState());
  enterRule(_localctx, 74, LLVMIRParser::RuleCondBrTerm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1224);
    match(LLVMIRParser::T__34);
    setState(1225);
    match(LLVMIRParser::IntType);
    setState(1226);
    value();
    setState(1227);
    match(LLVMIRParser::T__14);
    setState(1228);
    label();
    setState(1229);
    match(LLVMIRParser::T__14);
    setState(1230);
    label();
    setState(1235);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(1231);
      match(LLVMIRParser::T__14);
      setState(1232);
      metadataAttachment();
      setState(1237);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchTermContext ------------------------------------------------------------------

LLVMIRParser::SwitchTermContext::SwitchTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::SwitchTermContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::LabelContext* LLVMIRParser::SwitchTermContext::label() {
  return getRuleContext<LLVMIRParser::LabelContext>(0);
}

std::vector<LLVMIRParser::CaseContext *> LLVMIRParser::SwitchTermContext::case_() {
  return getRuleContexts<LLVMIRParser::CaseContext>();
}

LLVMIRParser::CaseContext* LLVMIRParser::SwitchTermContext::case_(size_t i) {
  return getRuleContext<LLVMIRParser::CaseContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::SwitchTermContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::SwitchTermContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::SwitchTermContext::getRuleIndex() const {
  return LLVMIRParser::RuleSwitchTerm;
}


std::any LLVMIRParser::SwitchTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitSwitchTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::SwitchTermContext* LLVMIRParser::switchTerm() {
  SwitchTermContext *_localctx = _tracker.createInstance<SwitchTermContext>(_ctx, getState());
  enterRule(_localctx, 76, LLVMIRParser::RuleSwitchTerm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1238);
    match(LLVMIRParser::T__35);
    setState(1239);
    typeValue();
    setState(1240);
    match(LLVMIRParser::T__14);
    setState(1241);
    label();
    setState(1242);
    match(LLVMIRParser::T__36);
    setState(1246);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251954434605056) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 175640385467457537) != 0) || ((((_la - 354) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 354)) & 127) != 0) || _la == LLVMIRParser::LocalIdent

    || _la == LLVMIRParser::IntType) {
      setState(1243);
      case_();
      setState(1248);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1249);
    match(LLVMIRParser::T__37);
    setState(1254);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(1250);
      match(LLVMIRParser::T__14);
      setState(1251);
      metadataAttachment();
      setState(1256);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndirectBrTermContext ------------------------------------------------------------------

LLVMIRParser::IndirectBrTermContext::IndirectBrTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::IndirectBrTermContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

std::vector<LLVMIRParser::LabelContext *> LLVMIRParser::IndirectBrTermContext::label() {
  return getRuleContexts<LLVMIRParser::LabelContext>();
}

LLVMIRParser::LabelContext* LLVMIRParser::IndirectBrTermContext::label(size_t i) {
  return getRuleContext<LLVMIRParser::LabelContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::IndirectBrTermContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::IndirectBrTermContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::IndirectBrTermContext::getRuleIndex() const {
  return LLVMIRParser::RuleIndirectBrTerm;
}


std::any LLVMIRParser::IndirectBrTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitIndirectBrTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::IndirectBrTermContext* LLVMIRParser::indirectBrTerm() {
  IndirectBrTermContext *_localctx = _tracker.createInstance<IndirectBrTermContext>(_ctx, getState());
  enterRule(_localctx, 78, LLVMIRParser::RuleIndirectBrTerm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1257);
    match(LLVMIRParser::T__38);
    setState(1258);
    typeValue();
    setState(1259);
    match(LLVMIRParser::T__14);
    setState(1260);
    match(LLVMIRParser::T__36);
    setState(1266);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__50) {
      setState(1261);
      label();
      setState(1264);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LLVMIRParser::T__14) {
        setState(1262);
        match(LLVMIRParser::T__14);
        setState(1263);
        label();
      }
    }
    setState(1268);
    match(LLVMIRParser::T__37);
    setState(1273);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(1269);
      match(LLVMIRParser::T__14);
      setState(1270);
      metadataAttachment();
      setState(1275);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResumeTermContext ------------------------------------------------------------------

LLVMIRParser::ResumeTermContext::ResumeTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::ResumeTermContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::ResumeTermContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::ResumeTermContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::ResumeTermContext::getRuleIndex() const {
  return LLVMIRParser::RuleResumeTerm;
}


std::any LLVMIRParser::ResumeTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitResumeTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ResumeTermContext* LLVMIRParser::resumeTerm() {
  ResumeTermContext *_localctx = _tracker.createInstance<ResumeTermContext>(_ctx, getState());
  enterRule(_localctx, 80, LLVMIRParser::RuleResumeTerm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1276);
    match(LLVMIRParser::T__39);
    setState(1277);
    typeValue();
    setState(1282);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(1278);
      match(LLVMIRParser::T__14);
      setState(1279);
      metadataAttachment();
      setState(1284);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchRetTermContext ------------------------------------------------------------------

LLVMIRParser::CatchRetTermContext::CatchRetTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::ValueContext* LLVMIRParser::CatchRetTermContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

LLVMIRParser::LabelContext* LLVMIRParser::CatchRetTermContext::label() {
  return getRuleContext<LLVMIRParser::LabelContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::CatchRetTermContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::CatchRetTermContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::CatchRetTermContext::getRuleIndex() const {
  return LLVMIRParser::RuleCatchRetTerm;
}


std::any LLVMIRParser::CatchRetTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitCatchRetTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::CatchRetTermContext* LLVMIRParser::catchRetTerm() {
  CatchRetTermContext *_localctx = _tracker.createInstance<CatchRetTermContext>(_ctx, getState());
  enterRule(_localctx, 82, LLVMIRParser::RuleCatchRetTerm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1285);
    match(LLVMIRParser::T__40);
    setState(1286);
    match(LLVMIRParser::T__41);
    setState(1287);
    value();
    setState(1288);
    match(LLVMIRParser::T__42);
    setState(1289);
    label();
    setState(1294);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(1290);
      match(LLVMIRParser::T__14);
      setState(1291);
      metadataAttachment();
      setState(1296);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CleanupRetTermContext ------------------------------------------------------------------

LLVMIRParser::CleanupRetTermContext::CleanupRetTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::ValueContext* LLVMIRParser::CleanupRetTermContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

LLVMIRParser::UnwindTargetContext* LLVMIRParser::CleanupRetTermContext::unwindTarget() {
  return getRuleContext<LLVMIRParser::UnwindTargetContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::CleanupRetTermContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::CleanupRetTermContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::CleanupRetTermContext::getRuleIndex() const {
  return LLVMIRParser::RuleCleanupRetTerm;
}


std::any LLVMIRParser::CleanupRetTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitCleanupRetTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::CleanupRetTermContext* LLVMIRParser::cleanupRetTerm() {
  CleanupRetTermContext *_localctx = _tracker.createInstance<CleanupRetTermContext>(_ctx, getState());
  enterRule(_localctx, 84, LLVMIRParser::RuleCleanupRetTerm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1297);
    match(LLVMIRParser::T__43);
    setState(1298);
    match(LLVMIRParser::T__41);
    setState(1299);
    value();
    setState(1300);
    match(LLVMIRParser::T__44);
    setState(1301);
    unwindTarget();
    setState(1306);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(1302);
      match(LLVMIRParser::T__14);
      setState(1303);
      metadataAttachment();
      setState(1308);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnreachableTermContext ------------------------------------------------------------------

LLVMIRParser::UnreachableTermContext::UnreachableTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::UnreachableTermContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::UnreachableTermContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::UnreachableTermContext::getRuleIndex() const {
  return LLVMIRParser::RuleUnreachableTerm;
}


std::any LLVMIRParser::UnreachableTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitUnreachableTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::UnreachableTermContext* LLVMIRParser::unreachableTerm() {
  UnreachableTermContext *_localctx = _tracker.createInstance<UnreachableTermContext>(_ctx, getState());
  enterRule(_localctx, 86, LLVMIRParser::RuleUnreachableTerm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1309);
    match(LLVMIRParser::T__45);
    setState(1314);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(1310);
      match(LLVMIRParser::T__14);
      setState(1311);
      metadataAttachment();
      setState(1316);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InvokeTermContext ------------------------------------------------------------------

LLVMIRParser::InvokeTermContext::InvokeTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeContext* LLVMIRParser::InvokeTermContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::InvokeTermContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

LLVMIRParser::ArgsContext* LLVMIRParser::InvokeTermContext::args() {
  return getRuleContext<LLVMIRParser::ArgsContext>(0);
}

std::vector<LLVMIRParser::LabelContext *> LLVMIRParser::InvokeTermContext::label() {
  return getRuleContexts<LLVMIRParser::LabelContext>();
}

LLVMIRParser::LabelContext* LLVMIRParser::InvokeTermContext::label(size_t i) {
  return getRuleContext<LLVMIRParser::LabelContext>(i);
}

LLVMIRParser::CallingConvContext* LLVMIRParser::InvokeTermContext::callingConv() {
  return getRuleContext<LLVMIRParser::CallingConvContext>(0);
}

std::vector<LLVMIRParser::ReturnAttributeContext *> LLVMIRParser::InvokeTermContext::returnAttribute() {
  return getRuleContexts<LLVMIRParser::ReturnAttributeContext>();
}

LLVMIRParser::ReturnAttributeContext* LLVMIRParser::InvokeTermContext::returnAttribute(size_t i) {
  return getRuleContext<LLVMIRParser::ReturnAttributeContext>(i);
}

LLVMIRParser::AddrSpaceContext* LLVMIRParser::InvokeTermContext::addrSpace() {
  return getRuleContext<LLVMIRParser::AddrSpaceContext>(0);
}

std::vector<LLVMIRParser::FuncAttributeContext *> LLVMIRParser::InvokeTermContext::funcAttribute() {
  return getRuleContexts<LLVMIRParser::FuncAttributeContext>();
}

LLVMIRParser::FuncAttributeContext* LLVMIRParser::InvokeTermContext::funcAttribute(size_t i) {
  return getRuleContext<LLVMIRParser::FuncAttributeContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::InvokeTermContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::InvokeTermContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}

std::vector<LLVMIRParser::OperandBundleContext *> LLVMIRParser::InvokeTermContext::operandBundle() {
  return getRuleContexts<LLVMIRParser::OperandBundleContext>();
}

LLVMIRParser::OperandBundleContext* LLVMIRParser::InvokeTermContext::operandBundle(size_t i) {
  return getRuleContext<LLVMIRParser::OperandBundleContext>(i);
}


size_t LLVMIRParser::InvokeTermContext::getRuleIndex() const {
  return LLVMIRParser::RuleInvokeTerm;
}


std::any LLVMIRParser::InvokeTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitInvokeTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::InvokeTermContext* LLVMIRParser::invokeTerm() {
  InvokeTermContext *_localctx = _tracker.createInstance<InvokeTermContext>(_ctx, getState());
  enterRule(_localctx, 88, LLVMIRParser::RuleInvokeTerm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1317);
    match(LLVMIRParser::T__46);
    setState(1319);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__27 || ((((_la - 293) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 293)) & 35184372088831) != 0)) {
      setState(1318);
      callingConv();
    }
    setState(1324);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 80) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 80)) & 2221213185) != 0)) {
      setState(1321);
      returnAttribute();
      setState(1326);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1328);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__118) {
      setState(1327);
      addrSpace();
    }
    setState(1330);
    type(0);
    setState(1331);
    value();
    setState(1332);
    match(LLVMIRParser::T__25);
    setState(1333);
    args();
    setState(1334);
    match(LLVMIRParser::T__26);
    setState(1338);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 57) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 57)) & 45255899262222337) != 0) || ((((_la - 213) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 213)) & 1125899906842623) != 0) || _la == LLVMIRParser::StringLit

    || _la == LLVMIRParser::AttrGroupId) {
      setState(1335);
      funcAttribute();
      setState(1340);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1351);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__36) {
      setState(1341);
      match(LLVMIRParser::T__36);
      setState(1345); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1342);
        operandBundle();
        setState(1343);
        match(LLVMIRParser::T__14);
        setState(1347); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == LLVMIRParser::StringLit);
      setState(1349);
      match(LLVMIRParser::T__37);
    }
    setState(1353);
    match(LLVMIRParser::T__42);
    setState(1354);
    label();
    setState(1355);
    match(LLVMIRParser::T__44);
    setState(1356);
    label();
    setState(1361);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(1357);
      match(LLVMIRParser::T__14);
      setState(1358);
      metadataAttachment();
      setState(1363);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallBrTermContext ------------------------------------------------------------------

LLVMIRParser::CallBrTermContext::CallBrTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeContext* LLVMIRParser::CallBrTermContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::CallBrTermContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

LLVMIRParser::ArgsContext* LLVMIRParser::CallBrTermContext::args() {
  return getRuleContext<LLVMIRParser::ArgsContext>(0);
}

std::vector<LLVMIRParser::LabelContext *> LLVMIRParser::CallBrTermContext::label() {
  return getRuleContexts<LLVMIRParser::LabelContext>();
}

LLVMIRParser::LabelContext* LLVMIRParser::CallBrTermContext::label(size_t i) {
  return getRuleContext<LLVMIRParser::LabelContext>(i);
}

LLVMIRParser::CallingConvContext* LLVMIRParser::CallBrTermContext::callingConv() {
  return getRuleContext<LLVMIRParser::CallingConvContext>(0);
}

std::vector<LLVMIRParser::ReturnAttributeContext *> LLVMIRParser::CallBrTermContext::returnAttribute() {
  return getRuleContexts<LLVMIRParser::ReturnAttributeContext>();
}

LLVMIRParser::ReturnAttributeContext* LLVMIRParser::CallBrTermContext::returnAttribute(size_t i) {
  return getRuleContext<LLVMIRParser::ReturnAttributeContext>(i);
}

LLVMIRParser::AddrSpaceContext* LLVMIRParser::CallBrTermContext::addrSpace() {
  return getRuleContext<LLVMIRParser::AddrSpaceContext>(0);
}

std::vector<LLVMIRParser::FuncAttributeContext *> LLVMIRParser::CallBrTermContext::funcAttribute() {
  return getRuleContexts<LLVMIRParser::FuncAttributeContext>();
}

LLVMIRParser::FuncAttributeContext* LLVMIRParser::CallBrTermContext::funcAttribute(size_t i) {
  return getRuleContext<LLVMIRParser::FuncAttributeContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::CallBrTermContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::CallBrTermContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}

std::vector<LLVMIRParser::OperandBundleContext *> LLVMIRParser::CallBrTermContext::operandBundle() {
  return getRuleContexts<LLVMIRParser::OperandBundleContext>();
}

LLVMIRParser::OperandBundleContext* LLVMIRParser::CallBrTermContext::operandBundle(size_t i) {
  return getRuleContext<LLVMIRParser::OperandBundleContext>(i);
}


size_t LLVMIRParser::CallBrTermContext::getRuleIndex() const {
  return LLVMIRParser::RuleCallBrTerm;
}


std::any LLVMIRParser::CallBrTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitCallBrTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::CallBrTermContext* LLVMIRParser::callBrTerm() {
  CallBrTermContext *_localctx = _tracker.createInstance<CallBrTermContext>(_ctx, getState());
  enterRule(_localctx, 90, LLVMIRParser::RuleCallBrTerm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1364);
    match(LLVMIRParser::T__47);
    setState(1366);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__27 || ((((_la - 293) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 293)) & 35184372088831) != 0)) {
      setState(1365);
      callingConv();
    }
    setState(1371);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 80) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 80)) & 2221213185) != 0)) {
      setState(1368);
      returnAttribute();
      setState(1373);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1375);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__118) {
      setState(1374);
      addrSpace();
    }
    setState(1377);
    type(0);
    setState(1378);
    value();
    setState(1379);
    match(LLVMIRParser::T__25);
    setState(1380);
    args();
    setState(1381);
    match(LLVMIRParser::T__26);
    setState(1385);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 57) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 57)) & 45255899262222337) != 0) || ((((_la - 213) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 213)) & 1125899906842623) != 0) || _la == LLVMIRParser::StringLit

    || _la == LLVMIRParser::AttrGroupId) {
      setState(1382);
      funcAttribute();
      setState(1387);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1398);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__36) {
      setState(1388);
      match(LLVMIRParser::T__36);
      setState(1392); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1389);
        operandBundle();
        setState(1390);
        match(LLVMIRParser::T__14);
        setState(1394); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == LLVMIRParser::StringLit);
      setState(1396);
      match(LLVMIRParser::T__37);
    }
    setState(1400);
    match(LLVMIRParser::T__42);
    setState(1401);
    label();
    setState(1402);
    match(LLVMIRParser::T__36);
    setState(1411);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__50) {
      setState(1403);
      label();
      setState(1408);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(1404);
        match(LLVMIRParser::T__14);
        setState(1405);
        label();
        setState(1410);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1413);
    match(LLVMIRParser::T__37);
    setState(1418);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(1414);
      match(LLVMIRParser::T__14);
      setState(1415);
      metadataAttachment();
      setState(1420);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchSwitchTermContext ------------------------------------------------------------------

LLVMIRParser::CatchSwitchTermContext::CatchSwitchTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::ExceptionPadContext* LLVMIRParser::CatchSwitchTermContext::exceptionPad() {
  return getRuleContext<LLVMIRParser::ExceptionPadContext>(0);
}

LLVMIRParser::HandlersContext* LLVMIRParser::CatchSwitchTermContext::handlers() {
  return getRuleContext<LLVMIRParser::HandlersContext>(0);
}

LLVMIRParser::UnwindTargetContext* LLVMIRParser::CatchSwitchTermContext::unwindTarget() {
  return getRuleContext<LLVMIRParser::UnwindTargetContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::CatchSwitchTermContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::CatchSwitchTermContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::CatchSwitchTermContext::getRuleIndex() const {
  return LLVMIRParser::RuleCatchSwitchTerm;
}


std::any LLVMIRParser::CatchSwitchTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitCatchSwitchTerm(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::CatchSwitchTermContext* LLVMIRParser::catchSwitchTerm() {
  CatchSwitchTermContext *_localctx = _tracker.createInstance<CatchSwitchTermContext>(_ctx, getState());
  enterRule(_localctx, 92, LLVMIRParser::RuleCatchSwitchTerm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1421);
    match(LLVMIRParser::T__48);
    setState(1422);
    match(LLVMIRParser::T__49);
    setState(1423);
    exceptionPad();
    setState(1424);
    match(LLVMIRParser::T__36);
    setState(1425);
    handlers();
    setState(1426);
    match(LLVMIRParser::T__37);
    setState(1427);
    match(LLVMIRParser::T__44);
    setState(1428);
    unwindTarget();
    setState(1433);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(1429);
      match(LLVMIRParser::T__14);
      setState(1430);
      metadataAttachment();
      setState(1435);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelContext ------------------------------------------------------------------

LLVMIRParser::LabelContext::LabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::LabelContext::LocalIdent() {
  return getToken(LLVMIRParser::LocalIdent, 0);
}


size_t LLVMIRParser::LabelContext::getRuleIndex() const {
  return LLVMIRParser::RuleLabel;
}


std::any LLVMIRParser::LabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitLabel(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::LabelContext* LLVMIRParser::label() {
  LabelContext *_localctx = _tracker.createInstance<LabelContext>(_ctx, getState());
  enterRule(_localctx, 94, LLVMIRParser::RuleLabel);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1436);
    match(LLVMIRParser::T__50);
    setState(1437);
    match(LLVMIRParser::LocalIdent);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseContext ------------------------------------------------------------------

LLVMIRParser::CaseContext::CaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeConstContext* LLVMIRParser::CaseContext::typeConst() {
  return getRuleContext<LLVMIRParser::TypeConstContext>(0);
}

LLVMIRParser::LabelContext* LLVMIRParser::CaseContext::label() {
  return getRuleContext<LLVMIRParser::LabelContext>(0);
}


size_t LLVMIRParser::CaseContext::getRuleIndex() const {
  return LLVMIRParser::RuleCase;
}


std::any LLVMIRParser::CaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitCase(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::CaseContext* LLVMIRParser::case_() {
  CaseContext *_localctx = _tracker.createInstance<CaseContext>(_ctx, getState());
  enterRule(_localctx, 96, LLVMIRParser::RuleCase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1439);
    typeConst();
    setState(1440);
    match(LLVMIRParser::T__14);
    setState(1441);
    label();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnwindTargetContext ------------------------------------------------------------------

LLVMIRParser::UnwindTargetContext::UnwindTargetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::LabelContext* LLVMIRParser::UnwindTargetContext::label() {
  return getRuleContext<LLVMIRParser::LabelContext>(0);
}


size_t LLVMIRParser::UnwindTargetContext::getRuleIndex() const {
  return LLVMIRParser::RuleUnwindTarget;
}


std::any LLVMIRParser::UnwindTargetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitUnwindTarget(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::UnwindTargetContext* LLVMIRParser::unwindTarget() {
  UnwindTargetContext *_localctx = _tracker.createInstance<UnwindTargetContext>(_ctx, getState());
  enterRule(_localctx, 98, LLVMIRParser::RuleUnwindTarget);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1446);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__42: {
        enterOuterAlt(_localctx, 1);
        setState(1443);
        match(LLVMIRParser::T__42);
        setState(1444);
        match(LLVMIRParser::T__51);
        break;
      }

      case LLVMIRParser::T__50: {
        enterOuterAlt(_localctx, 2);
        setState(1445);
        label();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HandlersContext ------------------------------------------------------------------

LLVMIRParser::HandlersContext::HandlersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::LabelContext *> LLVMIRParser::HandlersContext::label() {
  return getRuleContexts<LLVMIRParser::LabelContext>();
}

LLVMIRParser::LabelContext* LLVMIRParser::HandlersContext::label(size_t i) {
  return getRuleContext<LLVMIRParser::LabelContext>(i);
}


size_t LLVMIRParser::HandlersContext::getRuleIndex() const {
  return LLVMIRParser::RuleHandlers;
}


std::any LLVMIRParser::HandlersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitHandlers(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::HandlersContext* LLVMIRParser::handlers() {
  HandlersContext *_localctx = _tracker.createInstance<HandlersContext>(_ctx, getState());
  enterRule(_localctx, 100, LLVMIRParser::RuleHandlers);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1448);
    label();
    setState(1453);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(1449);
      match(LLVMIRParser::T__14);
      setState(1450);
      label();
      setState(1455);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetadataNodeContext ------------------------------------------------------------------

LLVMIRParser::MetadataNodeContext::MetadataNodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::MetadataNodeContext::MetadataId() {
  return getToken(LLVMIRParser::MetadataId, 0);
}

LLVMIRParser::DiExpressionContext* LLVMIRParser::MetadataNodeContext::diExpression() {
  return getRuleContext<LLVMIRParser::DiExpressionContext>(0);
}


size_t LLVMIRParser::MetadataNodeContext::getRuleIndex() const {
  return LLVMIRParser::RuleMetadataNode;
}


std::any LLVMIRParser::MetadataNodeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitMetadataNode(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::MetadataNodeContext* LLVMIRParser::metadataNode() {
  MetadataNodeContext *_localctx = _tracker.createInstance<MetadataNodeContext>(_ctx, getState());
  enterRule(_localctx, 102, LLVMIRParser::RuleMetadataNode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1458);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::MetadataId: {
        enterOuterAlt(_localctx, 1);
        setState(1456);
        match(LLVMIRParser::MetadataId);
        break;
      }

      case LLVMIRParser::T__52: {
        enterOuterAlt(_localctx, 2);
        setState(1457);
        diExpression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiExpressionContext ------------------------------------------------------------------

LLVMIRParser::DiExpressionContext::DiExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiExpressionFieldContext *> LLVMIRParser::DiExpressionContext::diExpressionField() {
  return getRuleContexts<LLVMIRParser::DiExpressionFieldContext>();
}

LLVMIRParser::DiExpressionFieldContext* LLVMIRParser::DiExpressionContext::diExpressionField(size_t i) {
  return getRuleContext<LLVMIRParser::DiExpressionFieldContext>(i);
}


size_t LLVMIRParser::DiExpressionContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiExpression;
}


std::any LLVMIRParser::DiExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiExpression(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiExpressionContext* LLVMIRParser::diExpression() {
  DiExpressionContext *_localctx = _tracker.createInstance<DiExpressionContext>(_ctx, getState());
  enterRule(_localctx, 104, LLVMIRParser::RuleDiExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1460);
    match(LLVMIRParser::T__52);
    setState(1461);
    match(LLVMIRParser::T__25);
    setState(1470);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 490) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 490)) & 1052673) != 0)) {
      setState(1462);
      diExpressionField();
      setState(1467);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(1463);
        match(LLVMIRParser::T__14);
        setState(1464);
        diExpressionField();
        setState(1469);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1472);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiExpressionFieldContext ------------------------------------------------------------------

LLVMIRParser::DiExpressionFieldContext::DiExpressionFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::DiExpressionFieldContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}

tree::TerminalNode* LLVMIRParser::DiExpressionFieldContext::DwarfAttEncoding() {
  return getToken(LLVMIRParser::DwarfAttEncoding, 0);
}

tree::TerminalNode* LLVMIRParser::DiExpressionFieldContext::DwarfOp() {
  return getToken(LLVMIRParser::DwarfOp, 0);
}


size_t LLVMIRParser::DiExpressionFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiExpressionField;
}


std::any LLVMIRParser::DiExpressionFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiExpressionField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiExpressionFieldContext* LLVMIRParser::diExpressionField() {
  DiExpressionFieldContext *_localctx = _tracker.createInstance<DiExpressionFieldContext>(_ctx, getState());
  enterRule(_localctx, 106, LLVMIRParser::RuleDiExpressionField);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1474);
    _la = _input->LA(1);
    if (!(((((_la - 490) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 490)) & 1052673) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlobalFieldContext ------------------------------------------------------------------

LLVMIRParser::GlobalFieldContext::GlobalFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::SectionContext* LLVMIRParser::GlobalFieldContext::section() {
  return getRuleContext<LLVMIRParser::SectionContext>(0);
}

LLVMIRParser::PartitionContext* LLVMIRParser::GlobalFieldContext::partition() {
  return getRuleContext<LLVMIRParser::PartitionContext>(0);
}

LLVMIRParser::ComdatContext* LLVMIRParser::GlobalFieldContext::comdat() {
  return getRuleContext<LLVMIRParser::ComdatContext>(0);
}

LLVMIRParser::AlignContext* LLVMIRParser::GlobalFieldContext::align() {
  return getRuleContext<LLVMIRParser::AlignContext>(0);
}


size_t LLVMIRParser::GlobalFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleGlobalField;
}


std::any LLVMIRParser::GlobalFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitGlobalField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::GlobalFieldContext* LLVMIRParser::globalField() {
  GlobalFieldContext *_localctx = _tracker.createInstance<GlobalFieldContext>(_ctx, getState());
  enterRule(_localctx, 108, LLVMIRParser::RuleGlobalField);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1481);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__57: {
        enterOuterAlt(_localctx, 1);
        setState(1476);
        section();
        break;
      }

      case LLVMIRParser::T__58: {
        enterOuterAlt(_localctx, 2);
        setState(1477);
        partition();
        break;
      }

      case LLVMIRParser::T__8: {
        enterOuterAlt(_localctx, 3);
        setState(1478);
        comdat();
        break;
      }

      case LLVMIRParser::T__79: {
        enterOuterAlt(_localctx, 4);
        setState(1479);
        align();
        break;
      }

      case LLVMIRParser::T__53:
      case LLVMIRParser::T__54:
      case LLVMIRParser::T__55:
      case LLVMIRParser::T__56: {
        enterOuterAlt(_localctx, 5);
        setState(1480);
        antlrcpp::downCast<GlobalFieldContext *>(_localctx)->sanitizerKind = _input->LT(1);
        _la = _input->LA(1);
        if (!((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 270215977642229760) != 0))) {
          antlrcpp::downCast<GlobalFieldContext *>(_localctx)->sanitizerKind = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SectionContext ------------------------------------------------------------------

LLVMIRParser::SectionContext::SectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::SectionContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::SectionContext::getRuleIndex() const {
  return LLVMIRParser::RuleSection;
}


std::any LLVMIRParser::SectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitSection(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::SectionContext* LLVMIRParser::section() {
  SectionContext *_localctx = _tracker.createInstance<SectionContext>(_ctx, getState());
  enterRule(_localctx, 110, LLVMIRParser::RuleSection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1483);
    match(LLVMIRParser::T__57);
    setState(1484);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComdatContext ------------------------------------------------------------------

LLVMIRParser::ComdatContext::ComdatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::ComdatContext::ComdatName() {
  return getToken(LLVMIRParser::ComdatName, 0);
}


size_t LLVMIRParser::ComdatContext::getRuleIndex() const {
  return LLVMIRParser::RuleComdat;
}


std::any LLVMIRParser::ComdatContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitComdat(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ComdatContext* LLVMIRParser::comdat() {
  ComdatContext *_localctx = _tracker.createInstance<ComdatContext>(_ctx, getState());
  enterRule(_localctx, 112, LLVMIRParser::RuleComdat);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1486);
    match(LLVMIRParser::T__8);
    setState(1490);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__25) {
      setState(1487);
      match(LLVMIRParser::T__25);
      setState(1488);
      match(LLVMIRParser::ComdatName);
      setState(1489);
      match(LLVMIRParser::T__26);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PartitionContext ------------------------------------------------------------------

LLVMIRParser::PartitionContext::PartitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::PartitionContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::PartitionContext::getRuleIndex() const {
  return LLVMIRParser::RulePartition;
}


std::any LLVMIRParser::PartitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitPartition(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::PartitionContext* LLVMIRParser::partition() {
  PartitionContext *_localctx = _tracker.createInstance<PartitionContext>(_ctx, getState());
  enterRule(_localctx, 114, LLVMIRParser::RulePartition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1492);
    match(LLVMIRParser::T__58);
    setState(1493);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantContext ------------------------------------------------------------------

LLVMIRParser::ConstantContext::ConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::BoolConstContext* LLVMIRParser::ConstantContext::boolConst() {
  return getRuleContext<LLVMIRParser::BoolConstContext>(0);
}

LLVMIRParser::IntConstContext* LLVMIRParser::ConstantContext::intConst() {
  return getRuleContext<LLVMIRParser::IntConstContext>(0);
}

LLVMIRParser::FloatConstContext* LLVMIRParser::ConstantContext::floatConst() {
  return getRuleContext<LLVMIRParser::FloatConstContext>(0);
}

LLVMIRParser::NullConstContext* LLVMIRParser::ConstantContext::nullConst() {
  return getRuleContext<LLVMIRParser::NullConstContext>(0);
}

LLVMIRParser::NoneConstContext* LLVMIRParser::ConstantContext::noneConst() {
  return getRuleContext<LLVMIRParser::NoneConstContext>(0);
}

LLVMIRParser::StructConstContext* LLVMIRParser::ConstantContext::structConst() {
  return getRuleContext<LLVMIRParser::StructConstContext>(0);
}

LLVMIRParser::ArrayConstContext* LLVMIRParser::ConstantContext::arrayConst() {
  return getRuleContext<LLVMIRParser::ArrayConstContext>(0);
}

LLVMIRParser::VectorConstContext* LLVMIRParser::ConstantContext::vectorConst() {
  return getRuleContext<LLVMIRParser::VectorConstContext>(0);
}

LLVMIRParser::ZeroInitializerConstContext* LLVMIRParser::ConstantContext::zeroInitializerConst() {
  return getRuleContext<LLVMIRParser::ZeroInitializerConstContext>(0);
}

tree::TerminalNode* LLVMIRParser::ConstantContext::GlobalIdent() {
  return getToken(LLVMIRParser::GlobalIdent, 0);
}

LLVMIRParser::UndefConstContext* LLVMIRParser::ConstantContext::undefConst() {
  return getRuleContext<LLVMIRParser::UndefConstContext>(0);
}

LLVMIRParser::PoisonConstContext* LLVMIRParser::ConstantContext::poisonConst() {
  return getRuleContext<LLVMIRParser::PoisonConstContext>(0);
}

LLVMIRParser::BlockAddressConstContext* LLVMIRParser::ConstantContext::blockAddressConst() {
  return getRuleContext<LLVMIRParser::BlockAddressConstContext>(0);
}

LLVMIRParser::DsoLocalEquivalentConstContext* LLVMIRParser::ConstantContext::dsoLocalEquivalentConst() {
  return getRuleContext<LLVMIRParser::DsoLocalEquivalentConstContext>(0);
}

LLVMIRParser::NoCFIConstContext* LLVMIRParser::ConstantContext::noCFIConst() {
  return getRuleContext<LLVMIRParser::NoCFIConstContext>(0);
}

LLVMIRParser::ConstantExprContext* LLVMIRParser::ConstantContext::constantExpr() {
  return getRuleContext<LLVMIRParser::ConstantExprContext>(0);
}


size_t LLVMIRParser::ConstantContext::getRuleIndex() const {
  return LLVMIRParser::RuleConstant;
}


std::any LLVMIRParser::ConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitConstant(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ConstantContext* LLVMIRParser::constant() {
  ConstantContext *_localctx = _tracker.createInstance<ConstantContext>(_ctx, getState());
  enterRule(_localctx, 116, LLVMIRParser::RuleConstant);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1511);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1495);
      boolConst();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1496);
      intConst();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1497);
      floatConst();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1498);
      nullConst();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1499);
      noneConst();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1500);
      structConst();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1501);
      arrayConst();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1502);
      vectorConst();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1503);
      zeroInitializerConst();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1504);
      match(LLVMIRParser::GlobalIdent);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1505);
      undefConst();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1506);
      poisonConst();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1507);
      blockAddressConst();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1508);
      dsoLocalEquivalentConst();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1509);
      noCFIConst();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(1510);
      constantExpr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BoolConstContext ------------------------------------------------------------------

LLVMIRParser::BoolConstContext::BoolConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::BoolConstContext::getRuleIndex() const {
  return LLVMIRParser::RuleBoolConst;
}


std::any LLVMIRParser::BoolConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitBoolConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::BoolConstContext* LLVMIRParser::boolConst() {
  BoolConstContext *_localctx = _tracker.createInstance<BoolConstContext>(_ctx, getState());
  enterRule(_localctx, 118, LLVMIRParser::RuleBoolConst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1513);
    _la = _input->LA(1);
    if (!(_la == LLVMIRParser::T__59

    || _la == LLVMIRParser::T__60)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntConstContext ------------------------------------------------------------------

LLVMIRParser::IntConstContext::IntConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::IntConstContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::IntConstContext::getRuleIndex() const {
  return LLVMIRParser::RuleIntConst;
}


std::any LLVMIRParser::IntConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitIntConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::IntConstContext* LLVMIRParser::intConst() {
  IntConstContext *_localctx = _tracker.createInstance<IntConstContext>(_ctx, getState());
  enterRule(_localctx, 120, LLVMIRParser::RuleIntConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1515);
    match(LLVMIRParser::IntLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatConstContext ------------------------------------------------------------------

LLVMIRParser::FloatConstContext::FloatConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::FloatConstContext::FloatLit() {
  return getToken(LLVMIRParser::FloatLit, 0);
}


size_t LLVMIRParser::FloatConstContext::getRuleIndex() const {
  return LLVMIRParser::RuleFloatConst;
}


std::any LLVMIRParser::FloatConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFloatConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FloatConstContext* LLVMIRParser::floatConst() {
  FloatConstContext *_localctx = _tracker.createInstance<FloatConstContext>(_ctx, getState());
  enterRule(_localctx, 122, LLVMIRParser::RuleFloatConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1517);
    match(LLVMIRParser::FloatLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NullConstContext ------------------------------------------------------------------

LLVMIRParser::NullConstContext::NullConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::NullConstContext::getRuleIndex() const {
  return LLVMIRParser::RuleNullConst;
}


std::any LLVMIRParser::NullConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitNullConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::NullConstContext* LLVMIRParser::nullConst() {
  NullConstContext *_localctx = _tracker.createInstance<NullConstContext>(_ctx, getState());
  enterRule(_localctx, 124, LLVMIRParser::RuleNullConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1519);
    match(LLVMIRParser::T__61);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NoneConstContext ------------------------------------------------------------------

LLVMIRParser::NoneConstContext::NoneConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::NoneConstContext::getRuleIndex() const {
  return LLVMIRParser::RuleNoneConst;
}


std::any LLVMIRParser::NoneConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitNoneConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::NoneConstContext* LLVMIRParser::noneConst() {
  NoneConstContext *_localctx = _tracker.createInstance<NoneConstContext>(_ctx, getState());
  enterRule(_localctx, 126, LLVMIRParser::RuleNoneConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1521);
    match(LLVMIRParser::T__62);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructConstContext ------------------------------------------------------------------

LLVMIRParser::StructConstContext::StructConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeConstContext *> LLVMIRParser::StructConstContext::typeConst() {
  return getRuleContexts<LLVMIRParser::TypeConstContext>();
}

LLVMIRParser::TypeConstContext* LLVMIRParser::StructConstContext::typeConst(size_t i) {
  return getRuleContext<LLVMIRParser::TypeConstContext>(i);
}


size_t LLVMIRParser::StructConstContext::getRuleIndex() const {
  return LLVMIRParser::RuleStructConst;
}


std::any LLVMIRParser::StructConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitStructConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::StructConstContext* LLVMIRParser::structConst() {
  StructConstContext *_localctx = _tracker.createInstance<StructConstContext>(_ctx, getState());
  enterRule(_localctx, 128, LLVMIRParser::RuleStructConst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1549);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__20: {
        enterOuterAlt(_localctx, 1);
        setState(1523);
        match(LLVMIRParser::T__20);
        setState(1532);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 2251954434605056) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 175640385467457537) != 0) || ((((_la - 354) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 354)) & 127) != 0) || _la == LLVMIRParser::LocalIdent

        || _la == LLVMIRParser::IntType) {
          setState(1524);
          typeConst();
          setState(1529);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == LLVMIRParser::T__14) {
            setState(1525);
            match(LLVMIRParser::T__14);
            setState(1526);
            typeConst();
            setState(1531);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(1534);
        match(LLVMIRParser::T__21);
        break;
      }

      case LLVMIRParser::T__63: {
        enterOuterAlt(_localctx, 2);
        setState(1535);
        match(LLVMIRParser::T__63);
        setState(1536);
        match(LLVMIRParser::T__20);
        setState(1545);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 2251954434605056) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 175640385467457537) != 0) || ((((_la - 354) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 354)) & 127) != 0) || _la == LLVMIRParser::LocalIdent

        || _la == LLVMIRParser::IntType) {
          setState(1537);
          typeConst();
          setState(1542);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == LLVMIRParser::T__14) {
            setState(1538);
            match(LLVMIRParser::T__14);
            setState(1539);
            typeConst();
            setState(1544);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(1547);
        match(LLVMIRParser::T__21);
        setState(1548);
        match(LLVMIRParser::T__64);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayConstContext ------------------------------------------------------------------

LLVMIRParser::ArrayConstContext::ArrayConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::ArrayConstContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}

std::vector<LLVMIRParser::TypeConstContext *> LLVMIRParser::ArrayConstContext::typeConst() {
  return getRuleContexts<LLVMIRParser::TypeConstContext>();
}

LLVMIRParser::TypeConstContext* LLVMIRParser::ArrayConstContext::typeConst(size_t i) {
  return getRuleContext<LLVMIRParser::TypeConstContext>(i);
}


size_t LLVMIRParser::ArrayConstContext::getRuleIndex() const {
  return LLVMIRParser::RuleArrayConst;
}


std::any LLVMIRParser::ArrayConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitArrayConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ArrayConstContext* LLVMIRParser::arrayConst() {
  ArrayConstContext *_localctx = _tracker.createInstance<ArrayConstContext>(_ctx, getState());
  enterRule(_localctx, 130, LLVMIRParser::RuleArrayConst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1565);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__65: {
        enterOuterAlt(_localctx, 1);
        setState(1551);
        match(LLVMIRParser::T__65);
        setState(1552);
        match(LLVMIRParser::StringLit);
        break;
      }

      case LLVMIRParser::T__36: {
        enterOuterAlt(_localctx, 2);
        setState(1553);
        match(LLVMIRParser::T__36);
        setState(1562);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 2251954434605056) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 175640385467457537) != 0) || ((((_la - 354) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 354)) & 127) != 0) || _la == LLVMIRParser::LocalIdent

        || _la == LLVMIRParser::IntType) {
          setState(1554);
          typeConst();
          setState(1559);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == LLVMIRParser::T__14) {
            setState(1555);
            match(LLVMIRParser::T__14);
            setState(1556);
            typeConst();
            setState(1561);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(1564);
        match(LLVMIRParser::T__37);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VectorConstContext ------------------------------------------------------------------

LLVMIRParser::VectorConstContext::VectorConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeConstContext *> LLVMIRParser::VectorConstContext::typeConst() {
  return getRuleContexts<LLVMIRParser::TypeConstContext>();
}

LLVMIRParser::TypeConstContext* LLVMIRParser::VectorConstContext::typeConst(size_t i) {
  return getRuleContext<LLVMIRParser::TypeConstContext>(i);
}


size_t LLVMIRParser::VectorConstContext::getRuleIndex() const {
  return LLVMIRParser::RuleVectorConst;
}


std::any LLVMIRParser::VectorConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitVectorConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::VectorConstContext* LLVMIRParser::vectorConst() {
  VectorConstContext *_localctx = _tracker.createInstance<VectorConstContext>(_ctx, getState());
  enterRule(_localctx, 132, LLVMIRParser::RuleVectorConst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1567);
    match(LLVMIRParser::T__63);
    setState(1576);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251954434605056) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 175640385467457537) != 0) || ((((_la - 354) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 354)) & 127) != 0) || _la == LLVMIRParser::LocalIdent

    || _la == LLVMIRParser::IntType) {
      setState(1568);
      typeConst();
      setState(1573);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(1569);
        match(LLVMIRParser::T__14);
        setState(1570);
        typeConst();
        setState(1575);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1578);
    match(LLVMIRParser::T__64);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ZeroInitializerConstContext ------------------------------------------------------------------

LLVMIRParser::ZeroInitializerConstContext::ZeroInitializerConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::ZeroInitializerConstContext::getRuleIndex() const {
  return LLVMIRParser::RuleZeroInitializerConst;
}


std::any LLVMIRParser::ZeroInitializerConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitZeroInitializerConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ZeroInitializerConstContext* LLVMIRParser::zeroInitializerConst() {
  ZeroInitializerConstContext *_localctx = _tracker.createInstance<ZeroInitializerConstContext>(_ctx, getState());
  enterRule(_localctx, 134, LLVMIRParser::RuleZeroInitializerConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1580);
    match(LLVMIRParser::T__66);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UndefConstContext ------------------------------------------------------------------

LLVMIRParser::UndefConstContext::UndefConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::UndefConstContext::getRuleIndex() const {
  return LLVMIRParser::RuleUndefConst;
}


std::any LLVMIRParser::UndefConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitUndefConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::UndefConstContext* LLVMIRParser::undefConst() {
  UndefConstContext *_localctx = _tracker.createInstance<UndefConstContext>(_ctx, getState());
  enterRule(_localctx, 136, LLVMIRParser::RuleUndefConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1582);
    match(LLVMIRParser::T__67);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PoisonConstContext ------------------------------------------------------------------

LLVMIRParser::PoisonConstContext::PoisonConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::PoisonConstContext::getRuleIndex() const {
  return LLVMIRParser::RulePoisonConst;
}


std::any LLVMIRParser::PoisonConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitPoisonConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::PoisonConstContext* LLVMIRParser::poisonConst() {
  PoisonConstContext *_localctx = _tracker.createInstance<PoisonConstContext>(_ctx, getState());
  enterRule(_localctx, 138, LLVMIRParser::RulePoisonConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1584);
    match(LLVMIRParser::T__68);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockAddressConstContext ------------------------------------------------------------------

LLVMIRParser::BlockAddressConstContext::BlockAddressConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::BlockAddressConstContext::GlobalIdent() {
  return getToken(LLVMIRParser::GlobalIdent, 0);
}

tree::TerminalNode* LLVMIRParser::BlockAddressConstContext::LocalIdent() {
  return getToken(LLVMIRParser::LocalIdent, 0);
}


size_t LLVMIRParser::BlockAddressConstContext::getRuleIndex() const {
  return LLVMIRParser::RuleBlockAddressConst;
}


std::any LLVMIRParser::BlockAddressConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitBlockAddressConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::BlockAddressConstContext* LLVMIRParser::blockAddressConst() {
  BlockAddressConstContext *_localctx = _tracker.createInstance<BlockAddressConstContext>(_ctx, getState());
  enterRule(_localctx, 140, LLVMIRParser::RuleBlockAddressConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1586);
    match(LLVMIRParser::T__69);
    setState(1587);
    match(LLVMIRParser::T__25);
    setState(1588);
    match(LLVMIRParser::GlobalIdent);
    setState(1589);
    match(LLVMIRParser::T__14);
    setState(1590);
    match(LLVMIRParser::LocalIdent);
    setState(1591);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DsoLocalEquivalentConstContext ------------------------------------------------------------------

LLVMIRParser::DsoLocalEquivalentConstContext::DsoLocalEquivalentConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::DsoLocalEquivalentConstContext::GlobalIdent() {
  return getToken(LLVMIRParser::GlobalIdent, 0);
}


size_t LLVMIRParser::DsoLocalEquivalentConstContext::getRuleIndex() const {
  return LLVMIRParser::RuleDsoLocalEquivalentConst;
}


std::any LLVMIRParser::DsoLocalEquivalentConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDsoLocalEquivalentConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DsoLocalEquivalentConstContext* LLVMIRParser::dsoLocalEquivalentConst() {
  DsoLocalEquivalentConstContext *_localctx = _tracker.createInstance<DsoLocalEquivalentConstContext>(_ctx, getState());
  enterRule(_localctx, 142, LLVMIRParser::RuleDsoLocalEquivalentConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1593);
    match(LLVMIRParser::T__70);
    setState(1594);
    match(LLVMIRParser::GlobalIdent);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NoCFIConstContext ------------------------------------------------------------------

LLVMIRParser::NoCFIConstContext::NoCFIConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::NoCFIConstContext::GlobalIdent() {
  return getToken(LLVMIRParser::GlobalIdent, 0);
}


size_t LLVMIRParser::NoCFIConstContext::getRuleIndex() const {
  return LLVMIRParser::RuleNoCFIConst;
}


std::any LLVMIRParser::NoCFIConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitNoCFIConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::NoCFIConstContext* LLVMIRParser::noCFIConst() {
  NoCFIConstContext *_localctx = _tracker.createInstance<NoCFIConstContext>(_ctx, getState());
  enterRule(_localctx, 144, LLVMIRParser::RuleNoCFIConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1596);
    match(LLVMIRParser::T__71);
    setState(1597);
    match(LLVMIRParser::GlobalIdent);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantExprContext ------------------------------------------------------------------

LLVMIRParser::ConstantExprContext::ConstantExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::FNegExprContext* LLVMIRParser::ConstantExprContext::fNegExpr() {
  return getRuleContext<LLVMIRParser::FNegExprContext>(0);
}

LLVMIRParser::AddExprContext* LLVMIRParser::ConstantExprContext::addExpr() {
  return getRuleContext<LLVMIRParser::AddExprContext>(0);
}

LLVMIRParser::SubExprContext* LLVMIRParser::ConstantExprContext::subExpr() {
  return getRuleContext<LLVMIRParser::SubExprContext>(0);
}

LLVMIRParser::MulExprContext* LLVMIRParser::ConstantExprContext::mulExpr() {
  return getRuleContext<LLVMIRParser::MulExprContext>(0);
}

LLVMIRParser::ShlExprContext* LLVMIRParser::ConstantExprContext::shlExpr() {
  return getRuleContext<LLVMIRParser::ShlExprContext>(0);
}

LLVMIRParser::LShrExprContext* LLVMIRParser::ConstantExprContext::lShrExpr() {
  return getRuleContext<LLVMIRParser::LShrExprContext>(0);
}

LLVMIRParser::AShrExprContext* LLVMIRParser::ConstantExprContext::aShrExpr() {
  return getRuleContext<LLVMIRParser::AShrExprContext>(0);
}

LLVMIRParser::AndExprContext* LLVMIRParser::ConstantExprContext::andExpr() {
  return getRuleContext<LLVMIRParser::AndExprContext>(0);
}

LLVMIRParser::OrExprContext* LLVMIRParser::ConstantExprContext::orExpr() {
  return getRuleContext<LLVMIRParser::OrExprContext>(0);
}

LLVMIRParser::XorExprContext* LLVMIRParser::ConstantExprContext::xorExpr() {
  return getRuleContext<LLVMIRParser::XorExprContext>(0);
}

LLVMIRParser::ExtractElementExprContext* LLVMIRParser::ConstantExprContext::extractElementExpr() {
  return getRuleContext<LLVMIRParser::ExtractElementExprContext>(0);
}

LLVMIRParser::InsertElementExprContext* LLVMIRParser::ConstantExprContext::insertElementExpr() {
  return getRuleContext<LLVMIRParser::InsertElementExprContext>(0);
}

LLVMIRParser::ShuffleVectorExprContext* LLVMIRParser::ConstantExprContext::shuffleVectorExpr() {
  return getRuleContext<LLVMIRParser::ShuffleVectorExprContext>(0);
}

LLVMIRParser::GetElementPtrExprContext* LLVMIRParser::ConstantExprContext::getElementPtrExpr() {
  return getRuleContext<LLVMIRParser::GetElementPtrExprContext>(0);
}

LLVMIRParser::TruncExprContext* LLVMIRParser::ConstantExprContext::truncExpr() {
  return getRuleContext<LLVMIRParser::TruncExprContext>(0);
}

LLVMIRParser::ZExtExprContext* LLVMIRParser::ConstantExprContext::zExtExpr() {
  return getRuleContext<LLVMIRParser::ZExtExprContext>(0);
}

LLVMIRParser::SExtExprContext* LLVMIRParser::ConstantExprContext::sExtExpr() {
  return getRuleContext<LLVMIRParser::SExtExprContext>(0);
}

LLVMIRParser::FpTruncExprContext* LLVMIRParser::ConstantExprContext::fpTruncExpr() {
  return getRuleContext<LLVMIRParser::FpTruncExprContext>(0);
}

LLVMIRParser::FpExtExprContext* LLVMIRParser::ConstantExprContext::fpExtExpr() {
  return getRuleContext<LLVMIRParser::FpExtExprContext>(0);
}

LLVMIRParser::FpToUiExprContext* LLVMIRParser::ConstantExprContext::fpToUiExpr() {
  return getRuleContext<LLVMIRParser::FpToUiExprContext>(0);
}

LLVMIRParser::FpToSiExprContext* LLVMIRParser::ConstantExprContext::fpToSiExpr() {
  return getRuleContext<LLVMIRParser::FpToSiExprContext>(0);
}

LLVMIRParser::UiToFpExprContext* LLVMIRParser::ConstantExprContext::uiToFpExpr() {
  return getRuleContext<LLVMIRParser::UiToFpExprContext>(0);
}

LLVMIRParser::SiToFpExprContext* LLVMIRParser::ConstantExprContext::siToFpExpr() {
  return getRuleContext<LLVMIRParser::SiToFpExprContext>(0);
}

LLVMIRParser::PtrToIntExprContext* LLVMIRParser::ConstantExprContext::ptrToIntExpr() {
  return getRuleContext<LLVMIRParser::PtrToIntExprContext>(0);
}

LLVMIRParser::IntToPtrExprContext* LLVMIRParser::ConstantExprContext::intToPtrExpr() {
  return getRuleContext<LLVMIRParser::IntToPtrExprContext>(0);
}

LLVMIRParser::BitCastExprContext* LLVMIRParser::ConstantExprContext::bitCastExpr() {
  return getRuleContext<LLVMIRParser::BitCastExprContext>(0);
}

LLVMIRParser::AddrSpaceCastExprContext* LLVMIRParser::ConstantExprContext::addrSpaceCastExpr() {
  return getRuleContext<LLVMIRParser::AddrSpaceCastExprContext>(0);
}

LLVMIRParser::ICmpExprContext* LLVMIRParser::ConstantExprContext::iCmpExpr() {
  return getRuleContext<LLVMIRParser::ICmpExprContext>(0);
}

LLVMIRParser::FCmpExprContext* LLVMIRParser::ConstantExprContext::fCmpExpr() {
  return getRuleContext<LLVMIRParser::FCmpExprContext>(0);
}

LLVMIRParser::SelectExprContext* LLVMIRParser::ConstantExprContext::selectExpr() {
  return getRuleContext<LLVMIRParser::SelectExprContext>(0);
}


size_t LLVMIRParser::ConstantExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleConstantExpr;
}


std::any LLVMIRParser::ConstantExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitConstantExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ConstantExprContext* LLVMIRParser::constantExpr() {
  ConstantExprContext *_localctx = _tracker.createInstance<ConstantExprContext>(_ctx, getState());
  enterRule(_localctx, 146, LLVMIRParser::RuleConstantExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1629);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__152: {
        enterOuterAlt(_localctx, 1);
        setState(1599);
        fNegExpr();
        break;
      }

      case LLVMIRParser::T__149: {
        enterOuterAlt(_localctx, 2);
        setState(1600);
        addExpr();
        break;
      }

      case LLVMIRParser::T__150: {
        enterOuterAlt(_localctx, 3);
        setState(1601);
        subExpr();
        break;
      }

      case LLVMIRParser::T__151: {
        enterOuterAlt(_localctx, 4);
        setState(1602);
        mulExpr();
        break;
      }

      case LLVMIRParser::T__142: {
        enterOuterAlt(_localctx, 5);
        setState(1603);
        shlExpr();
        break;
      }

      case LLVMIRParser::T__143: {
        enterOuterAlt(_localctx, 6);
        setState(1604);
        lShrExpr();
        break;
      }

      case LLVMIRParser::T__145: {
        enterOuterAlt(_localctx, 7);
        setState(1605);
        aShrExpr();
        break;
      }

      case LLVMIRParser::T__146: {
        enterOuterAlt(_localctx, 8);
        setState(1606);
        andExpr();
        break;
      }

      case LLVMIRParser::T__147: {
        enterOuterAlt(_localctx, 9);
        setState(1607);
        orExpr();
        break;
      }

      case LLVMIRParser::T__148: {
        enterOuterAlt(_localctx, 10);
        setState(1608);
        xorExpr();
        break;
      }

      case LLVMIRParser::T__139: {
        enterOuterAlt(_localctx, 11);
        setState(1609);
        extractElementExpr();
        break;
      }

      case LLVMIRParser::T__140: {
        enterOuterAlt(_localctx, 12);
        setState(1610);
        insertElementExpr();
        break;
      }

      case LLVMIRParser::T__141: {
        enterOuterAlt(_localctx, 13);
        setState(1611);
        shuffleVectorExpr();
        break;
      }

      case LLVMIRParser::T__122: {
        enterOuterAlt(_localctx, 14);
        setState(1612);
        getElementPtrExpr();
        break;
      }

      case LLVMIRParser::T__129: {
        enterOuterAlt(_localctx, 15);
        setState(1613);
        truncExpr();
        break;
      }

      case LLVMIRParser::T__130: {
        enterOuterAlt(_localctx, 16);
        setState(1614);
        zExtExpr();
        break;
      }

      case LLVMIRParser::T__131: {
        enterOuterAlt(_localctx, 17);
        setState(1615);
        sExtExpr();
        break;
      }

      case LLVMIRParser::T__132: {
        enterOuterAlt(_localctx, 18);
        setState(1616);
        fpTruncExpr();
        break;
      }

      case LLVMIRParser::T__133: {
        enterOuterAlt(_localctx, 19);
        setState(1617);
        fpExtExpr();
        break;
      }

      case LLVMIRParser::T__134: {
        enterOuterAlt(_localctx, 20);
        setState(1618);
        fpToUiExpr();
        break;
      }

      case LLVMIRParser::T__135: {
        enterOuterAlt(_localctx, 21);
        setState(1619);
        fpToSiExpr();
        break;
      }

      case LLVMIRParser::T__136: {
        enterOuterAlt(_localctx, 22);
        setState(1620);
        uiToFpExpr();
        break;
      }

      case LLVMIRParser::T__137: {
        enterOuterAlt(_localctx, 23);
        setState(1621);
        siToFpExpr();
        break;
      }

      case LLVMIRParser::T__138: {
        enterOuterAlt(_localctx, 24);
        setState(1622);
        ptrToIntExpr();
        break;
      }

      case LLVMIRParser::T__125: {
        enterOuterAlt(_localctx, 25);
        setState(1623);
        intToPtrExpr();
        break;
      }

      case LLVMIRParser::T__121: {
        enterOuterAlt(_localctx, 26);
        setState(1624);
        bitCastExpr();
        break;
      }

      case LLVMIRParser::T__124: {
        enterOuterAlt(_localctx, 27);
        setState(1625);
        addrSpaceCastExpr();
        break;
      }

      case LLVMIRParser::T__126: {
        enterOuterAlt(_localctx, 28);
        setState(1626);
        iCmpExpr();
        break;
      }

      case LLVMIRParser::T__127: {
        enterOuterAlt(_localctx, 29);
        setState(1627);
        fCmpExpr();
        break;
      }

      case LLVMIRParser::T__128: {
        enterOuterAlt(_localctx, 30);
        setState(1628);
        selectExpr();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeConstContext ------------------------------------------------------------------

LLVMIRParser::TypeConstContext::TypeConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::FirstClassTypeContext* LLVMIRParser::TypeConstContext::firstClassType() {
  return getRuleContext<LLVMIRParser::FirstClassTypeContext>(0);
}

LLVMIRParser::ConstantContext* LLVMIRParser::TypeConstContext::constant() {
  return getRuleContext<LLVMIRParser::ConstantContext>(0);
}


size_t LLVMIRParser::TypeConstContext::getRuleIndex() const {
  return LLVMIRParser::RuleTypeConst;
}


std::any LLVMIRParser::TypeConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitTypeConst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::TypeConstContext* LLVMIRParser::typeConst() {
  TypeConstContext *_localctx = _tracker.createInstance<TypeConstContext>(_ctx, getState());
  enterRule(_localctx, 148, LLVMIRParser::RuleTypeConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1631);
    firstClassType();
    setState(1632);
    constant();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetadataAttachmentContext ------------------------------------------------------------------

LLVMIRParser::MetadataAttachmentContext::MetadataAttachmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::MetadataAttachmentContext::MetadataName() {
  return getToken(LLVMIRParser::MetadataName, 0);
}

LLVMIRParser::MdNodeContext* LLVMIRParser::MetadataAttachmentContext::mdNode() {
  return getRuleContext<LLVMIRParser::MdNodeContext>(0);
}


size_t LLVMIRParser::MetadataAttachmentContext::getRuleIndex() const {
  return LLVMIRParser::RuleMetadataAttachment;
}


std::any LLVMIRParser::MetadataAttachmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitMetadataAttachment(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::metadataAttachment() {
  MetadataAttachmentContext *_localctx = _tracker.createInstance<MetadataAttachmentContext>(_ctx, getState());
  enterRule(_localctx, 150, LLVMIRParser::RuleMetadataAttachment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1634);
    match(LLVMIRParser::MetadataName);
    setState(1635);
    mdNode();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MdNodeContext ------------------------------------------------------------------

LLVMIRParser::MdNodeContext::MdNodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdTupleContext* LLVMIRParser::MdNodeContext::mdTuple() {
  return getRuleContext<LLVMIRParser::MdTupleContext>(0);
}

tree::TerminalNode* LLVMIRParser::MdNodeContext::MetadataId() {
  return getToken(LLVMIRParser::MetadataId, 0);
}

LLVMIRParser::SpecializedMDNodeContext* LLVMIRParser::MdNodeContext::specializedMDNode() {
  return getRuleContext<LLVMIRParser::SpecializedMDNodeContext>(0);
}


size_t LLVMIRParser::MdNodeContext::getRuleIndex() const {
  return LLVMIRParser::RuleMdNode;
}


std::any LLVMIRParser::MdNodeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitMdNode(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::MdNodeContext* LLVMIRParser::mdNode() {
  MdNodeContext *_localctx = _tracker.createInstance<MdNodeContext>(_ctx, getState());
  enterRule(_localctx, 152, LLVMIRParser::RuleMdNode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1640);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__22: {
        enterOuterAlt(_localctx, 1);
        setState(1637);
        mdTuple();
        break;
      }

      case LLVMIRParser::MetadataId: {
        enterOuterAlt(_localctx, 2);
        setState(1638);
        match(LLVMIRParser::MetadataId);
        break;
      }

      case LLVMIRParser::T__52:
      case LLVMIRParser::T__360:
      case LLVMIRParser::T__361:
      case LLVMIRParser::T__362:
      case LLVMIRParser::T__363:
      case LLVMIRParser::T__364:
      case LLVMIRParser::T__365:
      case LLVMIRParser::T__366:
      case LLVMIRParser::T__367:
      case LLVMIRParser::T__368:
      case LLVMIRParser::T__369:
      case LLVMIRParser::T__370:
      case LLVMIRParser::T__371:
      case LLVMIRParser::T__372:
      case LLVMIRParser::T__373:
      case LLVMIRParser::T__374:
      case LLVMIRParser::T__375:
      case LLVMIRParser::T__376:
      case LLVMIRParser::T__377:
      case LLVMIRParser::T__378:
      case LLVMIRParser::T__379:
      case LLVMIRParser::T__380:
      case LLVMIRParser::T__381:
      case LLVMIRParser::T__382:
      case LLVMIRParser::T__383:
      case LLVMIRParser::T__384:
      case LLVMIRParser::T__385:
      case LLVMIRParser::T__386: {
        enterOuterAlt(_localctx, 3);
        setState(1639);
        specializedMDNode();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MdTupleContext ------------------------------------------------------------------

LLVMIRParser::MdTupleContext::MdTupleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::MdFieldContext *> LLVMIRParser::MdTupleContext::mdField() {
  return getRuleContexts<LLVMIRParser::MdFieldContext>();
}

LLVMIRParser::MdFieldContext* LLVMIRParser::MdTupleContext::mdField(size_t i) {
  return getRuleContext<LLVMIRParser::MdFieldContext>(i);
}


size_t LLVMIRParser::MdTupleContext::getRuleIndex() const {
  return LLVMIRParser::RuleMdTuple;
}


std::any LLVMIRParser::MdTupleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitMdTuple(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::MdTupleContext* LLVMIRParser::mdTuple() {
  MdTupleContext *_localctx = _tracker.createInstance<MdTupleContext>(_ctx, getState());
  enterRule(_localctx, 154, LLVMIRParser::RuleMdTuple);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1642);
    match(LLVMIRParser::T__22);
    setState(1643);
    match(LLVMIRParser::T__20);
    setState(1652);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4622945172125122560) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 175640385467458049) != 0) || ((((_la - 354) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 354)) & 17179869183) != 0) || ((((_la - 494) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 494)) & 97) != 0)) {
      setState(1644);
      mdField();
      setState(1649);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(1645);
        match(LLVMIRParser::T__14);
        setState(1646);
        mdField();
        setState(1651);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1654);
    match(LLVMIRParser::T__21);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetadataContext ------------------------------------------------------------------

LLVMIRParser::MetadataContext::MetadataContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::MetadataContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::MdStringContext* LLVMIRParser::MetadataContext::mdString() {
  return getRuleContext<LLVMIRParser::MdStringContext>(0);
}

LLVMIRParser::MdTupleContext* LLVMIRParser::MetadataContext::mdTuple() {
  return getRuleContext<LLVMIRParser::MdTupleContext>(0);
}

tree::TerminalNode* LLVMIRParser::MetadataContext::MetadataId() {
  return getToken(LLVMIRParser::MetadataId, 0);
}

LLVMIRParser::DiArgListContext* LLVMIRParser::MetadataContext::diArgList() {
  return getRuleContext<LLVMIRParser::DiArgListContext>(0);
}

LLVMIRParser::SpecializedMDNodeContext* LLVMIRParser::MetadataContext::specializedMDNode() {
  return getRuleContext<LLVMIRParser::SpecializedMDNodeContext>(0);
}


size_t LLVMIRParser::MetadataContext::getRuleIndex() const {
  return LLVMIRParser::RuleMetadata;
}


std::any LLVMIRParser::MetadataContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitMetadata(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::MetadataContext* LLVMIRParser::metadata() {
  MetadataContext *_localctx = _tracker.createInstance<MetadataContext>(_ctx, getState());
  enterRule(_localctx, 156, LLVMIRParser::RuleMetadata);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1662);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1656);
      typeValue();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1657);
      mdString();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1658);
      mdTuple();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1659);
      match(LLVMIRParser::MetadataId);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1660);
      diArgList();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1661);
      specializedMDNode();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiArgListContext ------------------------------------------------------------------

LLVMIRParser::DiArgListContext::DiArgListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeValueContext *> LLVMIRParser::DiArgListContext::typeValue() {
  return getRuleContexts<LLVMIRParser::TypeValueContext>();
}

LLVMIRParser::TypeValueContext* LLVMIRParser::DiArgListContext::typeValue(size_t i) {
  return getRuleContext<LLVMIRParser::TypeValueContext>(i);
}


size_t LLVMIRParser::DiArgListContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiArgList;
}


std::any LLVMIRParser::DiArgListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiArgList(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiArgListContext* LLVMIRParser::diArgList() {
  DiArgListContext *_localctx = _tracker.createInstance<DiArgListContext>(_ctx, getState());
  enterRule(_localctx, 158, LLVMIRParser::RuleDiArgList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1664);
    match(LLVMIRParser::T__72);
    setState(1665);
    match(LLVMIRParser::T__25);
    setState(1674);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251954434605056) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 175640385467457537) != 0) || ((((_la - 354) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 354)) & 127) != 0) || _la == LLVMIRParser::LocalIdent

    || _la == LLVMIRParser::IntType) {
      setState(1666);
      typeValue();
      setState(1671);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(1667);
        match(LLVMIRParser::T__14);
        setState(1668);
        typeValue();
        setState(1673);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1676);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeValueContext ------------------------------------------------------------------

LLVMIRParser::TypeValueContext::TypeValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::FirstClassTypeContext* LLVMIRParser::TypeValueContext::firstClassType() {
  return getRuleContext<LLVMIRParser::FirstClassTypeContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::TypeValueContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}


size_t LLVMIRParser::TypeValueContext::getRuleIndex() const {
  return LLVMIRParser::RuleTypeValue;
}


std::any LLVMIRParser::TypeValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitTypeValue(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::TypeValueContext* LLVMIRParser::typeValue() {
  TypeValueContext *_localctx = _tracker.createInstance<TypeValueContext>(_ctx, getState());
  enterRule(_localctx, 160, LLVMIRParser::RuleTypeValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1678);
    firstClassType();
    setState(1679);
    value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueContext ------------------------------------------------------------------

LLVMIRParser::ValueContext::ValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::ConstantContext* LLVMIRParser::ValueContext::constant() {
  return getRuleContext<LLVMIRParser::ConstantContext>(0);
}

tree::TerminalNode* LLVMIRParser::ValueContext::LocalIdent() {
  return getToken(LLVMIRParser::LocalIdent, 0);
}

LLVMIRParser::InlineAsmContext* LLVMIRParser::ValueContext::inlineAsm() {
  return getRuleContext<LLVMIRParser::InlineAsmContext>(0);
}


size_t LLVMIRParser::ValueContext::getRuleIndex() const {
  return LLVMIRParser::RuleValue;
}


std::any LLVMIRParser::ValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitValue(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ValueContext* LLVMIRParser::value() {
  ValueContext *_localctx = _tracker.createInstance<ValueContext>(_ctx, getState());
  enterRule(_localctx, 162, LLVMIRParser::RuleValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1684);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__20:
      case LLVMIRParser::T__36:
      case LLVMIRParser::T__59:
      case LLVMIRParser::T__60:
      case LLVMIRParser::T__61:
      case LLVMIRParser::T__62:
      case LLVMIRParser::T__63:
      case LLVMIRParser::T__65:
      case LLVMIRParser::T__66:
      case LLVMIRParser::T__67:
      case LLVMIRParser::T__68:
      case LLVMIRParser::T__69:
      case LLVMIRParser::T__70:
      case LLVMIRParser::T__71:
      case LLVMIRParser::T__121:
      case LLVMIRParser::T__122:
      case LLVMIRParser::T__124:
      case LLVMIRParser::T__125:
      case LLVMIRParser::T__126:
      case LLVMIRParser::T__127:
      case LLVMIRParser::T__128:
      case LLVMIRParser::T__129:
      case LLVMIRParser::T__130:
      case LLVMIRParser::T__131:
      case LLVMIRParser::T__132:
      case LLVMIRParser::T__133:
      case LLVMIRParser::T__134:
      case LLVMIRParser::T__135:
      case LLVMIRParser::T__136:
      case LLVMIRParser::T__137:
      case LLVMIRParser::T__138:
      case LLVMIRParser::T__139:
      case LLVMIRParser::T__140:
      case LLVMIRParser::T__141:
      case LLVMIRParser::T__142:
      case LLVMIRParser::T__143:
      case LLVMIRParser::T__145:
      case LLVMIRParser::T__146:
      case LLVMIRParser::T__147:
      case LLVMIRParser::T__148:
      case LLVMIRParser::T__149:
      case LLVMIRParser::T__150:
      case LLVMIRParser::T__151:
      case LLVMIRParser::T__152:
      case LLVMIRParser::IntLit:
      case LLVMIRParser::FloatLit:
      case LLVMIRParser::GlobalIdent: {
        enterOuterAlt(_localctx, 1);
        setState(1681);
        constant();
        break;
      }

      case LLVMIRParser::LocalIdent: {
        enterOuterAlt(_localctx, 2);
        setState(1682);
        match(LLVMIRParser::LocalIdent);
        break;
      }

      case LLVMIRParser::T__6: {
        enterOuterAlt(_localctx, 3);
        setState(1683);
        inlineAsm();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InlineAsmContext ------------------------------------------------------------------

LLVMIRParser::InlineAsmContext::InlineAsmContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LLVMIRParser::InlineAsmContext::StringLit() {
  return getTokens(LLVMIRParser::StringLit);
}

tree::TerminalNode* LLVMIRParser::InlineAsmContext::StringLit(size_t i) {
  return getToken(LLVMIRParser::StringLit, i);
}


size_t LLVMIRParser::InlineAsmContext::getRuleIndex() const {
  return LLVMIRParser::RuleInlineAsm;
}


std::any LLVMIRParser::InlineAsmContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitInlineAsm(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::InlineAsmContext* LLVMIRParser::inlineAsm() {
  InlineAsmContext *_localctx = _tracker.createInstance<InlineAsmContext>(_ctx, getState());
  enterRule(_localctx, 164, LLVMIRParser::RuleInlineAsm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1686);
    match(LLVMIRParser::T__6);
    setState(1688);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__73) {
      setState(1687);
      antlrcpp::downCast<InlineAsmContext *>(_localctx)->sideEffect = match(LLVMIRParser::T__73);
    }
    setState(1691);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__74) {
      setState(1690);
      antlrcpp::downCast<InlineAsmContext *>(_localctx)->alignStackTok = match(LLVMIRParser::T__74);
    }
    setState(1694);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__75) {
      setState(1693);
      antlrcpp::downCast<InlineAsmContext *>(_localctx)->intelDialect = match(LLVMIRParser::T__75);
    }
    setState(1697);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__44) {
      setState(1696);
      antlrcpp::downCast<InlineAsmContext *>(_localctx)->unwind = match(LLVMIRParser::T__44);
    }
    setState(1699);
    match(LLVMIRParser::StringLit);
    setState(1700);
    match(LLVMIRParser::T__14);
    setState(1701);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MdStringContext ------------------------------------------------------------------

LLVMIRParser::MdStringContext::MdStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::MdStringContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::MdStringContext::getRuleIndex() const {
  return LLVMIRParser::RuleMdString;
}


std::any LLVMIRParser::MdStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitMdString(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::MdStringContext* LLVMIRParser::mdString() {
  MdStringContext *_localctx = _tracker.createInstance<MdStringContext>(_ctx, getState());
  enterRule(_localctx, 166, LLVMIRParser::RuleMdString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1703);
    match(LLVMIRParser::T__22);
    setState(1704);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MdFieldOrIntContext ------------------------------------------------------------------

LLVMIRParser::MdFieldOrIntContext::MdFieldOrIntContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::MdFieldOrIntContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}

LLVMIRParser::MdFieldContext* LLVMIRParser::MdFieldOrIntContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::MdFieldOrIntContext::getRuleIndex() const {
  return LLVMIRParser::RuleMdFieldOrInt;
}


std::any LLVMIRParser::MdFieldOrIntContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitMdFieldOrInt(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::MdFieldOrIntContext* LLVMIRParser::mdFieldOrInt() {
  MdFieldOrIntContext *_localctx = _tracker.createInstance<MdFieldOrIntContext>(_ctx, getState());
  enterRule(_localctx, 168, LLVMIRParser::RuleMdFieldOrInt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1708);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::IntLit: {
        enterOuterAlt(_localctx, 1);
        setState(1706);
        match(LLVMIRParser::IntLit);
        break;
      }

      case LLVMIRParser::T__20:
      case LLVMIRParser::T__22:
      case LLVMIRParser::T__33:
      case LLVMIRParser::T__36:
      case LLVMIRParser::T__50:
      case LLVMIRParser::T__52:
      case LLVMIRParser::T__61:
      case LLVMIRParser::T__63:
      case LLVMIRParser::T__72:
      case LLVMIRParser::T__76:
      case LLVMIRParser::T__115:
      case LLVMIRParser::T__116:
      case LLVMIRParser::T__117:
      case LLVMIRParser::T__120:
      case LLVMIRParser::T__353:
      case LLVMIRParser::T__354:
      case LLVMIRParser::T__355:
      case LLVMIRParser::T__356:
      case LLVMIRParser::T__357:
      case LLVMIRParser::T__358:
      case LLVMIRParser::T__359:
      case LLVMIRParser::T__360:
      case LLVMIRParser::T__361:
      case LLVMIRParser::T__362:
      case LLVMIRParser::T__363:
      case LLVMIRParser::T__364:
      case LLVMIRParser::T__365:
      case LLVMIRParser::T__366:
      case LLVMIRParser::T__367:
      case LLVMIRParser::T__368:
      case LLVMIRParser::T__369:
      case LLVMIRParser::T__370:
      case LLVMIRParser::T__371:
      case LLVMIRParser::T__372:
      case LLVMIRParser::T__373:
      case LLVMIRParser::T__374:
      case LLVMIRParser::T__375:
      case LLVMIRParser::T__376:
      case LLVMIRParser::T__377:
      case LLVMIRParser::T__378:
      case LLVMIRParser::T__379:
      case LLVMIRParser::T__380:
      case LLVMIRParser::T__381:
      case LLVMIRParser::T__382:
      case LLVMIRParser::T__383:
      case LLVMIRParser::T__384:
      case LLVMIRParser::T__385:
      case LLVMIRParser::T__386:
      case LLVMIRParser::LocalIdent:
      case LLVMIRParser::MetadataId:
      case LLVMIRParser::IntType: {
        enterOuterAlt(_localctx, 2);
        setState(1707);
        mdField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiSPFlagContext ------------------------------------------------------------------

LLVMIRParser::DiSPFlagContext::DiSPFlagContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::DiSPFlagContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}

tree::TerminalNode* LLVMIRParser::DiSPFlagContext::DispFlag() {
  return getToken(LLVMIRParser::DispFlag, 0);
}


size_t LLVMIRParser::DiSPFlagContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiSPFlag;
}


std::any LLVMIRParser::DiSPFlagContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiSPFlag(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiSPFlagContext* LLVMIRParser::diSPFlag() {
  DiSPFlagContext *_localctx = _tracker.createInstance<DiSPFlagContext>(_ctx, getState());
  enterRule(_localctx, 170, LLVMIRParser::RuleDiSPFlag);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1710);
    _la = _input->LA(1);
    if (!(_la == LLVMIRParser::IntLit

    || _la == LLVMIRParser::DispFlag)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuncAttributeContext ------------------------------------------------------------------

LLVMIRParser::FuncAttributeContext::FuncAttributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::AttrStringContext* LLVMIRParser::FuncAttributeContext::attrString() {
  return getRuleContext<LLVMIRParser::AttrStringContext>(0);
}

LLVMIRParser::AttrPairContext* LLVMIRParser::FuncAttributeContext::attrPair() {
  return getRuleContext<LLVMIRParser::AttrPairContext>(0);
}

tree::TerminalNode* LLVMIRParser::FuncAttributeContext::AttrGroupId() {
  return getToken(LLVMIRParser::AttrGroupId, 0);
}

LLVMIRParser::AlignPairContext* LLVMIRParser::FuncAttributeContext::alignPair() {
  return getRuleContext<LLVMIRParser::AlignPairContext>(0);
}

LLVMIRParser::AlignStackContext* LLVMIRParser::FuncAttributeContext::alignStack() {
  return getRuleContext<LLVMIRParser::AlignStackContext>(0);
}

LLVMIRParser::AlignStackPairContext* LLVMIRParser::FuncAttributeContext::alignStackPair() {
  return getRuleContext<LLVMIRParser::AlignStackPairContext>(0);
}

LLVMIRParser::AllocKindContext* LLVMIRParser::FuncAttributeContext::allocKind() {
  return getRuleContext<LLVMIRParser::AllocKindContext>(0);
}

LLVMIRParser::AllocSizeContext* LLVMIRParser::FuncAttributeContext::allocSize() {
  return getRuleContext<LLVMIRParser::AllocSizeContext>(0);
}

LLVMIRParser::FuncAttrContext* LLVMIRParser::FuncAttributeContext::funcAttr() {
  return getRuleContext<LLVMIRParser::FuncAttrContext>(0);
}

LLVMIRParser::PreallocatedContext* LLVMIRParser::FuncAttributeContext::preallocated() {
  return getRuleContext<LLVMIRParser::PreallocatedContext>(0);
}

LLVMIRParser::UnwindTableContext* LLVMIRParser::FuncAttributeContext::unwindTable() {
  return getRuleContext<LLVMIRParser::UnwindTableContext>(0);
}

LLVMIRParser::VectorScaleRangeContext* LLVMIRParser::FuncAttributeContext::vectorScaleRange() {
  return getRuleContext<LLVMIRParser::VectorScaleRangeContext>(0);
}


size_t LLVMIRParser::FuncAttributeContext::getRuleIndex() const {
  return LLVMIRParser::RuleFuncAttribute;
}


std::any LLVMIRParser::FuncAttributeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFuncAttribute(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FuncAttributeContext* LLVMIRParser::funcAttribute() {
  FuncAttributeContext *_localctx = _tracker.createInstance<FuncAttributeContext>(_ctx, getState());
  enterRule(_localctx, 172, LLVMIRParser::RuleFuncAttribute);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1724);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1712);
      attrString();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1713);
      attrPair();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1714);
      match(LLVMIRParser::AttrGroupId);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1715);
      alignPair();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1716);
      alignStack();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1717);
      alignStackPair();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1718);
      allocKind();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1719);
      allocSize();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1720);
      funcAttr();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1721);
      preallocated();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1722);
      unwindTable();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1723);
      vectorScaleRange();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeContext ------------------------------------------------------------------

LLVMIRParser::TypeContext::TypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::IntTypeContext* LLVMIRParser::TypeContext::intType() {
  return getRuleContext<LLVMIRParser::IntTypeContext>(0);
}

LLVMIRParser::FloatTypeContext* LLVMIRParser::TypeContext::floatType() {
  return getRuleContext<LLVMIRParser::FloatTypeContext>(0);
}

LLVMIRParser::OpaquePointerTypeContext* LLVMIRParser::TypeContext::opaquePointerType() {
  return getRuleContext<LLVMIRParser::OpaquePointerTypeContext>(0);
}

LLVMIRParser::VectorTypeContext* LLVMIRParser::TypeContext::vectorType() {
  return getRuleContext<LLVMIRParser::VectorTypeContext>(0);
}

LLVMIRParser::LabelTypeContext* LLVMIRParser::TypeContext::labelType() {
  return getRuleContext<LLVMIRParser::LabelTypeContext>(0);
}

LLVMIRParser::ArrayTypeContext* LLVMIRParser::TypeContext::arrayType() {
  return getRuleContext<LLVMIRParser::ArrayTypeContext>(0);
}

LLVMIRParser::StructTypeContext* LLVMIRParser::TypeContext::structType() {
  return getRuleContext<LLVMIRParser::StructTypeContext>(0);
}

LLVMIRParser::NamedTypeContext* LLVMIRParser::TypeContext::namedType() {
  return getRuleContext<LLVMIRParser::NamedTypeContext>(0);
}

LLVMIRParser::MmxTypeContext* LLVMIRParser::TypeContext::mmxType() {
  return getRuleContext<LLVMIRParser::MmxTypeContext>(0);
}

LLVMIRParser::TokenTypeContext* LLVMIRParser::TypeContext::tokenType() {
  return getRuleContext<LLVMIRParser::TokenTypeContext>(0);
}

LLVMIRParser::MetadataTypeContext* LLVMIRParser::TypeContext::metadataType() {
  return getRuleContext<LLVMIRParser::MetadataTypeContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::TypeContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

LLVMIRParser::ParamsContext* LLVMIRParser::TypeContext::params() {
  return getRuleContext<LLVMIRParser::ParamsContext>(0);
}

LLVMIRParser::AddrSpaceContext* LLVMIRParser::TypeContext::addrSpace() {
  return getRuleContext<LLVMIRParser::AddrSpaceContext>(0);
}


size_t LLVMIRParser::TypeContext::getRuleIndex() const {
  return LLVMIRParser::RuleType;
}


std::any LLVMIRParser::TypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitType(this);
  else
    return visitor->visitChildren(this);
}


LLVMIRParser::TypeContext* LLVMIRParser::type() {
   return type(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::type(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  LLVMIRParser::TypeContext *_localctx = _tracker.createInstance<TypeContext>(_ctx, parentState);
  LLVMIRParser::TypeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 174;
  enterRecursionRule(_localctx, 174, LLVMIRParser::RuleType, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1740);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx)) {
    case 1: {
      setState(1727);
      match(LLVMIRParser::T__33);
      break;
    }

    case 2: {
      setState(1728);
      match(LLVMIRParser::T__76);
      break;
    }

    case 3: {
      setState(1729);
      intType();
      break;
    }

    case 4: {
      setState(1730);
      floatType();
      break;
    }

    case 5: {
      setState(1731);
      opaquePointerType();
      break;
    }

    case 6: {
      setState(1732);
      vectorType();
      break;
    }

    case 7: {
      setState(1733);
      labelType();
      break;
    }

    case 8: {
      setState(1734);
      arrayType();
      break;
    }

    case 9: {
      setState(1735);
      structType();
      break;
    }

    case 10: {
      setState(1736);
      namedType();
      break;
    }

    case 11: {
      setState(1737);
      mmxType();
      break;
    }

    case 12: {
      setState(1738);
      tokenType();
      break;
    }

    case 13: {
      setState(1739);
      metadataType();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1754);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1752);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<TypeContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleType);
          setState(1742);

          if (!(precpred(_ctx, 13))) throw FailedPredicateException(this, "precpred(_ctx, 13)");
          setState(1743);
          match(LLVMIRParser::T__25);
          setState(1744);
          params();
          setState(1745);
          match(LLVMIRParser::T__26);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<TypeContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleType);
          setState(1747);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
          setState(1749);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LLVMIRParser::T__118) {
            setState(1748);
            addrSpace();
          }
          setState(1751);
          match(LLVMIRParser::T__77);
          break;
        }

        default:
          break;
        } 
      }
      setState(1756);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ParamsContext ------------------------------------------------------------------

LLVMIRParser::ParamsContext::ParamsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::ParamContext *> LLVMIRParser::ParamsContext::param() {
  return getRuleContexts<LLVMIRParser::ParamContext>();
}

LLVMIRParser::ParamContext* LLVMIRParser::ParamsContext::param(size_t i) {
  return getRuleContext<LLVMIRParser::ParamContext>(i);
}


size_t LLVMIRParser::ParamsContext::getRuleIndex() const {
  return LLVMIRParser::RuleParams;
}


std::any LLVMIRParser::ParamsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitParams(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ParamsContext* LLVMIRParser::params() {
  ParamsContext *_localctx = _tracker.createInstance<ParamsContext>(_ctx, getState());
  enterRule(_localctx, 176, LLVMIRParser::RuleParams);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1772);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__26:
      case LLVMIRParser::T__78: {
        enterOuterAlt(_localctx, 1);
        setState(1758);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LLVMIRParser::T__78) {
          setState(1757);
          antlrcpp::downCast<ParamsContext *>(_localctx)->ellipsis = match(LLVMIRParser::T__78);
        }
        break;
      }

      case LLVMIRParser::T__20:
      case LLVMIRParser::T__33:
      case LLVMIRParser::T__36:
      case LLVMIRParser::T__50:
      case LLVMIRParser::T__63:
      case LLVMIRParser::T__76:
      case LLVMIRParser::T__115:
      case LLVMIRParser::T__116:
      case LLVMIRParser::T__117:
      case LLVMIRParser::T__120:
      case LLVMIRParser::T__353:
      case LLVMIRParser::T__354:
      case LLVMIRParser::T__355:
      case LLVMIRParser::T__356:
      case LLVMIRParser::T__357:
      case LLVMIRParser::T__358:
      case LLVMIRParser::T__359:
      case LLVMIRParser::LocalIdent:
      case LLVMIRParser::IntType: {
        enterOuterAlt(_localctx, 2);
        setState(1760);
        param();
        setState(1765);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1761);
            match(LLVMIRParser::T__14);
            setState(1762);
            param(); 
          }
          setState(1767);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx);
        }
        setState(1770);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LLVMIRParser::T__14) {
          setState(1768);
          match(LLVMIRParser::T__14);
          setState(1769);
          antlrcpp::downCast<ParamsContext *>(_localctx)->ellipsis = match(LLVMIRParser::T__78);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamContext ------------------------------------------------------------------

LLVMIRParser::ParamContext::ParamContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeContext* LLVMIRParser::ParamContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

std::vector<LLVMIRParser::ParamAttributeContext *> LLVMIRParser::ParamContext::paramAttribute() {
  return getRuleContexts<LLVMIRParser::ParamAttributeContext>();
}

LLVMIRParser::ParamAttributeContext* LLVMIRParser::ParamContext::paramAttribute(size_t i) {
  return getRuleContext<LLVMIRParser::ParamAttributeContext>(i);
}

tree::TerminalNode* LLVMIRParser::ParamContext::LocalIdent() {
  return getToken(LLVMIRParser::LocalIdent, 0);
}


size_t LLVMIRParser::ParamContext::getRuleIndex() const {
  return LLVMIRParser::RuleParam;
}


std::any LLVMIRParser::ParamContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitParam(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ParamContext* LLVMIRParser::param() {
  ParamContext *_localctx = _tracker.createInstance<ParamContext>(_ctx, getState());
  enterRule(_localctx, 178, LLVMIRParser::RuleParam);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1774);
    type(0);
    setState(1778);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 549755809825) != 0) || _la == LLVMIRParser::StringLit) {
      setState(1775);
      paramAttribute();
      setState(1780);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1782);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::LocalIdent) {
      setState(1781);
      match(LLVMIRParser::LocalIdent);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamAttributeContext ------------------------------------------------------------------

LLVMIRParser::ParamAttributeContext::ParamAttributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::AttrStringContext* LLVMIRParser::ParamAttributeContext::attrString() {
  return getRuleContext<LLVMIRParser::AttrStringContext>(0);
}

LLVMIRParser::AttrPairContext* LLVMIRParser::ParamAttributeContext::attrPair() {
  return getRuleContext<LLVMIRParser::AttrPairContext>(0);
}

LLVMIRParser::AlignContext* LLVMIRParser::ParamAttributeContext::align() {
  return getRuleContext<LLVMIRParser::AlignContext>(0);
}

LLVMIRParser::AlignStackContext* LLVMIRParser::ParamAttributeContext::alignStack() {
  return getRuleContext<LLVMIRParser::AlignStackContext>(0);
}

LLVMIRParser::ByRefAttrContext* LLVMIRParser::ParamAttributeContext::byRefAttr() {
  return getRuleContext<LLVMIRParser::ByRefAttrContext>(0);
}

LLVMIRParser::ByvalContext* LLVMIRParser::ParamAttributeContext::byval() {
  return getRuleContext<LLVMIRParser::ByvalContext>(0);
}

LLVMIRParser::DereferenceableContext* LLVMIRParser::ParamAttributeContext::dereferenceable() {
  return getRuleContext<LLVMIRParser::DereferenceableContext>(0);
}

LLVMIRParser::ElementTypeContext* LLVMIRParser::ParamAttributeContext::elementType() {
  return getRuleContext<LLVMIRParser::ElementTypeContext>(0);
}

LLVMIRParser::InAllocaContext* LLVMIRParser::ParamAttributeContext::inAlloca() {
  return getRuleContext<LLVMIRParser::InAllocaContext>(0);
}

LLVMIRParser::ParamAttrContext* LLVMIRParser::ParamAttributeContext::paramAttr() {
  return getRuleContext<LLVMIRParser::ParamAttrContext>(0);
}

LLVMIRParser::PreallocatedContext* LLVMIRParser::ParamAttributeContext::preallocated() {
  return getRuleContext<LLVMIRParser::PreallocatedContext>(0);
}

LLVMIRParser::StructRetAttrContext* LLVMIRParser::ParamAttributeContext::structRetAttr() {
  return getRuleContext<LLVMIRParser::StructRetAttrContext>(0);
}


size_t LLVMIRParser::ParamAttributeContext::getRuleIndex() const {
  return LLVMIRParser::RuleParamAttribute;
}


std::any LLVMIRParser::ParamAttributeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitParamAttribute(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ParamAttributeContext* LLVMIRParser::paramAttribute() {
  ParamAttributeContext *_localctx = _tracker.createInstance<ParamAttributeContext>(_ctx, getState());
  enterRule(_localctx, 180, LLVMIRParser::RuleParamAttribute);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1796);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1784);
      attrString();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1785);
      attrPair();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1786);
      align();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1787);
      alignStack();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1788);
      byRefAttr();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1789);
      byval();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1790);
      dereferenceable();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1791);
      elementType();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1792);
      inAlloca();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1793);
      paramAttr();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1794);
      preallocated();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1795);
      structRetAttr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttrStringContext ------------------------------------------------------------------

LLVMIRParser::AttrStringContext::AttrStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::AttrStringContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::AttrStringContext::getRuleIndex() const {
  return LLVMIRParser::RuleAttrString;
}


std::any LLVMIRParser::AttrStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAttrString(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AttrStringContext* LLVMIRParser::attrString() {
  AttrStringContext *_localctx = _tracker.createInstance<AttrStringContext>(_ctx, getState());
  enterRule(_localctx, 182, LLVMIRParser::RuleAttrString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1798);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttrPairContext ------------------------------------------------------------------

LLVMIRParser::AttrPairContext::AttrPairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LLVMIRParser::AttrPairContext::StringLit() {
  return getTokens(LLVMIRParser::StringLit);
}

tree::TerminalNode* LLVMIRParser::AttrPairContext::StringLit(size_t i) {
  return getToken(LLVMIRParser::StringLit, i);
}


size_t LLVMIRParser::AttrPairContext::getRuleIndex() const {
  return LLVMIRParser::RuleAttrPair;
}


std::any LLVMIRParser::AttrPairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAttrPair(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AttrPairContext* LLVMIRParser::attrPair() {
  AttrPairContext *_localctx = _tracker.createInstance<AttrPairContext>(_ctx, getState());
  enterRule(_localctx, 184, LLVMIRParser::RuleAttrPair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1800);
    match(LLVMIRParser::StringLit);
    setState(1801);
    match(LLVMIRParser::T__1);
    setState(1802);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlignContext ------------------------------------------------------------------

LLVMIRParser::AlignContext::AlignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::AlignContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::AlignContext::getRuleIndex() const {
  return LLVMIRParser::RuleAlign;
}


std::any LLVMIRParser::AlignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAlign(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AlignContext* LLVMIRParser::align() {
  AlignContext *_localctx = _tracker.createInstance<AlignContext>(_ctx, getState());
  enterRule(_localctx, 186, LLVMIRParser::RuleAlign);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1810);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1804);
      match(LLVMIRParser::T__79);
      setState(1805);
      match(LLVMIRParser::IntLit);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1806);
      match(LLVMIRParser::T__79);
      setState(1807);
      match(LLVMIRParser::T__25);
      setState(1808);
      match(LLVMIRParser::IntLit);
      setState(1809);
      match(LLVMIRParser::T__26);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlignPairContext ------------------------------------------------------------------

LLVMIRParser::AlignPairContext::AlignPairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::AlignPairContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::AlignPairContext::getRuleIndex() const {
  return LLVMIRParser::RuleAlignPair;
}


std::any LLVMIRParser::AlignPairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAlignPair(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AlignPairContext* LLVMIRParser::alignPair() {
  AlignPairContext *_localctx = _tracker.createInstance<AlignPairContext>(_ctx, getState());
  enterRule(_localctx, 188, LLVMIRParser::RuleAlignPair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1812);
    match(LLVMIRParser::T__79);
    setState(1813);
    match(LLVMIRParser::T__1);
    setState(1814);
    match(LLVMIRParser::IntLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlignStackContext ------------------------------------------------------------------

LLVMIRParser::AlignStackContext::AlignStackContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::AlignStackContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::AlignStackContext::getRuleIndex() const {
  return LLVMIRParser::RuleAlignStack;
}


std::any LLVMIRParser::AlignStackContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAlignStack(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AlignStackContext* LLVMIRParser::alignStack() {
  AlignStackContext *_localctx = _tracker.createInstance<AlignStackContext>(_ctx, getState());
  enterRule(_localctx, 190, LLVMIRParser::RuleAlignStack);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1816);
    match(LLVMIRParser::T__74);
    setState(1817);
    match(LLVMIRParser::T__25);
    setState(1818);
    match(LLVMIRParser::IntLit);
    setState(1819);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlignStackPairContext ------------------------------------------------------------------

LLVMIRParser::AlignStackPairContext::AlignStackPairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::AlignStackPairContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::AlignStackPairContext::getRuleIndex() const {
  return LLVMIRParser::RuleAlignStackPair;
}


std::any LLVMIRParser::AlignStackPairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAlignStackPair(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AlignStackPairContext* LLVMIRParser::alignStackPair() {
  AlignStackPairContext *_localctx = _tracker.createInstance<AlignStackPairContext>(_ctx, getState());
  enterRule(_localctx, 192, LLVMIRParser::RuleAlignStackPair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1821);
    match(LLVMIRParser::T__74);
    setState(1822);
    match(LLVMIRParser::T__1);
    setState(1823);
    match(LLVMIRParser::IntLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AllocKindContext ------------------------------------------------------------------

LLVMIRParser::AllocKindContext::AllocKindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::AllocKindContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::AllocKindContext::getRuleIndex() const {
  return LLVMIRParser::RuleAllocKind;
}


std::any LLVMIRParser::AllocKindContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAllocKind(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AllocKindContext* LLVMIRParser::allocKind() {
  AllocKindContext *_localctx = _tracker.createInstance<AllocKindContext>(_ctx, getState());
  enterRule(_localctx, 194, LLVMIRParser::RuleAllocKind);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1825);
    match(LLVMIRParser::T__80);
    setState(1826);
    match(LLVMIRParser::T__25);
    setState(1827);
    match(LLVMIRParser::StringLit);
    setState(1828);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AllocSizeContext ------------------------------------------------------------------

LLVMIRParser::AllocSizeContext::AllocSizeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LLVMIRParser::AllocSizeContext::IntLit() {
  return getTokens(LLVMIRParser::IntLit);
}

tree::TerminalNode* LLVMIRParser::AllocSizeContext::IntLit(size_t i) {
  return getToken(LLVMIRParser::IntLit, i);
}


size_t LLVMIRParser::AllocSizeContext::getRuleIndex() const {
  return LLVMIRParser::RuleAllocSize;
}


std::any LLVMIRParser::AllocSizeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAllocSize(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AllocSizeContext* LLVMIRParser::allocSize() {
  AllocSizeContext *_localctx = _tracker.createInstance<AllocSizeContext>(_ctx, getState());
  enterRule(_localctx, 196, LLVMIRParser::RuleAllocSize);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1830);
    match(LLVMIRParser::T__81);
    setState(1831);
    match(LLVMIRParser::T__25);
    setState(1832);
    match(LLVMIRParser::IntLit);
    setState(1835);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__14) {
      setState(1833);
      match(LLVMIRParser::T__14);
      setState(1834);
      match(LLVMIRParser::IntLit);
    }
    setState(1837);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnwindTableContext ------------------------------------------------------------------

LLVMIRParser::UnwindTableContext::UnwindTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::UnwindTableContext::getRuleIndex() const {
  return LLVMIRParser::RuleUnwindTable;
}


std::any LLVMIRParser::UnwindTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitUnwindTable(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::UnwindTableContext* LLVMIRParser::unwindTable() {
  UnwindTableContext *_localctx = _tracker.createInstance<UnwindTableContext>(_ctx, getState());
  enterRule(_localctx, 198, LLVMIRParser::RuleUnwindTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1844);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1839);
      match(LLVMIRParser::T__82);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1840);
      match(LLVMIRParser::T__82);
      setState(1841);
      match(LLVMIRParser::T__25);
      setState(1842);
      antlrcpp::downCast<UnwindTableContext *>(_localctx)->unwindTableKind = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == LLVMIRParser::T__83

      || _la == LLVMIRParser::T__84)) {
        antlrcpp::downCast<UnwindTableContext *>(_localctx)->unwindTableKind = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1843);
      match(LLVMIRParser::T__26);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VectorScaleRangeContext ------------------------------------------------------------------

LLVMIRParser::VectorScaleRangeContext::VectorScaleRangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LLVMIRParser::VectorScaleRangeContext::IntLit() {
  return getTokens(LLVMIRParser::IntLit);
}

tree::TerminalNode* LLVMIRParser::VectorScaleRangeContext::IntLit(size_t i) {
  return getToken(LLVMIRParser::IntLit, i);
}


size_t LLVMIRParser::VectorScaleRangeContext::getRuleIndex() const {
  return LLVMIRParser::RuleVectorScaleRange;
}


std::any LLVMIRParser::VectorScaleRangeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitVectorScaleRange(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::VectorScaleRangeContext* LLVMIRParser::vectorScaleRange() {
  VectorScaleRangeContext *_localctx = _tracker.createInstance<VectorScaleRangeContext>(_ctx, getState());
  enterRule(_localctx, 200, LLVMIRParser::RuleVectorScaleRange);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1846);
    match(LLVMIRParser::T__85);
    setState(1855);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__25) {
      setState(1847);
      match(LLVMIRParser::T__25);
      setState(1852);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx)) {
      case 1: {
        setState(1848);
        match(LLVMIRParser::IntLit);
        break;
      }

      case 2: {
        setState(1849);
        match(LLVMIRParser::IntLit);
        setState(1850);
        match(LLVMIRParser::T__14);
        setState(1851);
        match(LLVMIRParser::IntLit);
        break;
      }

      default:
        break;
      }
      setState(1854);
      match(LLVMIRParser::T__26);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ByRefAttrContext ------------------------------------------------------------------

LLVMIRParser::ByRefAttrContext::ByRefAttrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeContext* LLVMIRParser::ByRefAttrContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}


size_t LLVMIRParser::ByRefAttrContext::getRuleIndex() const {
  return LLVMIRParser::RuleByRefAttr;
}


std::any LLVMIRParser::ByRefAttrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitByRefAttr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ByRefAttrContext* LLVMIRParser::byRefAttr() {
  ByRefAttrContext *_localctx = _tracker.createInstance<ByRefAttrContext>(_ctx, getState());
  enterRule(_localctx, 202, LLVMIRParser::RuleByRefAttr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1857);
    match(LLVMIRParser::T__86);
    setState(1858);
    match(LLVMIRParser::T__25);
    setState(1859);
    type(0);
    setState(1860);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ByvalContext ------------------------------------------------------------------

LLVMIRParser::ByvalContext::ByvalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeContext* LLVMIRParser::ByvalContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}


size_t LLVMIRParser::ByvalContext::getRuleIndex() const {
  return LLVMIRParser::RuleByval;
}


std::any LLVMIRParser::ByvalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitByval(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ByvalContext* LLVMIRParser::byval() {
  ByvalContext *_localctx = _tracker.createInstance<ByvalContext>(_ctx, getState());
  enterRule(_localctx, 204, LLVMIRParser::RuleByval);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1862);
    match(LLVMIRParser::T__87);
    setState(1867);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__25) {
      setState(1863);
      match(LLVMIRParser::T__25);
      setState(1864);
      type(0);
      setState(1865);
      match(LLVMIRParser::T__26);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DereferenceableContext ------------------------------------------------------------------

LLVMIRParser::DereferenceableContext::DereferenceableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::DereferenceableContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::DereferenceableContext::getRuleIndex() const {
  return LLVMIRParser::RuleDereferenceable;
}


std::any LLVMIRParser::DereferenceableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDereferenceable(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DereferenceableContext* LLVMIRParser::dereferenceable() {
  DereferenceableContext *_localctx = _tracker.createInstance<DereferenceableContext>(_ctx, getState());
  enterRule(_localctx, 206, LLVMIRParser::RuleDereferenceable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1877);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__88: {
        enterOuterAlt(_localctx, 1);
        setState(1869);
        match(LLVMIRParser::T__88);
        setState(1870);
        match(LLVMIRParser::T__25);
        setState(1871);
        match(LLVMIRParser::IntLit);
        setState(1872);
        match(LLVMIRParser::T__26);
        break;
      }

      case LLVMIRParser::T__89: {
        enterOuterAlt(_localctx, 2);
        setState(1873);
        match(LLVMIRParser::T__89);
        setState(1874);
        match(LLVMIRParser::T__25);
        setState(1875);
        match(LLVMIRParser::IntLit);
        setState(1876);
        match(LLVMIRParser::T__26);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementTypeContext ------------------------------------------------------------------

LLVMIRParser::ElementTypeContext::ElementTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeContext* LLVMIRParser::ElementTypeContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}


size_t LLVMIRParser::ElementTypeContext::getRuleIndex() const {
  return LLVMIRParser::RuleElementType;
}


std::any LLVMIRParser::ElementTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitElementType(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ElementTypeContext* LLVMIRParser::elementType() {
  ElementTypeContext *_localctx = _tracker.createInstance<ElementTypeContext>(_ctx, getState());
  enterRule(_localctx, 208, LLVMIRParser::RuleElementType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1879);
    match(LLVMIRParser::T__90);
    setState(1880);
    match(LLVMIRParser::T__25);
    setState(1881);
    type(0);
    setState(1882);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InAllocaContext ------------------------------------------------------------------

LLVMIRParser::InAllocaContext::InAllocaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeContext* LLVMIRParser::InAllocaContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}


size_t LLVMIRParser::InAllocaContext::getRuleIndex() const {
  return LLVMIRParser::RuleInAlloca;
}


std::any LLVMIRParser::InAllocaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitInAlloca(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::InAllocaContext* LLVMIRParser::inAlloca() {
  InAllocaContext *_localctx = _tracker.createInstance<InAllocaContext>(_ctx, getState());
  enterRule(_localctx, 210, LLVMIRParser::RuleInAlloca);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1884);
    match(LLVMIRParser::T__91);
    setState(1885);
    match(LLVMIRParser::T__25);
    setState(1886);
    type(0);
    setState(1887);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamAttrContext ------------------------------------------------------------------

LLVMIRParser::ParamAttrContext::ParamAttrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::ParamAttrContext::getRuleIndex() const {
  return LLVMIRParser::RuleParamAttr;
}


std::any LLVMIRParser::ParamAttrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitParamAttr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ParamAttrContext* LLVMIRParser::paramAttr() {
  ParamAttrContext *_localctx = _tracker.createInstance<ParamAttrContext>(_ctx, getState());
  enterRule(_localctx, 212, LLVMIRParser::RuleParamAttr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1889);
    _la = _input->LA(1);
    if (!(((((_la - 93) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 93)) & 524287) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PreallocatedContext ------------------------------------------------------------------

LLVMIRParser::PreallocatedContext::PreallocatedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeContext* LLVMIRParser::PreallocatedContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}


size_t LLVMIRParser::PreallocatedContext::getRuleIndex() const {
  return LLVMIRParser::RulePreallocated;
}


std::any LLVMIRParser::PreallocatedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitPreallocated(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::PreallocatedContext* LLVMIRParser::preallocated() {
  PreallocatedContext *_localctx = _tracker.createInstance<PreallocatedContext>(_ctx, getState());
  enterRule(_localctx, 214, LLVMIRParser::RulePreallocated);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1891);
    match(LLVMIRParser::T__111);
    setState(1892);
    match(LLVMIRParser::T__25);
    setState(1893);
    type(0);
    setState(1894);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructRetAttrContext ------------------------------------------------------------------

LLVMIRParser::StructRetAttrContext::StructRetAttrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeContext* LLVMIRParser::StructRetAttrContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}


size_t LLVMIRParser::StructRetAttrContext::getRuleIndex() const {
  return LLVMIRParser::RuleStructRetAttr;
}


std::any LLVMIRParser::StructRetAttrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitStructRetAttr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::StructRetAttrContext* LLVMIRParser::structRetAttr() {
  StructRetAttrContext *_localctx = _tracker.createInstance<StructRetAttrContext>(_ctx, getState());
  enterRule(_localctx, 216, LLVMIRParser::RuleStructRetAttr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1896);
    match(LLVMIRParser::T__112);
    setState(1897);
    match(LLVMIRParser::T__25);
    setState(1898);
    type(0);
    setState(1899);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FirstClassTypeContext ------------------------------------------------------------------

LLVMIRParser::FirstClassTypeContext::FirstClassTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::ConcreteTypeContext* LLVMIRParser::FirstClassTypeContext::concreteType() {
  return getRuleContext<LLVMIRParser::ConcreteTypeContext>(0);
}

LLVMIRParser::MetadataTypeContext* LLVMIRParser::FirstClassTypeContext::metadataType() {
  return getRuleContext<LLVMIRParser::MetadataTypeContext>(0);
}


size_t LLVMIRParser::FirstClassTypeContext::getRuleIndex() const {
  return LLVMIRParser::RuleFirstClassType;
}


std::any LLVMIRParser::FirstClassTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFirstClassType(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FirstClassTypeContext* LLVMIRParser::firstClassType() {
  FirstClassTypeContext *_localctx = _tracker.createInstance<FirstClassTypeContext>(_ctx, getState());
  enterRule(_localctx, 218, LLVMIRParser::RuleFirstClassType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1903);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1901);
      concreteType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1902);
      metadataType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConcreteTypeContext ------------------------------------------------------------------

LLVMIRParser::ConcreteTypeContext::ConcreteTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::IntTypeContext* LLVMIRParser::ConcreteTypeContext::intType() {
  return getRuleContext<LLVMIRParser::IntTypeContext>(0);
}

LLVMIRParser::FloatTypeContext* LLVMIRParser::ConcreteTypeContext::floatType() {
  return getRuleContext<LLVMIRParser::FloatTypeContext>(0);
}

LLVMIRParser::PointerTypeContext* LLVMIRParser::ConcreteTypeContext::pointerType() {
  return getRuleContext<LLVMIRParser::PointerTypeContext>(0);
}

LLVMIRParser::VectorTypeContext* LLVMIRParser::ConcreteTypeContext::vectorType() {
  return getRuleContext<LLVMIRParser::VectorTypeContext>(0);
}

LLVMIRParser::LabelTypeContext* LLVMIRParser::ConcreteTypeContext::labelType() {
  return getRuleContext<LLVMIRParser::LabelTypeContext>(0);
}

LLVMIRParser::ArrayTypeContext* LLVMIRParser::ConcreteTypeContext::arrayType() {
  return getRuleContext<LLVMIRParser::ArrayTypeContext>(0);
}

LLVMIRParser::StructTypeContext* LLVMIRParser::ConcreteTypeContext::structType() {
  return getRuleContext<LLVMIRParser::StructTypeContext>(0);
}

LLVMIRParser::NamedTypeContext* LLVMIRParser::ConcreteTypeContext::namedType() {
  return getRuleContext<LLVMIRParser::NamedTypeContext>(0);
}

LLVMIRParser::MmxTypeContext* LLVMIRParser::ConcreteTypeContext::mmxType() {
  return getRuleContext<LLVMIRParser::MmxTypeContext>(0);
}

LLVMIRParser::TokenTypeContext* LLVMIRParser::ConcreteTypeContext::tokenType() {
  return getRuleContext<LLVMIRParser::TokenTypeContext>(0);
}


size_t LLVMIRParser::ConcreteTypeContext::getRuleIndex() const {
  return LLVMIRParser::RuleConcreteType;
}


std::any LLVMIRParser::ConcreteTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitConcreteType(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ConcreteTypeContext* LLVMIRParser::concreteType() {
  ConcreteTypeContext *_localctx = _tracker.createInstance<ConcreteTypeContext>(_ctx, getState());
  enterRule(_localctx, 220, LLVMIRParser::RuleConcreteType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1915);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1905);
      intType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1906);
      floatType();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1907);
      pointerType();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1908);
      vectorType();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1909);
      labelType();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1910);
      arrayType();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1911);
      structType();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1912);
      namedType();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1913);
      mmxType();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1914);
      tokenType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntTypeContext ------------------------------------------------------------------

LLVMIRParser::IntTypeContext::IntTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::IntTypeContext::IntType() {
  return getToken(LLVMIRParser::IntType, 0);
}


size_t LLVMIRParser::IntTypeContext::getRuleIndex() const {
  return LLVMIRParser::RuleIntType;
}


std::any LLVMIRParser::IntTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitIntType(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::IntTypeContext* LLVMIRParser::intType() {
  IntTypeContext *_localctx = _tracker.createInstance<IntTypeContext>(_ctx, getState());
  enterRule(_localctx, 222, LLVMIRParser::RuleIntType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1917);
    match(LLVMIRParser::IntType);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatTypeContext ------------------------------------------------------------------

LLVMIRParser::FloatTypeContext::FloatTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::FloatKindContext* LLVMIRParser::FloatTypeContext::floatKind() {
  return getRuleContext<LLVMIRParser::FloatKindContext>(0);
}


size_t LLVMIRParser::FloatTypeContext::getRuleIndex() const {
  return LLVMIRParser::RuleFloatType;
}


std::any LLVMIRParser::FloatTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFloatType(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FloatTypeContext* LLVMIRParser::floatType() {
  FloatTypeContext *_localctx = _tracker.createInstance<FloatTypeContext>(_ctx, getState());
  enterRule(_localctx, 224, LLVMIRParser::RuleFloatType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1919);
    floatKind();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PointerTypeContext ------------------------------------------------------------------

LLVMIRParser::PointerTypeContext::PointerTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeContext* LLVMIRParser::PointerTypeContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

LLVMIRParser::AddrSpaceContext* LLVMIRParser::PointerTypeContext::addrSpace() {
  return getRuleContext<LLVMIRParser::AddrSpaceContext>(0);
}

LLVMIRParser::OpaquePointerTypeContext* LLVMIRParser::PointerTypeContext::opaquePointerType() {
  return getRuleContext<LLVMIRParser::OpaquePointerTypeContext>(0);
}


size_t LLVMIRParser::PointerTypeContext::getRuleIndex() const {
  return LLVMIRParser::RulePointerType;
}


std::any LLVMIRParser::PointerTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitPointerType(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::PointerTypeContext* LLVMIRParser::pointerType() {
  PointerTypeContext *_localctx = _tracker.createInstance<PointerTypeContext>(_ctx, getState());
  enterRule(_localctx, 226, LLVMIRParser::RulePointerType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1928);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 144, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1921);
      type(0);
      setState(1923);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LLVMIRParser::T__118) {
        setState(1922);
        addrSpace();
      }
      setState(1925);
      match(LLVMIRParser::T__77);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1927);
      opaquePointerType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VectorTypeContext ------------------------------------------------------------------

LLVMIRParser::VectorTypeContext::VectorTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::VectorTypeContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}

LLVMIRParser::TypeContext* LLVMIRParser::VectorTypeContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}


size_t LLVMIRParser::VectorTypeContext::getRuleIndex() const {
  return LLVMIRParser::RuleVectorType;
}


std::any LLVMIRParser::VectorTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitVectorType(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::VectorTypeContext* LLVMIRParser::vectorType() {
  VectorTypeContext *_localctx = _tracker.createInstance<VectorTypeContext>(_ctx, getState());
  enterRule(_localctx, 228, LLVMIRParser::RuleVectorType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1944);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1930);
      match(LLVMIRParser::T__63);
      setState(1931);
      match(LLVMIRParser::IntLit);
      setState(1932);
      match(LLVMIRParser::T__113);
      setState(1933);
      type(0);
      setState(1934);
      match(LLVMIRParser::T__64);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1936);
      match(LLVMIRParser::T__63);
      setState(1937);
      match(LLVMIRParser::T__114);
      setState(1938);
      match(LLVMIRParser::T__113);
      setState(1939);
      match(LLVMIRParser::IntLit);
      setState(1940);
      match(LLVMIRParser::T__113);
      setState(1941);
      type(0);
      setState(1942);
      match(LLVMIRParser::T__64);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelTypeContext ------------------------------------------------------------------

LLVMIRParser::LabelTypeContext::LabelTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::LabelTypeContext::getRuleIndex() const {
  return LLVMIRParser::RuleLabelType;
}


std::any LLVMIRParser::LabelTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitLabelType(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::LabelTypeContext* LLVMIRParser::labelType() {
  LabelTypeContext *_localctx = _tracker.createInstance<LabelTypeContext>(_ctx, getState());
  enterRule(_localctx, 230, LLVMIRParser::RuleLabelType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1946);
    match(LLVMIRParser::T__50);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayTypeContext ------------------------------------------------------------------

LLVMIRParser::ArrayTypeContext::ArrayTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::ArrayTypeContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}

LLVMIRParser::TypeContext* LLVMIRParser::ArrayTypeContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}


size_t LLVMIRParser::ArrayTypeContext::getRuleIndex() const {
  return LLVMIRParser::RuleArrayType;
}


std::any LLVMIRParser::ArrayTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitArrayType(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ArrayTypeContext* LLVMIRParser::arrayType() {
  ArrayTypeContext *_localctx = _tracker.createInstance<ArrayTypeContext>(_ctx, getState());
  enterRule(_localctx, 232, LLVMIRParser::RuleArrayType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1948);
    match(LLVMIRParser::T__36);
    setState(1949);
    match(LLVMIRParser::IntLit);
    setState(1950);
    match(LLVMIRParser::T__113);
    setState(1951);
    type(0);
    setState(1952);
    match(LLVMIRParser::T__37);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructTypeContext ------------------------------------------------------------------

LLVMIRParser::StructTypeContext::StructTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeContext *> LLVMIRParser::StructTypeContext::type() {
  return getRuleContexts<LLVMIRParser::TypeContext>();
}

LLVMIRParser::TypeContext* LLVMIRParser::StructTypeContext::type(size_t i) {
  return getRuleContext<LLVMIRParser::TypeContext>(i);
}


size_t LLVMIRParser::StructTypeContext::getRuleIndex() const {
  return LLVMIRParser::RuleStructType;
}


std::any LLVMIRParser::StructTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitStructType(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::StructTypeContext* LLVMIRParser::structType() {
  StructTypeContext *_localctx = _tracker.createInstance<StructTypeContext>(_ctx, getState());
  enterRule(_localctx, 234, LLVMIRParser::RuleStructType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1980);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__20: {
        enterOuterAlt(_localctx, 1);
        setState(1954);
        match(LLVMIRParser::T__20);
        setState(1963);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 2251954434605056) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 175640385467457537) != 0) || ((((_la - 354) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 354)) & 127) != 0) || _la == LLVMIRParser::LocalIdent

        || _la == LLVMIRParser::IntType) {
          setState(1955);
          type(0);
          setState(1960);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == LLVMIRParser::T__14) {
            setState(1956);
            match(LLVMIRParser::T__14);
            setState(1957);
            type(0);
            setState(1962);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(1965);
        match(LLVMIRParser::T__21);
        break;
      }

      case LLVMIRParser::T__63: {
        enterOuterAlt(_localctx, 2);
        setState(1966);
        match(LLVMIRParser::T__63);
        setState(1967);
        match(LLVMIRParser::T__20);
        setState(1976);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 2251954434605056) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 175640385467457537) != 0) || ((((_la - 354) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 354)) & 127) != 0) || _la == LLVMIRParser::LocalIdent

        || _la == LLVMIRParser::IntType) {
          setState(1968);
          type(0);
          setState(1973);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == LLVMIRParser::T__14) {
            setState(1969);
            match(LLVMIRParser::T__14);
            setState(1970);
            type(0);
            setState(1975);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(1978);
        match(LLVMIRParser::T__21);
        setState(1979);
        match(LLVMIRParser::T__64);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedTypeContext ------------------------------------------------------------------

LLVMIRParser::NamedTypeContext::NamedTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::NamedTypeContext::LocalIdent() {
  return getToken(LLVMIRParser::LocalIdent, 0);
}


size_t LLVMIRParser::NamedTypeContext::getRuleIndex() const {
  return LLVMIRParser::RuleNamedType;
}


std::any LLVMIRParser::NamedTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitNamedType(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::NamedTypeContext* LLVMIRParser::namedType() {
  NamedTypeContext *_localctx = _tracker.createInstance<NamedTypeContext>(_ctx, getState());
  enterRule(_localctx, 236, LLVMIRParser::RuleNamedType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1982);
    match(LLVMIRParser::LocalIdent);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MmxTypeContext ------------------------------------------------------------------

LLVMIRParser::MmxTypeContext::MmxTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::MmxTypeContext::getRuleIndex() const {
  return LLVMIRParser::RuleMmxType;
}


std::any LLVMIRParser::MmxTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitMmxType(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::MmxTypeContext* LLVMIRParser::mmxType() {
  MmxTypeContext *_localctx = _tracker.createInstance<MmxTypeContext>(_ctx, getState());
  enterRule(_localctx, 238, LLVMIRParser::RuleMmxType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1984);
    match(LLVMIRParser::T__115);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TokenTypeContext ------------------------------------------------------------------

LLVMIRParser::TokenTypeContext::TokenTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::TokenTypeContext::getRuleIndex() const {
  return LLVMIRParser::RuleTokenType;
}


std::any LLVMIRParser::TokenTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitTokenType(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::TokenTypeContext* LLVMIRParser::tokenType() {
  TokenTypeContext *_localctx = _tracker.createInstance<TokenTypeContext>(_ctx, getState());
  enterRule(_localctx, 240, LLVMIRParser::RuleTokenType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1986);
    match(LLVMIRParser::T__116);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpaquePointerTypeContext ------------------------------------------------------------------

LLVMIRParser::OpaquePointerTypeContext::OpaquePointerTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::AddrSpaceContext* LLVMIRParser::OpaquePointerTypeContext::addrSpace() {
  return getRuleContext<LLVMIRParser::AddrSpaceContext>(0);
}


size_t LLVMIRParser::OpaquePointerTypeContext::getRuleIndex() const {
  return LLVMIRParser::RuleOpaquePointerType;
}


std::any LLVMIRParser::OpaquePointerTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitOpaquePointerType(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::OpaquePointerTypeContext* LLVMIRParser::opaquePointerType() {
  OpaquePointerTypeContext *_localctx = _tracker.createInstance<OpaquePointerTypeContext>(_ctx, getState());
  enterRule(_localctx, 242, LLVMIRParser::RuleOpaquePointerType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1988);
    match(LLVMIRParser::T__117);
    setState(1990);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 151, _ctx)) {
    case 1: {
      setState(1989);
      addrSpace();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddrSpaceContext ------------------------------------------------------------------

LLVMIRParser::AddrSpaceContext::AddrSpaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::AddrSpaceContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::AddrSpaceContext::getRuleIndex() const {
  return LLVMIRParser::RuleAddrSpace;
}


std::any LLVMIRParser::AddrSpaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAddrSpace(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AddrSpaceContext* LLVMIRParser::addrSpace() {
  AddrSpaceContext *_localctx = _tracker.createInstance<AddrSpaceContext>(_ctx, getState());
  enterRule(_localctx, 244, LLVMIRParser::RuleAddrSpace);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1992);
    match(LLVMIRParser::T__118);
    setState(1993);
    match(LLVMIRParser::T__25);
    setState(1994);
    match(LLVMIRParser::IntLit);
    setState(1995);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThreadLocalContext ------------------------------------------------------------------

LLVMIRParser::ThreadLocalContext::ThreadLocalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TlsModelContext* LLVMIRParser::ThreadLocalContext::tlsModel() {
  return getRuleContext<LLVMIRParser::TlsModelContext>(0);
}


size_t LLVMIRParser::ThreadLocalContext::getRuleIndex() const {
  return LLVMIRParser::RuleThreadLocal;
}


std::any LLVMIRParser::ThreadLocalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitThreadLocal(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ThreadLocalContext* LLVMIRParser::threadLocal() {
  ThreadLocalContext *_localctx = _tracker.createInstance<ThreadLocalContext>(_ctx, getState());
  enterRule(_localctx, 246, LLVMIRParser::RuleThreadLocal);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1997);
    match(LLVMIRParser::T__119);
    setState(2002);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__25) {
      setState(1998);
      match(LLVMIRParser::T__25);
      setState(1999);
      tlsModel();
      setState(2000);
      match(LLVMIRParser::T__26);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetadataTypeContext ------------------------------------------------------------------

LLVMIRParser::MetadataTypeContext::MetadataTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::MetadataTypeContext::getRuleIndex() const {
  return LLVMIRParser::RuleMetadataType;
}


std::any LLVMIRParser::MetadataTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitMetadataType(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::MetadataTypeContext* LLVMIRParser::metadataType() {
  MetadataTypeContext *_localctx = _tracker.createInstance<MetadataTypeContext>(_ctx, getState());
  enterRule(_localctx, 248, LLVMIRParser::RuleMetadataType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2004);
    match(LLVMIRParser::T__120);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitCastExprContext ------------------------------------------------------------------

LLVMIRParser::BitCastExprContext::BitCastExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeConstContext* LLVMIRParser::BitCastExprContext::typeConst() {
  return getRuleContext<LLVMIRParser::TypeConstContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::BitCastExprContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}


size_t LLVMIRParser::BitCastExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleBitCastExpr;
}


std::any LLVMIRParser::BitCastExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitBitCastExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::BitCastExprContext* LLVMIRParser::bitCastExpr() {
  BitCastExprContext *_localctx = _tracker.createInstance<BitCastExprContext>(_ctx, getState());
  enterRule(_localctx, 250, LLVMIRParser::RuleBitCastExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2006);
    match(LLVMIRParser::T__121);
    setState(2007);
    match(LLVMIRParser::T__25);
    setState(2008);
    typeConst();
    setState(2009);
    match(LLVMIRParser::T__42);
    setState(2010);
    type(0);
    setState(2011);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GetElementPtrExprContext ------------------------------------------------------------------

LLVMIRParser::GetElementPtrExprContext::GetElementPtrExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeContext* LLVMIRParser::GetElementPtrExprContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

LLVMIRParser::TypeConstContext* LLVMIRParser::GetElementPtrExprContext::typeConst() {
  return getRuleContext<LLVMIRParser::TypeConstContext>(0);
}

LLVMIRParser::InBoundsContext* LLVMIRParser::GetElementPtrExprContext::inBounds() {
  return getRuleContext<LLVMIRParser::InBoundsContext>(0);
}

std::vector<LLVMIRParser::GepIndexContext *> LLVMIRParser::GetElementPtrExprContext::gepIndex() {
  return getRuleContexts<LLVMIRParser::GepIndexContext>();
}

LLVMIRParser::GepIndexContext* LLVMIRParser::GetElementPtrExprContext::gepIndex(size_t i) {
  return getRuleContext<LLVMIRParser::GepIndexContext>(i);
}


size_t LLVMIRParser::GetElementPtrExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleGetElementPtrExpr;
}


std::any LLVMIRParser::GetElementPtrExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitGetElementPtrExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::GetElementPtrExprContext* LLVMIRParser::getElementPtrExpr() {
  GetElementPtrExprContext *_localctx = _tracker.createInstance<GetElementPtrExprContext>(_ctx, getState());
  enterRule(_localctx, 252, LLVMIRParser::RuleGetElementPtrExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2013);
    match(LLVMIRParser::T__122);
    setState(2015);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__263) {
      setState(2014);
      inBounds();
    }
    setState(2017);
    match(LLVMIRParser::T__25);
    setState(2018);
    type(0);
    setState(2019);
    match(LLVMIRParser::T__14);
    setState(2020);
    typeConst();
    setState(2025);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2021);
      match(LLVMIRParser::T__14);
      setState(2022);
      gepIndex();
      setState(2027);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2028);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GepIndexContext ------------------------------------------------------------------

LLVMIRParser::GepIndexContext::GepIndexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeConstContext* LLVMIRParser::GepIndexContext::typeConst() {
  return getRuleContext<LLVMIRParser::TypeConstContext>(0);
}


size_t LLVMIRParser::GepIndexContext::getRuleIndex() const {
  return LLVMIRParser::RuleGepIndex;
}


std::any LLVMIRParser::GepIndexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitGepIndex(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::GepIndexContext* LLVMIRParser::gepIndex() {
  GepIndexContext *_localctx = _tracker.createInstance<GepIndexContext>(_ctx, getState());
  enterRule(_localctx, 254, LLVMIRParser::RuleGepIndex);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2031);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__123) {
      setState(2030);
      antlrcpp::downCast<GepIndexContext *>(_localctx)->inRange = match(LLVMIRParser::T__123);
    }
    setState(2033);
    typeConst();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddrSpaceCastExprContext ------------------------------------------------------------------

LLVMIRParser::AddrSpaceCastExprContext::AddrSpaceCastExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeConstContext* LLVMIRParser::AddrSpaceCastExprContext::typeConst() {
  return getRuleContext<LLVMIRParser::TypeConstContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::AddrSpaceCastExprContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}


size_t LLVMIRParser::AddrSpaceCastExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleAddrSpaceCastExpr;
}


std::any LLVMIRParser::AddrSpaceCastExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAddrSpaceCastExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AddrSpaceCastExprContext* LLVMIRParser::addrSpaceCastExpr() {
  AddrSpaceCastExprContext *_localctx = _tracker.createInstance<AddrSpaceCastExprContext>(_ctx, getState());
  enterRule(_localctx, 256, LLVMIRParser::RuleAddrSpaceCastExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2035);
    match(LLVMIRParser::T__124);
    setState(2036);
    match(LLVMIRParser::T__25);
    setState(2037);
    typeConst();
    setState(2038);
    match(LLVMIRParser::T__42);
    setState(2039);
    type(0);
    setState(2040);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntToPtrExprContext ------------------------------------------------------------------

LLVMIRParser::IntToPtrExprContext::IntToPtrExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeConstContext* LLVMIRParser::IntToPtrExprContext::typeConst() {
  return getRuleContext<LLVMIRParser::TypeConstContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::IntToPtrExprContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}


size_t LLVMIRParser::IntToPtrExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleIntToPtrExpr;
}


std::any LLVMIRParser::IntToPtrExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitIntToPtrExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::IntToPtrExprContext* LLVMIRParser::intToPtrExpr() {
  IntToPtrExprContext *_localctx = _tracker.createInstance<IntToPtrExprContext>(_ctx, getState());
  enterRule(_localctx, 258, LLVMIRParser::RuleIntToPtrExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2042);
    match(LLVMIRParser::T__125);
    setState(2043);
    match(LLVMIRParser::T__25);
    setState(2044);
    typeConst();
    setState(2045);
    match(LLVMIRParser::T__42);
    setState(2046);
    type(0);
    setState(2047);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ICmpExprContext ------------------------------------------------------------------

LLVMIRParser::ICmpExprContext::ICmpExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::IPredContext* LLVMIRParser::ICmpExprContext::iPred() {
  return getRuleContext<LLVMIRParser::IPredContext>(0);
}

std::vector<LLVMIRParser::TypeConstContext *> LLVMIRParser::ICmpExprContext::typeConst() {
  return getRuleContexts<LLVMIRParser::TypeConstContext>();
}

LLVMIRParser::TypeConstContext* LLVMIRParser::ICmpExprContext::typeConst(size_t i) {
  return getRuleContext<LLVMIRParser::TypeConstContext>(i);
}


size_t LLVMIRParser::ICmpExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleICmpExpr;
}


std::any LLVMIRParser::ICmpExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitICmpExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ICmpExprContext* LLVMIRParser::iCmpExpr() {
  ICmpExprContext *_localctx = _tracker.createInstance<ICmpExprContext>(_ctx, getState());
  enterRule(_localctx, 260, LLVMIRParser::RuleICmpExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2049);
    match(LLVMIRParser::T__126);
    setState(2050);
    iPred();
    setState(2051);
    match(LLVMIRParser::T__25);
    setState(2052);
    typeConst();
    setState(2053);
    match(LLVMIRParser::T__14);
    setState(2054);
    typeConst();
    setState(2055);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FCmpExprContext ------------------------------------------------------------------

LLVMIRParser::FCmpExprContext::FCmpExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::FPredContext* LLVMIRParser::FCmpExprContext::fPred() {
  return getRuleContext<LLVMIRParser::FPredContext>(0);
}

std::vector<LLVMIRParser::TypeConstContext *> LLVMIRParser::FCmpExprContext::typeConst() {
  return getRuleContexts<LLVMIRParser::TypeConstContext>();
}

LLVMIRParser::TypeConstContext* LLVMIRParser::FCmpExprContext::typeConst(size_t i) {
  return getRuleContext<LLVMIRParser::TypeConstContext>(i);
}


size_t LLVMIRParser::FCmpExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleFCmpExpr;
}


std::any LLVMIRParser::FCmpExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFCmpExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FCmpExprContext* LLVMIRParser::fCmpExpr() {
  FCmpExprContext *_localctx = _tracker.createInstance<FCmpExprContext>(_ctx, getState());
  enterRule(_localctx, 262, LLVMIRParser::RuleFCmpExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2057);
    match(LLVMIRParser::T__127);
    setState(2058);
    fPred();
    setState(2059);
    match(LLVMIRParser::T__25);
    setState(2060);
    typeConst();
    setState(2061);
    match(LLVMIRParser::T__14);
    setState(2062);
    typeConst();
    setState(2063);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectExprContext ------------------------------------------------------------------

LLVMIRParser::SelectExprContext::SelectExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeConstContext *> LLVMIRParser::SelectExprContext::typeConst() {
  return getRuleContexts<LLVMIRParser::TypeConstContext>();
}

LLVMIRParser::TypeConstContext* LLVMIRParser::SelectExprContext::typeConst(size_t i) {
  return getRuleContext<LLVMIRParser::TypeConstContext>(i);
}


size_t LLVMIRParser::SelectExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleSelectExpr;
}


std::any LLVMIRParser::SelectExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitSelectExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::SelectExprContext* LLVMIRParser::selectExpr() {
  SelectExprContext *_localctx = _tracker.createInstance<SelectExprContext>(_ctx, getState());
  enterRule(_localctx, 264, LLVMIRParser::RuleSelectExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2065);
    match(LLVMIRParser::T__128);
    setState(2066);
    match(LLVMIRParser::T__25);
    setState(2067);
    typeConst();
    setState(2068);
    match(LLVMIRParser::T__14);
    setState(2069);
    typeConst();
    setState(2070);
    match(LLVMIRParser::T__14);
    setState(2071);
    typeConst();
    setState(2072);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TruncExprContext ------------------------------------------------------------------

LLVMIRParser::TruncExprContext::TruncExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeConstContext* LLVMIRParser::TruncExprContext::typeConst() {
  return getRuleContext<LLVMIRParser::TypeConstContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::TruncExprContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}


size_t LLVMIRParser::TruncExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleTruncExpr;
}


std::any LLVMIRParser::TruncExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitTruncExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::TruncExprContext* LLVMIRParser::truncExpr() {
  TruncExprContext *_localctx = _tracker.createInstance<TruncExprContext>(_ctx, getState());
  enterRule(_localctx, 266, LLVMIRParser::RuleTruncExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2074);
    match(LLVMIRParser::T__129);
    setState(2075);
    match(LLVMIRParser::T__25);
    setState(2076);
    typeConst();
    setState(2077);
    match(LLVMIRParser::T__42);
    setState(2078);
    type(0);
    setState(2079);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ZExtExprContext ------------------------------------------------------------------

LLVMIRParser::ZExtExprContext::ZExtExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeConstContext* LLVMIRParser::ZExtExprContext::typeConst() {
  return getRuleContext<LLVMIRParser::TypeConstContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::ZExtExprContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}


size_t LLVMIRParser::ZExtExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleZExtExpr;
}


std::any LLVMIRParser::ZExtExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitZExtExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ZExtExprContext* LLVMIRParser::zExtExpr() {
  ZExtExprContext *_localctx = _tracker.createInstance<ZExtExprContext>(_ctx, getState());
  enterRule(_localctx, 268, LLVMIRParser::RuleZExtExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2081);
    match(LLVMIRParser::T__130);
    setState(2082);
    match(LLVMIRParser::T__25);
    setState(2083);
    typeConst();
    setState(2084);
    match(LLVMIRParser::T__42);
    setState(2085);
    type(0);
    setState(2086);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SExtExprContext ------------------------------------------------------------------

LLVMIRParser::SExtExprContext::SExtExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeConstContext* LLVMIRParser::SExtExprContext::typeConst() {
  return getRuleContext<LLVMIRParser::TypeConstContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::SExtExprContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}


size_t LLVMIRParser::SExtExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleSExtExpr;
}


std::any LLVMIRParser::SExtExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitSExtExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::SExtExprContext* LLVMIRParser::sExtExpr() {
  SExtExprContext *_localctx = _tracker.createInstance<SExtExprContext>(_ctx, getState());
  enterRule(_localctx, 270, LLVMIRParser::RuleSExtExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2088);
    match(LLVMIRParser::T__131);
    setState(2089);
    match(LLVMIRParser::T__25);
    setState(2090);
    typeConst();
    setState(2091);
    match(LLVMIRParser::T__42);
    setState(2092);
    type(0);
    setState(2093);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FpTruncExprContext ------------------------------------------------------------------

LLVMIRParser::FpTruncExprContext::FpTruncExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeConstContext* LLVMIRParser::FpTruncExprContext::typeConst() {
  return getRuleContext<LLVMIRParser::TypeConstContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::FpTruncExprContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}


size_t LLVMIRParser::FpTruncExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleFpTruncExpr;
}


std::any LLVMIRParser::FpTruncExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFpTruncExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FpTruncExprContext* LLVMIRParser::fpTruncExpr() {
  FpTruncExprContext *_localctx = _tracker.createInstance<FpTruncExprContext>(_ctx, getState());
  enterRule(_localctx, 272, LLVMIRParser::RuleFpTruncExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2095);
    match(LLVMIRParser::T__132);
    setState(2096);
    match(LLVMIRParser::T__25);
    setState(2097);
    typeConst();
    setState(2098);
    match(LLVMIRParser::T__42);
    setState(2099);
    type(0);
    setState(2100);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FpExtExprContext ------------------------------------------------------------------

LLVMIRParser::FpExtExprContext::FpExtExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeConstContext* LLVMIRParser::FpExtExprContext::typeConst() {
  return getRuleContext<LLVMIRParser::TypeConstContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::FpExtExprContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}


size_t LLVMIRParser::FpExtExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleFpExtExpr;
}


std::any LLVMIRParser::FpExtExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFpExtExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FpExtExprContext* LLVMIRParser::fpExtExpr() {
  FpExtExprContext *_localctx = _tracker.createInstance<FpExtExprContext>(_ctx, getState());
  enterRule(_localctx, 274, LLVMIRParser::RuleFpExtExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2102);
    match(LLVMIRParser::T__133);
    setState(2103);
    match(LLVMIRParser::T__25);
    setState(2104);
    typeConst();
    setState(2105);
    match(LLVMIRParser::T__42);
    setState(2106);
    type(0);
    setState(2107);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FpToUiExprContext ------------------------------------------------------------------

LLVMIRParser::FpToUiExprContext::FpToUiExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeConstContext* LLVMIRParser::FpToUiExprContext::typeConst() {
  return getRuleContext<LLVMIRParser::TypeConstContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::FpToUiExprContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}


size_t LLVMIRParser::FpToUiExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleFpToUiExpr;
}


std::any LLVMIRParser::FpToUiExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFpToUiExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FpToUiExprContext* LLVMIRParser::fpToUiExpr() {
  FpToUiExprContext *_localctx = _tracker.createInstance<FpToUiExprContext>(_ctx, getState());
  enterRule(_localctx, 276, LLVMIRParser::RuleFpToUiExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2109);
    match(LLVMIRParser::T__134);
    setState(2110);
    match(LLVMIRParser::T__25);
    setState(2111);
    typeConst();
    setState(2112);
    match(LLVMIRParser::T__42);
    setState(2113);
    type(0);
    setState(2114);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FpToSiExprContext ------------------------------------------------------------------

LLVMIRParser::FpToSiExprContext::FpToSiExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeConstContext* LLVMIRParser::FpToSiExprContext::typeConst() {
  return getRuleContext<LLVMIRParser::TypeConstContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::FpToSiExprContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}


size_t LLVMIRParser::FpToSiExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleFpToSiExpr;
}


std::any LLVMIRParser::FpToSiExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFpToSiExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FpToSiExprContext* LLVMIRParser::fpToSiExpr() {
  FpToSiExprContext *_localctx = _tracker.createInstance<FpToSiExprContext>(_ctx, getState());
  enterRule(_localctx, 278, LLVMIRParser::RuleFpToSiExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2116);
    match(LLVMIRParser::T__135);
    setState(2117);
    match(LLVMIRParser::T__25);
    setState(2118);
    typeConst();
    setState(2119);
    match(LLVMIRParser::T__42);
    setState(2120);
    type(0);
    setState(2121);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UiToFpExprContext ------------------------------------------------------------------

LLVMIRParser::UiToFpExprContext::UiToFpExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeConstContext* LLVMIRParser::UiToFpExprContext::typeConst() {
  return getRuleContext<LLVMIRParser::TypeConstContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::UiToFpExprContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}


size_t LLVMIRParser::UiToFpExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleUiToFpExpr;
}


std::any LLVMIRParser::UiToFpExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitUiToFpExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::UiToFpExprContext* LLVMIRParser::uiToFpExpr() {
  UiToFpExprContext *_localctx = _tracker.createInstance<UiToFpExprContext>(_ctx, getState());
  enterRule(_localctx, 280, LLVMIRParser::RuleUiToFpExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2123);
    match(LLVMIRParser::T__136);
    setState(2124);
    match(LLVMIRParser::T__25);
    setState(2125);
    typeConst();
    setState(2126);
    match(LLVMIRParser::T__42);
    setState(2127);
    type(0);
    setState(2128);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SiToFpExprContext ------------------------------------------------------------------

LLVMIRParser::SiToFpExprContext::SiToFpExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeConstContext* LLVMIRParser::SiToFpExprContext::typeConst() {
  return getRuleContext<LLVMIRParser::TypeConstContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::SiToFpExprContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}


size_t LLVMIRParser::SiToFpExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleSiToFpExpr;
}


std::any LLVMIRParser::SiToFpExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitSiToFpExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::SiToFpExprContext* LLVMIRParser::siToFpExpr() {
  SiToFpExprContext *_localctx = _tracker.createInstance<SiToFpExprContext>(_ctx, getState());
  enterRule(_localctx, 282, LLVMIRParser::RuleSiToFpExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2130);
    match(LLVMIRParser::T__137);
    setState(2131);
    match(LLVMIRParser::T__25);
    setState(2132);
    typeConst();
    setState(2133);
    match(LLVMIRParser::T__42);
    setState(2134);
    type(0);
    setState(2135);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PtrToIntExprContext ------------------------------------------------------------------

LLVMIRParser::PtrToIntExprContext::PtrToIntExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeConstContext* LLVMIRParser::PtrToIntExprContext::typeConst() {
  return getRuleContext<LLVMIRParser::TypeConstContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::PtrToIntExprContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}


size_t LLVMIRParser::PtrToIntExprContext::getRuleIndex() const {
  return LLVMIRParser::RulePtrToIntExpr;
}


std::any LLVMIRParser::PtrToIntExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitPtrToIntExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::PtrToIntExprContext* LLVMIRParser::ptrToIntExpr() {
  PtrToIntExprContext *_localctx = _tracker.createInstance<PtrToIntExprContext>(_ctx, getState());
  enterRule(_localctx, 284, LLVMIRParser::RulePtrToIntExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2137);
    match(LLVMIRParser::T__138);
    setState(2138);
    match(LLVMIRParser::T__25);
    setState(2139);
    typeConst();
    setState(2140);
    match(LLVMIRParser::T__42);
    setState(2141);
    type(0);
    setState(2142);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExtractElementExprContext ------------------------------------------------------------------

LLVMIRParser::ExtractElementExprContext::ExtractElementExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeConstContext *> LLVMIRParser::ExtractElementExprContext::typeConst() {
  return getRuleContexts<LLVMIRParser::TypeConstContext>();
}

LLVMIRParser::TypeConstContext* LLVMIRParser::ExtractElementExprContext::typeConst(size_t i) {
  return getRuleContext<LLVMIRParser::TypeConstContext>(i);
}


size_t LLVMIRParser::ExtractElementExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleExtractElementExpr;
}


std::any LLVMIRParser::ExtractElementExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitExtractElementExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ExtractElementExprContext* LLVMIRParser::extractElementExpr() {
  ExtractElementExprContext *_localctx = _tracker.createInstance<ExtractElementExprContext>(_ctx, getState());
  enterRule(_localctx, 286, LLVMIRParser::RuleExtractElementExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2144);
    match(LLVMIRParser::T__139);
    setState(2145);
    match(LLVMIRParser::T__25);
    setState(2146);
    typeConst();
    setState(2147);
    match(LLVMIRParser::T__14);
    setState(2148);
    typeConst();
    setState(2149);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertElementExprContext ------------------------------------------------------------------

LLVMIRParser::InsertElementExprContext::InsertElementExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeConstContext *> LLVMIRParser::InsertElementExprContext::typeConst() {
  return getRuleContexts<LLVMIRParser::TypeConstContext>();
}

LLVMIRParser::TypeConstContext* LLVMIRParser::InsertElementExprContext::typeConst(size_t i) {
  return getRuleContext<LLVMIRParser::TypeConstContext>(i);
}


size_t LLVMIRParser::InsertElementExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleInsertElementExpr;
}


std::any LLVMIRParser::InsertElementExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitInsertElementExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::InsertElementExprContext* LLVMIRParser::insertElementExpr() {
  InsertElementExprContext *_localctx = _tracker.createInstance<InsertElementExprContext>(_ctx, getState());
  enterRule(_localctx, 288, LLVMIRParser::RuleInsertElementExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2151);
    match(LLVMIRParser::T__140);
    setState(2152);
    match(LLVMIRParser::T__25);
    setState(2153);
    typeConst();
    setState(2154);
    match(LLVMIRParser::T__14);
    setState(2155);
    typeConst();
    setState(2156);
    match(LLVMIRParser::T__14);
    setState(2157);
    typeConst();
    setState(2158);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShuffleVectorExprContext ------------------------------------------------------------------

LLVMIRParser::ShuffleVectorExprContext::ShuffleVectorExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeConstContext *> LLVMIRParser::ShuffleVectorExprContext::typeConst() {
  return getRuleContexts<LLVMIRParser::TypeConstContext>();
}

LLVMIRParser::TypeConstContext* LLVMIRParser::ShuffleVectorExprContext::typeConst(size_t i) {
  return getRuleContext<LLVMIRParser::TypeConstContext>(i);
}


size_t LLVMIRParser::ShuffleVectorExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleShuffleVectorExpr;
}


std::any LLVMIRParser::ShuffleVectorExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitShuffleVectorExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ShuffleVectorExprContext* LLVMIRParser::shuffleVectorExpr() {
  ShuffleVectorExprContext *_localctx = _tracker.createInstance<ShuffleVectorExprContext>(_ctx, getState());
  enterRule(_localctx, 290, LLVMIRParser::RuleShuffleVectorExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2160);
    match(LLVMIRParser::T__141);
    setState(2161);
    match(LLVMIRParser::T__25);
    setState(2162);
    typeConst();
    setState(2163);
    match(LLVMIRParser::T__14);
    setState(2164);
    typeConst();
    setState(2165);
    match(LLVMIRParser::T__14);
    setState(2166);
    typeConst();
    setState(2167);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShlExprContext ------------------------------------------------------------------

LLVMIRParser::ShlExprContext::ShlExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeConstContext *> LLVMIRParser::ShlExprContext::typeConst() {
  return getRuleContexts<LLVMIRParser::TypeConstContext>();
}

LLVMIRParser::TypeConstContext* LLVMIRParser::ShlExprContext::typeConst(size_t i) {
  return getRuleContext<LLVMIRParser::TypeConstContext>(i);
}

std::vector<LLVMIRParser::OverflowFlagContext *> LLVMIRParser::ShlExprContext::overflowFlag() {
  return getRuleContexts<LLVMIRParser::OverflowFlagContext>();
}

LLVMIRParser::OverflowFlagContext* LLVMIRParser::ShlExprContext::overflowFlag(size_t i) {
  return getRuleContext<LLVMIRParser::OverflowFlagContext>(i);
}


size_t LLVMIRParser::ShlExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleShlExpr;
}


std::any LLVMIRParser::ShlExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitShlExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ShlExprContext* LLVMIRParser::shlExpr() {
  ShlExprContext *_localctx = _tracker.createInstance<ShlExprContext>(_ctx, getState());
  enterRule(_localctx, 292, LLVMIRParser::RuleShlExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2169);
    match(LLVMIRParser::T__142);
    setState(2173);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__264

    || _la == LLVMIRParser::T__265) {
      setState(2170);
      overflowFlag();
      setState(2175);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2176);
    match(LLVMIRParser::T__25);
    setState(2177);
    typeConst();
    setState(2178);
    match(LLVMIRParser::T__14);
    setState(2179);
    typeConst();
    setState(2180);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LShrExprContext ------------------------------------------------------------------

LLVMIRParser::LShrExprContext::LShrExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeConstContext *> LLVMIRParser::LShrExprContext::typeConst() {
  return getRuleContexts<LLVMIRParser::TypeConstContext>();
}

LLVMIRParser::TypeConstContext* LLVMIRParser::LShrExprContext::typeConst(size_t i) {
  return getRuleContext<LLVMIRParser::TypeConstContext>(i);
}


size_t LLVMIRParser::LShrExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleLShrExpr;
}


std::any LLVMIRParser::LShrExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitLShrExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::LShrExprContext* LLVMIRParser::lShrExpr() {
  LShrExprContext *_localctx = _tracker.createInstance<LShrExprContext>(_ctx, getState());
  enterRule(_localctx, 294, LLVMIRParser::RuleLShrExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2182);
    match(LLVMIRParser::T__143);
    setState(2184);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__144) {
      setState(2183);
      antlrcpp::downCast<LShrExprContext *>(_localctx)->exact = match(LLVMIRParser::T__144);
    }
    setState(2186);
    match(LLVMIRParser::T__25);
    setState(2187);
    typeConst();
    setState(2188);
    match(LLVMIRParser::T__14);
    setState(2189);
    typeConst();
    setState(2190);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AShrExprContext ------------------------------------------------------------------

LLVMIRParser::AShrExprContext::AShrExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeConstContext *> LLVMIRParser::AShrExprContext::typeConst() {
  return getRuleContexts<LLVMIRParser::TypeConstContext>();
}

LLVMIRParser::TypeConstContext* LLVMIRParser::AShrExprContext::typeConst(size_t i) {
  return getRuleContext<LLVMIRParser::TypeConstContext>(i);
}


size_t LLVMIRParser::AShrExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleAShrExpr;
}


std::any LLVMIRParser::AShrExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAShrExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AShrExprContext* LLVMIRParser::aShrExpr() {
  AShrExprContext *_localctx = _tracker.createInstance<AShrExprContext>(_ctx, getState());
  enterRule(_localctx, 296, LLVMIRParser::RuleAShrExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2192);
    match(LLVMIRParser::T__145);
    setState(2194);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__144) {
      setState(2193);
      antlrcpp::downCast<AShrExprContext *>(_localctx)->exact = match(LLVMIRParser::T__144);
    }
    setState(2196);
    match(LLVMIRParser::T__25);
    setState(2197);
    typeConst();
    setState(2198);
    match(LLVMIRParser::T__14);
    setState(2199);
    typeConst();
    setState(2200);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AndExprContext ------------------------------------------------------------------

LLVMIRParser::AndExprContext::AndExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeConstContext *> LLVMIRParser::AndExprContext::typeConst() {
  return getRuleContexts<LLVMIRParser::TypeConstContext>();
}

LLVMIRParser::TypeConstContext* LLVMIRParser::AndExprContext::typeConst(size_t i) {
  return getRuleContext<LLVMIRParser::TypeConstContext>(i);
}


size_t LLVMIRParser::AndExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleAndExpr;
}


std::any LLVMIRParser::AndExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAndExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AndExprContext* LLVMIRParser::andExpr() {
  AndExprContext *_localctx = _tracker.createInstance<AndExprContext>(_ctx, getState());
  enterRule(_localctx, 298, LLVMIRParser::RuleAndExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2202);
    match(LLVMIRParser::T__146);
    setState(2203);
    match(LLVMIRParser::T__25);
    setState(2204);
    typeConst();
    setState(2205);
    match(LLVMIRParser::T__14);
    setState(2206);
    typeConst();
    setState(2207);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrExprContext ------------------------------------------------------------------

LLVMIRParser::OrExprContext::OrExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeConstContext *> LLVMIRParser::OrExprContext::typeConst() {
  return getRuleContexts<LLVMIRParser::TypeConstContext>();
}

LLVMIRParser::TypeConstContext* LLVMIRParser::OrExprContext::typeConst(size_t i) {
  return getRuleContext<LLVMIRParser::TypeConstContext>(i);
}


size_t LLVMIRParser::OrExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleOrExpr;
}


std::any LLVMIRParser::OrExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitOrExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::OrExprContext* LLVMIRParser::orExpr() {
  OrExprContext *_localctx = _tracker.createInstance<OrExprContext>(_ctx, getState());
  enterRule(_localctx, 300, LLVMIRParser::RuleOrExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2209);
    match(LLVMIRParser::T__147);
    setState(2210);
    match(LLVMIRParser::T__25);
    setState(2211);
    typeConst();
    setState(2212);
    match(LLVMIRParser::T__14);
    setState(2213);
    typeConst();
    setState(2214);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- XorExprContext ------------------------------------------------------------------

LLVMIRParser::XorExprContext::XorExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeConstContext *> LLVMIRParser::XorExprContext::typeConst() {
  return getRuleContexts<LLVMIRParser::TypeConstContext>();
}

LLVMIRParser::TypeConstContext* LLVMIRParser::XorExprContext::typeConst(size_t i) {
  return getRuleContext<LLVMIRParser::TypeConstContext>(i);
}


size_t LLVMIRParser::XorExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleXorExpr;
}


std::any LLVMIRParser::XorExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitXorExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::XorExprContext* LLVMIRParser::xorExpr() {
  XorExprContext *_localctx = _tracker.createInstance<XorExprContext>(_ctx, getState());
  enterRule(_localctx, 302, LLVMIRParser::RuleXorExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2216);
    match(LLVMIRParser::T__148);
    setState(2217);
    match(LLVMIRParser::T__25);
    setState(2218);
    typeConst();
    setState(2219);
    match(LLVMIRParser::T__14);
    setState(2220);
    typeConst();
    setState(2221);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddExprContext ------------------------------------------------------------------

LLVMIRParser::AddExprContext::AddExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeConstContext *> LLVMIRParser::AddExprContext::typeConst() {
  return getRuleContexts<LLVMIRParser::TypeConstContext>();
}

LLVMIRParser::TypeConstContext* LLVMIRParser::AddExprContext::typeConst(size_t i) {
  return getRuleContext<LLVMIRParser::TypeConstContext>(i);
}

std::vector<LLVMIRParser::OverflowFlagContext *> LLVMIRParser::AddExprContext::overflowFlag() {
  return getRuleContexts<LLVMIRParser::OverflowFlagContext>();
}

LLVMIRParser::OverflowFlagContext* LLVMIRParser::AddExprContext::overflowFlag(size_t i) {
  return getRuleContext<LLVMIRParser::OverflowFlagContext>(i);
}


size_t LLVMIRParser::AddExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleAddExpr;
}


std::any LLVMIRParser::AddExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAddExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AddExprContext* LLVMIRParser::addExpr() {
  AddExprContext *_localctx = _tracker.createInstance<AddExprContext>(_ctx, getState());
  enterRule(_localctx, 304, LLVMIRParser::RuleAddExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2223);
    match(LLVMIRParser::T__149);
    setState(2227);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__264

    || _la == LLVMIRParser::T__265) {
      setState(2224);
      overflowFlag();
      setState(2229);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2230);
    match(LLVMIRParser::T__25);
    setState(2231);
    typeConst();
    setState(2232);
    match(LLVMIRParser::T__14);
    setState(2233);
    typeConst();
    setState(2234);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubExprContext ------------------------------------------------------------------

LLVMIRParser::SubExprContext::SubExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeConstContext *> LLVMIRParser::SubExprContext::typeConst() {
  return getRuleContexts<LLVMIRParser::TypeConstContext>();
}

LLVMIRParser::TypeConstContext* LLVMIRParser::SubExprContext::typeConst(size_t i) {
  return getRuleContext<LLVMIRParser::TypeConstContext>(i);
}

std::vector<LLVMIRParser::OverflowFlagContext *> LLVMIRParser::SubExprContext::overflowFlag() {
  return getRuleContexts<LLVMIRParser::OverflowFlagContext>();
}

LLVMIRParser::OverflowFlagContext* LLVMIRParser::SubExprContext::overflowFlag(size_t i) {
  return getRuleContext<LLVMIRParser::OverflowFlagContext>(i);
}


size_t LLVMIRParser::SubExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleSubExpr;
}


std::any LLVMIRParser::SubExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitSubExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::SubExprContext* LLVMIRParser::subExpr() {
  SubExprContext *_localctx = _tracker.createInstance<SubExprContext>(_ctx, getState());
  enterRule(_localctx, 306, LLVMIRParser::RuleSubExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2236);
    match(LLVMIRParser::T__150);
    setState(2240);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__264

    || _la == LLVMIRParser::T__265) {
      setState(2237);
      overflowFlag();
      setState(2242);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2243);
    match(LLVMIRParser::T__25);
    setState(2244);
    typeConst();
    setState(2245);
    match(LLVMIRParser::T__14);
    setState(2246);
    typeConst();
    setState(2247);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MulExprContext ------------------------------------------------------------------

LLVMIRParser::MulExprContext::MulExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeConstContext *> LLVMIRParser::MulExprContext::typeConst() {
  return getRuleContexts<LLVMIRParser::TypeConstContext>();
}

LLVMIRParser::TypeConstContext* LLVMIRParser::MulExprContext::typeConst(size_t i) {
  return getRuleContext<LLVMIRParser::TypeConstContext>(i);
}

std::vector<LLVMIRParser::OverflowFlagContext *> LLVMIRParser::MulExprContext::overflowFlag() {
  return getRuleContexts<LLVMIRParser::OverflowFlagContext>();
}

LLVMIRParser::OverflowFlagContext* LLVMIRParser::MulExprContext::overflowFlag(size_t i) {
  return getRuleContext<LLVMIRParser::OverflowFlagContext>(i);
}


size_t LLVMIRParser::MulExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleMulExpr;
}


std::any LLVMIRParser::MulExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitMulExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::MulExprContext* LLVMIRParser::mulExpr() {
  MulExprContext *_localctx = _tracker.createInstance<MulExprContext>(_ctx, getState());
  enterRule(_localctx, 308, LLVMIRParser::RuleMulExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2249);
    match(LLVMIRParser::T__151);
    setState(2253);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__264

    || _la == LLVMIRParser::T__265) {
      setState(2250);
      overflowFlag();
      setState(2255);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2256);
    match(LLVMIRParser::T__25);
    setState(2257);
    typeConst();
    setState(2258);
    match(LLVMIRParser::T__14);
    setState(2259);
    typeConst();
    setState(2260);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FNegExprContext ------------------------------------------------------------------

LLVMIRParser::FNegExprContext::FNegExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeConstContext* LLVMIRParser::FNegExprContext::typeConst() {
  return getRuleContext<LLVMIRParser::TypeConstContext>(0);
}


size_t LLVMIRParser::FNegExprContext::getRuleIndex() const {
  return LLVMIRParser::RuleFNegExpr;
}


std::any LLVMIRParser::FNegExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFNegExpr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FNegExprContext* LLVMIRParser::fNegExpr() {
  FNegExprContext *_localctx = _tracker.createInstance<FNegExprContext>(_ctx, getState());
  enterRule(_localctx, 310, LLVMIRParser::RuleFNegExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2262);
    match(LLVMIRParser::T__152);
    setState(2263);
    match(LLVMIRParser::T__25);
    setState(2264);
    typeConst();
    setState(2265);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalDefInstContext ------------------------------------------------------------------

LLVMIRParser::LocalDefInstContext::LocalDefInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::LocalDefInstContext::LocalIdent() {
  return getToken(LLVMIRParser::LocalIdent, 0);
}

LLVMIRParser::ValueInstructionContext* LLVMIRParser::LocalDefInstContext::valueInstruction() {
  return getRuleContext<LLVMIRParser::ValueInstructionContext>(0);
}


size_t LLVMIRParser::LocalDefInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleLocalDefInst;
}


std::any LLVMIRParser::LocalDefInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitLocalDefInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::LocalDefInstContext* LLVMIRParser::localDefInst() {
  LocalDefInstContext *_localctx = _tracker.createInstance<LocalDefInstContext>(_ctx, getState());
  enterRule(_localctx, 312, LLVMIRParser::RuleLocalDefInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2267);
    match(LLVMIRParser::LocalIdent);
    setState(2268);
    match(LLVMIRParser::T__1);
    setState(2269);
    valueInstruction();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueInstructionContext ------------------------------------------------------------------

LLVMIRParser::ValueInstructionContext::ValueInstructionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::FNegInstContext* LLVMIRParser::ValueInstructionContext::fNegInst() {
  return getRuleContext<LLVMIRParser::FNegInstContext>(0);
}

LLVMIRParser::AddInstContext* LLVMIRParser::ValueInstructionContext::addInst() {
  return getRuleContext<LLVMIRParser::AddInstContext>(0);
}

LLVMIRParser::FAddInstContext* LLVMIRParser::ValueInstructionContext::fAddInst() {
  return getRuleContext<LLVMIRParser::FAddInstContext>(0);
}

LLVMIRParser::SubInstContext* LLVMIRParser::ValueInstructionContext::subInst() {
  return getRuleContext<LLVMIRParser::SubInstContext>(0);
}

LLVMIRParser::FSubInstContext* LLVMIRParser::ValueInstructionContext::fSubInst() {
  return getRuleContext<LLVMIRParser::FSubInstContext>(0);
}

LLVMIRParser::MulInstContext* LLVMIRParser::ValueInstructionContext::mulInst() {
  return getRuleContext<LLVMIRParser::MulInstContext>(0);
}

LLVMIRParser::FMulInstContext* LLVMIRParser::ValueInstructionContext::fMulInst() {
  return getRuleContext<LLVMIRParser::FMulInstContext>(0);
}

LLVMIRParser::UDivInstContext* LLVMIRParser::ValueInstructionContext::uDivInst() {
  return getRuleContext<LLVMIRParser::UDivInstContext>(0);
}

LLVMIRParser::SDivInstContext* LLVMIRParser::ValueInstructionContext::sDivInst() {
  return getRuleContext<LLVMIRParser::SDivInstContext>(0);
}

LLVMIRParser::FDivInstContext* LLVMIRParser::ValueInstructionContext::fDivInst() {
  return getRuleContext<LLVMIRParser::FDivInstContext>(0);
}

LLVMIRParser::URemInstContext* LLVMIRParser::ValueInstructionContext::uRemInst() {
  return getRuleContext<LLVMIRParser::URemInstContext>(0);
}

LLVMIRParser::SRemInstContext* LLVMIRParser::ValueInstructionContext::sRemInst() {
  return getRuleContext<LLVMIRParser::SRemInstContext>(0);
}

LLVMIRParser::FRemInstContext* LLVMIRParser::ValueInstructionContext::fRemInst() {
  return getRuleContext<LLVMIRParser::FRemInstContext>(0);
}

LLVMIRParser::ShlInstContext* LLVMIRParser::ValueInstructionContext::shlInst() {
  return getRuleContext<LLVMIRParser::ShlInstContext>(0);
}

LLVMIRParser::LShrInstContext* LLVMIRParser::ValueInstructionContext::lShrInst() {
  return getRuleContext<LLVMIRParser::LShrInstContext>(0);
}

LLVMIRParser::AShrInstContext* LLVMIRParser::ValueInstructionContext::aShrInst() {
  return getRuleContext<LLVMIRParser::AShrInstContext>(0);
}

LLVMIRParser::AndInstContext* LLVMIRParser::ValueInstructionContext::andInst() {
  return getRuleContext<LLVMIRParser::AndInstContext>(0);
}

LLVMIRParser::OrInstContext* LLVMIRParser::ValueInstructionContext::orInst() {
  return getRuleContext<LLVMIRParser::OrInstContext>(0);
}

LLVMIRParser::XorInstContext* LLVMIRParser::ValueInstructionContext::xorInst() {
  return getRuleContext<LLVMIRParser::XorInstContext>(0);
}

LLVMIRParser::ExtractElementInstContext* LLVMIRParser::ValueInstructionContext::extractElementInst() {
  return getRuleContext<LLVMIRParser::ExtractElementInstContext>(0);
}

LLVMIRParser::InsertElementInstContext* LLVMIRParser::ValueInstructionContext::insertElementInst() {
  return getRuleContext<LLVMIRParser::InsertElementInstContext>(0);
}

LLVMIRParser::ShuffleVectorInstContext* LLVMIRParser::ValueInstructionContext::shuffleVectorInst() {
  return getRuleContext<LLVMIRParser::ShuffleVectorInstContext>(0);
}

LLVMIRParser::ExtractValueInstContext* LLVMIRParser::ValueInstructionContext::extractValueInst() {
  return getRuleContext<LLVMIRParser::ExtractValueInstContext>(0);
}

LLVMIRParser::InsertValueInstContext* LLVMIRParser::ValueInstructionContext::insertValueInst() {
  return getRuleContext<LLVMIRParser::InsertValueInstContext>(0);
}

LLVMIRParser::AllocaInstContext* LLVMIRParser::ValueInstructionContext::allocaInst() {
  return getRuleContext<LLVMIRParser::AllocaInstContext>(0);
}

LLVMIRParser::LoadInstContext* LLVMIRParser::ValueInstructionContext::loadInst() {
  return getRuleContext<LLVMIRParser::LoadInstContext>(0);
}

LLVMIRParser::CmpXchgInstContext* LLVMIRParser::ValueInstructionContext::cmpXchgInst() {
  return getRuleContext<LLVMIRParser::CmpXchgInstContext>(0);
}

LLVMIRParser::AtomicRMWInstContext* LLVMIRParser::ValueInstructionContext::atomicRMWInst() {
  return getRuleContext<LLVMIRParser::AtomicRMWInstContext>(0);
}

LLVMIRParser::GetElementPtrInstContext* LLVMIRParser::ValueInstructionContext::getElementPtrInst() {
  return getRuleContext<LLVMIRParser::GetElementPtrInstContext>(0);
}

LLVMIRParser::TruncInstContext* LLVMIRParser::ValueInstructionContext::truncInst() {
  return getRuleContext<LLVMIRParser::TruncInstContext>(0);
}

LLVMIRParser::ZExtInstContext* LLVMIRParser::ValueInstructionContext::zExtInst() {
  return getRuleContext<LLVMIRParser::ZExtInstContext>(0);
}

LLVMIRParser::SExtInstContext* LLVMIRParser::ValueInstructionContext::sExtInst() {
  return getRuleContext<LLVMIRParser::SExtInstContext>(0);
}

LLVMIRParser::FpTruncInstContext* LLVMIRParser::ValueInstructionContext::fpTruncInst() {
  return getRuleContext<LLVMIRParser::FpTruncInstContext>(0);
}

LLVMIRParser::FpExtInstContext* LLVMIRParser::ValueInstructionContext::fpExtInst() {
  return getRuleContext<LLVMIRParser::FpExtInstContext>(0);
}

LLVMIRParser::FpToUiInstContext* LLVMIRParser::ValueInstructionContext::fpToUiInst() {
  return getRuleContext<LLVMIRParser::FpToUiInstContext>(0);
}

LLVMIRParser::FpToSiInstContext* LLVMIRParser::ValueInstructionContext::fpToSiInst() {
  return getRuleContext<LLVMIRParser::FpToSiInstContext>(0);
}

LLVMIRParser::UiToFpInstContext* LLVMIRParser::ValueInstructionContext::uiToFpInst() {
  return getRuleContext<LLVMIRParser::UiToFpInstContext>(0);
}

LLVMIRParser::SiToFpInstContext* LLVMIRParser::ValueInstructionContext::siToFpInst() {
  return getRuleContext<LLVMIRParser::SiToFpInstContext>(0);
}

LLVMIRParser::PtrToIntInstContext* LLVMIRParser::ValueInstructionContext::ptrToIntInst() {
  return getRuleContext<LLVMIRParser::PtrToIntInstContext>(0);
}

LLVMIRParser::IntToPtrInstContext* LLVMIRParser::ValueInstructionContext::intToPtrInst() {
  return getRuleContext<LLVMIRParser::IntToPtrInstContext>(0);
}

LLVMIRParser::BitCastInstContext* LLVMIRParser::ValueInstructionContext::bitCastInst() {
  return getRuleContext<LLVMIRParser::BitCastInstContext>(0);
}

LLVMIRParser::AddrSpaceCastInstContext* LLVMIRParser::ValueInstructionContext::addrSpaceCastInst() {
  return getRuleContext<LLVMIRParser::AddrSpaceCastInstContext>(0);
}

LLVMIRParser::ICmpInstContext* LLVMIRParser::ValueInstructionContext::iCmpInst() {
  return getRuleContext<LLVMIRParser::ICmpInstContext>(0);
}

LLVMIRParser::FCmpInstContext* LLVMIRParser::ValueInstructionContext::fCmpInst() {
  return getRuleContext<LLVMIRParser::FCmpInstContext>(0);
}

LLVMIRParser::PhiInstContext* LLVMIRParser::ValueInstructionContext::phiInst() {
  return getRuleContext<LLVMIRParser::PhiInstContext>(0);
}

LLVMIRParser::SelectInstContext* LLVMIRParser::ValueInstructionContext::selectInst() {
  return getRuleContext<LLVMIRParser::SelectInstContext>(0);
}

LLVMIRParser::FreezeInstContext* LLVMIRParser::ValueInstructionContext::freezeInst() {
  return getRuleContext<LLVMIRParser::FreezeInstContext>(0);
}

LLVMIRParser::CallInstContext* LLVMIRParser::ValueInstructionContext::callInst() {
  return getRuleContext<LLVMIRParser::CallInstContext>(0);
}

LLVMIRParser::VaargInstContext* LLVMIRParser::ValueInstructionContext::vaargInst() {
  return getRuleContext<LLVMIRParser::VaargInstContext>(0);
}

LLVMIRParser::LandingPadInstContext* LLVMIRParser::ValueInstructionContext::landingPadInst() {
  return getRuleContext<LLVMIRParser::LandingPadInstContext>(0);
}

LLVMIRParser::CatchPadInstContext* LLVMIRParser::ValueInstructionContext::catchPadInst() {
  return getRuleContext<LLVMIRParser::CatchPadInstContext>(0);
}

LLVMIRParser::CleanupPadInstContext* LLVMIRParser::ValueInstructionContext::cleanupPadInst() {
  return getRuleContext<LLVMIRParser::CleanupPadInstContext>(0);
}


size_t LLVMIRParser::ValueInstructionContext::getRuleIndex() const {
  return LLVMIRParser::RuleValueInstruction;
}


std::any LLVMIRParser::ValueInstructionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitValueInstruction(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ValueInstructionContext* LLVMIRParser::valueInstruction() {
  ValueInstructionContext *_localctx = _tracker.createInstance<ValueInstructionContext>(_ctx, getState());
  enterRule(_localctx, 314, LLVMIRParser::RuleValueInstruction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2323);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__152: {
        enterOuterAlt(_localctx, 1);
        setState(2271);
        fNegInst();
        break;
      }

      case LLVMIRParser::T__149: {
        enterOuterAlt(_localctx, 2);
        setState(2272);
        addInst();
        break;
      }

      case LLVMIRParser::T__158: {
        enterOuterAlt(_localctx, 3);
        setState(2273);
        fAddInst();
        break;
      }

      case LLVMIRParser::T__150: {
        enterOuterAlt(_localctx, 4);
        setState(2274);
        subInst();
        break;
      }

      case LLVMIRParser::T__159: {
        enterOuterAlt(_localctx, 5);
        setState(2275);
        fSubInst();
        break;
      }

      case LLVMIRParser::T__151: {
        enterOuterAlt(_localctx, 6);
        setState(2276);
        mulInst();
        break;
      }

      case LLVMIRParser::T__160: {
        enterOuterAlt(_localctx, 7);
        setState(2277);
        fMulInst();
        break;
      }

      case LLVMIRParser::T__161: {
        enterOuterAlt(_localctx, 8);
        setState(2278);
        uDivInst();
        break;
      }

      case LLVMIRParser::T__162: {
        enterOuterAlt(_localctx, 9);
        setState(2279);
        sDivInst();
        break;
      }

      case LLVMIRParser::T__163: {
        enterOuterAlt(_localctx, 10);
        setState(2280);
        fDivInst();
        break;
      }

      case LLVMIRParser::T__164: {
        enterOuterAlt(_localctx, 11);
        setState(2281);
        uRemInst();
        break;
      }

      case LLVMIRParser::T__165: {
        enterOuterAlt(_localctx, 12);
        setState(2282);
        sRemInst();
        break;
      }

      case LLVMIRParser::T__166: {
        enterOuterAlt(_localctx, 13);
        setState(2283);
        fRemInst();
        break;
      }

      case LLVMIRParser::T__142: {
        enterOuterAlt(_localctx, 14);
        setState(2284);
        shlInst();
        break;
      }

      case LLVMIRParser::T__143: {
        enterOuterAlt(_localctx, 15);
        setState(2285);
        lShrInst();
        break;
      }

      case LLVMIRParser::T__145: {
        enterOuterAlt(_localctx, 16);
        setState(2286);
        aShrInst();
        break;
      }

      case LLVMIRParser::T__146: {
        enterOuterAlt(_localctx, 17);
        setState(2287);
        andInst();
        break;
      }

      case LLVMIRParser::T__147: {
        enterOuterAlt(_localctx, 18);
        setState(2288);
        orInst();
        break;
      }

      case LLVMIRParser::T__148: {
        enterOuterAlt(_localctx, 19);
        setState(2289);
        xorInst();
        break;
      }

      case LLVMIRParser::T__139: {
        enterOuterAlt(_localctx, 20);
        setState(2290);
        extractElementInst();
        break;
      }

      case LLVMIRParser::T__140: {
        enterOuterAlt(_localctx, 21);
        setState(2291);
        insertElementInst();
        break;
      }

      case LLVMIRParser::T__141: {
        enterOuterAlt(_localctx, 22);
        setState(2292);
        shuffleVectorInst();
        break;
      }

      case LLVMIRParser::T__167: {
        enterOuterAlt(_localctx, 23);
        setState(2293);
        extractValueInst();
        break;
      }

      case LLVMIRParser::T__168: {
        enterOuterAlt(_localctx, 24);
        setState(2294);
        insertValueInst();
        break;
      }

      case LLVMIRParser::T__169: {
        enterOuterAlt(_localctx, 25);
        setState(2295);
        allocaInst();
        break;
      }

      case LLVMIRParser::T__170: {
        enterOuterAlt(_localctx, 26);
        setState(2296);
        loadInst();
        break;
      }

      case LLVMIRParser::T__171: {
        enterOuterAlt(_localctx, 27);
        setState(2297);
        cmpXchgInst();
        break;
      }

      case LLVMIRParser::T__173: {
        enterOuterAlt(_localctx, 28);
        setState(2298);
        atomicRMWInst();
        break;
      }

      case LLVMIRParser::T__122: {
        enterOuterAlt(_localctx, 29);
        setState(2299);
        getElementPtrInst();
        break;
      }

      case LLVMIRParser::T__129: {
        enterOuterAlt(_localctx, 30);
        setState(2300);
        truncInst();
        break;
      }

      case LLVMIRParser::T__130: {
        enterOuterAlt(_localctx, 31);
        setState(2301);
        zExtInst();
        break;
      }

      case LLVMIRParser::T__131: {
        enterOuterAlt(_localctx, 32);
        setState(2302);
        sExtInst();
        break;
      }

      case LLVMIRParser::T__132: {
        enterOuterAlt(_localctx, 33);
        setState(2303);
        fpTruncInst();
        break;
      }

      case LLVMIRParser::T__133: {
        enterOuterAlt(_localctx, 34);
        setState(2304);
        fpExtInst();
        break;
      }

      case LLVMIRParser::T__134: {
        enterOuterAlt(_localctx, 35);
        setState(2305);
        fpToUiInst();
        break;
      }

      case LLVMIRParser::T__135: {
        enterOuterAlt(_localctx, 36);
        setState(2306);
        fpToSiInst();
        break;
      }

      case LLVMIRParser::T__136: {
        enterOuterAlt(_localctx, 37);
        setState(2307);
        uiToFpInst();
        break;
      }

      case LLVMIRParser::T__137: {
        enterOuterAlt(_localctx, 38);
        setState(2308);
        siToFpInst();
        break;
      }

      case LLVMIRParser::T__138: {
        enterOuterAlt(_localctx, 39);
        setState(2309);
        ptrToIntInst();
        break;
      }

      case LLVMIRParser::T__125: {
        enterOuterAlt(_localctx, 40);
        setState(2310);
        intToPtrInst();
        break;
      }

      case LLVMIRParser::T__121: {
        enterOuterAlt(_localctx, 41);
        setState(2311);
        bitCastInst();
        break;
      }

      case LLVMIRParser::T__124: {
        enterOuterAlt(_localctx, 42);
        setState(2312);
        addrSpaceCastInst();
        break;
      }

      case LLVMIRParser::T__126: {
        enterOuterAlt(_localctx, 43);
        setState(2313);
        iCmpInst();
        break;
      }

      case LLVMIRParser::T__127: {
        enterOuterAlt(_localctx, 44);
        setState(2314);
        fCmpInst();
        break;
      }

      case LLVMIRParser::T__174: {
        enterOuterAlt(_localctx, 45);
        setState(2315);
        phiInst();
        break;
      }

      case LLVMIRParser::T__128: {
        enterOuterAlt(_localctx, 46);
        setState(2316);
        selectInst();
        break;
      }

      case LLVMIRParser::T__175: {
        enterOuterAlt(_localctx, 47);
        setState(2317);
        freezeInst();
        break;
      }

      case LLVMIRParser::T__176:
      case LLVMIRParser::T__177:
      case LLVMIRParser::T__178:
      case LLVMIRParser::T__179: {
        enterOuterAlt(_localctx, 48);
        setState(2318);
        callInst();
        break;
      }

      case LLVMIRParser::T__180: {
        enterOuterAlt(_localctx, 49);
        setState(2319);
        vaargInst();
        break;
      }

      case LLVMIRParser::T__181: {
        enterOuterAlt(_localctx, 50);
        setState(2320);
        landingPadInst();
        break;
      }

      case LLVMIRParser::T__183: {
        enterOuterAlt(_localctx, 51);
        setState(2321);
        catchPadInst();
        break;
      }

      case LLVMIRParser::T__184: {
        enterOuterAlt(_localctx, 52);
        setState(2322);
        cleanupPadInst();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StoreInstContext ------------------------------------------------------------------

LLVMIRParser::StoreInstContext::StoreInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeValueContext *> LLVMIRParser::StoreInstContext::typeValue() {
  return getRuleContexts<LLVMIRParser::TypeValueContext>();
}

LLVMIRParser::TypeValueContext* LLVMIRParser::StoreInstContext::typeValue(size_t i) {
  return getRuleContext<LLVMIRParser::TypeValueContext>(i);
}

LLVMIRParser::AlignContext* LLVMIRParser::StoreInstContext::align() {
  return getRuleContext<LLVMIRParser::AlignContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::StoreInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::StoreInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}

LLVMIRParser::AtomicOrderingContext* LLVMIRParser::StoreInstContext::atomicOrdering() {
  return getRuleContext<LLVMIRParser::AtomicOrderingContext>(0);
}

LLVMIRParser::SyncScopeContext* LLVMIRParser::StoreInstContext::syncScope() {
  return getRuleContext<LLVMIRParser::SyncScopeContext>(0);
}


size_t LLVMIRParser::StoreInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleStoreInst;
}


std::any LLVMIRParser::StoreInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitStoreInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::StoreInstContext* LLVMIRParser::storeInst() {
  StoreInstContext *_localctx = _tracker.createInstance<StoreInstContext>(_ctx, getState());
  enterRule(_localctx, 316, LLVMIRParser::RuleStoreInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2366);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2325);
      match(LLVMIRParser::T__153);
      setState(2327);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LLVMIRParser::T__154) {
        setState(2326);
        antlrcpp::downCast<StoreInstContext *>(_localctx)->volatile_ = match(LLVMIRParser::T__154);
      }
      setState(2329);
      typeValue();
      setState(2330);
      match(LLVMIRParser::T__14);
      setState(2331);
      typeValue();
      setState(2334);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 164, _ctx)) {
      case 1: {
        setState(2332);
        match(LLVMIRParser::T__14);
        setState(2333);
        align();
        break;
      }

      default:
        break;
      }
      setState(2340);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(2336);
        match(LLVMIRParser::T__14);
        setState(2337);
        metadataAttachment();
        setState(2342);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2343);
      match(LLVMIRParser::T__153);
      setState(2344);
      antlrcpp::downCast<StoreInstContext *>(_localctx)->atomic = match(LLVMIRParser::T__155);
      setState(2346);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LLVMIRParser::T__154) {
        setState(2345);
        antlrcpp::downCast<StoreInstContext *>(_localctx)->volatile_ = match(LLVMIRParser::T__154);
      }
      setState(2348);
      typeValue();
      setState(2349);
      match(LLVMIRParser::T__14);
      setState(2350);
      typeValue();
      setState(2352);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LLVMIRParser::T__156) {
        setState(2351);
        syncScope();
      }
      setState(2354);
      atomicOrdering();
      setState(2357);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx)) {
      case 1: {
        setState(2355);
        match(LLVMIRParser::T__14);
        setState(2356);
        align();
        break;
      }

      default:
        break;
      }
      setState(2363);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(2359);
        match(LLVMIRParser::T__14);
        setState(2360);
        metadataAttachment();
        setState(2365);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SyncScopeContext ------------------------------------------------------------------

LLVMIRParser::SyncScopeContext::SyncScopeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::SyncScopeContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::SyncScopeContext::getRuleIndex() const {
  return LLVMIRParser::RuleSyncScope;
}


std::any LLVMIRParser::SyncScopeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitSyncScope(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::SyncScopeContext* LLVMIRParser::syncScope() {
  SyncScopeContext *_localctx = _tracker.createInstance<SyncScopeContext>(_ctx, getState());
  enterRule(_localctx, 318, LLVMIRParser::RuleSyncScope);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2368);
    match(LLVMIRParser::T__156);
    setState(2369);
    match(LLVMIRParser::T__25);
    setState(2370);
    match(LLVMIRParser::StringLit);
    setState(2371);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FenceInstContext ------------------------------------------------------------------

LLVMIRParser::FenceInstContext::FenceInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::AtomicOrderingContext* LLVMIRParser::FenceInstContext::atomicOrdering() {
  return getRuleContext<LLVMIRParser::AtomicOrderingContext>(0);
}

LLVMIRParser::SyncScopeContext* LLVMIRParser::FenceInstContext::syncScope() {
  return getRuleContext<LLVMIRParser::SyncScopeContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::FenceInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::FenceInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::FenceInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleFenceInst;
}


std::any LLVMIRParser::FenceInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFenceInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FenceInstContext* LLVMIRParser::fenceInst() {
  FenceInstContext *_localctx = _tracker.createInstance<FenceInstContext>(_ctx, getState());
  enterRule(_localctx, 320, LLVMIRParser::RuleFenceInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2373);
    match(LLVMIRParser::T__157);
    setState(2375);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__156) {
      setState(2374);
      syncScope();
    }
    setState(2377);
    atomicOrdering();
    setState(2382);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2378);
      match(LLVMIRParser::T__14);
      setState(2379);
      metadataAttachment();
      setState(2384);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FNegInstContext ------------------------------------------------------------------

LLVMIRParser::FNegInstContext::FNegInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::FNegInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

std::vector<LLVMIRParser::FastMathFlagContext *> LLVMIRParser::FNegInstContext::fastMathFlag() {
  return getRuleContexts<LLVMIRParser::FastMathFlagContext>();
}

LLVMIRParser::FastMathFlagContext* LLVMIRParser::FNegInstContext::fastMathFlag(size_t i) {
  return getRuleContext<LLVMIRParser::FastMathFlagContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::FNegInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::FNegInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::FNegInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleFNegInst;
}


std::any LLVMIRParser::FNegInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFNegInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FNegInstContext* LLVMIRParser::fNegInst() {
  FNegInstContext *_localctx = _tracker.createInstance<FNegInstContext>(_ctx, getState());
  enterRule(_localctx, 322, LLVMIRParser::RuleFNegInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2385);
    match(LLVMIRParser::T__152);
    setState(2389);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 338) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 338)) & 255) != 0)) {
      setState(2386);
      fastMathFlag();
      setState(2391);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2392);
    typeValue();
    setState(2397);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2393);
      match(LLVMIRParser::T__14);
      setState(2394);
      metadataAttachment();
      setState(2399);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddInstContext ------------------------------------------------------------------

LLVMIRParser::AddInstContext::AddInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::AddInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::AddInstContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

std::vector<LLVMIRParser::OverflowFlagContext *> LLVMIRParser::AddInstContext::overflowFlag() {
  return getRuleContexts<LLVMIRParser::OverflowFlagContext>();
}

LLVMIRParser::OverflowFlagContext* LLVMIRParser::AddInstContext::overflowFlag(size_t i) {
  return getRuleContext<LLVMIRParser::OverflowFlagContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::AddInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::AddInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::AddInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleAddInst;
}


std::any LLVMIRParser::AddInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAddInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AddInstContext* LLVMIRParser::addInst() {
  AddInstContext *_localctx = _tracker.createInstance<AddInstContext>(_ctx, getState());
  enterRule(_localctx, 324, LLVMIRParser::RuleAddInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2400);
    match(LLVMIRParser::T__149);
    setState(2404);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__264

    || _la == LLVMIRParser::T__265) {
      setState(2401);
      overflowFlag();
      setState(2406);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2407);
    typeValue();
    setState(2408);
    match(LLVMIRParser::T__14);
    setState(2409);
    value();
    setState(2414);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2410);
      match(LLVMIRParser::T__14);
      setState(2411);
      metadataAttachment();
      setState(2416);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FAddInstContext ------------------------------------------------------------------

LLVMIRParser::FAddInstContext::FAddInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::FAddInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::FAddInstContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

std::vector<LLVMIRParser::FastMathFlagContext *> LLVMIRParser::FAddInstContext::fastMathFlag() {
  return getRuleContexts<LLVMIRParser::FastMathFlagContext>();
}

LLVMIRParser::FastMathFlagContext* LLVMIRParser::FAddInstContext::fastMathFlag(size_t i) {
  return getRuleContext<LLVMIRParser::FastMathFlagContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::FAddInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::FAddInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::FAddInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleFAddInst;
}


std::any LLVMIRParser::FAddInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFAddInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FAddInstContext* LLVMIRParser::fAddInst() {
  FAddInstContext *_localctx = _tracker.createInstance<FAddInstContext>(_ctx, getState());
  enterRule(_localctx, 326, LLVMIRParser::RuleFAddInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2417);
    match(LLVMIRParser::T__158);
    setState(2421);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 338) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 338)) & 255) != 0)) {
      setState(2418);
      fastMathFlag();
      setState(2423);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2424);
    typeValue();
    setState(2425);
    match(LLVMIRParser::T__14);
    setState(2426);
    value();
    setState(2431);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2427);
      match(LLVMIRParser::T__14);
      setState(2428);
      metadataAttachment();
      setState(2433);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubInstContext ------------------------------------------------------------------

LLVMIRParser::SubInstContext::SubInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::SubInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::SubInstContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

std::vector<LLVMIRParser::OverflowFlagContext *> LLVMIRParser::SubInstContext::overflowFlag() {
  return getRuleContexts<LLVMIRParser::OverflowFlagContext>();
}

LLVMIRParser::OverflowFlagContext* LLVMIRParser::SubInstContext::overflowFlag(size_t i) {
  return getRuleContext<LLVMIRParser::OverflowFlagContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::SubInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::SubInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::SubInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleSubInst;
}


std::any LLVMIRParser::SubInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitSubInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::SubInstContext* LLVMIRParser::subInst() {
  SubInstContext *_localctx = _tracker.createInstance<SubInstContext>(_ctx, getState());
  enterRule(_localctx, 328, LLVMIRParser::RuleSubInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2434);
    match(LLVMIRParser::T__150);
    setState(2438);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__264

    || _la == LLVMIRParser::T__265) {
      setState(2435);
      overflowFlag();
      setState(2440);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2441);
    typeValue();
    setState(2442);
    match(LLVMIRParser::T__14);
    setState(2443);
    value();
    setState(2448);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2444);
      match(LLVMIRParser::T__14);
      setState(2445);
      metadataAttachment();
      setState(2450);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FSubInstContext ------------------------------------------------------------------

LLVMIRParser::FSubInstContext::FSubInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::FSubInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::FSubInstContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

std::vector<LLVMIRParser::FastMathFlagContext *> LLVMIRParser::FSubInstContext::fastMathFlag() {
  return getRuleContexts<LLVMIRParser::FastMathFlagContext>();
}

LLVMIRParser::FastMathFlagContext* LLVMIRParser::FSubInstContext::fastMathFlag(size_t i) {
  return getRuleContext<LLVMIRParser::FastMathFlagContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::FSubInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::FSubInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::FSubInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleFSubInst;
}


std::any LLVMIRParser::FSubInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFSubInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FSubInstContext* LLVMIRParser::fSubInst() {
  FSubInstContext *_localctx = _tracker.createInstance<FSubInstContext>(_ctx, getState());
  enterRule(_localctx, 330, LLVMIRParser::RuleFSubInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2451);
    match(LLVMIRParser::T__159);
    setState(2455);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 338) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 338)) & 255) != 0)) {
      setState(2452);
      fastMathFlag();
      setState(2457);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2458);
    typeValue();
    setState(2459);
    match(LLVMIRParser::T__14);
    setState(2460);
    value();
    setState(2465);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2461);
      match(LLVMIRParser::T__14);
      setState(2462);
      metadataAttachment();
      setState(2467);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MulInstContext ------------------------------------------------------------------

LLVMIRParser::MulInstContext::MulInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::MulInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::MulInstContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

std::vector<LLVMIRParser::OverflowFlagContext *> LLVMIRParser::MulInstContext::overflowFlag() {
  return getRuleContexts<LLVMIRParser::OverflowFlagContext>();
}

LLVMIRParser::OverflowFlagContext* LLVMIRParser::MulInstContext::overflowFlag(size_t i) {
  return getRuleContext<LLVMIRParser::OverflowFlagContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::MulInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::MulInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::MulInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleMulInst;
}


std::any LLVMIRParser::MulInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitMulInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::MulInstContext* LLVMIRParser::mulInst() {
  MulInstContext *_localctx = _tracker.createInstance<MulInstContext>(_ctx, getState());
  enterRule(_localctx, 332, LLVMIRParser::RuleMulInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2468);
    match(LLVMIRParser::T__151);
    setState(2472);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__264

    || _la == LLVMIRParser::T__265) {
      setState(2469);
      overflowFlag();
      setState(2474);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2475);
    typeValue();
    setState(2476);
    match(LLVMIRParser::T__14);
    setState(2477);
    value();
    setState(2482);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2478);
      match(LLVMIRParser::T__14);
      setState(2479);
      metadataAttachment();
      setState(2484);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FMulInstContext ------------------------------------------------------------------

LLVMIRParser::FMulInstContext::FMulInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::FMulInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::FMulInstContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

std::vector<LLVMIRParser::FastMathFlagContext *> LLVMIRParser::FMulInstContext::fastMathFlag() {
  return getRuleContexts<LLVMIRParser::FastMathFlagContext>();
}

LLVMIRParser::FastMathFlagContext* LLVMIRParser::FMulInstContext::fastMathFlag(size_t i) {
  return getRuleContext<LLVMIRParser::FastMathFlagContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::FMulInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::FMulInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::FMulInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleFMulInst;
}


std::any LLVMIRParser::FMulInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFMulInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FMulInstContext* LLVMIRParser::fMulInst() {
  FMulInstContext *_localctx = _tracker.createInstance<FMulInstContext>(_ctx, getState());
  enterRule(_localctx, 334, LLVMIRParser::RuleFMulInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2485);
    match(LLVMIRParser::T__160);
    setState(2489);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 338) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 338)) & 255) != 0)) {
      setState(2486);
      fastMathFlag();
      setState(2491);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2492);
    typeValue();
    setState(2493);
    match(LLVMIRParser::T__14);
    setState(2494);
    value();
    setState(2499);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2495);
      match(LLVMIRParser::T__14);
      setState(2496);
      metadataAttachment();
      setState(2501);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UDivInstContext ------------------------------------------------------------------

LLVMIRParser::UDivInstContext::UDivInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::UDivInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::UDivInstContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::UDivInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::UDivInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::UDivInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleUDivInst;
}


std::any LLVMIRParser::UDivInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitUDivInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::UDivInstContext* LLVMIRParser::uDivInst() {
  UDivInstContext *_localctx = _tracker.createInstance<UDivInstContext>(_ctx, getState());
  enterRule(_localctx, 336, LLVMIRParser::RuleUDivInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2502);
    match(LLVMIRParser::T__161);
    setState(2504);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__144) {
      setState(2503);
      antlrcpp::downCast<UDivInstContext *>(_localctx)->exact = match(LLVMIRParser::T__144);
    }
    setState(2506);
    typeValue();
    setState(2507);
    match(LLVMIRParser::T__14);
    setState(2508);
    value();
    setState(2513);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2509);
      match(LLVMIRParser::T__14);
      setState(2510);
      metadataAttachment();
      setState(2515);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SDivInstContext ------------------------------------------------------------------

LLVMIRParser::SDivInstContext::SDivInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::SDivInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::SDivInstContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::SDivInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::SDivInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::SDivInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleSDivInst;
}


std::any LLVMIRParser::SDivInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitSDivInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::SDivInstContext* LLVMIRParser::sDivInst() {
  SDivInstContext *_localctx = _tracker.createInstance<SDivInstContext>(_ctx, getState());
  enterRule(_localctx, 338, LLVMIRParser::RuleSDivInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2516);
    match(LLVMIRParser::T__162);
    setState(2518);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__144) {
      setState(2517);
      antlrcpp::downCast<SDivInstContext *>(_localctx)->exact = match(LLVMIRParser::T__144);
    }
    setState(2520);
    typeValue();
    setState(2521);
    match(LLVMIRParser::T__14);
    setState(2522);
    value();
    setState(2527);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2523);
      match(LLVMIRParser::T__14);
      setState(2524);
      metadataAttachment();
      setState(2529);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FDivInstContext ------------------------------------------------------------------

LLVMIRParser::FDivInstContext::FDivInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::FDivInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::FDivInstContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

std::vector<LLVMIRParser::FastMathFlagContext *> LLVMIRParser::FDivInstContext::fastMathFlag() {
  return getRuleContexts<LLVMIRParser::FastMathFlagContext>();
}

LLVMIRParser::FastMathFlagContext* LLVMIRParser::FDivInstContext::fastMathFlag(size_t i) {
  return getRuleContext<LLVMIRParser::FastMathFlagContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::FDivInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::FDivInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::FDivInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleFDivInst;
}


std::any LLVMIRParser::FDivInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFDivInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FDivInstContext* LLVMIRParser::fDivInst() {
  FDivInstContext *_localctx = _tracker.createInstance<FDivInstContext>(_ctx, getState());
  enterRule(_localctx, 340, LLVMIRParser::RuleFDivInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2530);
    match(LLVMIRParser::T__163);
    setState(2534);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 338) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 338)) & 255) != 0)) {
      setState(2531);
      fastMathFlag();
      setState(2536);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2537);
    typeValue();
    setState(2538);
    match(LLVMIRParser::T__14);
    setState(2539);
    value();
    setState(2544);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2540);
      match(LLVMIRParser::T__14);
      setState(2541);
      metadataAttachment();
      setState(2546);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- URemInstContext ------------------------------------------------------------------

LLVMIRParser::URemInstContext::URemInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::URemInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::URemInstContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::URemInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::URemInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::URemInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleURemInst;
}


std::any LLVMIRParser::URemInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitURemInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::URemInstContext* LLVMIRParser::uRemInst() {
  URemInstContext *_localctx = _tracker.createInstance<URemInstContext>(_ctx, getState());
  enterRule(_localctx, 342, LLVMIRParser::RuleURemInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2547);
    match(LLVMIRParser::T__164);
    setState(2548);
    typeValue();
    setState(2549);
    match(LLVMIRParser::T__14);
    setState(2550);
    value();
    setState(2555);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2551);
      match(LLVMIRParser::T__14);
      setState(2552);
      metadataAttachment();
      setState(2557);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SRemInstContext ------------------------------------------------------------------

LLVMIRParser::SRemInstContext::SRemInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::SRemInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::SRemInstContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::SRemInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::SRemInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::SRemInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleSRemInst;
}


std::any LLVMIRParser::SRemInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitSRemInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::SRemInstContext* LLVMIRParser::sRemInst() {
  SRemInstContext *_localctx = _tracker.createInstance<SRemInstContext>(_ctx, getState());
  enterRule(_localctx, 344, LLVMIRParser::RuleSRemInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2558);
    match(LLVMIRParser::T__165);
    setState(2559);
    typeValue();
    setState(2560);
    match(LLVMIRParser::T__14);
    setState(2561);
    value();
    setState(2566);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2562);
      match(LLVMIRParser::T__14);
      setState(2563);
      metadataAttachment();
      setState(2568);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FRemInstContext ------------------------------------------------------------------

LLVMIRParser::FRemInstContext::FRemInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::FRemInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::FRemInstContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

std::vector<LLVMIRParser::FastMathFlagContext *> LLVMIRParser::FRemInstContext::fastMathFlag() {
  return getRuleContexts<LLVMIRParser::FastMathFlagContext>();
}

LLVMIRParser::FastMathFlagContext* LLVMIRParser::FRemInstContext::fastMathFlag(size_t i) {
  return getRuleContext<LLVMIRParser::FastMathFlagContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::FRemInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::FRemInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::FRemInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleFRemInst;
}


std::any LLVMIRParser::FRemInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFRemInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FRemInstContext* LLVMIRParser::fRemInst() {
  FRemInstContext *_localctx = _tracker.createInstance<FRemInstContext>(_ctx, getState());
  enterRule(_localctx, 346, LLVMIRParser::RuleFRemInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2569);
    match(LLVMIRParser::T__166);
    setState(2573);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 338) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 338)) & 255) != 0)) {
      setState(2570);
      fastMathFlag();
      setState(2575);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2576);
    typeValue();
    setState(2577);
    match(LLVMIRParser::T__14);
    setState(2578);
    value();
    setState(2583);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2579);
      match(LLVMIRParser::T__14);
      setState(2580);
      metadataAttachment();
      setState(2585);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShlInstContext ------------------------------------------------------------------

LLVMIRParser::ShlInstContext::ShlInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::ShlInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::ShlInstContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

std::vector<LLVMIRParser::OverflowFlagContext *> LLVMIRParser::ShlInstContext::overflowFlag() {
  return getRuleContexts<LLVMIRParser::OverflowFlagContext>();
}

LLVMIRParser::OverflowFlagContext* LLVMIRParser::ShlInstContext::overflowFlag(size_t i) {
  return getRuleContext<LLVMIRParser::OverflowFlagContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::ShlInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::ShlInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::ShlInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleShlInst;
}


std::any LLVMIRParser::ShlInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitShlInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ShlInstContext* LLVMIRParser::shlInst() {
  ShlInstContext *_localctx = _tracker.createInstance<ShlInstContext>(_ctx, getState());
  enterRule(_localctx, 348, LLVMIRParser::RuleShlInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2586);
    match(LLVMIRParser::T__142);
    setState(2590);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__264

    || _la == LLVMIRParser::T__265) {
      setState(2587);
      overflowFlag();
      setState(2592);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2593);
    typeValue();
    setState(2594);
    match(LLVMIRParser::T__14);
    setState(2595);
    value();
    setState(2600);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2596);
      match(LLVMIRParser::T__14);
      setState(2597);
      metadataAttachment();
      setState(2602);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LShrInstContext ------------------------------------------------------------------

LLVMIRParser::LShrInstContext::LShrInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::LShrInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::LShrInstContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::LShrInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::LShrInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::LShrInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleLShrInst;
}


std::any LLVMIRParser::LShrInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitLShrInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::LShrInstContext* LLVMIRParser::lShrInst() {
  LShrInstContext *_localctx = _tracker.createInstance<LShrInstContext>(_ctx, getState());
  enterRule(_localctx, 350, LLVMIRParser::RuleLShrInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2603);
    match(LLVMIRParser::T__143);
    setState(2605);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__144) {
      setState(2604);
      antlrcpp::downCast<LShrInstContext *>(_localctx)->exact = match(LLVMIRParser::T__144);
    }
    setState(2607);
    typeValue();
    setState(2608);
    match(LLVMIRParser::T__14);
    setState(2609);
    value();
    setState(2614);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2610);
      match(LLVMIRParser::T__14);
      setState(2611);
      metadataAttachment();
      setState(2616);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AShrInstContext ------------------------------------------------------------------

LLVMIRParser::AShrInstContext::AShrInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::AShrInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::AShrInstContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::AShrInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::AShrInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::AShrInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleAShrInst;
}


std::any LLVMIRParser::AShrInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAShrInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AShrInstContext* LLVMIRParser::aShrInst() {
  AShrInstContext *_localctx = _tracker.createInstance<AShrInstContext>(_ctx, getState());
  enterRule(_localctx, 352, LLVMIRParser::RuleAShrInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2617);
    match(LLVMIRParser::T__145);
    setState(2619);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__144) {
      setState(2618);
      antlrcpp::downCast<AShrInstContext *>(_localctx)->exact = match(LLVMIRParser::T__144);
    }
    setState(2621);
    typeValue();
    setState(2622);
    match(LLVMIRParser::T__14);
    setState(2623);
    value();
    setState(2628);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2624);
      match(LLVMIRParser::T__14);
      setState(2625);
      metadataAttachment();
      setState(2630);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AndInstContext ------------------------------------------------------------------

LLVMIRParser::AndInstContext::AndInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::AndInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::AndInstContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::AndInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::AndInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::AndInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleAndInst;
}


std::any LLVMIRParser::AndInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAndInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AndInstContext* LLVMIRParser::andInst() {
  AndInstContext *_localctx = _tracker.createInstance<AndInstContext>(_ctx, getState());
  enterRule(_localctx, 354, LLVMIRParser::RuleAndInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2631);
    match(LLVMIRParser::T__146);
    setState(2632);
    typeValue();
    setState(2633);
    match(LLVMIRParser::T__14);
    setState(2634);
    value();
    setState(2639);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2635);
      match(LLVMIRParser::T__14);
      setState(2636);
      metadataAttachment();
      setState(2641);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrInstContext ------------------------------------------------------------------

LLVMIRParser::OrInstContext::OrInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::OrInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::OrInstContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::OrInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::OrInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::OrInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleOrInst;
}


std::any LLVMIRParser::OrInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitOrInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::OrInstContext* LLVMIRParser::orInst() {
  OrInstContext *_localctx = _tracker.createInstance<OrInstContext>(_ctx, getState());
  enterRule(_localctx, 356, LLVMIRParser::RuleOrInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2642);
    match(LLVMIRParser::T__147);
    setState(2643);
    typeValue();
    setState(2644);
    match(LLVMIRParser::T__14);
    setState(2645);
    value();
    setState(2650);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2646);
      match(LLVMIRParser::T__14);
      setState(2647);
      metadataAttachment();
      setState(2652);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- XorInstContext ------------------------------------------------------------------

LLVMIRParser::XorInstContext::XorInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::XorInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::XorInstContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::XorInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::XorInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::XorInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleXorInst;
}


std::any LLVMIRParser::XorInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitXorInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::XorInstContext* LLVMIRParser::xorInst() {
  XorInstContext *_localctx = _tracker.createInstance<XorInstContext>(_ctx, getState());
  enterRule(_localctx, 358, LLVMIRParser::RuleXorInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2653);
    match(LLVMIRParser::T__148);
    setState(2654);
    typeValue();
    setState(2655);
    match(LLVMIRParser::T__14);
    setState(2656);
    value();
    setState(2661);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2657);
      match(LLVMIRParser::T__14);
      setState(2658);
      metadataAttachment();
      setState(2663);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExtractElementInstContext ------------------------------------------------------------------

LLVMIRParser::ExtractElementInstContext::ExtractElementInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeValueContext *> LLVMIRParser::ExtractElementInstContext::typeValue() {
  return getRuleContexts<LLVMIRParser::TypeValueContext>();
}

LLVMIRParser::TypeValueContext* LLVMIRParser::ExtractElementInstContext::typeValue(size_t i) {
  return getRuleContext<LLVMIRParser::TypeValueContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::ExtractElementInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::ExtractElementInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::ExtractElementInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleExtractElementInst;
}


std::any LLVMIRParser::ExtractElementInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitExtractElementInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ExtractElementInstContext* LLVMIRParser::extractElementInst() {
  ExtractElementInstContext *_localctx = _tracker.createInstance<ExtractElementInstContext>(_ctx, getState());
  enterRule(_localctx, 360, LLVMIRParser::RuleExtractElementInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2664);
    match(LLVMIRParser::T__139);
    setState(2665);
    typeValue();
    setState(2666);
    match(LLVMIRParser::T__14);
    setState(2667);
    typeValue();
    setState(2672);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2668);
      match(LLVMIRParser::T__14);
      setState(2669);
      metadataAttachment();
      setState(2674);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertElementInstContext ------------------------------------------------------------------

LLVMIRParser::InsertElementInstContext::InsertElementInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeValueContext *> LLVMIRParser::InsertElementInstContext::typeValue() {
  return getRuleContexts<LLVMIRParser::TypeValueContext>();
}

LLVMIRParser::TypeValueContext* LLVMIRParser::InsertElementInstContext::typeValue(size_t i) {
  return getRuleContext<LLVMIRParser::TypeValueContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::InsertElementInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::InsertElementInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::InsertElementInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleInsertElementInst;
}


std::any LLVMIRParser::InsertElementInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitInsertElementInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::InsertElementInstContext* LLVMIRParser::insertElementInst() {
  InsertElementInstContext *_localctx = _tracker.createInstance<InsertElementInstContext>(_ctx, getState());
  enterRule(_localctx, 362, LLVMIRParser::RuleInsertElementInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2675);
    match(LLVMIRParser::T__140);
    setState(2676);
    typeValue();
    setState(2677);
    match(LLVMIRParser::T__14);
    setState(2678);
    typeValue();
    setState(2679);
    match(LLVMIRParser::T__14);
    setState(2680);
    typeValue();
    setState(2685);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2681);
      match(LLVMIRParser::T__14);
      setState(2682);
      metadataAttachment();
      setState(2687);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShuffleVectorInstContext ------------------------------------------------------------------

LLVMIRParser::ShuffleVectorInstContext::ShuffleVectorInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeValueContext *> LLVMIRParser::ShuffleVectorInstContext::typeValue() {
  return getRuleContexts<LLVMIRParser::TypeValueContext>();
}

LLVMIRParser::TypeValueContext* LLVMIRParser::ShuffleVectorInstContext::typeValue(size_t i) {
  return getRuleContext<LLVMIRParser::TypeValueContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::ShuffleVectorInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::ShuffleVectorInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::ShuffleVectorInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleShuffleVectorInst;
}


std::any LLVMIRParser::ShuffleVectorInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitShuffleVectorInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ShuffleVectorInstContext* LLVMIRParser::shuffleVectorInst() {
  ShuffleVectorInstContext *_localctx = _tracker.createInstance<ShuffleVectorInstContext>(_ctx, getState());
  enterRule(_localctx, 364, LLVMIRParser::RuleShuffleVectorInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2688);
    match(LLVMIRParser::T__141);
    setState(2689);
    typeValue();
    setState(2690);
    match(LLVMIRParser::T__14);
    setState(2691);
    typeValue();
    setState(2692);
    match(LLVMIRParser::T__14);
    setState(2693);
    typeValue();
    setState(2698);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2694);
      match(LLVMIRParser::T__14);
      setState(2695);
      metadataAttachment();
      setState(2700);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExtractValueInstContext ------------------------------------------------------------------

LLVMIRParser::ExtractValueInstContext::ExtractValueInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::ExtractValueInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

std::vector<tree::TerminalNode *> LLVMIRParser::ExtractValueInstContext::IntLit() {
  return getTokens(LLVMIRParser::IntLit);
}

tree::TerminalNode* LLVMIRParser::ExtractValueInstContext::IntLit(size_t i) {
  return getToken(LLVMIRParser::IntLit, i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::ExtractValueInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::ExtractValueInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::ExtractValueInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleExtractValueInst;
}


std::any LLVMIRParser::ExtractValueInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitExtractValueInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ExtractValueInstContext* LLVMIRParser::extractValueInst() {
  ExtractValueInstContext *_localctx = _tracker.createInstance<ExtractValueInstContext>(_ctx, getState());
  enterRule(_localctx, 366, LLVMIRParser::RuleExtractValueInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2701);
    match(LLVMIRParser::T__167);
    setState(2702);
    typeValue();
    setState(2705); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2703);
              match(LLVMIRParser::T__14);
              setState(2704);
              match(LLVMIRParser::IntLit);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2707); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 209, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(2713);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2709);
      match(LLVMIRParser::T__14);
      setState(2710);
      metadataAttachment();
      setState(2715);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertValueInstContext ------------------------------------------------------------------

LLVMIRParser::InsertValueInstContext::InsertValueInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeValueContext *> LLVMIRParser::InsertValueInstContext::typeValue() {
  return getRuleContexts<LLVMIRParser::TypeValueContext>();
}

LLVMIRParser::TypeValueContext* LLVMIRParser::InsertValueInstContext::typeValue(size_t i) {
  return getRuleContext<LLVMIRParser::TypeValueContext>(i);
}

std::vector<tree::TerminalNode *> LLVMIRParser::InsertValueInstContext::IntLit() {
  return getTokens(LLVMIRParser::IntLit);
}

tree::TerminalNode* LLVMIRParser::InsertValueInstContext::IntLit(size_t i) {
  return getToken(LLVMIRParser::IntLit, i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::InsertValueInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::InsertValueInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::InsertValueInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleInsertValueInst;
}


std::any LLVMIRParser::InsertValueInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitInsertValueInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::InsertValueInstContext* LLVMIRParser::insertValueInst() {
  InsertValueInstContext *_localctx = _tracker.createInstance<InsertValueInstContext>(_ctx, getState());
  enterRule(_localctx, 368, LLVMIRParser::RuleInsertValueInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2716);
    match(LLVMIRParser::T__168);
    setState(2717);
    typeValue();
    setState(2718);
    match(LLVMIRParser::T__14);
    setState(2719);
    typeValue();
    setState(2722); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2720);
              match(LLVMIRParser::T__14);
              setState(2721);
              match(LLVMIRParser::IntLit);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2724); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(2730);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2726);
      match(LLVMIRParser::T__14);
      setState(2727);
      metadataAttachment();
      setState(2732);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AllocaInstContext ------------------------------------------------------------------

LLVMIRParser::AllocaInstContext::AllocaInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeContext* LLVMIRParser::AllocaInstContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

LLVMIRParser::TypeValueContext* LLVMIRParser::AllocaInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::AlignContext* LLVMIRParser::AllocaInstContext::align() {
  return getRuleContext<LLVMIRParser::AlignContext>(0);
}

LLVMIRParser::AddrSpaceContext* LLVMIRParser::AllocaInstContext::addrSpace() {
  return getRuleContext<LLVMIRParser::AddrSpaceContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::AllocaInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::AllocaInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::AllocaInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleAllocaInst;
}


std::any LLVMIRParser::AllocaInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAllocaInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AllocaInstContext* LLVMIRParser::allocaInst() {
  AllocaInstContext *_localctx = _tracker.createInstance<AllocaInstContext>(_ctx, getState());
  enterRule(_localctx, 370, LLVMIRParser::RuleAllocaInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2733);
    match(LLVMIRParser::T__169);
    setState(2735);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__91) {
      setState(2734);
      antlrcpp::downCast<AllocaInstContext *>(_localctx)->inAllocaTok = match(LLVMIRParser::T__91);
    }
    setState(2738);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__107) {
      setState(2737);
      antlrcpp::downCast<AllocaInstContext *>(_localctx)->swiftError = match(LLVMIRParser::T__107);
    }
    setState(2740);
    type(0);
    setState(2743);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx)) {
    case 1: {
      setState(2741);
      match(LLVMIRParser::T__14);
      setState(2742);
      typeValue();
      break;
    }

    default:
      break;
    }
    setState(2747);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx)) {
    case 1: {
      setState(2745);
      match(LLVMIRParser::T__14);
      setState(2746);
      align();
      break;
    }

    default:
      break;
    }
    setState(2751);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx)) {
    case 1: {
      setState(2749);
      match(LLVMIRParser::T__14);
      setState(2750);
      addrSpace();
      break;
    }

    default:
      break;
    }
    setState(2757);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2753);
      match(LLVMIRParser::T__14);
      setState(2754);
      metadataAttachment();
      setState(2759);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LoadInstContext ------------------------------------------------------------------

LLVMIRParser::LoadInstContext::LoadInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeContext* LLVMIRParser::LoadInstContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

LLVMIRParser::TypeValueContext* LLVMIRParser::LoadInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::AlignContext* LLVMIRParser::LoadInstContext::align() {
  return getRuleContext<LLVMIRParser::AlignContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::LoadInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::LoadInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}

LLVMIRParser::AtomicOrderingContext* LLVMIRParser::LoadInstContext::atomicOrdering() {
  return getRuleContext<LLVMIRParser::AtomicOrderingContext>(0);
}

LLVMIRParser::SyncScopeContext* LLVMIRParser::LoadInstContext::syncScope() {
  return getRuleContext<LLVMIRParser::SyncScopeContext>(0);
}


size_t LLVMIRParser::LoadInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleLoadInst;
}


std::any LLVMIRParser::LoadInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitLoadInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::LoadInstContext* LLVMIRParser::loadInst() {
  LoadInstContext *_localctx = _tracker.createInstance<LoadInstContext>(_ctx, getState());
  enterRule(_localctx, 372, LLVMIRParser::RuleLoadInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2801);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2760);
      match(LLVMIRParser::T__170);
      setState(2762);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LLVMIRParser::T__154) {
        setState(2761);
        antlrcpp::downCast<LoadInstContext *>(_localctx)->volatile_ = match(LLVMIRParser::T__154);
      }
      setState(2764);
      type(0);
      setState(2765);
      match(LLVMIRParser::T__14);
      setState(2766);
      typeValue();
      setState(2769);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 220, _ctx)) {
      case 1: {
        setState(2767);
        match(LLVMIRParser::T__14);
        setState(2768);
        align();
        break;
      }

      default:
        break;
      }
      setState(2775);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(2771);
        match(LLVMIRParser::T__14);
        setState(2772);
        metadataAttachment();
        setState(2777);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2778);
      match(LLVMIRParser::T__170);
      setState(2779);
      antlrcpp::downCast<LoadInstContext *>(_localctx)->atomic = match(LLVMIRParser::T__155);
      setState(2781);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LLVMIRParser::T__154) {
        setState(2780);
        antlrcpp::downCast<LoadInstContext *>(_localctx)->volatile_ = match(LLVMIRParser::T__154);
      }
      setState(2783);
      type(0);
      setState(2784);
      match(LLVMIRParser::T__14);
      setState(2785);
      typeValue();
      setState(2787);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LLVMIRParser::T__156) {
        setState(2786);
        syncScope();
      }
      setState(2789);
      atomicOrdering();
      setState(2792);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 224, _ctx)) {
      case 1: {
        setState(2790);
        match(LLVMIRParser::T__14);
        setState(2791);
        align();
        break;
      }

      default:
        break;
      }
      setState(2798);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(2794);
        match(LLVMIRParser::T__14);
        setState(2795);
        metadataAttachment();
        setState(2800);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CmpXchgInstContext ------------------------------------------------------------------

LLVMIRParser::CmpXchgInstContext::CmpXchgInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeValueContext *> LLVMIRParser::CmpXchgInstContext::typeValue() {
  return getRuleContexts<LLVMIRParser::TypeValueContext>();
}

LLVMIRParser::TypeValueContext* LLVMIRParser::CmpXchgInstContext::typeValue(size_t i) {
  return getRuleContext<LLVMIRParser::TypeValueContext>(i);
}

std::vector<LLVMIRParser::AtomicOrderingContext *> LLVMIRParser::CmpXchgInstContext::atomicOrdering() {
  return getRuleContexts<LLVMIRParser::AtomicOrderingContext>();
}

LLVMIRParser::AtomicOrderingContext* LLVMIRParser::CmpXchgInstContext::atomicOrdering(size_t i) {
  return getRuleContext<LLVMIRParser::AtomicOrderingContext>(i);
}

LLVMIRParser::SyncScopeContext* LLVMIRParser::CmpXchgInstContext::syncScope() {
  return getRuleContext<LLVMIRParser::SyncScopeContext>(0);
}

LLVMIRParser::AlignContext* LLVMIRParser::CmpXchgInstContext::align() {
  return getRuleContext<LLVMIRParser::AlignContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::CmpXchgInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::CmpXchgInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::CmpXchgInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleCmpXchgInst;
}


std::any LLVMIRParser::CmpXchgInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitCmpXchgInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::CmpXchgInstContext* LLVMIRParser::cmpXchgInst() {
  CmpXchgInstContext *_localctx = _tracker.createInstance<CmpXchgInstContext>(_ctx, getState());
  enterRule(_localctx, 374, LLVMIRParser::RuleCmpXchgInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2803);
    match(LLVMIRParser::T__171);
    setState(2805);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__172) {
      setState(2804);
      antlrcpp::downCast<CmpXchgInstContext *>(_localctx)->weak = match(LLVMIRParser::T__172);
    }
    setState(2808);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__154) {
      setState(2807);
      antlrcpp::downCast<CmpXchgInstContext *>(_localctx)->volatile_ = match(LLVMIRParser::T__154);
    }
    setState(2810);
    typeValue();
    setState(2811);
    match(LLVMIRParser::T__14);
    setState(2812);
    typeValue();
    setState(2813);
    match(LLVMIRParser::T__14);
    setState(2814);
    typeValue();
    setState(2816);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__156) {
      setState(2815);
      syncScope();
    }
    setState(2818);
    atomicOrdering();
    setState(2819);
    atomicOrdering();
    setState(2822);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 230, _ctx)) {
    case 1: {
      setState(2820);
      match(LLVMIRParser::T__14);
      setState(2821);
      align();
      break;
    }

    default:
      break;
    }
    setState(2828);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2824);
      match(LLVMIRParser::T__14);
      setState(2825);
      metadataAttachment();
      setState(2830);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AtomicRMWInstContext ------------------------------------------------------------------

LLVMIRParser::AtomicRMWInstContext::AtomicRMWInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::AtomicOpContext* LLVMIRParser::AtomicRMWInstContext::atomicOp() {
  return getRuleContext<LLVMIRParser::AtomicOpContext>(0);
}

std::vector<LLVMIRParser::TypeValueContext *> LLVMIRParser::AtomicRMWInstContext::typeValue() {
  return getRuleContexts<LLVMIRParser::TypeValueContext>();
}

LLVMIRParser::TypeValueContext* LLVMIRParser::AtomicRMWInstContext::typeValue(size_t i) {
  return getRuleContext<LLVMIRParser::TypeValueContext>(i);
}

LLVMIRParser::AtomicOrderingContext* LLVMIRParser::AtomicRMWInstContext::atomicOrdering() {
  return getRuleContext<LLVMIRParser::AtomicOrderingContext>(0);
}

LLVMIRParser::SyncScopeContext* LLVMIRParser::AtomicRMWInstContext::syncScope() {
  return getRuleContext<LLVMIRParser::SyncScopeContext>(0);
}

LLVMIRParser::AlignContext* LLVMIRParser::AtomicRMWInstContext::align() {
  return getRuleContext<LLVMIRParser::AlignContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::AtomicRMWInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::AtomicRMWInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::AtomicRMWInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleAtomicRMWInst;
}


std::any LLVMIRParser::AtomicRMWInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAtomicRMWInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AtomicRMWInstContext* LLVMIRParser::atomicRMWInst() {
  AtomicRMWInstContext *_localctx = _tracker.createInstance<AtomicRMWInstContext>(_ctx, getState());
  enterRule(_localctx, 376, LLVMIRParser::RuleAtomicRMWInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2831);
    match(LLVMIRParser::T__173);
    setState(2833);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__154) {
      setState(2832);
      antlrcpp::downCast<AtomicRMWInstContext *>(_localctx)->volatile_ = match(LLVMIRParser::T__154);
    }
    setState(2835);
    atomicOp();
    setState(2836);
    typeValue();
    setState(2837);
    match(LLVMIRParser::T__14);
    setState(2838);
    typeValue();
    setState(2840);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__156) {
      setState(2839);
      syncScope();
    }
    setState(2842);
    atomicOrdering();
    setState(2845);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 234, _ctx)) {
    case 1: {
      setState(2843);
      match(LLVMIRParser::T__14);
      setState(2844);
      align();
      break;
    }

    default:
      break;
    }
    setState(2851);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2847);
      match(LLVMIRParser::T__14);
      setState(2848);
      metadataAttachment();
      setState(2853);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GetElementPtrInstContext ------------------------------------------------------------------

LLVMIRParser::GetElementPtrInstContext::GetElementPtrInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeContext* LLVMIRParser::GetElementPtrInstContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

std::vector<LLVMIRParser::TypeValueContext *> LLVMIRParser::GetElementPtrInstContext::typeValue() {
  return getRuleContexts<LLVMIRParser::TypeValueContext>();
}

LLVMIRParser::TypeValueContext* LLVMIRParser::GetElementPtrInstContext::typeValue(size_t i) {
  return getRuleContext<LLVMIRParser::TypeValueContext>(i);
}

LLVMIRParser::InBoundsContext* LLVMIRParser::GetElementPtrInstContext::inBounds() {
  return getRuleContext<LLVMIRParser::InBoundsContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::GetElementPtrInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::GetElementPtrInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::GetElementPtrInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleGetElementPtrInst;
}


std::any LLVMIRParser::GetElementPtrInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitGetElementPtrInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::GetElementPtrInstContext* LLVMIRParser::getElementPtrInst() {
  GetElementPtrInstContext *_localctx = _tracker.createInstance<GetElementPtrInstContext>(_ctx, getState());
  enterRule(_localctx, 378, LLVMIRParser::RuleGetElementPtrInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2854);
    match(LLVMIRParser::T__122);
    setState(2856);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__263) {
      setState(2855);
      inBounds();
    }
    setState(2858);
    type(0);
    setState(2859);
    match(LLVMIRParser::T__14);
    setState(2860);
    typeValue();
    setState(2865);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2861);
        match(LLVMIRParser::T__14);
        setState(2862);
        typeValue(); 
      }
      setState(2867);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx);
    }
    setState(2872);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2868);
      match(LLVMIRParser::T__14);
      setState(2869);
      metadataAttachment();
      setState(2874);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TruncInstContext ------------------------------------------------------------------

LLVMIRParser::TruncInstContext::TruncInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::TruncInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::TruncInstContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::TruncInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::TruncInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::TruncInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleTruncInst;
}


std::any LLVMIRParser::TruncInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitTruncInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::TruncInstContext* LLVMIRParser::truncInst() {
  TruncInstContext *_localctx = _tracker.createInstance<TruncInstContext>(_ctx, getState());
  enterRule(_localctx, 380, LLVMIRParser::RuleTruncInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2875);
    match(LLVMIRParser::T__129);
    setState(2876);
    typeValue();
    setState(2877);
    match(LLVMIRParser::T__42);
    setState(2878);
    type(0);
    setState(2883);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2879);
      match(LLVMIRParser::T__14);
      setState(2880);
      metadataAttachment();
      setState(2885);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ZExtInstContext ------------------------------------------------------------------

LLVMIRParser::ZExtInstContext::ZExtInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::ZExtInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::ZExtInstContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::ZExtInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::ZExtInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::ZExtInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleZExtInst;
}


std::any LLVMIRParser::ZExtInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitZExtInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ZExtInstContext* LLVMIRParser::zExtInst() {
  ZExtInstContext *_localctx = _tracker.createInstance<ZExtInstContext>(_ctx, getState());
  enterRule(_localctx, 382, LLVMIRParser::RuleZExtInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2886);
    match(LLVMIRParser::T__130);
    setState(2887);
    typeValue();
    setState(2888);
    match(LLVMIRParser::T__42);
    setState(2889);
    type(0);
    setState(2894);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2890);
      match(LLVMIRParser::T__14);
      setState(2891);
      metadataAttachment();
      setState(2896);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SExtInstContext ------------------------------------------------------------------

LLVMIRParser::SExtInstContext::SExtInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::SExtInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::SExtInstContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::SExtInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::SExtInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::SExtInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleSExtInst;
}


std::any LLVMIRParser::SExtInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitSExtInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::SExtInstContext* LLVMIRParser::sExtInst() {
  SExtInstContext *_localctx = _tracker.createInstance<SExtInstContext>(_ctx, getState());
  enterRule(_localctx, 384, LLVMIRParser::RuleSExtInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2897);
    match(LLVMIRParser::T__131);
    setState(2898);
    typeValue();
    setState(2899);
    match(LLVMIRParser::T__42);
    setState(2900);
    type(0);
    setState(2905);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2901);
      match(LLVMIRParser::T__14);
      setState(2902);
      metadataAttachment();
      setState(2907);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FpTruncInstContext ------------------------------------------------------------------

LLVMIRParser::FpTruncInstContext::FpTruncInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::FpTruncInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::FpTruncInstContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::FpTruncInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::FpTruncInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::FpTruncInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleFpTruncInst;
}


std::any LLVMIRParser::FpTruncInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFpTruncInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FpTruncInstContext* LLVMIRParser::fpTruncInst() {
  FpTruncInstContext *_localctx = _tracker.createInstance<FpTruncInstContext>(_ctx, getState());
  enterRule(_localctx, 386, LLVMIRParser::RuleFpTruncInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2908);
    match(LLVMIRParser::T__132);
    setState(2909);
    typeValue();
    setState(2910);
    match(LLVMIRParser::T__42);
    setState(2911);
    type(0);
    setState(2916);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2912);
      match(LLVMIRParser::T__14);
      setState(2913);
      metadataAttachment();
      setState(2918);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FpExtInstContext ------------------------------------------------------------------

LLVMIRParser::FpExtInstContext::FpExtInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::FpExtInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::FpExtInstContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::FpExtInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::FpExtInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::FpExtInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleFpExtInst;
}


std::any LLVMIRParser::FpExtInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFpExtInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FpExtInstContext* LLVMIRParser::fpExtInst() {
  FpExtInstContext *_localctx = _tracker.createInstance<FpExtInstContext>(_ctx, getState());
  enterRule(_localctx, 388, LLVMIRParser::RuleFpExtInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2919);
    match(LLVMIRParser::T__133);
    setState(2920);
    typeValue();
    setState(2921);
    match(LLVMIRParser::T__42);
    setState(2922);
    type(0);
    setState(2927);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2923);
      match(LLVMIRParser::T__14);
      setState(2924);
      metadataAttachment();
      setState(2929);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FpToUiInstContext ------------------------------------------------------------------

LLVMIRParser::FpToUiInstContext::FpToUiInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::FpToUiInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::FpToUiInstContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::FpToUiInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::FpToUiInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::FpToUiInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleFpToUiInst;
}


std::any LLVMIRParser::FpToUiInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFpToUiInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FpToUiInstContext* LLVMIRParser::fpToUiInst() {
  FpToUiInstContext *_localctx = _tracker.createInstance<FpToUiInstContext>(_ctx, getState());
  enterRule(_localctx, 390, LLVMIRParser::RuleFpToUiInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2930);
    match(LLVMIRParser::T__134);
    setState(2931);
    typeValue();
    setState(2932);
    match(LLVMIRParser::T__42);
    setState(2933);
    type(0);
    setState(2938);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2934);
      match(LLVMIRParser::T__14);
      setState(2935);
      metadataAttachment();
      setState(2940);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FpToSiInstContext ------------------------------------------------------------------

LLVMIRParser::FpToSiInstContext::FpToSiInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::FpToSiInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::FpToSiInstContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::FpToSiInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::FpToSiInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::FpToSiInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleFpToSiInst;
}


std::any LLVMIRParser::FpToSiInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFpToSiInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FpToSiInstContext* LLVMIRParser::fpToSiInst() {
  FpToSiInstContext *_localctx = _tracker.createInstance<FpToSiInstContext>(_ctx, getState());
  enterRule(_localctx, 392, LLVMIRParser::RuleFpToSiInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2941);
    match(LLVMIRParser::T__135);
    setState(2942);
    typeValue();
    setState(2943);
    match(LLVMIRParser::T__42);
    setState(2944);
    type(0);
    setState(2949);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2945);
      match(LLVMIRParser::T__14);
      setState(2946);
      metadataAttachment();
      setState(2951);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UiToFpInstContext ------------------------------------------------------------------

LLVMIRParser::UiToFpInstContext::UiToFpInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::UiToFpInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::UiToFpInstContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::UiToFpInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::UiToFpInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::UiToFpInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleUiToFpInst;
}


std::any LLVMIRParser::UiToFpInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitUiToFpInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::UiToFpInstContext* LLVMIRParser::uiToFpInst() {
  UiToFpInstContext *_localctx = _tracker.createInstance<UiToFpInstContext>(_ctx, getState());
  enterRule(_localctx, 394, LLVMIRParser::RuleUiToFpInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2952);
    match(LLVMIRParser::T__136);
    setState(2953);
    typeValue();
    setState(2954);
    match(LLVMIRParser::T__42);
    setState(2955);
    type(0);
    setState(2960);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2956);
      match(LLVMIRParser::T__14);
      setState(2957);
      metadataAttachment();
      setState(2962);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SiToFpInstContext ------------------------------------------------------------------

LLVMIRParser::SiToFpInstContext::SiToFpInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::SiToFpInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::SiToFpInstContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::SiToFpInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::SiToFpInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::SiToFpInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleSiToFpInst;
}


std::any LLVMIRParser::SiToFpInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitSiToFpInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::SiToFpInstContext* LLVMIRParser::siToFpInst() {
  SiToFpInstContext *_localctx = _tracker.createInstance<SiToFpInstContext>(_ctx, getState());
  enterRule(_localctx, 396, LLVMIRParser::RuleSiToFpInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2963);
    match(LLVMIRParser::T__137);
    setState(2964);
    typeValue();
    setState(2965);
    match(LLVMIRParser::T__42);
    setState(2966);
    type(0);
    setState(2971);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2967);
      match(LLVMIRParser::T__14);
      setState(2968);
      metadataAttachment();
      setState(2973);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PtrToIntInstContext ------------------------------------------------------------------

LLVMIRParser::PtrToIntInstContext::PtrToIntInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::PtrToIntInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::PtrToIntInstContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::PtrToIntInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::PtrToIntInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::PtrToIntInstContext::getRuleIndex() const {
  return LLVMIRParser::RulePtrToIntInst;
}


std::any LLVMIRParser::PtrToIntInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitPtrToIntInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::PtrToIntInstContext* LLVMIRParser::ptrToIntInst() {
  PtrToIntInstContext *_localctx = _tracker.createInstance<PtrToIntInstContext>(_ctx, getState());
  enterRule(_localctx, 398, LLVMIRParser::RulePtrToIntInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2974);
    match(LLVMIRParser::T__138);
    setState(2975);
    typeValue();
    setState(2976);
    match(LLVMIRParser::T__42);
    setState(2977);
    type(0);
    setState(2982);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2978);
      match(LLVMIRParser::T__14);
      setState(2979);
      metadataAttachment();
      setState(2984);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntToPtrInstContext ------------------------------------------------------------------

LLVMIRParser::IntToPtrInstContext::IntToPtrInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::IntToPtrInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::IntToPtrInstContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::IntToPtrInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::IntToPtrInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::IntToPtrInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleIntToPtrInst;
}


std::any LLVMIRParser::IntToPtrInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitIntToPtrInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::IntToPtrInstContext* LLVMIRParser::intToPtrInst() {
  IntToPtrInstContext *_localctx = _tracker.createInstance<IntToPtrInstContext>(_ctx, getState());
  enterRule(_localctx, 400, LLVMIRParser::RuleIntToPtrInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2985);
    match(LLVMIRParser::T__125);
    setState(2986);
    typeValue();
    setState(2987);
    match(LLVMIRParser::T__42);
    setState(2988);
    type(0);
    setState(2993);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(2989);
      match(LLVMIRParser::T__14);
      setState(2990);
      metadataAttachment();
      setState(2995);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitCastInstContext ------------------------------------------------------------------

LLVMIRParser::BitCastInstContext::BitCastInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::BitCastInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::BitCastInstContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::BitCastInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::BitCastInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::BitCastInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleBitCastInst;
}


std::any LLVMIRParser::BitCastInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitBitCastInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::BitCastInstContext* LLVMIRParser::bitCastInst() {
  BitCastInstContext *_localctx = _tracker.createInstance<BitCastInstContext>(_ctx, getState());
  enterRule(_localctx, 402, LLVMIRParser::RuleBitCastInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2996);
    match(LLVMIRParser::T__121);
    setState(2997);
    typeValue();
    setState(2998);
    match(LLVMIRParser::T__42);
    setState(2999);
    type(0);
    setState(3004);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(3000);
      match(LLVMIRParser::T__14);
      setState(3001);
      metadataAttachment();
      setState(3006);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddrSpaceCastInstContext ------------------------------------------------------------------

LLVMIRParser::AddrSpaceCastInstContext::AddrSpaceCastInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::AddrSpaceCastInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::AddrSpaceCastInstContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::AddrSpaceCastInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::AddrSpaceCastInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::AddrSpaceCastInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleAddrSpaceCastInst;
}


std::any LLVMIRParser::AddrSpaceCastInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAddrSpaceCastInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AddrSpaceCastInstContext* LLVMIRParser::addrSpaceCastInst() {
  AddrSpaceCastInstContext *_localctx = _tracker.createInstance<AddrSpaceCastInstContext>(_ctx, getState());
  enterRule(_localctx, 404, LLVMIRParser::RuleAddrSpaceCastInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3007);
    match(LLVMIRParser::T__124);
    setState(3008);
    typeValue();
    setState(3009);
    match(LLVMIRParser::T__42);
    setState(3010);
    type(0);
    setState(3015);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(3011);
      match(LLVMIRParser::T__14);
      setState(3012);
      metadataAttachment();
      setState(3017);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ICmpInstContext ------------------------------------------------------------------

LLVMIRParser::ICmpInstContext::ICmpInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::IPredContext* LLVMIRParser::ICmpInstContext::iPred() {
  return getRuleContext<LLVMIRParser::IPredContext>(0);
}

LLVMIRParser::TypeValueContext* LLVMIRParser::ICmpInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::ICmpInstContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::ICmpInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::ICmpInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::ICmpInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleICmpInst;
}


std::any LLVMIRParser::ICmpInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitICmpInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ICmpInstContext* LLVMIRParser::iCmpInst() {
  ICmpInstContext *_localctx = _tracker.createInstance<ICmpInstContext>(_ctx, getState());
  enterRule(_localctx, 406, LLVMIRParser::RuleICmpInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3018);
    match(LLVMIRParser::T__126);
    setState(3019);
    iPred();
    setState(3020);
    typeValue();
    setState(3021);
    match(LLVMIRParser::T__14);
    setState(3022);
    value();
    setState(3027);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(3023);
      match(LLVMIRParser::T__14);
      setState(3024);
      metadataAttachment();
      setState(3029);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FCmpInstContext ------------------------------------------------------------------

LLVMIRParser::FCmpInstContext::FCmpInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::FPredContext* LLVMIRParser::FCmpInstContext::fPred() {
  return getRuleContext<LLVMIRParser::FPredContext>(0);
}

LLVMIRParser::TypeValueContext* LLVMIRParser::FCmpInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::FCmpInstContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

std::vector<LLVMIRParser::FastMathFlagContext *> LLVMIRParser::FCmpInstContext::fastMathFlag() {
  return getRuleContexts<LLVMIRParser::FastMathFlagContext>();
}

LLVMIRParser::FastMathFlagContext* LLVMIRParser::FCmpInstContext::fastMathFlag(size_t i) {
  return getRuleContext<LLVMIRParser::FastMathFlagContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::FCmpInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::FCmpInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::FCmpInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleFCmpInst;
}


std::any LLVMIRParser::FCmpInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFCmpInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FCmpInstContext* LLVMIRParser::fCmpInst() {
  FCmpInstContext *_localctx = _tracker.createInstance<FCmpInstContext>(_ctx, getState());
  enterRule(_localctx, 408, LLVMIRParser::RuleFCmpInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3030);
    match(LLVMIRParser::T__127);
    setState(3034);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 338) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 338)) & 255) != 0)) {
      setState(3031);
      fastMathFlag();
      setState(3036);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3037);
    fPred();
    setState(3038);
    typeValue();
    setState(3039);
    match(LLVMIRParser::T__14);
    setState(3040);
    value();
    setState(3045);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(3041);
      match(LLVMIRParser::T__14);
      setState(3042);
      metadataAttachment();
      setState(3047);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PhiInstContext ------------------------------------------------------------------

LLVMIRParser::PhiInstContext::PhiInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeContext* LLVMIRParser::PhiInstContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

std::vector<LLVMIRParser::IncContext *> LLVMIRParser::PhiInstContext::inc() {
  return getRuleContexts<LLVMIRParser::IncContext>();
}

LLVMIRParser::IncContext* LLVMIRParser::PhiInstContext::inc(size_t i) {
  return getRuleContext<LLVMIRParser::IncContext>(i);
}

std::vector<LLVMIRParser::FastMathFlagContext *> LLVMIRParser::PhiInstContext::fastMathFlag() {
  return getRuleContexts<LLVMIRParser::FastMathFlagContext>();
}

LLVMIRParser::FastMathFlagContext* LLVMIRParser::PhiInstContext::fastMathFlag(size_t i) {
  return getRuleContext<LLVMIRParser::FastMathFlagContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::PhiInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::PhiInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::PhiInstContext::getRuleIndex() const {
  return LLVMIRParser::RulePhiInst;
}


std::any LLVMIRParser::PhiInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitPhiInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::PhiInstContext* LLVMIRParser::phiInst() {
  PhiInstContext *_localctx = _tracker.createInstance<PhiInstContext>(_ctx, getState());
  enterRule(_localctx, 410, LLVMIRParser::RulePhiInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3048);
    match(LLVMIRParser::T__174);
    setState(3052);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 338) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 338)) & 255) != 0)) {
      setState(3049);
      fastMathFlag();
      setState(3054);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3055);
    type(0);

    setState(3056);
    inc();
    setState(3061);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 256, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3057);
        match(LLVMIRParser::T__14);
        setState(3058);
        inc(); 
      }
      setState(3063);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 256, _ctx);
    }
    setState(3068);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(3064);
      match(LLVMIRParser::T__14);
      setState(3065);
      metadataAttachment();
      setState(3070);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectInstContext ------------------------------------------------------------------

LLVMIRParser::SelectInstContext::SelectInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::TypeValueContext *> LLVMIRParser::SelectInstContext::typeValue() {
  return getRuleContexts<LLVMIRParser::TypeValueContext>();
}

LLVMIRParser::TypeValueContext* LLVMIRParser::SelectInstContext::typeValue(size_t i) {
  return getRuleContext<LLVMIRParser::TypeValueContext>(i);
}

std::vector<LLVMIRParser::FastMathFlagContext *> LLVMIRParser::SelectInstContext::fastMathFlag() {
  return getRuleContexts<LLVMIRParser::FastMathFlagContext>();
}

LLVMIRParser::FastMathFlagContext* LLVMIRParser::SelectInstContext::fastMathFlag(size_t i) {
  return getRuleContext<LLVMIRParser::FastMathFlagContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::SelectInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::SelectInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::SelectInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleSelectInst;
}


std::any LLVMIRParser::SelectInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitSelectInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::SelectInstContext* LLVMIRParser::selectInst() {
  SelectInstContext *_localctx = _tracker.createInstance<SelectInstContext>(_ctx, getState());
  enterRule(_localctx, 412, LLVMIRParser::RuleSelectInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3071);
    match(LLVMIRParser::T__128);
    setState(3075);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 338) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 338)) & 255) != 0)) {
      setState(3072);
      fastMathFlag();
      setState(3077);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3078);
    typeValue();
    setState(3079);
    match(LLVMIRParser::T__14);
    setState(3080);
    typeValue();
    setState(3081);
    match(LLVMIRParser::T__14);
    setState(3082);
    typeValue();
    setState(3087);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(3083);
      match(LLVMIRParser::T__14);
      setState(3084);
      metadataAttachment();
      setState(3089);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FreezeInstContext ------------------------------------------------------------------

LLVMIRParser::FreezeInstContext::FreezeInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::FreezeInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}


size_t LLVMIRParser::FreezeInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleFreezeInst;
}


std::any LLVMIRParser::FreezeInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFreezeInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FreezeInstContext* LLVMIRParser::freezeInst() {
  FreezeInstContext *_localctx = _tracker.createInstance<FreezeInstContext>(_ctx, getState());
  enterRule(_localctx, 414, LLVMIRParser::RuleFreezeInst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3090);
    match(LLVMIRParser::T__175);
    setState(3091);
    typeValue();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallInstContext ------------------------------------------------------------------

LLVMIRParser::CallInstContext::CallInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeContext* LLVMIRParser::CallInstContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::CallInstContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

LLVMIRParser::ArgsContext* LLVMIRParser::CallInstContext::args() {
  return getRuleContext<LLVMIRParser::ArgsContext>(0);
}

std::vector<LLVMIRParser::FastMathFlagContext *> LLVMIRParser::CallInstContext::fastMathFlag() {
  return getRuleContexts<LLVMIRParser::FastMathFlagContext>();
}

LLVMIRParser::FastMathFlagContext* LLVMIRParser::CallInstContext::fastMathFlag(size_t i) {
  return getRuleContext<LLVMIRParser::FastMathFlagContext>(i);
}

LLVMIRParser::CallingConvContext* LLVMIRParser::CallInstContext::callingConv() {
  return getRuleContext<LLVMIRParser::CallingConvContext>(0);
}

std::vector<LLVMIRParser::ReturnAttributeContext *> LLVMIRParser::CallInstContext::returnAttribute() {
  return getRuleContexts<LLVMIRParser::ReturnAttributeContext>();
}

LLVMIRParser::ReturnAttributeContext* LLVMIRParser::CallInstContext::returnAttribute(size_t i) {
  return getRuleContext<LLVMIRParser::ReturnAttributeContext>(i);
}

LLVMIRParser::AddrSpaceContext* LLVMIRParser::CallInstContext::addrSpace() {
  return getRuleContext<LLVMIRParser::AddrSpaceContext>(0);
}

std::vector<LLVMIRParser::FuncAttributeContext *> LLVMIRParser::CallInstContext::funcAttribute() {
  return getRuleContexts<LLVMIRParser::FuncAttributeContext>();
}

LLVMIRParser::FuncAttributeContext* LLVMIRParser::CallInstContext::funcAttribute(size_t i) {
  return getRuleContext<LLVMIRParser::FuncAttributeContext>(i);
}

std::vector<LLVMIRParser::OperandBundleContext *> LLVMIRParser::CallInstContext::operandBundle() {
  return getRuleContexts<LLVMIRParser::OperandBundleContext>();
}

LLVMIRParser::OperandBundleContext* LLVMIRParser::CallInstContext::operandBundle(size_t i) {
  return getRuleContext<LLVMIRParser::OperandBundleContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::CallInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::CallInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::CallInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleCallInst;
}


std::any LLVMIRParser::CallInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitCallInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::CallInstContext* LLVMIRParser::callInst() {
  CallInstContext *_localctx = _tracker.createInstance<CallInstContext>(_ctx, getState());
  enterRule(_localctx, 416, LLVMIRParser::RuleCallInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3094);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 177) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 177)) & 7) != 0)) {
      setState(3093);
      antlrcpp::downCast<CallInstContext *>(_localctx)->tail = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 177) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 177)) & 7) != 0))) {
        antlrcpp::downCast<CallInstContext *>(_localctx)->tail = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(3096);
    match(LLVMIRParser::T__179);
    setState(3100);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 338) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 338)) & 255) != 0)) {
      setState(3097);
      fastMathFlag();
      setState(3102);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3104);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__27 || ((((_la - 293) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 293)) & 35184372088831) != 0)) {
      setState(3103);
      callingConv();
    }
    setState(3109);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 80) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 80)) & 2221213185) != 0)) {
      setState(3106);
      returnAttribute();
      setState(3111);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3113);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__118) {
      setState(3112);
      addrSpace();
    }
    setState(3115);
    type(0);
    setState(3116);
    value();
    setState(3117);
    match(LLVMIRParser::T__25);
    setState(3118);
    args();
    setState(3119);
    match(LLVMIRParser::T__26);
    setState(3123);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 57) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 57)) & 45255899262222337) != 0) || ((((_la - 213) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 213)) & 1125899906842623) != 0) || _la == LLVMIRParser::StringLit

    || _la == LLVMIRParser::AttrGroupId) {
      setState(3120);
      funcAttribute();
      setState(3125);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3137);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__36) {
      setState(3126);
      match(LLVMIRParser::T__36);
      setState(3127);
      operandBundle();
      setState(3132);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3128);
        match(LLVMIRParser::T__14);
        setState(3129);
        operandBundle();
        setState(3134);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3135);
      match(LLVMIRParser::T__37);
    }
    setState(3143);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(3139);
      match(LLVMIRParser::T__14);
      setState(3140);
      metadataAttachment();
      setState(3145);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VaargInstContext ------------------------------------------------------------------

LLVMIRParser::VaargInstContext::VaargInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::VaargInstContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}

LLVMIRParser::TypeContext* LLVMIRParser::VaargInstContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::VaargInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::VaargInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::VaargInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleVaargInst;
}


std::any LLVMIRParser::VaargInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitVaargInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::VaargInstContext* LLVMIRParser::vaargInst() {
  VaargInstContext *_localctx = _tracker.createInstance<VaargInstContext>(_ctx, getState());
  enterRule(_localctx, 418, LLVMIRParser::RuleVaargInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3146);
    match(LLVMIRParser::T__180);
    setState(3147);
    typeValue();
    setState(3148);
    match(LLVMIRParser::T__14);
    setState(3149);
    type(0);
    setState(3154);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(3150);
      match(LLVMIRParser::T__14);
      setState(3151);
      metadataAttachment();
      setState(3156);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LandingPadInstContext ------------------------------------------------------------------

LLVMIRParser::LandingPadInstContext::LandingPadInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeContext* LLVMIRParser::LandingPadInstContext::type() {
  return getRuleContext<LLVMIRParser::TypeContext>(0);
}

std::vector<LLVMIRParser::ClauseContext *> LLVMIRParser::LandingPadInstContext::clause() {
  return getRuleContexts<LLVMIRParser::ClauseContext>();
}

LLVMIRParser::ClauseContext* LLVMIRParser::LandingPadInstContext::clause(size_t i) {
  return getRuleContext<LLVMIRParser::ClauseContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::LandingPadInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::LandingPadInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::LandingPadInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleLandingPadInst;
}


std::any LLVMIRParser::LandingPadInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitLandingPadInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::LandingPadInstContext* LLVMIRParser::landingPadInst() {
  LandingPadInstContext *_localctx = _tracker.createInstance<LandingPadInstContext>(_ctx, getState());
  enterRule(_localctx, 420, LLVMIRParser::RuleLandingPadInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3157);
    match(LLVMIRParser::T__181);
    setState(3158);
    type(0);
    setState(3160);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__182) {
      setState(3159);
      antlrcpp::downCast<LandingPadInstContext *>(_localctx)->cleanUp = match(LLVMIRParser::T__182);
    }
    setState(3165);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__185

    || _la == LLVMIRParser::T__186) {
      setState(3162);
      clause();
      setState(3167);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3172);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(3168);
      match(LLVMIRParser::T__14);
      setState(3169);
      metadataAttachment();
      setState(3174);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchPadInstContext ------------------------------------------------------------------

LLVMIRParser::CatchPadInstContext::CatchPadInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::CatchPadInstContext::LocalIdent() {
  return getToken(LLVMIRParser::LocalIdent, 0);
}

std::vector<LLVMIRParser::ExceptionArgContext *> LLVMIRParser::CatchPadInstContext::exceptionArg() {
  return getRuleContexts<LLVMIRParser::ExceptionArgContext>();
}

LLVMIRParser::ExceptionArgContext* LLVMIRParser::CatchPadInstContext::exceptionArg(size_t i) {
  return getRuleContext<LLVMIRParser::ExceptionArgContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::CatchPadInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::CatchPadInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::CatchPadInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleCatchPadInst;
}


std::any LLVMIRParser::CatchPadInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitCatchPadInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::CatchPadInstContext* LLVMIRParser::catchPadInst() {
  CatchPadInstContext *_localctx = _tracker.createInstance<CatchPadInstContext>(_ctx, getState());
  enterRule(_localctx, 422, LLVMIRParser::RuleCatchPadInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3175);
    match(LLVMIRParser::T__183);
    setState(3176);
    match(LLVMIRParser::T__49);
    setState(3177);
    match(LLVMIRParser::LocalIdent);
    setState(3178);
    match(LLVMIRParser::T__36);
    setState(3187);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251954434605056) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 175640385467457537) != 0) || ((((_la - 354) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 354)) & 127) != 0) || _la == LLVMIRParser::LocalIdent

    || _la == LLVMIRParser::IntType) {
      setState(3179);
      exceptionArg();
      setState(3184);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3180);
        match(LLVMIRParser::T__14);
        setState(3181);
        exceptionArg();
        setState(3186);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3189);
    match(LLVMIRParser::T__37);
    setState(3194);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(3190);
      match(LLVMIRParser::T__14);
      setState(3191);
      metadataAttachment();
      setState(3196);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CleanupPadInstContext ------------------------------------------------------------------

LLVMIRParser::CleanupPadInstContext::CleanupPadInstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::ExceptionPadContext* LLVMIRParser::CleanupPadInstContext::exceptionPad() {
  return getRuleContext<LLVMIRParser::ExceptionPadContext>(0);
}

std::vector<LLVMIRParser::ExceptionArgContext *> LLVMIRParser::CleanupPadInstContext::exceptionArg() {
  return getRuleContexts<LLVMIRParser::ExceptionArgContext>();
}

LLVMIRParser::ExceptionArgContext* LLVMIRParser::CleanupPadInstContext::exceptionArg(size_t i) {
  return getRuleContext<LLVMIRParser::ExceptionArgContext>(i);
}

std::vector<LLVMIRParser::MetadataAttachmentContext *> LLVMIRParser::CleanupPadInstContext::metadataAttachment() {
  return getRuleContexts<LLVMIRParser::MetadataAttachmentContext>();
}

LLVMIRParser::MetadataAttachmentContext* LLVMIRParser::CleanupPadInstContext::metadataAttachment(size_t i) {
  return getRuleContext<LLVMIRParser::MetadataAttachmentContext>(i);
}


size_t LLVMIRParser::CleanupPadInstContext::getRuleIndex() const {
  return LLVMIRParser::RuleCleanupPadInst;
}


std::any LLVMIRParser::CleanupPadInstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitCleanupPadInst(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::CleanupPadInstContext* LLVMIRParser::cleanupPadInst() {
  CleanupPadInstContext *_localctx = _tracker.createInstance<CleanupPadInstContext>(_ctx, getState());
  enterRule(_localctx, 424, LLVMIRParser::RuleCleanupPadInst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3197);
    match(LLVMIRParser::T__184);
    setState(3198);
    match(LLVMIRParser::T__49);
    setState(3199);
    exceptionPad();
    setState(3200);
    match(LLVMIRParser::T__36);
    setState(3209);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251954434605056) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 175640385467457537) != 0) || ((((_la - 354) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 354)) & 127) != 0) || _la == LLVMIRParser::LocalIdent

    || _la == LLVMIRParser::IntType) {
      setState(3201);
      exceptionArg();
      setState(3206);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3202);
        match(LLVMIRParser::T__14);
        setState(3203);
        exceptionArg();
        setState(3208);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3211);
    match(LLVMIRParser::T__37);
    setState(3216);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__14) {
      setState(3212);
      match(LLVMIRParser::T__14);
      setState(3213);
      metadataAttachment();
      setState(3218);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IncContext ------------------------------------------------------------------

LLVMIRParser::IncContext::IncContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::ValueContext* LLVMIRParser::IncContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

tree::TerminalNode* LLVMIRParser::IncContext::LocalIdent() {
  return getToken(LLVMIRParser::LocalIdent, 0);
}


size_t LLVMIRParser::IncContext::getRuleIndex() const {
  return LLVMIRParser::RuleInc;
}


std::any LLVMIRParser::IncContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitInc(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::IncContext* LLVMIRParser::inc() {
  IncContext *_localctx = _tracker.createInstance<IncContext>(_ctx, getState());
  enterRule(_localctx, 426, LLVMIRParser::RuleInc);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3219);
    match(LLVMIRParser::T__36);
    setState(3220);
    value();
    setState(3221);
    match(LLVMIRParser::T__14);
    setState(3222);
    match(LLVMIRParser::LocalIdent);
    setState(3223);
    match(LLVMIRParser::T__37);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OperandBundleContext ------------------------------------------------------------------

LLVMIRParser::OperandBundleContext::OperandBundleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::OperandBundleContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}

std::vector<LLVMIRParser::TypeValueContext *> LLVMIRParser::OperandBundleContext::typeValue() {
  return getRuleContexts<LLVMIRParser::TypeValueContext>();
}

LLVMIRParser::TypeValueContext* LLVMIRParser::OperandBundleContext::typeValue(size_t i) {
  return getRuleContext<LLVMIRParser::TypeValueContext>(i);
}


size_t LLVMIRParser::OperandBundleContext::getRuleIndex() const {
  return LLVMIRParser::RuleOperandBundle;
}


std::any LLVMIRParser::OperandBundleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitOperandBundle(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::OperandBundleContext* LLVMIRParser::operandBundle() {
  OperandBundleContext *_localctx = _tracker.createInstance<OperandBundleContext>(_ctx, getState());
  enterRule(_localctx, 428, LLVMIRParser::RuleOperandBundle);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3225);
    match(LLVMIRParser::StringLit);
    setState(3226);
    match(LLVMIRParser::T__25);
    setState(3235);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251954434605056) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 175640385467457537) != 0) || ((((_la - 354) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 354)) & 127) != 0) || _la == LLVMIRParser::LocalIdent

    || _la == LLVMIRParser::IntType) {
      setState(3227);
      typeValue();
      setState(3232);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3228);
        match(LLVMIRParser::T__14);
        setState(3229);
        typeValue();
        setState(3234);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3237);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClauseContext ------------------------------------------------------------------

LLVMIRParser::ClauseContext::ClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeValueContext* LLVMIRParser::ClauseContext::typeValue() {
  return getRuleContext<LLVMIRParser::TypeValueContext>(0);
}


size_t LLVMIRParser::ClauseContext::getRuleIndex() const {
  return LLVMIRParser::RuleClause;
}


std::any LLVMIRParser::ClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitClause(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ClauseContext* LLVMIRParser::clause() {
  ClauseContext *_localctx = _tracker.createInstance<ClauseContext>(_ctx, getState());
  enterRule(_localctx, 430, LLVMIRParser::RuleClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3239);
    antlrcpp::downCast<ClauseContext *>(_localctx)->clauseType = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == LLVMIRParser::T__185

    || _la == LLVMIRParser::T__186)) {
      antlrcpp::downCast<ClauseContext *>(_localctx)->clauseType = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3240);
    typeValue();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgsContext ------------------------------------------------------------------

LLVMIRParser::ArgsContext::ArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::ArgContext *> LLVMIRParser::ArgsContext::arg() {
  return getRuleContexts<LLVMIRParser::ArgContext>();
}

LLVMIRParser::ArgContext* LLVMIRParser::ArgsContext::arg(size_t i) {
  return getRuleContext<LLVMIRParser::ArgContext>(i);
}


size_t LLVMIRParser::ArgsContext::getRuleIndex() const {
  return LLVMIRParser::RuleArgs;
}


std::any LLVMIRParser::ArgsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitArgs(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ArgsContext* LLVMIRParser::args() {
  ArgsContext *_localctx = _tracker.createInstance<ArgsContext>(_ctx, getState());
  enterRule(_localctx, 432, LLVMIRParser::RuleArgs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(3257);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__26:
      case LLVMIRParser::T__78: {
        enterOuterAlt(_localctx, 1);
        setState(3243);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LLVMIRParser::T__78) {
          setState(3242);
          antlrcpp::downCast<ArgsContext *>(_localctx)->ellipsis = match(LLVMIRParser::T__78);
        }
        break;
      }

      case LLVMIRParser::T__20:
      case LLVMIRParser::T__33:
      case LLVMIRParser::T__36:
      case LLVMIRParser::T__50:
      case LLVMIRParser::T__63:
      case LLVMIRParser::T__76:
      case LLVMIRParser::T__115:
      case LLVMIRParser::T__116:
      case LLVMIRParser::T__117:
      case LLVMIRParser::T__120:
      case LLVMIRParser::T__353:
      case LLVMIRParser::T__354:
      case LLVMIRParser::T__355:
      case LLVMIRParser::T__356:
      case LLVMIRParser::T__357:
      case LLVMIRParser::T__358:
      case LLVMIRParser::T__359:
      case LLVMIRParser::LocalIdent:
      case LLVMIRParser::IntType: {
        enterOuterAlt(_localctx, 2);
        setState(3245);
        arg();
        setState(3250);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 282, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(3246);
            match(LLVMIRParser::T__14);
            setState(3247);
            arg(); 
          }
          setState(3252);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 282, _ctx);
        }
        setState(3255);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LLVMIRParser::T__14) {
          setState(3253);
          match(LLVMIRParser::T__14);
          setState(3254);
          antlrcpp::downCast<ArgsContext *>(_localctx)->ellipsis = match(LLVMIRParser::T__78);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgContext ------------------------------------------------------------------

LLVMIRParser::ArgContext::ArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::ConcreteTypeContext* LLVMIRParser::ArgContext::concreteType() {
  return getRuleContext<LLVMIRParser::ConcreteTypeContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::ArgContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

std::vector<LLVMIRParser::ParamAttributeContext *> LLVMIRParser::ArgContext::paramAttribute() {
  return getRuleContexts<LLVMIRParser::ParamAttributeContext>();
}

LLVMIRParser::ParamAttributeContext* LLVMIRParser::ArgContext::paramAttribute(size_t i) {
  return getRuleContext<LLVMIRParser::ParamAttributeContext>(i);
}

LLVMIRParser::MetadataTypeContext* LLVMIRParser::ArgContext::metadataType() {
  return getRuleContext<LLVMIRParser::MetadataTypeContext>(0);
}

LLVMIRParser::MetadataContext* LLVMIRParser::ArgContext::metadata() {
  return getRuleContext<LLVMIRParser::MetadataContext>(0);
}


size_t LLVMIRParser::ArgContext::getRuleIndex() const {
  return LLVMIRParser::RuleArg;
}


std::any LLVMIRParser::ArgContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitArg(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ArgContext* LLVMIRParser::arg() {
  ArgContext *_localctx = _tracker.createInstance<ArgContext>(_ctx, getState());
  enterRule(_localctx, 434, LLVMIRParser::RuleArg);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3271);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 286, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3259);
      concreteType();
      setState(3263);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 75) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 75)) & 549755809825) != 0) || _la == LLVMIRParser::StringLit) {
        setState(3260);
        paramAttribute();
        setState(3265);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3266);
      value();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3268);
      metadataType();
      setState(3269);
      metadata();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExceptionArgContext ------------------------------------------------------------------

LLVMIRParser::ExceptionArgContext::ExceptionArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::ConcreteTypeContext* LLVMIRParser::ExceptionArgContext::concreteType() {
  return getRuleContext<LLVMIRParser::ConcreteTypeContext>(0);
}

LLVMIRParser::ValueContext* LLVMIRParser::ExceptionArgContext::value() {
  return getRuleContext<LLVMIRParser::ValueContext>(0);
}

LLVMIRParser::MetadataTypeContext* LLVMIRParser::ExceptionArgContext::metadataType() {
  return getRuleContext<LLVMIRParser::MetadataTypeContext>(0);
}

LLVMIRParser::MetadataContext* LLVMIRParser::ExceptionArgContext::metadata() {
  return getRuleContext<LLVMIRParser::MetadataContext>(0);
}


size_t LLVMIRParser::ExceptionArgContext::getRuleIndex() const {
  return LLVMIRParser::RuleExceptionArg;
}


std::any LLVMIRParser::ExceptionArgContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitExceptionArg(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ExceptionArgContext* LLVMIRParser::exceptionArg() {
  ExceptionArgContext *_localctx = _tracker.createInstance<ExceptionArgContext>(_ctx, getState());
  enterRule(_localctx, 436, LLVMIRParser::RuleExceptionArg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3279);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 287, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3273);
      concreteType();
      setState(3274);
      value();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3276);
      metadataType();
      setState(3277);
      metadata();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExceptionPadContext ------------------------------------------------------------------

LLVMIRParser::ExceptionPadContext::ExceptionPadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::NoneConstContext* LLVMIRParser::ExceptionPadContext::noneConst() {
  return getRuleContext<LLVMIRParser::NoneConstContext>(0);
}

tree::TerminalNode* LLVMIRParser::ExceptionPadContext::LocalIdent() {
  return getToken(LLVMIRParser::LocalIdent, 0);
}


size_t LLVMIRParser::ExceptionPadContext::getRuleIndex() const {
  return LLVMIRParser::RuleExceptionPad;
}


std::any LLVMIRParser::ExceptionPadContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitExceptionPad(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ExceptionPadContext* LLVMIRParser::exceptionPad() {
  ExceptionPadContext *_localctx = _tracker.createInstance<ExceptionPadContext>(_ctx, getState());
  enterRule(_localctx, 438, LLVMIRParser::RuleExceptionPad);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3283);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__62: {
        enterOuterAlt(_localctx, 1);
        setState(3281);
        noneConst();
        break;
      }

      case LLVMIRParser::LocalIdent: {
        enterOuterAlt(_localctx, 2);
        setState(3282);
        match(LLVMIRParser::LocalIdent);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExternalLinkageContext ------------------------------------------------------------------

LLVMIRParser::ExternalLinkageContext::ExternalLinkageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::ExternalLinkageContext::getRuleIndex() const {
  return LLVMIRParser::RuleExternalLinkage;
}


std::any LLVMIRParser::ExternalLinkageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitExternalLinkage(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ExternalLinkageContext* LLVMIRParser::externalLinkage() {
  ExternalLinkageContext *_localctx = _tracker.createInstance<ExternalLinkageContext>(_ctx, getState());
  enterRule(_localctx, 440, LLVMIRParser::RuleExternalLinkage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3285);
    _la = _input->LA(1);
    if (!(_la == LLVMIRParser::T__187

    || _la == LLVMIRParser::T__188)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InternalLinkageContext ------------------------------------------------------------------

LLVMIRParser::InternalLinkageContext::InternalLinkageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::InternalLinkageContext::getRuleIndex() const {
  return LLVMIRParser::RuleInternalLinkage;
}


std::any LLVMIRParser::InternalLinkageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitInternalLinkage(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::InternalLinkageContext* LLVMIRParser::internalLinkage() {
  InternalLinkageContext *_localctx = _tracker.createInstance<InternalLinkageContext>(_ctx, getState());
  enterRule(_localctx, 442, LLVMIRParser::RuleInternalLinkage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3287);
    _la = _input->LA(1);
    if (!(((((_la - 173) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 173)) & 33423361) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LinkageContext ------------------------------------------------------------------

LLVMIRParser::LinkageContext::LinkageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::InternalLinkageContext* LLVMIRParser::LinkageContext::internalLinkage() {
  return getRuleContext<LLVMIRParser::InternalLinkageContext>(0);
}

LLVMIRParser::ExternalLinkageContext* LLVMIRParser::LinkageContext::externalLinkage() {
  return getRuleContext<LLVMIRParser::ExternalLinkageContext>(0);
}


size_t LLVMIRParser::LinkageContext::getRuleIndex() const {
  return LLVMIRParser::RuleLinkage;
}


std::any LLVMIRParser::LinkageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitLinkage(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::LinkageContext* LLVMIRParser::linkage() {
  LinkageContext *_localctx = _tracker.createInstance<LinkageContext>(_ctx, getState());
  enterRule(_localctx, 444, LLVMIRParser::RuleLinkage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3291);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__172:
      case LLVMIRParser::T__189:
      case LLVMIRParser::T__190:
      case LLVMIRParser::T__191:
      case LLVMIRParser::T__192:
      case LLVMIRParser::T__193:
      case LLVMIRParser::T__194:
      case LLVMIRParser::T__195:
      case LLVMIRParser::T__196: {
        enterOuterAlt(_localctx, 1);
        setState(3289);
        internalLinkage();
        break;
      }

      case LLVMIRParser::T__187:
      case LLVMIRParser::T__188: {
        enterOuterAlt(_localctx, 2);
        setState(3290);
        externalLinkage();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PreemptionContext ------------------------------------------------------------------

LLVMIRParser::PreemptionContext::PreemptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::PreemptionContext::getRuleIndex() const {
  return LLVMIRParser::RulePreemption;
}


std::any LLVMIRParser::PreemptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitPreemption(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::PreemptionContext* LLVMIRParser::preemption() {
  PreemptionContext *_localctx = _tracker.createInstance<PreemptionContext>(_ctx, getState());
  enterRule(_localctx, 446, LLVMIRParser::RulePreemption);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3293);
    _la = _input->LA(1);
    if (!(_la == LLVMIRParser::T__197

    || _la == LLVMIRParser::T__198)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VisibilityContext ------------------------------------------------------------------

LLVMIRParser::VisibilityContext::VisibilityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::VisibilityContext::getRuleIndex() const {
  return LLVMIRParser::RuleVisibility;
}


std::any LLVMIRParser::VisibilityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitVisibility(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::VisibilityContext* LLVMIRParser::visibility() {
  VisibilityContext *_localctx = _tracker.createInstance<VisibilityContext>(_ctx, getState());
  enterRule(_localctx, 448, LLVMIRParser::RuleVisibility);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3295);
    _la = _input->LA(1);
    if (!(((((_la - 200) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 200)) & 7) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DllStorageClassContext ------------------------------------------------------------------

LLVMIRParser::DllStorageClassContext::DllStorageClassContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::DllStorageClassContext::getRuleIndex() const {
  return LLVMIRParser::RuleDllStorageClass;
}


std::any LLVMIRParser::DllStorageClassContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDllStorageClass(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DllStorageClassContext* LLVMIRParser::dllStorageClass() {
  DllStorageClassContext *_localctx = _tracker.createInstance<DllStorageClassContext>(_ctx, getState());
  enterRule(_localctx, 450, LLVMIRParser::RuleDllStorageClass);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3297);
    _la = _input->LA(1);
    if (!(_la == LLVMIRParser::T__202

    || _la == LLVMIRParser::T__203)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TlsModelContext ------------------------------------------------------------------

LLVMIRParser::TlsModelContext::TlsModelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::TlsModelContext::getRuleIndex() const {
  return LLVMIRParser::RuleTlsModel;
}


std::any LLVMIRParser::TlsModelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitTlsModel(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::TlsModelContext* LLVMIRParser::tlsModel() {
  TlsModelContext *_localctx = _tracker.createInstance<TlsModelContext>(_ctx, getState());
  enterRule(_localctx, 452, LLVMIRParser::RuleTlsModel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3299);
    _la = _input->LA(1);
    if (!(((((_la - 205) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 205)) & 7) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnnamedAddrContext ------------------------------------------------------------------

LLVMIRParser::UnnamedAddrContext::UnnamedAddrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::UnnamedAddrContext::getRuleIndex() const {
  return LLVMIRParser::RuleUnnamedAddr;
}


std::any LLVMIRParser::UnnamedAddrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitUnnamedAddr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::UnnamedAddrContext* LLVMIRParser::unnamedAddr() {
  UnnamedAddrContext *_localctx = _tracker.createInstance<UnnamedAddrContext>(_ctx, getState());
  enterRule(_localctx, 454, LLVMIRParser::RuleUnnamedAddr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3301);
    _la = _input->LA(1);
    if (!(_la == LLVMIRParser::T__207

    || _la == LLVMIRParser::T__208)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExternallyInitializedContext ------------------------------------------------------------------

LLVMIRParser::ExternallyInitializedContext::ExternallyInitializedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::ExternallyInitializedContext::getRuleIndex() const {
  return LLVMIRParser::RuleExternallyInitialized;
}


std::any LLVMIRParser::ExternallyInitializedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitExternallyInitialized(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ExternallyInitializedContext* LLVMIRParser::externallyInitialized() {
  ExternallyInitializedContext *_localctx = _tracker.createInstance<ExternallyInitializedContext>(_ctx, getState());
  enterRule(_localctx, 456, LLVMIRParser::RuleExternallyInitialized);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3303);
    match(LLVMIRParser::T__209);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImmutableContext ------------------------------------------------------------------

LLVMIRParser::ImmutableContext::ImmutableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::ImmutableContext::getRuleIndex() const {
  return LLVMIRParser::RuleImmutable;
}


std::any LLVMIRParser::ImmutableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitImmutable(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ImmutableContext* LLVMIRParser::immutable() {
  ImmutableContext *_localctx = _tracker.createInstance<ImmutableContext>(_ctx, getState());
  enterRule(_localctx, 458, LLVMIRParser::RuleImmutable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3305);
    _la = _input->LA(1);
    if (!(_la == LLVMIRParser::T__210

    || _la == LLVMIRParser::T__211)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuncAttrContext ------------------------------------------------------------------

LLVMIRParser::FuncAttrContext::FuncAttrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::FuncAttrContext::getRuleIndex() const {
  return LLVMIRParser::RuleFuncAttr;
}


std::any LLVMIRParser::FuncAttrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFuncAttr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FuncAttrContext* LLVMIRParser::funcAttr() {
  FuncAttrContext *_localctx = _tracker.createInstance<FuncAttrContext>(_ctx, getState());
  enterRule(_localctx, 460, LLVMIRParser::RuleFuncAttr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3307);
    _la = _input->LA(1);
    if (!(((((_la - 57) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 57)) & 9227101580296193) != 0) || ((((_la - 213) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 213)) & 1125899906842623) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DistinctContext ------------------------------------------------------------------

LLVMIRParser::DistinctContext::DistinctContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::DistinctContext::getRuleIndex() const {
  return LLVMIRParser::RuleDistinct;
}


std::any LLVMIRParser::DistinctContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDistinct(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DistinctContext* LLVMIRParser::distinct() {
  DistinctContext *_localctx = _tracker.createInstance<DistinctContext>(_ctx, getState());
  enterRule(_localctx, 462, LLVMIRParser::RuleDistinct);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3309);
    match(LLVMIRParser::T__262);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InBoundsContext ------------------------------------------------------------------

LLVMIRParser::InBoundsContext::InBoundsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::InBoundsContext::getRuleIndex() const {
  return LLVMIRParser::RuleInBounds;
}


std::any LLVMIRParser::InBoundsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitInBounds(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::InBoundsContext* LLVMIRParser::inBounds() {
  InBoundsContext *_localctx = _tracker.createInstance<InBoundsContext>(_ctx, getState());
  enterRule(_localctx, 464, LLVMIRParser::RuleInBounds);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3311);
    match(LLVMIRParser::T__263);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnAttrContext ------------------------------------------------------------------

LLVMIRParser::ReturnAttrContext::ReturnAttrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::ReturnAttrContext::getRuleIndex() const {
  return LLVMIRParser::RuleReturnAttr;
}


std::any LLVMIRParser::ReturnAttrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitReturnAttr(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ReturnAttrContext* LLVMIRParser::returnAttr() {
  ReturnAttrContext *_localctx = _tracker.createInstance<ReturnAttrContext>(_ctx, getState());
  enterRule(_localctx, 466, LLVMIRParser::RuleReturnAttr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3313);
    _la = _input->LA(1);
    if (!(((((_la - 96) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 96)) & 33893) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OverflowFlagContext ------------------------------------------------------------------

LLVMIRParser::OverflowFlagContext::OverflowFlagContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::OverflowFlagContext::getRuleIndex() const {
  return LLVMIRParser::RuleOverflowFlag;
}


std::any LLVMIRParser::OverflowFlagContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitOverflowFlag(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::OverflowFlagContext* LLVMIRParser::overflowFlag() {
  OverflowFlagContext *_localctx = _tracker.createInstance<OverflowFlagContext>(_ctx, getState());
  enterRule(_localctx, 468, LLVMIRParser::RuleOverflowFlag);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3315);
    _la = _input->LA(1);
    if (!(_la == LLVMIRParser::T__264

    || _la == LLVMIRParser::T__265)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IPredContext ------------------------------------------------------------------

LLVMIRParser::IPredContext::IPredContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::IPredContext::getRuleIndex() const {
  return LLVMIRParser::RuleIPred;
}


std::any LLVMIRParser::IPredContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitIPred(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::IPredContext* LLVMIRParser::iPred() {
  IPredContext *_localctx = _tracker.createInstance<IPredContext>(_ctx, getState());
  enterRule(_localctx, 470, LLVMIRParser::RuleIPred);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3317);
    _la = _input->LA(1);
    if (!(((((_la - 267) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 267)) & 1023) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FPredContext ------------------------------------------------------------------

LLVMIRParser::FPredContext::FPredContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::FPredContext::getRuleIndex() const {
  return LLVMIRParser::RuleFPred;
}


std::any LLVMIRParser::FPredContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFPred(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FPredContext* LLVMIRParser::fPred() {
  FPredContext *_localctx = _tracker.createInstance<FPredContext>(_ctx, getState());
  enterRule(_localctx, 472, LLVMIRParser::RuleFPred);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3319);
    _la = _input->LA(1);
    if (!(_la == LLVMIRParser::T__59

    || _la == LLVMIRParser::T__60 || ((((_la - 273) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 273)) & 16383) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AtomicOrderingContext ------------------------------------------------------------------

LLVMIRParser::AtomicOrderingContext::AtomicOrderingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::AtomicOrderingContext::getRuleIndex() const {
  return LLVMIRParser::RuleAtomicOrdering;
}


std::any LLVMIRParser::AtomicOrderingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAtomicOrdering(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AtomicOrderingContext* LLVMIRParser::atomicOrdering() {
  AtomicOrderingContext *_localctx = _tracker.createInstance<AtomicOrderingContext>(_ctx, getState());
  enterRule(_localctx, 474, LLVMIRParser::RuleAtomicOrdering);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3321);
    _la = _input->LA(1);
    if (!(((((_la - 287) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 287)) & 63) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallingConvEnumContext ------------------------------------------------------------------

LLVMIRParser::CallingConvEnumContext::CallingConvEnumContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::CallingConvEnumContext::getRuleIndex() const {
  return LLVMIRParser::RuleCallingConvEnum;
}


std::any LLVMIRParser::CallingConvEnumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitCallingConvEnum(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::CallingConvEnumContext* LLVMIRParser::callingConvEnum() {
  CallingConvEnumContext *_localctx = _tracker.createInstance<CallingConvEnumContext>(_ctx, getState());
  enterRule(_localctx, 476, LLVMIRParser::RuleCallingConvEnum);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3323);
    _la = _input->LA(1);
    if (!(((((_la - 293) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 293)) & 35184372088831) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FastMathFlagContext ------------------------------------------------------------------

LLVMIRParser::FastMathFlagContext::FastMathFlagContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::FastMathFlagContext::getRuleIndex() const {
  return LLVMIRParser::RuleFastMathFlag;
}


std::any LLVMIRParser::FastMathFlagContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFastMathFlag(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FastMathFlagContext* LLVMIRParser::fastMathFlag() {
  FastMathFlagContext *_localctx = _tracker.createInstance<FastMathFlagContext>(_ctx, getState());
  enterRule(_localctx, 478, LLVMIRParser::RuleFastMathFlag);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3325);
    _la = _input->LA(1);
    if (!(((((_la - 338) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 338)) & 255) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AtomicOpContext ------------------------------------------------------------------

LLVMIRParser::AtomicOpContext::AtomicOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::AtomicOpContext::getRuleIndex() const {
  return LLVMIRParser::RuleAtomicOp;
}


std::any LLVMIRParser::AtomicOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAtomicOp(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AtomicOpContext* LLVMIRParser::atomicOp() {
  AtomicOpContext *_localctx = _tracker.createInstance<AtomicOpContext>(_ctx, getState());
  enterRule(_localctx, 480, LLVMIRParser::RuleAtomicOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3327);
    _la = _input->LA(1);
    if (!(((((_la - 147) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 147)) & 12319) != 0) || ((((_la - 346) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 346)) & 255) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatKindContext ------------------------------------------------------------------

LLVMIRParser::FloatKindContext::FloatKindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::FloatKindContext::getRuleIndex() const {
  return LLVMIRParser::RuleFloatKind;
}


std::any LLVMIRParser::FloatKindContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFloatKind(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FloatKindContext* LLVMIRParser::floatKind() {
  FloatKindContext *_localctx = _tracker.createInstance<FloatKindContext>(_ctx, getState());
  enterRule(_localctx, 482, LLVMIRParser::RuleFloatKind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3329);
    _la = _input->LA(1);
    if (!(((((_la - 354) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 354)) & 127) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SpecializedMDNodeContext ------------------------------------------------------------------

LLVMIRParser::SpecializedMDNodeContext::SpecializedMDNodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::DiBasicTypeContext* LLVMIRParser::SpecializedMDNodeContext::diBasicType() {
  return getRuleContext<LLVMIRParser::DiBasicTypeContext>(0);
}

LLVMIRParser::DiCommonBlockContext* LLVMIRParser::SpecializedMDNodeContext::diCommonBlock() {
  return getRuleContext<LLVMIRParser::DiCommonBlockContext>(0);
}

LLVMIRParser::DiCompileUnitContext* LLVMIRParser::SpecializedMDNodeContext::diCompileUnit() {
  return getRuleContext<LLVMIRParser::DiCompileUnitContext>(0);
}

LLVMIRParser::DiCompositeTypeContext* LLVMIRParser::SpecializedMDNodeContext::diCompositeType() {
  return getRuleContext<LLVMIRParser::DiCompositeTypeContext>(0);
}

LLVMIRParser::DiDerivedTypeContext* LLVMIRParser::SpecializedMDNodeContext::diDerivedType() {
  return getRuleContext<LLVMIRParser::DiDerivedTypeContext>(0);
}

LLVMIRParser::DiEnumeratorContext* LLVMIRParser::SpecializedMDNodeContext::diEnumerator() {
  return getRuleContext<LLVMIRParser::DiEnumeratorContext>(0);
}

LLVMIRParser::DiExpressionContext* LLVMIRParser::SpecializedMDNodeContext::diExpression() {
  return getRuleContext<LLVMIRParser::DiExpressionContext>(0);
}

LLVMIRParser::DiFileContext* LLVMIRParser::SpecializedMDNodeContext::diFile() {
  return getRuleContext<LLVMIRParser::DiFileContext>(0);
}

LLVMIRParser::DiGlobalVariableContext* LLVMIRParser::SpecializedMDNodeContext::diGlobalVariable() {
  return getRuleContext<LLVMIRParser::DiGlobalVariableContext>(0);
}

LLVMIRParser::DiGlobalVariableExpressionContext* LLVMIRParser::SpecializedMDNodeContext::diGlobalVariableExpression() {
  return getRuleContext<LLVMIRParser::DiGlobalVariableExpressionContext>(0);
}

LLVMIRParser::DiImportedEntityContext* LLVMIRParser::SpecializedMDNodeContext::diImportedEntity() {
  return getRuleContext<LLVMIRParser::DiImportedEntityContext>(0);
}

LLVMIRParser::DiLabelContext* LLVMIRParser::SpecializedMDNodeContext::diLabel() {
  return getRuleContext<LLVMIRParser::DiLabelContext>(0);
}

LLVMIRParser::DiLexicalBlockContext* LLVMIRParser::SpecializedMDNodeContext::diLexicalBlock() {
  return getRuleContext<LLVMIRParser::DiLexicalBlockContext>(0);
}

LLVMIRParser::DiLexicalBlockFileContext* LLVMIRParser::SpecializedMDNodeContext::diLexicalBlockFile() {
  return getRuleContext<LLVMIRParser::DiLexicalBlockFileContext>(0);
}

LLVMIRParser::DiLocalVariableContext* LLVMIRParser::SpecializedMDNodeContext::diLocalVariable() {
  return getRuleContext<LLVMIRParser::DiLocalVariableContext>(0);
}

LLVMIRParser::DiLocationContext* LLVMIRParser::SpecializedMDNodeContext::diLocation() {
  return getRuleContext<LLVMIRParser::DiLocationContext>(0);
}

LLVMIRParser::DiMacroContext* LLVMIRParser::SpecializedMDNodeContext::diMacro() {
  return getRuleContext<LLVMIRParser::DiMacroContext>(0);
}

LLVMIRParser::DiMacroFileContext* LLVMIRParser::SpecializedMDNodeContext::diMacroFile() {
  return getRuleContext<LLVMIRParser::DiMacroFileContext>(0);
}

LLVMIRParser::DiModuleContext* LLVMIRParser::SpecializedMDNodeContext::diModule() {
  return getRuleContext<LLVMIRParser::DiModuleContext>(0);
}

LLVMIRParser::DiNamespaceContext* LLVMIRParser::SpecializedMDNodeContext::diNamespace() {
  return getRuleContext<LLVMIRParser::DiNamespaceContext>(0);
}

LLVMIRParser::DiObjCPropertyContext* LLVMIRParser::SpecializedMDNodeContext::diObjCProperty() {
  return getRuleContext<LLVMIRParser::DiObjCPropertyContext>(0);
}

LLVMIRParser::DiStringTypeContext* LLVMIRParser::SpecializedMDNodeContext::diStringType() {
  return getRuleContext<LLVMIRParser::DiStringTypeContext>(0);
}

LLVMIRParser::DiSubprogramContext* LLVMIRParser::SpecializedMDNodeContext::diSubprogram() {
  return getRuleContext<LLVMIRParser::DiSubprogramContext>(0);
}

LLVMIRParser::DiSubrangeContext* LLVMIRParser::SpecializedMDNodeContext::diSubrange() {
  return getRuleContext<LLVMIRParser::DiSubrangeContext>(0);
}

LLVMIRParser::DiSubroutineTypeContext* LLVMIRParser::SpecializedMDNodeContext::diSubroutineType() {
  return getRuleContext<LLVMIRParser::DiSubroutineTypeContext>(0);
}

LLVMIRParser::DiTemplateTypeParameterContext* LLVMIRParser::SpecializedMDNodeContext::diTemplateTypeParameter() {
  return getRuleContext<LLVMIRParser::DiTemplateTypeParameterContext>(0);
}

LLVMIRParser::DiTemplateValueParameterContext* LLVMIRParser::SpecializedMDNodeContext::diTemplateValueParameter() {
  return getRuleContext<LLVMIRParser::DiTemplateValueParameterContext>(0);
}

LLVMIRParser::GenericDiNodeContext* LLVMIRParser::SpecializedMDNodeContext::genericDiNode() {
  return getRuleContext<LLVMIRParser::GenericDiNodeContext>(0);
}


size_t LLVMIRParser::SpecializedMDNodeContext::getRuleIndex() const {
  return LLVMIRParser::RuleSpecializedMDNode;
}


std::any LLVMIRParser::SpecializedMDNodeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitSpecializedMDNode(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::SpecializedMDNodeContext* LLVMIRParser::specializedMDNode() {
  SpecializedMDNodeContext *_localctx = _tracker.createInstance<SpecializedMDNodeContext>(_ctx, getState());
  enterRule(_localctx, 484, LLVMIRParser::RuleSpecializedMDNode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3359);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__360: {
        enterOuterAlt(_localctx, 1);
        setState(3331);
        diBasicType();
        break;
      }

      case LLVMIRParser::T__361: {
        enterOuterAlt(_localctx, 2);
        setState(3332);
        diCommonBlock();
        break;
      }

      case LLVMIRParser::T__362: {
        enterOuterAlt(_localctx, 3);
        setState(3333);
        diCompileUnit();
        break;
      }

      case LLVMIRParser::T__363: {
        enterOuterAlt(_localctx, 4);
        setState(3334);
        diCompositeType();
        break;
      }

      case LLVMIRParser::T__364: {
        enterOuterAlt(_localctx, 5);
        setState(3335);
        diDerivedType();
        break;
      }

      case LLVMIRParser::T__365: {
        enterOuterAlt(_localctx, 6);
        setState(3336);
        diEnumerator();
        break;
      }

      case LLVMIRParser::T__52: {
        enterOuterAlt(_localctx, 7);
        setState(3337);
        diExpression();
        break;
      }

      case LLVMIRParser::T__366: {
        enterOuterAlt(_localctx, 8);
        setState(3338);
        diFile();
        break;
      }

      case LLVMIRParser::T__367: {
        enterOuterAlt(_localctx, 9);
        setState(3339);
        diGlobalVariable();
        break;
      }

      case LLVMIRParser::T__368: {
        enterOuterAlt(_localctx, 10);
        setState(3340);
        diGlobalVariableExpression();
        break;
      }

      case LLVMIRParser::T__369: {
        enterOuterAlt(_localctx, 11);
        setState(3341);
        diImportedEntity();
        break;
      }

      case LLVMIRParser::T__370: {
        enterOuterAlt(_localctx, 12);
        setState(3342);
        diLabel();
        break;
      }

      case LLVMIRParser::T__371: {
        enterOuterAlt(_localctx, 13);
        setState(3343);
        diLexicalBlock();
        break;
      }

      case LLVMIRParser::T__372: {
        enterOuterAlt(_localctx, 14);
        setState(3344);
        diLexicalBlockFile();
        break;
      }

      case LLVMIRParser::T__373: {
        enterOuterAlt(_localctx, 15);
        setState(3345);
        diLocalVariable();
        break;
      }

      case LLVMIRParser::T__374: {
        enterOuterAlt(_localctx, 16);
        setState(3346);
        diLocation();
        break;
      }

      case LLVMIRParser::T__375: {
        enterOuterAlt(_localctx, 17);
        setState(3347);
        diMacro();
        break;
      }

      case LLVMIRParser::T__376: {
        enterOuterAlt(_localctx, 18);
        setState(3348);
        diMacroFile();
        break;
      }

      case LLVMIRParser::T__377: {
        enterOuterAlt(_localctx, 19);
        setState(3349);
        diModule();
        break;
      }

      case LLVMIRParser::T__378: {
        enterOuterAlt(_localctx, 20);
        setState(3350);
        diNamespace();
        break;
      }

      case LLVMIRParser::T__379: {
        enterOuterAlt(_localctx, 21);
        setState(3351);
        diObjCProperty();
        break;
      }

      case LLVMIRParser::T__380: {
        enterOuterAlt(_localctx, 22);
        setState(3352);
        diStringType();
        break;
      }

      case LLVMIRParser::T__381: {
        enterOuterAlt(_localctx, 23);
        setState(3353);
        diSubprogram();
        break;
      }

      case LLVMIRParser::T__382: {
        enterOuterAlt(_localctx, 24);
        setState(3354);
        diSubrange();
        break;
      }

      case LLVMIRParser::T__383: {
        enterOuterAlt(_localctx, 25);
        setState(3355);
        diSubroutineType();
        break;
      }

      case LLVMIRParser::T__384: {
        enterOuterAlt(_localctx, 26);
        setState(3356);
        diTemplateTypeParameter();
        break;
      }

      case LLVMIRParser::T__385: {
        enterOuterAlt(_localctx, 27);
        setState(3357);
        diTemplateValueParameter();
        break;
      }

      case LLVMIRParser::T__386: {
        enterOuterAlt(_localctx, 28);
        setState(3358);
        genericDiNode();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiBasicTypeContext ------------------------------------------------------------------

LLVMIRParser::DiBasicTypeContext::DiBasicTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiBasicTypeFieldContext *> LLVMIRParser::DiBasicTypeContext::diBasicTypeField() {
  return getRuleContexts<LLVMIRParser::DiBasicTypeFieldContext>();
}

LLVMIRParser::DiBasicTypeFieldContext* LLVMIRParser::DiBasicTypeContext::diBasicTypeField(size_t i) {
  return getRuleContext<LLVMIRParser::DiBasicTypeFieldContext>(i);
}


size_t LLVMIRParser::DiBasicTypeContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiBasicType;
}


std::any LLVMIRParser::DiBasicTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiBasicType(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiBasicTypeContext* LLVMIRParser::diBasicType() {
  DiBasicTypeContext *_localctx = _tracker.createInstance<DiBasicTypeContext>(_ctx, getState());
  enterRule(_localctx, 486, LLVMIRParser::RuleDiBasicType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3361);
    match(LLVMIRParser::T__360);
    setState(3362);
    match(LLVMIRParser::T__25);
    setState(3371);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 388) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 388)) & 68719477897) != 0) || _la == LLVMIRParser::T__466) {
      setState(3363);
      diBasicTypeField();
      setState(3368);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3364);
        match(LLVMIRParser::T__14);
        setState(3365);
        diBasicTypeField();
        setState(3370);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3373);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiCommonBlockContext ------------------------------------------------------------------

LLVMIRParser::DiCommonBlockContext::DiCommonBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiCommonBlockFieldContext *> LLVMIRParser::DiCommonBlockContext::diCommonBlockField() {
  return getRuleContexts<LLVMIRParser::DiCommonBlockFieldContext>();
}

LLVMIRParser::DiCommonBlockFieldContext* LLVMIRParser::DiCommonBlockContext::diCommonBlockField(size_t i) {
  return getRuleContext<LLVMIRParser::DiCommonBlockFieldContext>(i);
}


size_t LLVMIRParser::DiCommonBlockContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiCommonBlock;
}


std::any LLVMIRParser::DiCommonBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiCommonBlock(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiCommonBlockContext* LLVMIRParser::diCommonBlock() {
  DiCommonBlockContext *_localctx = _tracker.createInstance<DiCommonBlockContext>(_ctx, getState());
  enterRule(_localctx, 488, LLVMIRParser::RuleDiCommonBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3375);
    match(LLVMIRParser::T__361);
    setState(3376);
    match(LLVMIRParser::T__25);
    setState(3385);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 391) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 391)) & 36029346776875009) != 0) || _la == LLVMIRParser::T__462) {
      setState(3377);
      diCommonBlockField();
      setState(3382);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3378);
        match(LLVMIRParser::T__14);
        setState(3379);
        diCommonBlockField();
        setState(3384);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3387);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiCompileUnitContext ------------------------------------------------------------------

LLVMIRParser::DiCompileUnitContext::DiCompileUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiCompileUnitFieldContext *> LLVMIRParser::DiCompileUnitContext::diCompileUnitField() {
  return getRuleContexts<LLVMIRParser::DiCompileUnitFieldContext>();
}

LLVMIRParser::DiCompileUnitFieldContext* LLVMIRParser::DiCompileUnitContext::diCompileUnitField(size_t i) {
  return getRuleContext<LLVMIRParser::DiCompileUnitFieldContext>(i);
}


size_t LLVMIRParser::DiCompileUnitContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiCompileUnit;
}


std::any LLVMIRParser::DiCompileUnitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiCompileUnit(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiCompileUnitContext* LLVMIRParser::diCompileUnit() {
  DiCompileUnitContext *_localctx = _tracker.createInstance<DiCompileUnitContext>(_ctx, getState());
  enterRule(_localctx, 490, LLVMIRParser::RuleDiCompileUnit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3389);
    match(LLVMIRParser::T__362);
    setState(3390);
    match(LLVMIRParser::T__25);
    setState(3399);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 395) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 395)) & 6972840271482519553) != 0) || ((((_la - 460) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 460)) & 68645) != 0)) {
      setState(3391);
      diCompileUnitField();
      setState(3396);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3392);
        match(LLVMIRParser::T__14);
        setState(3393);
        diCompileUnitField();
        setState(3398);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3401);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiCompositeTypeContext ------------------------------------------------------------------

LLVMIRParser::DiCompositeTypeContext::DiCompositeTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiCompositeTypeFieldContext *> LLVMIRParser::DiCompositeTypeContext::diCompositeTypeField() {
  return getRuleContexts<LLVMIRParser::DiCompositeTypeFieldContext>();
}

LLVMIRParser::DiCompositeTypeFieldContext* LLVMIRParser::DiCompositeTypeContext::diCompositeTypeField(size_t i) {
  return getRuleContext<LLVMIRParser::DiCompositeTypeFieldContext>(i);
}


size_t LLVMIRParser::DiCompositeTypeContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiCompositeType;
}


std::any LLVMIRParser::DiCompositeTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiCompositeType(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiCompositeTypeContext* LLVMIRParser::diCompositeType() {
  DiCompositeTypeContext *_localctx = _tracker.createInstance<DiCompositeTypeContext>(_ctx, getState());
  enterRule(_localctx, 492, LLVMIRParser::RuleDiCompositeType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3403);
    match(LLVMIRParser::T__363);
    setState(3404);
    match(LLVMIRParser::T__25);
    setState(3413);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 388) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 388)) & 288305144217558153) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 455)) & 4303360329) != 0)) {
      setState(3405);
      diCompositeTypeField();
      setState(3410);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3406);
        match(LLVMIRParser::T__14);
        setState(3407);
        diCompositeTypeField();
        setState(3412);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3415);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiCompositeTypeFieldContext ------------------------------------------------------------------

LLVMIRParser::DiCompositeTypeFieldContext::DiCompositeTypeFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TagFieldContext* LLVMIRParser::DiCompositeTypeFieldContext::tagField() {
  return getRuleContext<LLVMIRParser::TagFieldContext>(0);
}

LLVMIRParser::NameFieldContext* LLVMIRParser::DiCompositeTypeFieldContext::nameField() {
  return getRuleContext<LLVMIRParser::NameFieldContext>(0);
}

LLVMIRParser::ScopeFieldContext* LLVMIRParser::DiCompositeTypeFieldContext::scopeField() {
  return getRuleContext<LLVMIRParser::ScopeFieldContext>(0);
}

LLVMIRParser::FileFieldContext* LLVMIRParser::DiCompositeTypeFieldContext::fileField() {
  return getRuleContext<LLVMIRParser::FileFieldContext>(0);
}

LLVMIRParser::LineFieldContext* LLVMIRParser::DiCompositeTypeFieldContext::lineField() {
  return getRuleContext<LLVMIRParser::LineFieldContext>(0);
}

LLVMIRParser::BaseTypeFieldContext* LLVMIRParser::DiCompositeTypeFieldContext::baseTypeField() {
  return getRuleContext<LLVMIRParser::BaseTypeFieldContext>(0);
}

LLVMIRParser::SizeFieldContext* LLVMIRParser::DiCompositeTypeFieldContext::sizeField() {
  return getRuleContext<LLVMIRParser::SizeFieldContext>(0);
}

LLVMIRParser::AlignFieldContext* LLVMIRParser::DiCompositeTypeFieldContext::alignField() {
  return getRuleContext<LLVMIRParser::AlignFieldContext>(0);
}

LLVMIRParser::OffsetFieldContext* LLVMIRParser::DiCompositeTypeFieldContext::offsetField() {
  return getRuleContext<LLVMIRParser::OffsetFieldContext>(0);
}

LLVMIRParser::FlagsFieldContext* LLVMIRParser::DiCompositeTypeFieldContext::flagsField() {
  return getRuleContext<LLVMIRParser::FlagsFieldContext>(0);
}

LLVMIRParser::ElementsFieldContext* LLVMIRParser::DiCompositeTypeFieldContext::elementsField() {
  return getRuleContext<LLVMIRParser::ElementsFieldContext>(0);
}

LLVMIRParser::RuntimeLangFieldContext* LLVMIRParser::DiCompositeTypeFieldContext::runtimeLangField() {
  return getRuleContext<LLVMIRParser::RuntimeLangFieldContext>(0);
}

LLVMIRParser::VtableHolderFieldContext* LLVMIRParser::DiCompositeTypeFieldContext::vtableHolderField() {
  return getRuleContext<LLVMIRParser::VtableHolderFieldContext>(0);
}

LLVMIRParser::TemplateParamsFieldContext* LLVMIRParser::DiCompositeTypeFieldContext::templateParamsField() {
  return getRuleContext<LLVMIRParser::TemplateParamsFieldContext>(0);
}

LLVMIRParser::IdentifierFieldContext* LLVMIRParser::DiCompositeTypeFieldContext::identifierField() {
  return getRuleContext<LLVMIRParser::IdentifierFieldContext>(0);
}

LLVMIRParser::DiscriminatorFieldContext* LLVMIRParser::DiCompositeTypeFieldContext::discriminatorField() {
  return getRuleContext<LLVMIRParser::DiscriminatorFieldContext>(0);
}

LLVMIRParser::DataLocationFieldContext* LLVMIRParser::DiCompositeTypeFieldContext::dataLocationField() {
  return getRuleContext<LLVMIRParser::DataLocationFieldContext>(0);
}

LLVMIRParser::AssociatedFieldContext* LLVMIRParser::DiCompositeTypeFieldContext::associatedField() {
  return getRuleContext<LLVMIRParser::AssociatedFieldContext>(0);
}

LLVMIRParser::AllocatedFieldContext* LLVMIRParser::DiCompositeTypeFieldContext::allocatedField() {
  return getRuleContext<LLVMIRParser::AllocatedFieldContext>(0);
}

LLVMIRParser::RankFieldContext* LLVMIRParser::DiCompositeTypeFieldContext::rankField() {
  return getRuleContext<LLVMIRParser::RankFieldContext>(0);
}

LLVMIRParser::AnnotationsFieldContext* LLVMIRParser::DiCompositeTypeFieldContext::annotationsField() {
  return getRuleContext<LLVMIRParser::AnnotationsFieldContext>(0);
}


size_t LLVMIRParser::DiCompositeTypeFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiCompositeTypeField;
}


std::any LLVMIRParser::DiCompositeTypeFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiCompositeTypeField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiCompositeTypeFieldContext* LLVMIRParser::diCompositeTypeField() {
  DiCompositeTypeFieldContext *_localctx = _tracker.createInstance<DiCompositeTypeFieldContext>(_ctx, getState());
  enterRule(_localctx, 494, LLVMIRParser::RuleDiCompositeTypeField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3438);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__387: {
        enterOuterAlt(_localctx, 1);
        setState(3417);
        tagField();
        break;
      }

      case LLVMIRParser::T__390: {
        enterOuterAlt(_localctx, 2);
        setState(3418);
        nameField();
        break;
      }

      case LLVMIRParser::T__462: {
        enterOuterAlt(_localctx, 3);
        setState(3419);
        scopeField();
        break;
      }

      case LLVMIRParser::T__429: {
        enterOuterAlt(_localctx, 4);
        setState(3420);
        fileField();
        break;
      }

      case LLVMIRParser::T__445: {
        enterOuterAlt(_localctx, 5);
        setState(3421);
        lineField();
        break;
      }

      case LLVMIRParser::T__403: {
        enterOuterAlt(_localctx, 6);
        setState(3422);
        baseTypeField();
        break;
      }

      case LLVMIRParser::T__466: {
        enterOuterAlt(_localctx, 7);
        setState(3423);
        sizeField();
        break;
      }

      case LLVMIRParser::T__397: {
        enterOuterAlt(_localctx, 8);
        setState(3424);
        alignField();
        break;
      }

      case LLVMIRParser::T__454: {
        enterOuterAlt(_localctx, 9);
        setState(3425);
        offsetField();
        break;
      }

      case LLVMIRParser::T__394: {
        enterOuterAlt(_localctx, 10);
        setState(3426);
        flagsField();
        break;
      }

      case LLVMIRParser::T__417: {
        enterOuterAlt(_localctx, 11);
        setState(3427);
        elementsField();
        break;
      }

      case LLVMIRParser::T__460: {
        enterOuterAlt(_localctx, 12);
        setState(3428);
        runtimeLangField();
        break;
      }

      case LLVMIRParser::T__486: {
        enterOuterAlt(_localctx, 13);
        setState(3429);
        vtableHolderField();
        break;
      }

      case LLVMIRParser::T__477: {
        enterOuterAlt(_localctx, 14);
        setState(3430);
        templateParamsField();
        break;
      }

      case LLVMIRParser::T__433: {
        enterOuterAlt(_localctx, 15);
        setState(3431);
        identifierField();
        break;
      }

      case LLVMIRParser::T__413: {
        enterOuterAlt(_localctx, 16);
        setState(3432);
        discriminatorField();
        break;
      }

      case LLVMIRParser::T__414: {
        enterOuterAlt(_localctx, 17);
        setState(3433);
        dataLocationField();
        break;
      }

      case LLVMIRParser::T__401: {
        enterOuterAlt(_localctx, 18);
        setState(3434);
        associatedField();
        break;
      }

      case LLVMIRParser::T__398: {
        enterOuterAlt(_localctx, 19);
        setState(3435);
        allocatedField();
        break;
      }

      case LLVMIRParser::T__457: {
        enterOuterAlt(_localctx, 20);
        setState(3436);
        rankField();
        break;
      }

      case LLVMIRParser::T__399: {
        enterOuterAlt(_localctx, 21);
        setState(3437);
        annotationsField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiDerivedTypeContext ------------------------------------------------------------------

LLVMIRParser::DiDerivedTypeContext::DiDerivedTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiDerivedTypeFieldContext *> LLVMIRParser::DiDerivedTypeContext::diDerivedTypeField() {
  return getRuleContexts<LLVMIRParser::DiDerivedTypeFieldContext>();
}

LLVMIRParser::DiDerivedTypeFieldContext* LLVMIRParser::DiDerivedTypeContext::diDerivedTypeField(size_t i) {
  return getRuleContext<LLVMIRParser::DiDerivedTypeFieldContext>(i);
}


size_t LLVMIRParser::DiDerivedTypeContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiDerivedType;
}


std::any LLVMIRParser::DiDerivedTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiDerivedType(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiDerivedTypeContext* LLVMIRParser::diDerivedType() {
  DiDerivedTypeContext *_localctx = _tracker.createInstance<DiDerivedTypeContext>(_ctx, getState());
  enterRule(_localctx, 496, LLVMIRParser::RuleDiDerivedType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3440);
    match(LLVMIRParser::T__364);
    setState(3441);
    match(LLVMIRParser::T__25);
    setState(3450);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 388) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 388)) & 288236973489984649) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 455)) & 4353) != 0)) {
      setState(3442);
      diDerivedTypeField();
      setState(3447);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3443);
        match(LLVMIRParser::T__14);
        setState(3444);
        diDerivedTypeField();
        setState(3449);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3452);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiDerivedTypeFieldContext ------------------------------------------------------------------

LLVMIRParser::DiDerivedTypeFieldContext::DiDerivedTypeFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TagFieldContext* LLVMIRParser::DiDerivedTypeFieldContext::tagField() {
  return getRuleContext<LLVMIRParser::TagFieldContext>(0);
}

LLVMIRParser::NameFieldContext* LLVMIRParser::DiDerivedTypeFieldContext::nameField() {
  return getRuleContext<LLVMIRParser::NameFieldContext>(0);
}

LLVMIRParser::ScopeFieldContext* LLVMIRParser::DiDerivedTypeFieldContext::scopeField() {
  return getRuleContext<LLVMIRParser::ScopeFieldContext>(0);
}

LLVMIRParser::FileFieldContext* LLVMIRParser::DiDerivedTypeFieldContext::fileField() {
  return getRuleContext<LLVMIRParser::FileFieldContext>(0);
}

LLVMIRParser::LineFieldContext* LLVMIRParser::DiDerivedTypeFieldContext::lineField() {
  return getRuleContext<LLVMIRParser::LineFieldContext>(0);
}

LLVMIRParser::BaseTypeFieldContext* LLVMIRParser::DiDerivedTypeFieldContext::baseTypeField() {
  return getRuleContext<LLVMIRParser::BaseTypeFieldContext>(0);
}

LLVMIRParser::SizeFieldContext* LLVMIRParser::DiDerivedTypeFieldContext::sizeField() {
  return getRuleContext<LLVMIRParser::SizeFieldContext>(0);
}

LLVMIRParser::AlignFieldContext* LLVMIRParser::DiDerivedTypeFieldContext::alignField() {
  return getRuleContext<LLVMIRParser::AlignFieldContext>(0);
}

LLVMIRParser::OffsetFieldContext* LLVMIRParser::DiDerivedTypeFieldContext::offsetField() {
  return getRuleContext<LLVMIRParser::OffsetFieldContext>(0);
}

LLVMIRParser::FlagsFieldContext* LLVMIRParser::DiDerivedTypeFieldContext::flagsField() {
  return getRuleContext<LLVMIRParser::FlagsFieldContext>(0);
}

LLVMIRParser::ExtraDataFieldContext* LLVMIRParser::DiDerivedTypeFieldContext::extraDataField() {
  return getRuleContext<LLVMIRParser::ExtraDataFieldContext>(0);
}

LLVMIRParser::DwarfAddressSpaceFieldContext* LLVMIRParser::DiDerivedTypeFieldContext::dwarfAddressSpaceField() {
  return getRuleContext<LLVMIRParser::DwarfAddressSpaceFieldContext>(0);
}

LLVMIRParser::AnnotationsFieldContext* LLVMIRParser::DiDerivedTypeFieldContext::annotationsField() {
  return getRuleContext<LLVMIRParser::AnnotationsFieldContext>(0);
}


size_t LLVMIRParser::DiDerivedTypeFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiDerivedTypeField;
}


std::any LLVMIRParser::DiDerivedTypeFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiDerivedTypeField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiDerivedTypeFieldContext* LLVMIRParser::diDerivedTypeField() {
  DiDerivedTypeFieldContext *_localctx = _tracker.createInstance<DiDerivedTypeFieldContext>(_ctx, getState());
  enterRule(_localctx, 498, LLVMIRParser::RuleDiDerivedTypeField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3467);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__387: {
        enterOuterAlt(_localctx, 1);
        setState(3454);
        tagField();
        break;
      }

      case LLVMIRParser::T__390: {
        enterOuterAlt(_localctx, 2);
        setState(3455);
        nameField();
        break;
      }

      case LLVMIRParser::T__462: {
        enterOuterAlt(_localctx, 3);
        setState(3456);
        scopeField();
        break;
      }

      case LLVMIRParser::T__429: {
        enterOuterAlt(_localctx, 4);
        setState(3457);
        fileField();
        break;
      }

      case LLVMIRParser::T__445: {
        enterOuterAlt(_localctx, 5);
        setState(3458);
        lineField();
        break;
      }

      case LLVMIRParser::T__403: {
        enterOuterAlt(_localctx, 6);
        setState(3459);
        baseTypeField();
        break;
      }

      case LLVMIRParser::T__466: {
        enterOuterAlt(_localctx, 7);
        setState(3460);
        sizeField();
        break;
      }

      case LLVMIRParser::T__397: {
        enterOuterAlt(_localctx, 8);
        setState(3461);
        alignField();
        break;
      }

      case LLVMIRParser::T__454: {
        enterOuterAlt(_localctx, 9);
        setState(3462);
        offsetField();
        break;
      }

      case LLVMIRParser::T__394: {
        enterOuterAlt(_localctx, 10);
        setState(3463);
        flagsField();
        break;
      }

      case LLVMIRParser::T__428: {
        enterOuterAlt(_localctx, 11);
        setState(3464);
        extraDataField();
        break;
      }

      case LLVMIRParser::T__415: {
        enterOuterAlt(_localctx, 12);
        setState(3465);
        dwarfAddressSpaceField();
        break;
      }

      case LLVMIRParser::T__399: {
        enterOuterAlt(_localctx, 13);
        setState(3466);
        annotationsField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiEnumeratorContext ------------------------------------------------------------------

LLVMIRParser::DiEnumeratorContext::DiEnumeratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiEnumeratorFieldContext *> LLVMIRParser::DiEnumeratorContext::diEnumeratorField() {
  return getRuleContexts<LLVMIRParser::DiEnumeratorFieldContext>();
}

LLVMIRParser::DiEnumeratorFieldContext* LLVMIRParser::DiEnumeratorContext::diEnumeratorField(size_t i) {
  return getRuleContext<LLVMIRParser::DiEnumeratorFieldContext>(i);
}


size_t LLVMIRParser::DiEnumeratorContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiEnumerator;
}


std::any LLVMIRParser::DiEnumeratorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiEnumerator(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiEnumeratorContext* LLVMIRParser::diEnumerator() {
  DiEnumeratorContext *_localctx = _tracker.createInstance<DiEnumeratorContext>(_ctx, getState());
  enterRule(_localctx, 500, LLVMIRParser::RuleDiEnumerator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3469);
    match(LLVMIRParser::T__365);
    setState(3470);
    match(LLVMIRParser::T__25);
    setState(3479);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 391) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 391)) & 4503599627370505) != 0)) {
      setState(3471);
      diEnumeratorField();
      setState(3476);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3472);
        match(LLVMIRParser::T__14);
        setState(3473);
        diEnumeratorField();
        setState(3478);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3481);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiEnumeratorFieldContext ------------------------------------------------------------------

LLVMIRParser::DiEnumeratorFieldContext::DiEnumeratorFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::NameFieldContext* LLVMIRParser::DiEnumeratorFieldContext::nameField() {
  return getRuleContext<LLVMIRParser::NameFieldContext>(0);
}

LLVMIRParser::ValueIntFieldContext* LLVMIRParser::DiEnumeratorFieldContext::valueIntField() {
  return getRuleContext<LLVMIRParser::ValueIntFieldContext>(0);
}

LLVMIRParser::IsUnsignedFieldContext* LLVMIRParser::DiEnumeratorFieldContext::isUnsignedField() {
  return getRuleContext<LLVMIRParser::IsUnsignedFieldContext>(0);
}


size_t LLVMIRParser::DiEnumeratorFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiEnumeratorField;
}


std::any LLVMIRParser::DiEnumeratorFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiEnumeratorField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiEnumeratorFieldContext* LLVMIRParser::diEnumeratorField() {
  DiEnumeratorFieldContext *_localctx = _tracker.createInstance<DiEnumeratorFieldContext>(_ctx, getState());
  enterRule(_localctx, 502, LLVMIRParser::RuleDiEnumeratorField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3486);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__390: {
        enterOuterAlt(_localctx, 1);
        setState(3483);
        nameField();
        break;
      }

      case LLVMIRParser::T__393: {
        enterOuterAlt(_localctx, 2);
        setState(3484);
        valueIntField();
        break;
      }

      case LLVMIRParser::T__442: {
        enterOuterAlt(_localctx, 3);
        setState(3485);
        isUnsignedField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiFileContext ------------------------------------------------------------------

LLVMIRParser::DiFileContext::DiFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiFileFieldContext *> LLVMIRParser::DiFileContext::diFileField() {
  return getRuleContexts<LLVMIRParser::DiFileFieldContext>();
}

LLVMIRParser::DiFileFieldContext* LLVMIRParser::DiFileContext::diFileField(size_t i) {
  return getRuleContext<LLVMIRParser::DiFileFieldContext>(i);
}


size_t LLVMIRParser::DiFileContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiFile;
}


std::any LLVMIRParser::DiFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiFile(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiFileContext* LLVMIRParser::diFile() {
  DiFileContext *_localctx = _tracker.createInstance<DiFileContext>(_ctx, getState());
  enterRule(_localctx, 504, LLVMIRParser::RuleDiFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3488);
    match(LLVMIRParser::T__366);
    setState(3489);
    match(LLVMIRParser::T__25);
    setState(3498);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 405) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 405)) & -9223372036787666685) != 0)) {
      setState(3490);
      diFileField();
      setState(3495);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3491);
        match(LLVMIRParser::T__14);
        setState(3492);
        diFileField();
        setState(3497);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3500);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiFileFieldContext ------------------------------------------------------------------

LLVMIRParser::DiFileFieldContext::DiFileFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::FilenameFieldContext* LLVMIRParser::DiFileFieldContext::filenameField() {
  return getRuleContext<LLVMIRParser::FilenameFieldContext>(0);
}

LLVMIRParser::DirectoryFieldContext* LLVMIRParser::DiFileFieldContext::directoryField() {
  return getRuleContext<LLVMIRParser::DirectoryFieldContext>(0);
}

LLVMIRParser::ChecksumkindFieldContext* LLVMIRParser::DiFileFieldContext::checksumkindField() {
  return getRuleContext<LLVMIRParser::ChecksumkindFieldContext>(0);
}

LLVMIRParser::ChecksumFieldContext* LLVMIRParser::DiFileFieldContext::checksumField() {
  return getRuleContext<LLVMIRParser::ChecksumFieldContext>(0);
}

LLVMIRParser::SourceFieldContext* LLVMIRParser::DiFileFieldContext::sourceField() {
  return getRuleContext<LLVMIRParser::SourceFieldContext>(0);
}


size_t LLVMIRParser::DiFileFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiFileField;
}


std::any LLVMIRParser::DiFileFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiFileField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiFileFieldContext* LLVMIRParser::diFileField() {
  DiFileFieldContext *_localctx = _tracker.createInstance<DiFileFieldContext>(_ctx, getState());
  enterRule(_localctx, 506, LLVMIRParser::RuleDiFileField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3507);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__430: {
        enterOuterAlt(_localctx, 1);
        setState(3502);
        filenameField();
        break;
      }

      case LLVMIRParser::T__412: {
        enterOuterAlt(_localctx, 2);
        setState(3503);
        directoryField();
        break;
      }

      case LLVMIRParser::T__405: {
        enterOuterAlt(_localctx, 3);
        setState(3504);
        checksumkindField();
        break;
      }

      case LLVMIRParser::T__404: {
        enterOuterAlt(_localctx, 4);
        setState(3505);
        checksumField();
        break;
      }

      case LLVMIRParser::T__467: {
        enterOuterAlt(_localctx, 5);
        setState(3506);
        sourceField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiGlobalVariableContext ------------------------------------------------------------------

LLVMIRParser::DiGlobalVariableContext::DiGlobalVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiGlobalVariableFieldContext *> LLVMIRParser::DiGlobalVariableContext::diGlobalVariableField() {
  return getRuleContexts<LLVMIRParser::DiGlobalVariableFieldContext>();
}

LLVMIRParser::DiGlobalVariableFieldContext* LLVMIRParser::DiGlobalVariableContext::diGlobalVariableField(size_t i) {
  return getRuleContext<LLVMIRParser::DiGlobalVariableFieldContext>(i);
}


size_t LLVMIRParser::DiGlobalVariableContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiGlobalVariable;
}


std::any LLVMIRParser::DiGlobalVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiGlobalVariable(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiGlobalVariableContext* LLVMIRParser::diGlobalVariable() {
  DiGlobalVariableContext *_localctx = _tracker.createInstance<DiGlobalVariableContext>(_ctx, getState());
  enterRule(_localctx, 508, LLVMIRParser::RuleDiGlobalVariable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3509);
    match(LLVMIRParser::T__367);
    setState(3510);
    match(LLVMIRParser::T__25);
    setState(3519);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 391) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 391)) & 109494315698356867) != 0) || _la == LLVMIRParser::T__462

    || _la == LLVMIRParser::T__477) {
      setState(3511);
      diGlobalVariableField();
      setState(3516);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3512);
        match(LLVMIRParser::T__14);
        setState(3513);
        diGlobalVariableField();
        setState(3518);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3521);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiGlobalVariableFieldContext ------------------------------------------------------------------

LLVMIRParser::DiGlobalVariableFieldContext::DiGlobalVariableFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::NameFieldContext* LLVMIRParser::DiGlobalVariableFieldContext::nameField() {
  return getRuleContext<LLVMIRParser::NameFieldContext>(0);
}

LLVMIRParser::ScopeFieldContext* LLVMIRParser::DiGlobalVariableFieldContext::scopeField() {
  return getRuleContext<LLVMIRParser::ScopeFieldContext>(0);
}

LLVMIRParser::LinkageNameFieldContext* LLVMIRParser::DiGlobalVariableFieldContext::linkageNameField() {
  return getRuleContext<LLVMIRParser::LinkageNameFieldContext>(0);
}

LLVMIRParser::FileFieldContext* LLVMIRParser::DiGlobalVariableFieldContext::fileField() {
  return getRuleContext<LLVMIRParser::FileFieldContext>(0);
}

LLVMIRParser::LineFieldContext* LLVMIRParser::DiGlobalVariableFieldContext::lineField() {
  return getRuleContext<LLVMIRParser::LineFieldContext>(0);
}

LLVMIRParser::TypeFieldContext* LLVMIRParser::DiGlobalVariableFieldContext::typeField() {
  return getRuleContext<LLVMIRParser::TypeFieldContext>(0);
}

LLVMIRParser::IsLocalFieldContext* LLVMIRParser::DiGlobalVariableFieldContext::isLocalField() {
  return getRuleContext<LLVMIRParser::IsLocalFieldContext>(0);
}

LLVMIRParser::IsDefinitionFieldContext* LLVMIRParser::DiGlobalVariableFieldContext::isDefinitionField() {
  return getRuleContext<LLVMIRParser::IsDefinitionFieldContext>(0);
}

LLVMIRParser::TemplateParamsFieldContext* LLVMIRParser::DiGlobalVariableFieldContext::templateParamsField() {
  return getRuleContext<LLVMIRParser::TemplateParamsFieldContext>(0);
}

LLVMIRParser::DeclarationFieldContext* LLVMIRParser::DiGlobalVariableFieldContext::declarationField() {
  return getRuleContext<LLVMIRParser::DeclarationFieldContext>(0);
}

LLVMIRParser::AlignFieldContext* LLVMIRParser::DiGlobalVariableFieldContext::alignField() {
  return getRuleContext<LLVMIRParser::AlignFieldContext>(0);
}

LLVMIRParser::AnnotationsFieldContext* LLVMIRParser::DiGlobalVariableFieldContext::annotationsField() {
  return getRuleContext<LLVMIRParser::AnnotationsFieldContext>(0);
}


size_t LLVMIRParser::DiGlobalVariableFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiGlobalVariableField;
}


std::any LLVMIRParser::DiGlobalVariableFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiGlobalVariableField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiGlobalVariableFieldContext* LLVMIRParser::diGlobalVariableField() {
  DiGlobalVariableFieldContext *_localctx = _tracker.createInstance<DiGlobalVariableFieldContext>(_ctx, getState());
  enterRule(_localctx, 510, LLVMIRParser::RuleDiGlobalVariableField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3535);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__390: {
        enterOuterAlt(_localctx, 1);
        setState(3523);
        nameField();
        break;
      }

      case LLVMIRParser::T__462: {
        enterOuterAlt(_localctx, 2);
        setState(3524);
        scopeField();
        break;
      }

      case LLVMIRParser::T__446: {
        enterOuterAlt(_localctx, 3);
        setState(3525);
        linkageNameField();
        break;
      }

      case LLVMIRParser::T__429: {
        enterOuterAlt(_localctx, 4);
        setState(3526);
        fileField();
        break;
      }

      case LLVMIRParser::T__445: {
        enterOuterAlt(_localctx, 5);
        setState(3527);
        lineField();
        break;
      }

      case LLVMIRParser::T__391: {
        enterOuterAlt(_localctx, 6);
        setState(3528);
        typeField();
        break;
      }

      case LLVMIRParser::T__440: {
        enterOuterAlt(_localctx, 7);
        setState(3529);
        isLocalField();
        break;
      }

      case LLVMIRParser::T__438: {
        enterOuterAlt(_localctx, 8);
        setState(3530);
        isDefinitionField();
        break;
      }

      case LLVMIRParser::T__477: {
        enterOuterAlt(_localctx, 9);
        setState(3531);
        templateParamsField();
        break;
      }

      case LLVMIRParser::T__411: {
        enterOuterAlt(_localctx, 10);
        setState(3532);
        declarationField();
        break;
      }

      case LLVMIRParser::T__397: {
        enterOuterAlt(_localctx, 11);
        setState(3533);
        alignField();
        break;
      }

      case LLVMIRParser::T__399: {
        enterOuterAlt(_localctx, 12);
        setState(3534);
        annotationsField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiGlobalVariableExpressionContext ------------------------------------------------------------------

LLVMIRParser::DiGlobalVariableExpressionContext::DiGlobalVariableExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiGlobalVariableExpressionFieldContext *> LLVMIRParser::DiGlobalVariableExpressionContext::diGlobalVariableExpressionField() {
  return getRuleContexts<LLVMIRParser::DiGlobalVariableExpressionFieldContext>();
}

LLVMIRParser::DiGlobalVariableExpressionFieldContext* LLVMIRParser::DiGlobalVariableExpressionContext::diGlobalVariableExpressionField(size_t i) {
  return getRuleContext<LLVMIRParser::DiGlobalVariableExpressionFieldContext>(i);
}


size_t LLVMIRParser::DiGlobalVariableExpressionContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiGlobalVariableExpression;
}


std::any LLVMIRParser::DiGlobalVariableExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiGlobalVariableExpression(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiGlobalVariableExpressionContext* LLVMIRParser::diGlobalVariableExpression() {
  DiGlobalVariableExpressionContext *_localctx = _tracker.createInstance<DiGlobalVariableExpressionContext>(_ctx, getState());
  enterRule(_localctx, 512, LLVMIRParser::RuleDiGlobalVariableExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3537);
    match(LLVMIRParser::T__368);
    setState(3538);
    match(LLVMIRParser::T__25);
    setState(3547);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__427

    || _la == LLVMIRParser::T__483) {
      setState(3539);
      diGlobalVariableExpressionField();
      setState(3544);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3540);
        match(LLVMIRParser::T__14);
        setState(3541);
        diGlobalVariableExpressionField();
        setState(3546);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3549);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiGlobalVariableExpressionFieldContext ------------------------------------------------------------------

LLVMIRParser::DiGlobalVariableExpressionFieldContext::DiGlobalVariableExpressionFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::VarFieldContext* LLVMIRParser::DiGlobalVariableExpressionFieldContext::varField() {
  return getRuleContext<LLVMIRParser::VarFieldContext>(0);
}

LLVMIRParser::ExprFieldContext* LLVMIRParser::DiGlobalVariableExpressionFieldContext::exprField() {
  return getRuleContext<LLVMIRParser::ExprFieldContext>(0);
}


size_t LLVMIRParser::DiGlobalVariableExpressionFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiGlobalVariableExpressionField;
}


std::any LLVMIRParser::DiGlobalVariableExpressionFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiGlobalVariableExpressionField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiGlobalVariableExpressionFieldContext* LLVMIRParser::diGlobalVariableExpressionField() {
  DiGlobalVariableExpressionFieldContext *_localctx = _tracker.createInstance<DiGlobalVariableExpressionFieldContext>(_ctx, getState());
  enterRule(_localctx, 514, LLVMIRParser::RuleDiGlobalVariableExpressionField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3553);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__483: {
        enterOuterAlt(_localctx, 1);
        setState(3551);
        varField();
        break;
      }

      case LLVMIRParser::T__427: {
        enterOuterAlt(_localctx, 2);
        setState(3552);
        exprField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiImportedEntityContext ------------------------------------------------------------------

LLVMIRParser::DiImportedEntityContext::DiImportedEntityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiImportedEntityFieldContext *> LLVMIRParser::DiImportedEntityContext::diImportedEntityField() {
  return getRuleContexts<LLVMIRParser::DiImportedEntityFieldContext>();
}

LLVMIRParser::DiImportedEntityFieldContext* LLVMIRParser::DiImportedEntityContext::diImportedEntityField(size_t i) {
  return getRuleContext<LLVMIRParser::DiImportedEntityFieldContext>(i);
}


size_t LLVMIRParser::DiImportedEntityContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiImportedEntity;
}


std::any LLVMIRParser::DiImportedEntityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiImportedEntity(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiImportedEntityContext* LLVMIRParser::diImportedEntity() {
  DiImportedEntityContext *_localctx = _tracker.createInstance<DiImportedEntityContext>(_ctx, getState());
  enterRule(_localctx, 516, LLVMIRParser::RuleDiImportedEntity);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3555);
    match(LLVMIRParser::T__369);
    setState(3556);
    match(LLVMIRParser::T__25);
    setState(3565);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 388) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 388)) & 288234912710918153) != 0) || _la == LLVMIRParser::T__462) {
      setState(3557);
      diImportedEntityField();
      setState(3562);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3558);
        match(LLVMIRParser::T__14);
        setState(3559);
        diImportedEntityField();
        setState(3564);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3567);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiImportedEntityFieldContext ------------------------------------------------------------------

LLVMIRParser::DiImportedEntityFieldContext::DiImportedEntityFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TagFieldContext* LLVMIRParser::DiImportedEntityFieldContext::tagField() {
  return getRuleContext<LLVMIRParser::TagFieldContext>(0);
}

LLVMIRParser::ScopeFieldContext* LLVMIRParser::DiImportedEntityFieldContext::scopeField() {
  return getRuleContext<LLVMIRParser::ScopeFieldContext>(0);
}

LLVMIRParser::EntityFieldContext* LLVMIRParser::DiImportedEntityFieldContext::entityField() {
  return getRuleContext<LLVMIRParser::EntityFieldContext>(0);
}

LLVMIRParser::FileFieldContext* LLVMIRParser::DiImportedEntityFieldContext::fileField() {
  return getRuleContext<LLVMIRParser::FileFieldContext>(0);
}

LLVMIRParser::LineFieldContext* LLVMIRParser::DiImportedEntityFieldContext::lineField() {
  return getRuleContext<LLVMIRParser::LineFieldContext>(0);
}

LLVMIRParser::NameFieldContext* LLVMIRParser::DiImportedEntityFieldContext::nameField() {
  return getRuleContext<LLVMIRParser::NameFieldContext>(0);
}

LLVMIRParser::ElementsFieldContext* LLVMIRParser::DiImportedEntityFieldContext::elementsField() {
  return getRuleContext<LLVMIRParser::ElementsFieldContext>(0);
}


size_t LLVMIRParser::DiImportedEntityFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiImportedEntityField;
}


std::any LLVMIRParser::DiImportedEntityFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiImportedEntityField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiImportedEntityFieldContext* LLVMIRParser::diImportedEntityField() {
  DiImportedEntityFieldContext *_localctx = _tracker.createInstance<DiImportedEntityFieldContext>(_ctx, getState());
  enterRule(_localctx, 518, LLVMIRParser::RuleDiImportedEntityField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3576);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__387: {
        enterOuterAlt(_localctx, 1);
        setState(3569);
        tagField();
        break;
      }

      case LLVMIRParser::T__462: {
        enterOuterAlt(_localctx, 2);
        setState(3570);
        scopeField();
        break;
      }

      case LLVMIRParser::T__424: {
        enterOuterAlt(_localctx, 3);
        setState(3571);
        entityField();
        break;
      }

      case LLVMIRParser::T__429: {
        enterOuterAlt(_localctx, 4);
        setState(3572);
        fileField();
        break;
      }

      case LLVMIRParser::T__445: {
        enterOuterAlt(_localctx, 5);
        setState(3573);
        lineField();
        break;
      }

      case LLVMIRParser::T__390: {
        enterOuterAlt(_localctx, 6);
        setState(3574);
        nameField();
        break;
      }

      case LLVMIRParser::T__417: {
        enterOuterAlt(_localctx, 7);
        setState(3575);
        elementsField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiLabelContext ------------------------------------------------------------------

LLVMIRParser::DiLabelContext::DiLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiLabelFieldContext *> LLVMIRParser::DiLabelContext::diLabelField() {
  return getRuleContexts<LLVMIRParser::DiLabelFieldContext>();
}

LLVMIRParser::DiLabelFieldContext* LLVMIRParser::DiLabelContext::diLabelField(size_t i) {
  return getRuleContext<LLVMIRParser::DiLabelFieldContext>(i);
}


size_t LLVMIRParser::DiLabelContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiLabel;
}


std::any LLVMIRParser::DiLabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiLabel(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiLabelContext* LLVMIRParser::diLabel() {
  DiLabelContext *_localctx = _tracker.createInstance<DiLabelContext>(_ctx, getState());
  enterRule(_localctx, 520, LLVMIRParser::RuleDiLabel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3578);
    match(LLVMIRParser::T__370);
    setState(3579);
    match(LLVMIRParser::T__25);
    setState(3588);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 391) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 391)) & 36029346774777857) != 0) || _la == LLVMIRParser::T__462) {
      setState(3580);
      diLabelField();
      setState(3585);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3581);
        match(LLVMIRParser::T__14);
        setState(3582);
        diLabelField();
        setState(3587);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3590);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiLabelFieldContext ------------------------------------------------------------------

LLVMIRParser::DiLabelFieldContext::DiLabelFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::ScopeFieldContext* LLVMIRParser::DiLabelFieldContext::scopeField() {
  return getRuleContext<LLVMIRParser::ScopeFieldContext>(0);
}

LLVMIRParser::NameFieldContext* LLVMIRParser::DiLabelFieldContext::nameField() {
  return getRuleContext<LLVMIRParser::NameFieldContext>(0);
}

LLVMIRParser::FileFieldContext* LLVMIRParser::DiLabelFieldContext::fileField() {
  return getRuleContext<LLVMIRParser::FileFieldContext>(0);
}

LLVMIRParser::LineFieldContext* LLVMIRParser::DiLabelFieldContext::lineField() {
  return getRuleContext<LLVMIRParser::LineFieldContext>(0);
}


size_t LLVMIRParser::DiLabelFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiLabelField;
}


std::any LLVMIRParser::DiLabelFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiLabelField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiLabelFieldContext* LLVMIRParser::diLabelField() {
  DiLabelFieldContext *_localctx = _tracker.createInstance<DiLabelFieldContext>(_ctx, getState());
  enterRule(_localctx, 522, LLVMIRParser::RuleDiLabelField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3596);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__462: {
        enterOuterAlt(_localctx, 1);
        setState(3592);
        scopeField();
        break;
      }

      case LLVMIRParser::T__390: {
        enterOuterAlt(_localctx, 2);
        setState(3593);
        nameField();
        break;
      }

      case LLVMIRParser::T__429: {
        enterOuterAlt(_localctx, 3);
        setState(3594);
        fileField();
        break;
      }

      case LLVMIRParser::T__445: {
        enterOuterAlt(_localctx, 4);
        setState(3595);
        lineField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiLexicalBlockContext ------------------------------------------------------------------

LLVMIRParser::DiLexicalBlockContext::DiLexicalBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiLexicalBlockFieldContext *> LLVMIRParser::DiLexicalBlockContext::diLexicalBlockField() {
  return getRuleContexts<LLVMIRParser::DiLexicalBlockFieldContext>();
}

LLVMIRParser::DiLexicalBlockFieldContext* LLVMIRParser::DiLexicalBlockContext::diLexicalBlockField(size_t i) {
  return getRuleContext<LLVMIRParser::DiLexicalBlockFieldContext>(i);
}


size_t LLVMIRParser::DiLexicalBlockContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiLexicalBlock;
}


std::any LLVMIRParser::DiLexicalBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiLexicalBlock(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiLexicalBlockContext* LLVMIRParser::diLexicalBlock() {
  DiLexicalBlockContext *_localctx = _tracker.createInstance<DiLexicalBlockContext>(_ctx, getState());
  enterRule(_localctx, 524, LLVMIRParser::RuleDiLexicalBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3598);
    match(LLVMIRParser::T__371);
    setState(3599);
    match(LLVMIRParser::T__25);
    setState(3608);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 407) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 407)) & 72058143802130433) != 0)) {
      setState(3600);
      diLexicalBlockField();
      setState(3605);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3601);
        match(LLVMIRParser::T__14);
        setState(3602);
        diLexicalBlockField();
        setState(3607);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3610);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiLexicalBlockFieldContext ------------------------------------------------------------------

LLVMIRParser::DiLexicalBlockFieldContext::DiLexicalBlockFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::ScopeFieldContext* LLVMIRParser::DiLexicalBlockFieldContext::scopeField() {
  return getRuleContext<LLVMIRParser::ScopeFieldContext>(0);
}

LLVMIRParser::FileFieldContext* LLVMIRParser::DiLexicalBlockFieldContext::fileField() {
  return getRuleContext<LLVMIRParser::FileFieldContext>(0);
}

LLVMIRParser::LineFieldContext* LLVMIRParser::DiLexicalBlockFieldContext::lineField() {
  return getRuleContext<LLVMIRParser::LineFieldContext>(0);
}

LLVMIRParser::ColumnFieldContext* LLVMIRParser::DiLexicalBlockFieldContext::columnField() {
  return getRuleContext<LLVMIRParser::ColumnFieldContext>(0);
}


size_t LLVMIRParser::DiLexicalBlockFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiLexicalBlockField;
}


std::any LLVMIRParser::DiLexicalBlockFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiLexicalBlockField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiLexicalBlockFieldContext* LLVMIRParser::diLexicalBlockField() {
  DiLexicalBlockFieldContext *_localctx = _tracker.createInstance<DiLexicalBlockFieldContext>(_ctx, getState());
  enterRule(_localctx, 526, LLVMIRParser::RuleDiLexicalBlockField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3616);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__462: {
        enterOuterAlt(_localctx, 1);
        setState(3612);
        scopeField();
        break;
      }

      case LLVMIRParser::T__429: {
        enterOuterAlt(_localctx, 2);
        setState(3613);
        fileField();
        break;
      }

      case LLVMIRParser::T__445: {
        enterOuterAlt(_localctx, 3);
        setState(3614);
        lineField();
        break;
      }

      case LLVMIRParser::T__406: {
        enterOuterAlt(_localctx, 4);
        setState(3615);
        columnField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiLexicalBlockFileContext ------------------------------------------------------------------

LLVMIRParser::DiLexicalBlockFileContext::DiLexicalBlockFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiLexicalBlockFileFieldContext *> LLVMIRParser::DiLexicalBlockFileContext::diLexicalBlockFileField() {
  return getRuleContexts<LLVMIRParser::DiLexicalBlockFileFieldContext>();
}

LLVMIRParser::DiLexicalBlockFileFieldContext* LLVMIRParser::DiLexicalBlockFileContext::diLexicalBlockFileField(size_t i) {
  return getRuleContext<LLVMIRParser::DiLexicalBlockFileFieldContext>(i);
}


size_t LLVMIRParser::DiLexicalBlockFileContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiLexicalBlockFile;
}


std::any LLVMIRParser::DiLexicalBlockFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiLexicalBlockFile(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiLexicalBlockFileContext* LLVMIRParser::diLexicalBlockFile() {
  DiLexicalBlockFileContext *_localctx = _tracker.createInstance<DiLexicalBlockFileContext>(_ctx, getState());
  enterRule(_localctx, 528, LLVMIRParser::RuleDiLexicalBlockFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3618);
    match(LLVMIRParser::T__372);
    setState(3619);
    match(LLVMIRParser::T__25);
    setState(3628);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 414) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 414)) & 562949953486849) != 0)) {
      setState(3620);
      diLexicalBlockFileField();
      setState(3625);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3621);
        match(LLVMIRParser::T__14);
        setState(3622);
        diLexicalBlockFileField();
        setState(3627);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3630);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiLexicalBlockFileFieldContext ------------------------------------------------------------------

LLVMIRParser::DiLexicalBlockFileFieldContext::DiLexicalBlockFileFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::ScopeFieldContext* LLVMIRParser::DiLexicalBlockFileFieldContext::scopeField() {
  return getRuleContext<LLVMIRParser::ScopeFieldContext>(0);
}

LLVMIRParser::FileFieldContext* LLVMIRParser::DiLexicalBlockFileFieldContext::fileField() {
  return getRuleContext<LLVMIRParser::FileFieldContext>(0);
}

LLVMIRParser::DiscriminatorIntFieldContext* LLVMIRParser::DiLexicalBlockFileFieldContext::discriminatorIntField() {
  return getRuleContext<LLVMIRParser::DiscriminatorIntFieldContext>(0);
}


size_t LLVMIRParser::DiLexicalBlockFileFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiLexicalBlockFileField;
}


std::any LLVMIRParser::DiLexicalBlockFileFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiLexicalBlockFileField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiLexicalBlockFileFieldContext* LLVMIRParser::diLexicalBlockFileField() {
  DiLexicalBlockFileFieldContext *_localctx = _tracker.createInstance<DiLexicalBlockFileFieldContext>(_ctx, getState());
  enterRule(_localctx, 530, LLVMIRParser::RuleDiLexicalBlockFileField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3635);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__462: {
        enterOuterAlt(_localctx, 1);
        setState(3632);
        scopeField();
        break;
      }

      case LLVMIRParser::T__429: {
        enterOuterAlt(_localctx, 2);
        setState(3633);
        fileField();
        break;
      }

      case LLVMIRParser::T__413: {
        enterOuterAlt(_localctx, 3);
        setState(3634);
        discriminatorIntField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiLocalVariableContext ------------------------------------------------------------------

LLVMIRParser::DiLocalVariableContext::DiLocalVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiLocalVariableFieldContext *> LLVMIRParser::DiLocalVariableContext::diLocalVariableField() {
  return getRuleContexts<LLVMIRParser::DiLocalVariableFieldContext>();
}

LLVMIRParser::DiLocalVariableFieldContext* LLVMIRParser::DiLocalVariableContext::diLocalVariableField(size_t i) {
  return getRuleContext<LLVMIRParser::DiLocalVariableFieldContext>(i);
}


size_t LLVMIRParser::DiLocalVariableContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiLocalVariable;
}


std::any LLVMIRParser::DiLocalVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiLocalVariable(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiLocalVariableContext* LLVMIRParser::diLocalVariable() {
  DiLocalVariableContext *_localctx = _tracker.createInstance<DiLocalVariableContext>(_ctx, getState());
  enterRule(_localctx, 532, LLVMIRParser::RuleDiLocalVariable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3637);
    match(LLVMIRParser::T__373);
    setState(3638);
    match(LLVMIRParser::T__25);
    setState(3647);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 391) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 391)) & 36029346774779539) != 0) || _la == LLVMIRParser::T__462) {
      setState(3639);
      diLocalVariableField();
      setState(3644);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3640);
        match(LLVMIRParser::T__14);
        setState(3641);
        diLocalVariableField();
        setState(3646);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3649);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiLocalVariableFieldContext ------------------------------------------------------------------

LLVMIRParser::DiLocalVariableFieldContext::DiLocalVariableFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::ScopeFieldContext* LLVMIRParser::DiLocalVariableFieldContext::scopeField() {
  return getRuleContext<LLVMIRParser::ScopeFieldContext>(0);
}

LLVMIRParser::NameFieldContext* LLVMIRParser::DiLocalVariableFieldContext::nameField() {
  return getRuleContext<LLVMIRParser::NameFieldContext>(0);
}

LLVMIRParser::ArgFieldContext* LLVMIRParser::DiLocalVariableFieldContext::argField() {
  return getRuleContext<LLVMIRParser::ArgFieldContext>(0);
}

LLVMIRParser::FileFieldContext* LLVMIRParser::DiLocalVariableFieldContext::fileField() {
  return getRuleContext<LLVMIRParser::FileFieldContext>(0);
}

LLVMIRParser::LineFieldContext* LLVMIRParser::DiLocalVariableFieldContext::lineField() {
  return getRuleContext<LLVMIRParser::LineFieldContext>(0);
}

LLVMIRParser::TypeFieldContext* LLVMIRParser::DiLocalVariableFieldContext::typeField() {
  return getRuleContext<LLVMIRParser::TypeFieldContext>(0);
}

LLVMIRParser::FlagsFieldContext* LLVMIRParser::DiLocalVariableFieldContext::flagsField() {
  return getRuleContext<LLVMIRParser::FlagsFieldContext>(0);
}

LLVMIRParser::AlignFieldContext* LLVMIRParser::DiLocalVariableFieldContext::alignField() {
  return getRuleContext<LLVMIRParser::AlignFieldContext>(0);
}

LLVMIRParser::AnnotationsFieldContext* LLVMIRParser::DiLocalVariableFieldContext::annotationsField() {
  return getRuleContext<LLVMIRParser::AnnotationsFieldContext>(0);
}


size_t LLVMIRParser::DiLocalVariableFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiLocalVariableField;
}


std::any LLVMIRParser::DiLocalVariableFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiLocalVariableField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiLocalVariableFieldContext* LLVMIRParser::diLocalVariableField() {
  DiLocalVariableFieldContext *_localctx = _tracker.createInstance<DiLocalVariableFieldContext>(_ctx, getState());
  enterRule(_localctx, 534, LLVMIRParser::RuleDiLocalVariableField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3660);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__462: {
        enterOuterAlt(_localctx, 1);
        setState(3651);
        scopeField();
        break;
      }

      case LLVMIRParser::T__390: {
        enterOuterAlt(_localctx, 2);
        setState(3652);
        nameField();
        break;
      }

      case LLVMIRParser::T__400: {
        enterOuterAlt(_localctx, 3);
        setState(3653);
        argField();
        break;
      }

      case LLVMIRParser::T__429: {
        enterOuterAlt(_localctx, 4);
        setState(3654);
        fileField();
        break;
      }

      case LLVMIRParser::T__445: {
        enterOuterAlt(_localctx, 5);
        setState(3655);
        lineField();
        break;
      }

      case LLVMIRParser::T__391: {
        enterOuterAlt(_localctx, 6);
        setState(3656);
        typeField();
        break;
      }

      case LLVMIRParser::T__394: {
        enterOuterAlt(_localctx, 7);
        setState(3657);
        flagsField();
        break;
      }

      case LLVMIRParser::T__397: {
        enterOuterAlt(_localctx, 8);
        setState(3658);
        alignField();
        break;
      }

      case LLVMIRParser::T__399: {
        enterOuterAlt(_localctx, 9);
        setState(3659);
        annotationsField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiLocationContext ------------------------------------------------------------------

LLVMIRParser::DiLocationContext::DiLocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiLocationFieldContext *> LLVMIRParser::DiLocationContext::diLocationField() {
  return getRuleContexts<LLVMIRParser::DiLocationFieldContext>();
}

LLVMIRParser::DiLocationFieldContext* LLVMIRParser::DiLocationContext::diLocationField(size_t i) {
  return getRuleContext<LLVMIRParser::DiLocationFieldContext>(i);
}


size_t LLVMIRParser::DiLocationContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiLocation;
}


std::any LLVMIRParser::DiLocationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiLocation(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiLocationContext* LLVMIRParser::diLocation() {
  DiLocationContext *_localctx = _tracker.createInstance<DiLocationContext>(_ctx, getState());
  enterRule(_localctx, 536, LLVMIRParser::RuleDiLocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3662);
    match(LLVMIRParser::T__374);
    setState(3663);
    match(LLVMIRParser::T__25);
    setState(3672);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 407) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 407)) & 72058153457418241) != 0)) {
      setState(3664);
      diLocationField();
      setState(3669);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3665);
        match(LLVMIRParser::T__14);
        setState(3666);
        diLocationField();
        setState(3671);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3674);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiLocationFieldContext ------------------------------------------------------------------

LLVMIRParser::DiLocationFieldContext::DiLocationFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::LineFieldContext* LLVMIRParser::DiLocationFieldContext::lineField() {
  return getRuleContext<LLVMIRParser::LineFieldContext>(0);
}

LLVMIRParser::ColumnFieldContext* LLVMIRParser::DiLocationFieldContext::columnField() {
  return getRuleContext<LLVMIRParser::ColumnFieldContext>(0);
}

LLVMIRParser::ScopeFieldContext* LLVMIRParser::DiLocationFieldContext::scopeField() {
  return getRuleContext<LLVMIRParser::ScopeFieldContext>(0);
}

LLVMIRParser::InlinedAtFieldContext* LLVMIRParser::DiLocationFieldContext::inlinedAtField() {
  return getRuleContext<LLVMIRParser::InlinedAtFieldContext>(0);
}

LLVMIRParser::IsImplicitCodeFieldContext* LLVMIRParser::DiLocationFieldContext::isImplicitCodeField() {
  return getRuleContext<LLVMIRParser::IsImplicitCodeFieldContext>(0);
}


size_t LLVMIRParser::DiLocationFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiLocationField;
}


std::any LLVMIRParser::DiLocationFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiLocationField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiLocationFieldContext* LLVMIRParser::diLocationField() {
  DiLocationFieldContext *_localctx = _tracker.createInstance<DiLocationFieldContext>(_ctx, getState());
  enterRule(_localctx, 538, LLVMIRParser::RuleDiLocationField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3681);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__445: {
        enterOuterAlt(_localctx, 1);
        setState(3676);
        lineField();
        break;
      }

      case LLVMIRParser::T__406: {
        enterOuterAlt(_localctx, 2);
        setState(3677);
        columnField();
        break;
      }

      case LLVMIRParser::T__462: {
        enterOuterAlt(_localctx, 3);
        setState(3678);
        scopeField();
        break;
      }

      case LLVMIRParser::T__436: {
        enterOuterAlt(_localctx, 4);
        setState(3679);
        inlinedAtField();
        break;
      }

      case LLVMIRParser::T__439: {
        enterOuterAlt(_localctx, 5);
        setState(3680);
        isImplicitCodeField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiMacroContext ------------------------------------------------------------------

LLVMIRParser::DiMacroContext::DiMacroContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiMacroFieldContext *> LLVMIRParser::DiMacroContext::diMacroField() {
  return getRuleContexts<LLVMIRParser::DiMacroFieldContext>();
}

LLVMIRParser::DiMacroFieldContext* LLVMIRParser::DiMacroContext::diMacroField(size_t i) {
  return getRuleContext<LLVMIRParser::DiMacroFieldContext>(i);
}


size_t LLVMIRParser::DiMacroContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiMacro;
}


std::any LLVMIRParser::DiMacroContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiMacro(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiMacroContext* LLVMIRParser::diMacro() {
  DiMacroContext *_localctx = _tracker.createInstance<DiMacroContext>(_ctx, getState());
  enterRule(_localctx, 540, LLVMIRParser::RuleDiMacro);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3683);
    match(LLVMIRParser::T__375);
    setState(3684);
    match(LLVMIRParser::T__25);
    setState(3693);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 391) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 391)) & 36028797018963979) != 0)) {
      setState(3685);
      diMacroField();
      setState(3690);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3686);
        match(LLVMIRParser::T__14);
        setState(3687);
        diMacroField();
        setState(3692);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3695);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiMacroFieldContext ------------------------------------------------------------------

LLVMIRParser::DiMacroFieldContext::DiMacroFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeMacinfoFieldContext* LLVMIRParser::DiMacroFieldContext::typeMacinfoField() {
  return getRuleContext<LLVMIRParser::TypeMacinfoFieldContext>(0);
}

LLVMIRParser::LineFieldContext* LLVMIRParser::DiMacroFieldContext::lineField() {
  return getRuleContext<LLVMIRParser::LineFieldContext>(0);
}

LLVMIRParser::NameFieldContext* LLVMIRParser::DiMacroFieldContext::nameField() {
  return getRuleContext<LLVMIRParser::NameFieldContext>(0);
}

LLVMIRParser::ValueStringFieldContext* LLVMIRParser::DiMacroFieldContext::valueStringField() {
  return getRuleContext<LLVMIRParser::ValueStringFieldContext>(0);
}


size_t LLVMIRParser::DiMacroFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiMacroField;
}


std::any LLVMIRParser::DiMacroFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiMacroField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiMacroFieldContext* LLVMIRParser::diMacroField() {
  DiMacroFieldContext *_localctx = _tracker.createInstance<DiMacroFieldContext>(_ctx, getState());
  enterRule(_localctx, 542, LLVMIRParser::RuleDiMacroField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3701);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__391: {
        enterOuterAlt(_localctx, 1);
        setState(3697);
        typeMacinfoField();
        break;
      }

      case LLVMIRParser::T__445: {
        enterOuterAlt(_localctx, 2);
        setState(3698);
        lineField();
        break;
      }

      case LLVMIRParser::T__390: {
        enterOuterAlt(_localctx, 3);
        setState(3699);
        nameField();
        break;
      }

      case LLVMIRParser::T__393: {
        enterOuterAlt(_localctx, 4);
        setState(3700);
        valueStringField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiMacroFileContext ------------------------------------------------------------------

LLVMIRParser::DiMacroFileContext::DiMacroFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiMacroFileFieldContext *> LLVMIRParser::DiMacroFileContext::diMacroFileField() {
  return getRuleContexts<LLVMIRParser::DiMacroFileFieldContext>();
}

LLVMIRParser::DiMacroFileFieldContext* LLVMIRParser::DiMacroFileContext::diMacroFileField(size_t i) {
  return getRuleContext<LLVMIRParser::DiMacroFileFieldContext>(i);
}


size_t LLVMIRParser::DiMacroFileContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiMacroFile;
}


std::any LLVMIRParser::DiMacroFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiMacroFile(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiMacroFileContext* LLVMIRParser::diMacroFile() {
  DiMacroFileContext *_localctx = _tracker.createInstance<DiMacroFileContext>(_ctx, getState());
  enterRule(_localctx, 544, LLVMIRParser::RuleDiMacroFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3703);
    match(LLVMIRParser::T__376);
    setState(3704);
    match(LLVMIRParser::T__25);
    setState(3713);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 392) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 392)) & 4629700691814776833) != 0)) {
      setState(3705);
      diMacroFileField();
      setState(3710);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3706);
        match(LLVMIRParser::T__14);
        setState(3707);
        diMacroFileField();
        setState(3712);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3715);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiMacroFileFieldContext ------------------------------------------------------------------

LLVMIRParser::DiMacroFileFieldContext::DiMacroFileFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TypeMacinfoFieldContext* LLVMIRParser::DiMacroFileFieldContext::typeMacinfoField() {
  return getRuleContext<LLVMIRParser::TypeMacinfoFieldContext>(0);
}

LLVMIRParser::LineFieldContext* LLVMIRParser::DiMacroFileFieldContext::lineField() {
  return getRuleContext<LLVMIRParser::LineFieldContext>(0);
}

LLVMIRParser::FileFieldContext* LLVMIRParser::DiMacroFileFieldContext::fileField() {
  return getRuleContext<LLVMIRParser::FileFieldContext>(0);
}

LLVMIRParser::NodesFieldContext* LLVMIRParser::DiMacroFileFieldContext::nodesField() {
  return getRuleContext<LLVMIRParser::NodesFieldContext>(0);
}


size_t LLVMIRParser::DiMacroFileFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiMacroFileField;
}


std::any LLVMIRParser::DiMacroFileFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiMacroFileField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiMacroFileFieldContext* LLVMIRParser::diMacroFileField() {
  DiMacroFileFieldContext *_localctx = _tracker.createInstance<DiMacroFileFieldContext>(_ctx, getState());
  enterRule(_localctx, 546, LLVMIRParser::RuleDiMacroFileField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3721);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__391: {
        enterOuterAlt(_localctx, 1);
        setState(3717);
        typeMacinfoField();
        break;
      }

      case LLVMIRParser::T__445: {
        enterOuterAlt(_localctx, 2);
        setState(3718);
        lineField();
        break;
      }

      case LLVMIRParser::T__429: {
        enterOuterAlt(_localctx, 3);
        setState(3719);
        fileField();
        break;
      }

      case LLVMIRParser::T__453: {
        enterOuterAlt(_localctx, 4);
        setState(3720);
        nodesField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiModuleContext ------------------------------------------------------------------

LLVMIRParser::DiModuleContext::DiModuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiModuleFieldContext *> LLVMIRParser::DiModuleContext::diModuleField() {
  return getRuleContexts<LLVMIRParser::DiModuleFieldContext>();
}

LLVMIRParser::DiModuleFieldContext* LLVMIRParser::DiModuleContext::diModuleField(size_t i) {
  return getRuleContext<LLVMIRParser::DiModuleFieldContext>(i);
}


size_t LLVMIRParser::DiModuleContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiModule;
}


std::any LLVMIRParser::DiModuleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiModule(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiModuleContext* LLVMIRParser::diModule() {
  DiModuleContext *_localctx = _tracker.createInstance<DiModuleContext>(_ctx, getState());
  enterRule(_localctx, 548, LLVMIRParser::RuleDiModule);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3723);
    match(LLVMIRParser::T__377);
    setState(3724);
    match(LLVMIRParser::T__25);
    setState(3733);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 391) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 391)) & 45212467890094081) != 0) || _la == LLVMIRParser::T__462) {
      setState(3725);
      diModuleField();
      setState(3730);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3726);
        match(LLVMIRParser::T__14);
        setState(3727);
        diModuleField();
        setState(3732);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3735);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiModuleFieldContext ------------------------------------------------------------------

LLVMIRParser::DiModuleFieldContext::DiModuleFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::ScopeFieldContext* LLVMIRParser::DiModuleFieldContext::scopeField() {
  return getRuleContext<LLVMIRParser::ScopeFieldContext>(0);
}

LLVMIRParser::NameFieldContext* LLVMIRParser::DiModuleFieldContext::nameField() {
  return getRuleContext<LLVMIRParser::NameFieldContext>(0);
}

LLVMIRParser::ConfigMacrosFieldContext* LLVMIRParser::DiModuleFieldContext::configMacrosField() {
  return getRuleContext<LLVMIRParser::ConfigMacrosFieldContext>(0);
}

LLVMIRParser::IncludePathFieldContext* LLVMIRParser::DiModuleFieldContext::includePathField() {
  return getRuleContext<LLVMIRParser::IncludePathFieldContext>(0);
}

LLVMIRParser::ApiNotesFieldContext* LLVMIRParser::DiModuleFieldContext::apiNotesField() {
  return getRuleContext<LLVMIRParser::ApiNotesFieldContext>(0);
}

LLVMIRParser::FileFieldContext* LLVMIRParser::DiModuleFieldContext::fileField() {
  return getRuleContext<LLVMIRParser::FileFieldContext>(0);
}

LLVMIRParser::LineFieldContext* LLVMIRParser::DiModuleFieldContext::lineField() {
  return getRuleContext<LLVMIRParser::LineFieldContext>(0);
}

LLVMIRParser::IsDeclFieldContext* LLVMIRParser::DiModuleFieldContext::isDeclField() {
  return getRuleContext<LLVMIRParser::IsDeclFieldContext>(0);
}


size_t LLVMIRParser::DiModuleFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiModuleField;
}


std::any LLVMIRParser::DiModuleFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiModuleField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiModuleFieldContext* LLVMIRParser::diModuleField() {
  DiModuleFieldContext *_localctx = _tracker.createInstance<DiModuleFieldContext>(_ctx, getState());
  enterRule(_localctx, 550, LLVMIRParser::RuleDiModuleField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3745);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__462: {
        enterOuterAlt(_localctx, 1);
        setState(3737);
        scopeField();
        break;
      }

      case LLVMIRParser::T__390: {
        enterOuterAlt(_localctx, 2);
        setState(3738);
        nameField();
        break;
      }

      case LLVMIRParser::T__407: {
        enterOuterAlt(_localctx, 3);
        setState(3739);
        configMacrosField();
        break;
      }

      case LLVMIRParser::T__435: {
        enterOuterAlt(_localctx, 4);
        setState(3740);
        includePathField();
        break;
      }

      case LLVMIRParser::T__443: {
        enterOuterAlt(_localctx, 5);
        setState(3741);
        apiNotesField();
        break;
      }

      case LLVMIRParser::T__429: {
        enterOuterAlt(_localctx, 6);
        setState(3742);
        fileField();
        break;
      }

      case LLVMIRParser::T__445: {
        enterOuterAlt(_localctx, 7);
        setState(3743);
        lineField();
        break;
      }

      case LLVMIRParser::T__437: {
        enterOuterAlt(_localctx, 8);
        setState(3744);
        isDeclField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiNamespaceContext ------------------------------------------------------------------

LLVMIRParser::DiNamespaceContext::DiNamespaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiNamespaceFieldContext *> LLVMIRParser::DiNamespaceContext::diNamespaceField() {
  return getRuleContexts<LLVMIRParser::DiNamespaceFieldContext>();
}

LLVMIRParser::DiNamespaceFieldContext* LLVMIRParser::DiNamespaceContext::diNamespaceField(size_t i) {
  return getRuleContext<LLVMIRParser::DiNamespaceFieldContext>(i);
}


size_t LLVMIRParser::DiNamespaceContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiNamespace;
}


std::any LLVMIRParser::DiNamespaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiNamespace(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiNamespaceContext* LLVMIRParser::diNamespace() {
  DiNamespaceContext *_localctx = _tracker.createInstance<DiNamespaceContext>(_ctx, getState());
  enterRule(_localctx, 552, LLVMIRParser::RuleDiNamespace);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3747);
    match(LLVMIRParser::T__378);
    setState(3748);
    match(LLVMIRParser::T__25);
    setState(3757);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__390

    || _la == LLVMIRParser::T__426 || _la == LLVMIRParser::T__462) {
      setState(3749);
      diNamespaceField();
      setState(3754);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3750);
        match(LLVMIRParser::T__14);
        setState(3751);
        diNamespaceField();
        setState(3756);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3759);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiNamespaceFieldContext ------------------------------------------------------------------

LLVMIRParser::DiNamespaceFieldContext::DiNamespaceFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::ScopeFieldContext* LLVMIRParser::DiNamespaceFieldContext::scopeField() {
  return getRuleContext<LLVMIRParser::ScopeFieldContext>(0);
}

LLVMIRParser::NameFieldContext* LLVMIRParser::DiNamespaceFieldContext::nameField() {
  return getRuleContext<LLVMIRParser::NameFieldContext>(0);
}

LLVMIRParser::ExportSymbolsFieldContext* LLVMIRParser::DiNamespaceFieldContext::exportSymbolsField() {
  return getRuleContext<LLVMIRParser::ExportSymbolsFieldContext>(0);
}


size_t LLVMIRParser::DiNamespaceFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiNamespaceField;
}


std::any LLVMIRParser::DiNamespaceFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiNamespaceField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiNamespaceFieldContext* LLVMIRParser::diNamespaceField() {
  DiNamespaceFieldContext *_localctx = _tracker.createInstance<DiNamespaceFieldContext>(_ctx, getState());
  enterRule(_localctx, 554, LLVMIRParser::RuleDiNamespaceField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3764);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__462: {
        enterOuterAlt(_localctx, 1);
        setState(3761);
        scopeField();
        break;
      }

      case LLVMIRParser::T__390: {
        enterOuterAlt(_localctx, 2);
        setState(3762);
        nameField();
        break;
      }

      case LLVMIRParser::T__426: {
        enterOuterAlt(_localctx, 3);
        setState(3763);
        exportSymbolsField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiObjCPropertyContext ------------------------------------------------------------------

LLVMIRParser::DiObjCPropertyContext::DiObjCPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiObjCPropertyFieldContext *> LLVMIRParser::DiObjCPropertyContext::diObjCPropertyField() {
  return getRuleContexts<LLVMIRParser::DiObjCPropertyFieldContext>();
}

LLVMIRParser::DiObjCPropertyFieldContext* LLVMIRParser::DiObjCPropertyContext::diObjCPropertyField(size_t i) {
  return getRuleContext<LLVMIRParser::DiObjCPropertyFieldContext>(i);
}


size_t LLVMIRParser::DiObjCPropertyContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiObjCProperty;
}


std::any LLVMIRParser::DiObjCPropertyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiObjCProperty(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiObjCPropertyContext* LLVMIRParser::diObjCProperty() {
  DiObjCPropertyContext *_localctx = _tracker.createInstance<DiObjCPropertyContext>(_ctx, getState());
  enterRule(_localctx, 556, LLVMIRParser::RuleDiObjCProperty);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3766);
    match(LLVMIRParser::T__379);
    setState(3767);
    match(LLVMIRParser::T__25);
    setState(3776);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 391) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 391)) & 36031545798037507) != 0) || _la == LLVMIRParser::T__465) {
      setState(3768);
      diObjCPropertyField();
      setState(3773);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3769);
        match(LLVMIRParser::T__14);
        setState(3770);
        diObjCPropertyField();
        setState(3775);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3778);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiObjCPropertyFieldContext ------------------------------------------------------------------

LLVMIRParser::DiObjCPropertyFieldContext::DiObjCPropertyFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::NameFieldContext* LLVMIRParser::DiObjCPropertyFieldContext::nameField() {
  return getRuleContext<LLVMIRParser::NameFieldContext>(0);
}

LLVMIRParser::FileFieldContext* LLVMIRParser::DiObjCPropertyFieldContext::fileField() {
  return getRuleContext<LLVMIRParser::FileFieldContext>(0);
}

LLVMIRParser::LineFieldContext* LLVMIRParser::DiObjCPropertyFieldContext::lineField() {
  return getRuleContext<LLVMIRParser::LineFieldContext>(0);
}

LLVMIRParser::SetterFieldContext* LLVMIRParser::DiObjCPropertyFieldContext::setterField() {
  return getRuleContext<LLVMIRParser::SetterFieldContext>(0);
}

LLVMIRParser::GetterFieldContext* LLVMIRParser::DiObjCPropertyFieldContext::getterField() {
  return getRuleContext<LLVMIRParser::GetterFieldContext>(0);
}

LLVMIRParser::AttributesFieldContext* LLVMIRParser::DiObjCPropertyFieldContext::attributesField() {
  return getRuleContext<LLVMIRParser::AttributesFieldContext>(0);
}

LLVMIRParser::TypeFieldContext* LLVMIRParser::DiObjCPropertyFieldContext::typeField() {
  return getRuleContext<LLVMIRParser::TypeFieldContext>(0);
}


size_t LLVMIRParser::DiObjCPropertyFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiObjCPropertyField;
}


std::any LLVMIRParser::DiObjCPropertyFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiObjCPropertyField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiObjCPropertyFieldContext* LLVMIRParser::diObjCPropertyField() {
  DiObjCPropertyFieldContext *_localctx = _tracker.createInstance<DiObjCPropertyFieldContext>(_ctx, getState());
  enterRule(_localctx, 558, LLVMIRParser::RuleDiObjCPropertyField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3787);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__390: {
        enterOuterAlt(_localctx, 1);
        setState(3780);
        nameField();
        break;
      }

      case LLVMIRParser::T__429: {
        enterOuterAlt(_localctx, 2);
        setState(3781);
        fileField();
        break;
      }

      case LLVMIRParser::T__445: {
        enterOuterAlt(_localctx, 3);
        setState(3782);
        lineField();
        break;
      }

      case LLVMIRParser::T__465: {
        enterOuterAlt(_localctx, 4);
        setState(3783);
        setterField();
        break;
      }

      case LLVMIRParser::T__431: {
        enterOuterAlt(_localctx, 5);
        setState(3784);
        getterField();
        break;
      }

      case LLVMIRParser::T__402: {
        enterOuterAlt(_localctx, 6);
        setState(3785);
        attributesField();
        break;
      }

      case LLVMIRParser::T__391: {
        enterOuterAlt(_localctx, 7);
        setState(3786);
        typeField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiStringTypeContext ------------------------------------------------------------------

LLVMIRParser::DiStringTypeContext::DiStringTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiStringTypeFieldContext *> LLVMIRParser::DiStringTypeContext::diStringTypeField() {
  return getRuleContexts<LLVMIRParser::DiStringTypeFieldContext>();
}

LLVMIRParser::DiStringTypeFieldContext* LLVMIRParser::DiStringTypeContext::diStringTypeField(size_t i) {
  return getRuleContext<LLVMIRParser::DiStringTypeFieldContext>(i);
}


size_t LLVMIRParser::DiStringTypeContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiStringType;
}


std::any LLVMIRParser::DiStringTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiStringType(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiStringTypeContext* LLVMIRParser::diStringType() {
  DiStringTypeContext *_localctx = _tracker.createInstance<DiStringTypeContext>(_ctx, getState());
  enterRule(_localctx, 560, LLVMIRParser::RuleDiStringType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3789);
    match(LLVMIRParser::T__380);
    setState(3790);
    match(LLVMIRParser::T__25);
    setState(3799);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 388) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 388)) & 68719477769) != 0) || ((((_la - 467) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 467)) & 449) != 0)) {
      setState(3791);
      diStringTypeField();
      setState(3796);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3792);
        match(LLVMIRParser::T__14);
        setState(3793);
        diStringTypeField();
        setState(3798);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3801);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiStringTypeFieldContext ------------------------------------------------------------------

LLVMIRParser::DiStringTypeFieldContext::DiStringTypeFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TagFieldContext* LLVMIRParser::DiStringTypeFieldContext::tagField() {
  return getRuleContext<LLVMIRParser::TagFieldContext>(0);
}

LLVMIRParser::NameFieldContext* LLVMIRParser::DiStringTypeFieldContext::nameField() {
  return getRuleContext<LLVMIRParser::NameFieldContext>(0);
}

LLVMIRParser::StringLengthFieldContext* LLVMIRParser::DiStringTypeFieldContext::stringLengthField() {
  return getRuleContext<LLVMIRParser::StringLengthFieldContext>(0);
}

LLVMIRParser::StringLengthExpressionFieldContext* LLVMIRParser::DiStringTypeFieldContext::stringLengthExpressionField() {
  return getRuleContext<LLVMIRParser::StringLengthExpressionFieldContext>(0);
}

LLVMIRParser::StringLocationExpressionFieldContext* LLVMIRParser::DiStringTypeFieldContext::stringLocationExpressionField() {
  return getRuleContext<LLVMIRParser::StringLocationExpressionFieldContext>(0);
}

LLVMIRParser::SizeFieldContext* LLVMIRParser::DiStringTypeFieldContext::sizeField() {
  return getRuleContext<LLVMIRParser::SizeFieldContext>(0);
}

LLVMIRParser::AlignFieldContext* LLVMIRParser::DiStringTypeFieldContext::alignField() {
  return getRuleContext<LLVMIRParser::AlignFieldContext>(0);
}

LLVMIRParser::EncodingFieldContext* LLVMIRParser::DiStringTypeFieldContext::encodingField() {
  return getRuleContext<LLVMIRParser::EncodingFieldContext>(0);
}


size_t LLVMIRParser::DiStringTypeFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiStringTypeField;
}


std::any LLVMIRParser::DiStringTypeFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiStringTypeField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiStringTypeFieldContext* LLVMIRParser::diStringTypeField() {
  DiStringTypeFieldContext *_localctx = _tracker.createInstance<DiStringTypeFieldContext>(_ctx, getState());
  enterRule(_localctx, 562, LLVMIRParser::RuleDiStringTypeField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3811);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__387: {
        enterOuterAlt(_localctx, 1);
        setState(3803);
        tagField();
        break;
      }

      case LLVMIRParser::T__390: {
        enterOuterAlt(_localctx, 2);
        setState(3804);
        nameField();
        break;
      }

      case LLVMIRParser::T__472: {
        enterOuterAlt(_localctx, 3);
        setState(3805);
        stringLengthField();
        break;
      }

      case LLVMIRParser::T__473: {
        enterOuterAlt(_localctx, 4);
        setState(3806);
        stringLengthExpressionField();
        break;
      }

      case LLVMIRParser::T__474: {
        enterOuterAlt(_localctx, 5);
        setState(3807);
        stringLocationExpressionField();
        break;
      }

      case LLVMIRParser::T__466: {
        enterOuterAlt(_localctx, 6);
        setState(3808);
        sizeField();
        break;
      }

      case LLVMIRParser::T__397: {
        enterOuterAlt(_localctx, 7);
        setState(3809);
        alignField();
        break;
      }

      case LLVMIRParser::T__423: {
        enterOuterAlt(_localctx, 8);
        setState(3810);
        encodingField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiSubprogramContext ------------------------------------------------------------------

LLVMIRParser::DiSubprogramContext::DiSubprogramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiSubprogramFieldContext *> LLVMIRParser::DiSubprogramContext::diSubprogramField() {
  return getRuleContexts<LLVMIRParser::DiSubprogramFieldContext>();
}

LLVMIRParser::DiSubprogramFieldContext* LLVMIRParser::DiSubprogramContext::diSubprogramField(size_t i) {
  return getRuleContext<LLVMIRParser::DiSubprogramFieldContext>(i);
}


size_t LLVMIRParser::DiSubprogramContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiSubprogram;
}


std::any LLVMIRParser::DiSubprogramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiSubprogram(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiSubprogramContext* LLVMIRParser::diSubprogram() {
  DiSubprogramContext *_localctx = _tracker.createInstance<DiSubprogramContext>(_ctx, getState());
  enterRule(_localctx, 564, LLVMIRParser::RuleDiSubprogram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3813);
    match(LLVMIRParser::T__381);
    setState(3814);
    match(LLVMIRParser::T__25);
    setState(3823);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 391) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 391)) & 111746115512304147) != 0) || ((((_la - 459) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 459)) & 213648433) != 0)) {
      setState(3815);
      diSubprogramField();
      setState(3820);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3816);
        match(LLVMIRParser::T__14);
        setState(3817);
        diSubprogramField();
        setState(3822);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3825);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiSubprogramFieldContext ------------------------------------------------------------------

LLVMIRParser::DiSubprogramFieldContext::DiSubprogramFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::ScopeFieldContext* LLVMIRParser::DiSubprogramFieldContext::scopeField() {
  return getRuleContext<LLVMIRParser::ScopeFieldContext>(0);
}

LLVMIRParser::NameFieldContext* LLVMIRParser::DiSubprogramFieldContext::nameField() {
  return getRuleContext<LLVMIRParser::NameFieldContext>(0);
}

LLVMIRParser::LinkageNameFieldContext* LLVMIRParser::DiSubprogramFieldContext::linkageNameField() {
  return getRuleContext<LLVMIRParser::LinkageNameFieldContext>(0);
}

LLVMIRParser::FileFieldContext* LLVMIRParser::DiSubprogramFieldContext::fileField() {
  return getRuleContext<LLVMIRParser::FileFieldContext>(0);
}

LLVMIRParser::LineFieldContext* LLVMIRParser::DiSubprogramFieldContext::lineField() {
  return getRuleContext<LLVMIRParser::LineFieldContext>(0);
}

LLVMIRParser::TypeFieldContext* LLVMIRParser::DiSubprogramFieldContext::typeField() {
  return getRuleContext<LLVMIRParser::TypeFieldContext>(0);
}

LLVMIRParser::IsLocalFieldContext* LLVMIRParser::DiSubprogramFieldContext::isLocalField() {
  return getRuleContext<LLVMIRParser::IsLocalFieldContext>(0);
}

LLVMIRParser::IsDefinitionFieldContext* LLVMIRParser::DiSubprogramFieldContext::isDefinitionField() {
  return getRuleContext<LLVMIRParser::IsDefinitionFieldContext>(0);
}

LLVMIRParser::ScopeLineFieldContext* LLVMIRParser::DiSubprogramFieldContext::scopeLineField() {
  return getRuleContext<LLVMIRParser::ScopeLineFieldContext>(0);
}

LLVMIRParser::ContainingTypeFieldContext* LLVMIRParser::DiSubprogramFieldContext::containingTypeField() {
  return getRuleContext<LLVMIRParser::ContainingTypeFieldContext>(0);
}

LLVMIRParser::VirtualityFieldContext* LLVMIRParser::DiSubprogramFieldContext::virtualityField() {
  return getRuleContext<LLVMIRParser::VirtualityFieldContext>(0);
}

LLVMIRParser::VirtualIndexFieldContext* LLVMIRParser::DiSubprogramFieldContext::virtualIndexField() {
  return getRuleContext<LLVMIRParser::VirtualIndexFieldContext>(0);
}

LLVMIRParser::ThisAdjustmentFieldContext* LLVMIRParser::DiSubprogramFieldContext::thisAdjustmentField() {
  return getRuleContext<LLVMIRParser::ThisAdjustmentFieldContext>(0);
}

LLVMIRParser::FlagsFieldContext* LLVMIRParser::DiSubprogramFieldContext::flagsField() {
  return getRuleContext<LLVMIRParser::FlagsFieldContext>(0);
}

LLVMIRParser::SpFlagsFieldContext* LLVMIRParser::DiSubprogramFieldContext::spFlagsField() {
  return getRuleContext<LLVMIRParser::SpFlagsFieldContext>(0);
}

LLVMIRParser::IsOptimizedFieldContext* LLVMIRParser::DiSubprogramFieldContext::isOptimizedField() {
  return getRuleContext<LLVMIRParser::IsOptimizedFieldContext>(0);
}

LLVMIRParser::UnitFieldContext* LLVMIRParser::DiSubprogramFieldContext::unitField() {
  return getRuleContext<LLVMIRParser::UnitFieldContext>(0);
}

LLVMIRParser::TemplateParamsFieldContext* LLVMIRParser::DiSubprogramFieldContext::templateParamsField() {
  return getRuleContext<LLVMIRParser::TemplateParamsFieldContext>(0);
}

LLVMIRParser::DeclarationFieldContext* LLVMIRParser::DiSubprogramFieldContext::declarationField() {
  return getRuleContext<LLVMIRParser::DeclarationFieldContext>(0);
}

LLVMIRParser::RetainedNodesFieldContext* LLVMIRParser::DiSubprogramFieldContext::retainedNodesField() {
  return getRuleContext<LLVMIRParser::RetainedNodesFieldContext>(0);
}

LLVMIRParser::ThrownTypesFieldContext* LLVMIRParser::DiSubprogramFieldContext::thrownTypesField() {
  return getRuleContext<LLVMIRParser::ThrownTypesFieldContext>(0);
}

LLVMIRParser::AnnotationsFieldContext* LLVMIRParser::DiSubprogramFieldContext::annotationsField() {
  return getRuleContext<LLVMIRParser::AnnotationsFieldContext>(0);
}

LLVMIRParser::TargetFuncNameFieldContext* LLVMIRParser::DiSubprogramFieldContext::targetFuncNameField() {
  return getRuleContext<LLVMIRParser::TargetFuncNameFieldContext>(0);
}


size_t LLVMIRParser::DiSubprogramFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiSubprogramField;
}


std::any LLVMIRParser::DiSubprogramFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiSubprogramField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiSubprogramFieldContext* LLVMIRParser::diSubprogramField() {
  DiSubprogramFieldContext *_localctx = _tracker.createInstance<DiSubprogramFieldContext>(_ctx, getState());
  enterRule(_localctx, 566, LLVMIRParser::RuleDiSubprogramField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3850);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__462: {
        enterOuterAlt(_localctx, 1);
        setState(3827);
        scopeField();
        break;
      }

      case LLVMIRParser::T__390: {
        enterOuterAlt(_localctx, 2);
        setState(3828);
        nameField();
        break;
      }

      case LLVMIRParser::T__446: {
        enterOuterAlt(_localctx, 3);
        setState(3829);
        linkageNameField();
        break;
      }

      case LLVMIRParser::T__429: {
        enterOuterAlt(_localctx, 4);
        setState(3830);
        fileField();
        break;
      }

      case LLVMIRParser::T__445: {
        enterOuterAlt(_localctx, 5);
        setState(3831);
        lineField();
        break;
      }

      case LLVMIRParser::T__391: {
        enterOuterAlt(_localctx, 6);
        setState(3832);
        typeField();
        break;
      }

      case LLVMIRParser::T__440: {
        enterOuterAlt(_localctx, 7);
        setState(3833);
        isLocalField();
        break;
      }

      case LLVMIRParser::T__438: {
        enterOuterAlt(_localctx, 8);
        setState(3834);
        isDefinitionField();
        break;
      }

      case LLVMIRParser::T__463: {
        enterOuterAlt(_localctx, 9);
        setState(3835);
        scopeLineField();
        break;
      }

      case LLVMIRParser::T__408: {
        enterOuterAlt(_localctx, 10);
        setState(3836);
        containingTypeField();
        break;
      }

      case LLVMIRParser::T__485: {
        enterOuterAlt(_localctx, 11);
        setState(3837);
        virtualityField();
        break;
      }

      case LLVMIRParser::T__484: {
        enterOuterAlt(_localctx, 12);
        setState(3838);
        virtualIndexField();
        break;
      }

      case LLVMIRParser::T__478: {
        enterOuterAlt(_localctx, 13);
        setState(3839);
        thisAdjustmentField();
        break;
      }

      case LLVMIRParser::T__394: {
        enterOuterAlt(_localctx, 14);
        setState(3840);
        flagsField();
        break;
      }

      case LLVMIRParser::T__468: {
        enterOuterAlt(_localctx, 15);
        setState(3841);
        spFlagsField();
        break;
      }

      case LLVMIRParser::T__441: {
        enterOuterAlt(_localctx, 16);
        setState(3842);
        isOptimizedField();
        break;
      }

      case LLVMIRParser::T__481: {
        enterOuterAlt(_localctx, 17);
        setState(3843);
        unitField();
        break;
      }

      case LLVMIRParser::T__477: {
        enterOuterAlt(_localctx, 18);
        setState(3844);
        templateParamsField();
        break;
      }

      case LLVMIRParser::T__411: {
        enterOuterAlt(_localctx, 19);
        setState(3845);
        declarationField();
        break;
      }

      case LLVMIRParser::T__458: {
        enterOuterAlt(_localctx, 20);
        setState(3846);
        retainedNodesField();
        break;
      }

      case LLVMIRParser::T__479: {
        enterOuterAlt(_localctx, 21);
        setState(3847);
        thrownTypesField();
        break;
      }

      case LLVMIRParser::T__399: {
        enterOuterAlt(_localctx, 22);
        setState(3848);
        annotationsField();
        break;
      }

      case LLVMIRParser::T__476: {
        enterOuterAlt(_localctx, 23);
        setState(3849);
        targetFuncNameField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiSubrangeContext ------------------------------------------------------------------

LLVMIRParser::DiSubrangeContext::DiSubrangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiSubrangeFieldContext *> LLVMIRParser::DiSubrangeContext::diSubrangeField() {
  return getRuleContexts<LLVMIRParser::DiSubrangeFieldContext>();
}

LLVMIRParser::DiSubrangeFieldContext* LLVMIRParser::DiSubrangeContext::diSubrangeField(size_t i) {
  return getRuleContext<LLVMIRParser::DiSubrangeFieldContext>(i);
}


size_t LLVMIRParser::DiSubrangeContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiSubrange;
}


std::any LLVMIRParser::DiSubrangeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiSubrange(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiSubrangeContext* LLVMIRParser::diSubrange() {
  DiSubrangeContext *_localctx = _tracker.createInstance<DiSubrangeContext>(_ctx, getState());
  enterRule(_localctx, 568, LLVMIRParser::RuleDiSubrange);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3852);
    match(LLVMIRParser::T__382);
    setState(3853);
    match(LLVMIRParser::T__25);
    setState(3862);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 410) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 410)) & 4611686293305294849) != 0) || _la == LLVMIRParser::T__482) {
      setState(3854);
      diSubrangeField();
      setState(3859);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3855);
        match(LLVMIRParser::T__14);
        setState(3856);
        diSubrangeField();
        setState(3861);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3864);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiSubrangeFieldContext ------------------------------------------------------------------

LLVMIRParser::DiSubrangeFieldContext::DiSubrangeFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::CountFieldContext* LLVMIRParser::DiSubrangeFieldContext::countField() {
  return getRuleContext<LLVMIRParser::CountFieldContext>(0);
}

LLVMIRParser::LowerBoundFieldContext* LLVMIRParser::DiSubrangeFieldContext::lowerBoundField() {
  return getRuleContext<LLVMIRParser::LowerBoundFieldContext>(0);
}

LLVMIRParser::UpperBoundFieldContext* LLVMIRParser::DiSubrangeFieldContext::upperBoundField() {
  return getRuleContext<LLVMIRParser::UpperBoundFieldContext>(0);
}

LLVMIRParser::StrideFieldContext* LLVMIRParser::DiSubrangeFieldContext::strideField() {
  return getRuleContext<LLVMIRParser::StrideFieldContext>(0);
}


size_t LLVMIRParser::DiSubrangeFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiSubrangeField;
}


std::any LLVMIRParser::DiSubrangeFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiSubrangeField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiSubrangeFieldContext* LLVMIRParser::diSubrangeField() {
  DiSubrangeFieldContext *_localctx = _tracker.createInstance<DiSubrangeFieldContext>(_ctx, getState());
  enterRule(_localctx, 570, LLVMIRParser::RuleDiSubrangeField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3870);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__409: {
        enterOuterAlt(_localctx, 1);
        setState(3866);
        countField();
        break;
      }

      case LLVMIRParser::T__447: {
        enterOuterAlt(_localctx, 2);
        setState(3867);
        lowerBoundField();
        break;
      }

      case LLVMIRParser::T__482: {
        enterOuterAlt(_localctx, 3);
        setState(3868);
        upperBoundField();
        break;
      }

      case LLVMIRParser::T__471: {
        enterOuterAlt(_localctx, 4);
        setState(3869);
        strideField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiSubroutineTypeContext ------------------------------------------------------------------

LLVMIRParser::DiSubroutineTypeContext::DiSubroutineTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiSubroutineTypeFieldContext *> LLVMIRParser::DiSubroutineTypeContext::diSubroutineTypeField() {
  return getRuleContexts<LLVMIRParser::DiSubroutineTypeFieldContext>();
}

LLVMIRParser::DiSubroutineTypeFieldContext* LLVMIRParser::DiSubroutineTypeContext::diSubroutineTypeField(size_t i) {
  return getRuleContext<LLVMIRParser::DiSubroutineTypeFieldContext>(i);
}


size_t LLVMIRParser::DiSubroutineTypeContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiSubroutineType;
}


std::any LLVMIRParser::DiSubroutineTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiSubroutineType(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiSubroutineTypeContext* LLVMIRParser::diSubroutineType() {
  DiSubroutineTypeContext *_localctx = _tracker.createInstance<DiSubroutineTypeContext>(_ctx, getState());
  enterRule(_localctx, 572, LLVMIRParser::RuleDiSubroutineType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3872);
    match(LLVMIRParser::T__383);
    setState(3873);
    match(LLVMIRParser::T__25);
    setState(3882);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LLVMIRParser::T__394

    || _la == LLVMIRParser::T__396 || _la == LLVMIRParser::T__480

    || _la == LLVMIRParser::IntLit) {
      setState(3874);
      diSubroutineTypeField();
      setState(3879);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3875);
        match(LLVMIRParser::T__14);
        setState(3876);
        diSubroutineTypeField();
        setState(3881);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3884);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiTemplateTypeParameterContext ------------------------------------------------------------------

LLVMIRParser::DiTemplateTypeParameterContext::DiTemplateTypeParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiTemplateTypeParameterFieldContext *> LLVMIRParser::DiTemplateTypeParameterContext::diTemplateTypeParameterField() {
  return getRuleContexts<LLVMIRParser::DiTemplateTypeParameterFieldContext>();
}

LLVMIRParser::DiTemplateTypeParameterFieldContext* LLVMIRParser::DiTemplateTypeParameterContext::diTemplateTypeParameterField(size_t i) {
  return getRuleContext<LLVMIRParser::DiTemplateTypeParameterFieldContext>(i);
}


size_t LLVMIRParser::DiTemplateTypeParameterContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiTemplateTypeParameter;
}


std::any LLVMIRParser::DiTemplateTypeParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiTemplateTypeParameter(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiTemplateTypeParameterContext* LLVMIRParser::diTemplateTypeParameter() {
  DiTemplateTypeParameterContext *_localctx = _tracker.createInstance<DiTemplateTypeParameterContext>(_ctx, getState());
  enterRule(_localctx, 574, LLVMIRParser::RuleDiTemplateTypeParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3886);
    match(LLVMIRParser::T__384);
    setState(3887);
    match(LLVMIRParser::T__25);
    setState(3896);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 391) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 391)) & 7) != 0)) {
      setState(3888);
      diTemplateTypeParameterField();
      setState(3893);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3889);
        match(LLVMIRParser::T__14);
        setState(3890);
        diTemplateTypeParameterField();
        setState(3895);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3898);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiTemplateValueParameterContext ------------------------------------------------------------------

LLVMIRParser::DiTemplateValueParameterContext::DiTemplateValueParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiTemplateValueParameterFieldContext *> LLVMIRParser::DiTemplateValueParameterContext::diTemplateValueParameterField() {
  return getRuleContexts<LLVMIRParser::DiTemplateValueParameterFieldContext>();
}

LLVMIRParser::DiTemplateValueParameterFieldContext* LLVMIRParser::DiTemplateValueParameterContext::diTemplateValueParameterField(size_t i) {
  return getRuleContext<LLVMIRParser::DiTemplateValueParameterFieldContext>(i);
}


size_t LLVMIRParser::DiTemplateValueParameterContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiTemplateValueParameter;
}


std::any LLVMIRParser::DiTemplateValueParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiTemplateValueParameter(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiTemplateValueParameterContext* LLVMIRParser::diTemplateValueParameter() {
  DiTemplateValueParameterContext *_localctx = _tracker.createInstance<DiTemplateValueParameterContext>(_ctx, getState());
  enterRule(_localctx, 576, LLVMIRParser::RuleDiTemplateValueParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3900);
    match(LLVMIRParser::T__385);
    setState(3901);
    match(LLVMIRParser::T__25);
    setState(3906);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 388) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 388)) & 121) != 0)) {
      setState(3902);
      diTemplateValueParameterField();

      setState(3903);
      match(LLVMIRParser::T__14);
      setState(3904);
      diTemplateValueParameterField();
    }
    setState(3908);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenericDiNodeContext ------------------------------------------------------------------

LLVMIRParser::GenericDiNodeContext::GenericDiNodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::GenericDINodeFieldContext *> LLVMIRParser::GenericDiNodeContext::genericDINodeField() {
  return getRuleContexts<LLVMIRParser::GenericDINodeFieldContext>();
}

LLVMIRParser::GenericDINodeFieldContext* LLVMIRParser::GenericDiNodeContext::genericDINodeField(size_t i) {
  return getRuleContext<LLVMIRParser::GenericDINodeFieldContext>(i);
}


size_t LLVMIRParser::GenericDiNodeContext::getRuleIndex() const {
  return LLVMIRParser::RuleGenericDiNode;
}


std::any LLVMIRParser::GenericDiNodeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitGenericDiNode(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::GenericDiNodeContext* LLVMIRParser::genericDiNode() {
  GenericDiNodeContext *_localctx = _tracker.createInstance<GenericDiNodeContext>(_ctx, getState());
  enterRule(_localctx, 578, LLVMIRParser::RuleGenericDiNode);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3910);
    match(LLVMIRParser::T__386);
    setState(3911);
    match(LLVMIRParser::T__25);
    setState(3920);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 388) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 388)) & 7) != 0)) {
      setState(3912);
      genericDINodeField();
      setState(3917);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3913);
        match(LLVMIRParser::T__14);
        setState(3914);
        genericDINodeField();
        setState(3919);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3922);
    match(LLVMIRParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiTemplateTypeParameterFieldContext ------------------------------------------------------------------

LLVMIRParser::DiTemplateTypeParameterFieldContext::DiTemplateTypeParameterFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::NameFieldContext* LLVMIRParser::DiTemplateTypeParameterFieldContext::nameField() {
  return getRuleContext<LLVMIRParser::NameFieldContext>(0);
}

LLVMIRParser::TypeFieldContext* LLVMIRParser::DiTemplateTypeParameterFieldContext::typeField() {
  return getRuleContext<LLVMIRParser::TypeFieldContext>(0);
}

LLVMIRParser::DefaultedFieldContext* LLVMIRParser::DiTemplateTypeParameterFieldContext::defaultedField() {
  return getRuleContext<LLVMIRParser::DefaultedFieldContext>(0);
}


size_t LLVMIRParser::DiTemplateTypeParameterFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiTemplateTypeParameterField;
}


std::any LLVMIRParser::DiTemplateTypeParameterFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiTemplateTypeParameterField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiTemplateTypeParameterFieldContext* LLVMIRParser::diTemplateTypeParameterField() {
  DiTemplateTypeParameterFieldContext *_localctx = _tracker.createInstance<DiTemplateTypeParameterFieldContext>(_ctx, getState());
  enterRule(_localctx, 580, LLVMIRParser::RuleDiTemplateTypeParameterField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3927);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__390: {
        enterOuterAlt(_localctx, 1);
        setState(3924);
        nameField();
        break;
      }

      case LLVMIRParser::T__391: {
        enterOuterAlt(_localctx, 2);
        setState(3925);
        typeField();
        break;
      }

      case LLVMIRParser::T__392: {
        enterOuterAlt(_localctx, 3);
        setState(3926);
        defaultedField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiCompileUnitFieldContext ------------------------------------------------------------------

LLVMIRParser::DiCompileUnitFieldContext::DiCompileUnitFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::LanguageFieldContext* LLVMIRParser::DiCompileUnitFieldContext::languageField() {
  return getRuleContext<LLVMIRParser::LanguageFieldContext>(0);
}

LLVMIRParser::FileFieldContext* LLVMIRParser::DiCompileUnitFieldContext::fileField() {
  return getRuleContext<LLVMIRParser::FileFieldContext>(0);
}

LLVMIRParser::ProducerFieldContext* LLVMIRParser::DiCompileUnitFieldContext::producerField() {
  return getRuleContext<LLVMIRParser::ProducerFieldContext>(0);
}

LLVMIRParser::IsOptimizedFieldContext* LLVMIRParser::DiCompileUnitFieldContext::isOptimizedField() {
  return getRuleContext<LLVMIRParser::IsOptimizedFieldContext>(0);
}

LLVMIRParser::FlagsStringFieldContext* LLVMIRParser::DiCompileUnitFieldContext::flagsStringField() {
  return getRuleContext<LLVMIRParser::FlagsStringFieldContext>(0);
}

LLVMIRParser::RuntimeVersionFieldContext* LLVMIRParser::DiCompileUnitFieldContext::runtimeVersionField() {
  return getRuleContext<LLVMIRParser::RuntimeVersionFieldContext>(0);
}

LLVMIRParser::SplitDebugFilenameFieldContext* LLVMIRParser::DiCompileUnitFieldContext::splitDebugFilenameField() {
  return getRuleContext<LLVMIRParser::SplitDebugFilenameFieldContext>(0);
}

LLVMIRParser::EmissionKindFieldContext* LLVMIRParser::DiCompileUnitFieldContext::emissionKindField() {
  return getRuleContext<LLVMIRParser::EmissionKindFieldContext>(0);
}

LLVMIRParser::EnumsFieldContext* LLVMIRParser::DiCompileUnitFieldContext::enumsField() {
  return getRuleContext<LLVMIRParser::EnumsFieldContext>(0);
}

LLVMIRParser::RetainedTypesFieldContext* LLVMIRParser::DiCompileUnitFieldContext::retainedTypesField() {
  return getRuleContext<LLVMIRParser::RetainedTypesFieldContext>(0);
}

LLVMIRParser::GlobalsFieldContext* LLVMIRParser::DiCompileUnitFieldContext::globalsField() {
  return getRuleContext<LLVMIRParser::GlobalsFieldContext>(0);
}

LLVMIRParser::ImportsFieldContext* LLVMIRParser::DiCompileUnitFieldContext::importsField() {
  return getRuleContext<LLVMIRParser::ImportsFieldContext>(0);
}

LLVMIRParser::MacrosFieldContext* LLVMIRParser::DiCompileUnitFieldContext::macrosField() {
  return getRuleContext<LLVMIRParser::MacrosFieldContext>(0);
}

LLVMIRParser::DwoIdFieldContext* LLVMIRParser::DiCompileUnitFieldContext::dwoIdField() {
  return getRuleContext<LLVMIRParser::DwoIdFieldContext>(0);
}

LLVMIRParser::SplitDebugInliningFieldContext* LLVMIRParser::DiCompileUnitFieldContext::splitDebugInliningField() {
  return getRuleContext<LLVMIRParser::SplitDebugInliningFieldContext>(0);
}

LLVMIRParser::DebugInfoForProfilingFieldContext* LLVMIRParser::DiCompileUnitFieldContext::debugInfoForProfilingField() {
  return getRuleContext<LLVMIRParser::DebugInfoForProfilingFieldContext>(0);
}

LLVMIRParser::NameTableKindFieldContext* LLVMIRParser::DiCompileUnitFieldContext::nameTableKindField() {
  return getRuleContext<LLVMIRParser::NameTableKindFieldContext>(0);
}

LLVMIRParser::RangesBaseAddressFieldContext* LLVMIRParser::DiCompileUnitFieldContext::rangesBaseAddressField() {
  return getRuleContext<LLVMIRParser::RangesBaseAddressFieldContext>(0);
}

LLVMIRParser::SysrootFieldContext* LLVMIRParser::DiCompileUnitFieldContext::sysrootField() {
  return getRuleContext<LLVMIRParser::SysrootFieldContext>(0);
}

LLVMIRParser::SdkFieldContext* LLVMIRParser::DiCompileUnitFieldContext::sdkField() {
  return getRuleContext<LLVMIRParser::SdkFieldContext>(0);
}


size_t LLVMIRParser::DiCompileUnitFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiCompileUnitField;
}


std::any LLVMIRParser::DiCompileUnitFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiCompileUnitField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiCompileUnitFieldContext* LLVMIRParser::diCompileUnitField() {
  DiCompileUnitFieldContext *_localctx = _tracker.createInstance<DiCompileUnitFieldContext>(_ctx, getState());
  enterRule(_localctx, 582, LLVMIRParser::RuleDiCompileUnitField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3949);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__444: {
        enterOuterAlt(_localctx, 1);
        setState(3929);
        languageField();
        break;
      }

      case LLVMIRParser::T__429: {
        enterOuterAlt(_localctx, 2);
        setState(3930);
        fileField();
        break;
      }

      case LLVMIRParser::T__455: {
        enterOuterAlt(_localctx, 3);
        setState(3931);
        producerField();
        break;
      }

      case LLVMIRParser::T__441: {
        enterOuterAlt(_localctx, 4);
        setState(3932);
        isOptimizedField();
        break;
      }

      case LLVMIRParser::T__394: {
        enterOuterAlt(_localctx, 5);
        setState(3933);
        flagsStringField();
        break;
      }

      case LLVMIRParser::T__461: {
        enterOuterAlt(_localctx, 6);
        setState(3934);
        runtimeVersionField();
        break;
      }

      case LLVMIRParser::T__469: {
        enterOuterAlt(_localctx, 7);
        setState(3935);
        splitDebugFilenameField();
        break;
      }

      case LLVMIRParser::T__418: {
        enterOuterAlt(_localctx, 8);
        setState(3936);
        emissionKindField();
        break;
      }

      case LLVMIRParser::T__425: {
        enterOuterAlt(_localctx, 9);
        setState(3937);
        enumsField();
        break;
      }

      case LLVMIRParser::T__459: {
        enterOuterAlt(_localctx, 10);
        setState(3938);
        retainedTypesField();
        break;
      }

      case LLVMIRParser::T__432: {
        enterOuterAlt(_localctx, 11);
        setState(3939);
        globalsField();
        break;
      }

      case LLVMIRParser::T__434: {
        enterOuterAlt(_localctx, 12);
        setState(3940);
        importsField();
        break;
      }

      case LLVMIRParser::T__448: {
        enterOuterAlt(_localctx, 13);
        setState(3941);
        macrosField();
        break;
      }

      case LLVMIRParser::T__416: {
        enterOuterAlt(_localctx, 14);
        setState(3942);
        dwoIdField();
        break;
      }

      case LLVMIRParser::T__470: {
        enterOuterAlt(_localctx, 15);
        setState(3943);
        splitDebugInliningField();
        break;
      }

      case LLVMIRParser::T__410: {
        enterOuterAlt(_localctx, 16);
        setState(3944);
        debugInfoForProfilingField();
        break;
      }

      case LLVMIRParser::T__449: {
        enterOuterAlt(_localctx, 17);
        setState(3945);
        nameTableKindField();
        break;
      }

      case LLVMIRParser::T__456: {
        enterOuterAlt(_localctx, 18);
        setState(3946);
        rangesBaseAddressField();
        break;
      }

      case LLVMIRParser::T__475: {
        enterOuterAlt(_localctx, 19);
        setState(3947);
        sysrootField();
        break;
      }

      case LLVMIRParser::T__464: {
        enterOuterAlt(_localctx, 20);
        setState(3948);
        sdkField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiCommonBlockFieldContext ------------------------------------------------------------------

LLVMIRParser::DiCommonBlockFieldContext::DiCommonBlockFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::ScopeFieldContext* LLVMIRParser::DiCommonBlockFieldContext::scopeField() {
  return getRuleContext<LLVMIRParser::ScopeFieldContext>(0);
}

LLVMIRParser::DeclarationFieldContext* LLVMIRParser::DiCommonBlockFieldContext::declarationField() {
  return getRuleContext<LLVMIRParser::DeclarationFieldContext>(0);
}

LLVMIRParser::NameFieldContext* LLVMIRParser::DiCommonBlockFieldContext::nameField() {
  return getRuleContext<LLVMIRParser::NameFieldContext>(0);
}

LLVMIRParser::FileFieldContext* LLVMIRParser::DiCommonBlockFieldContext::fileField() {
  return getRuleContext<LLVMIRParser::FileFieldContext>(0);
}

LLVMIRParser::LineFieldContext* LLVMIRParser::DiCommonBlockFieldContext::lineField() {
  return getRuleContext<LLVMIRParser::LineFieldContext>(0);
}


size_t LLVMIRParser::DiCommonBlockFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiCommonBlockField;
}


std::any LLVMIRParser::DiCommonBlockFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiCommonBlockField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiCommonBlockFieldContext* LLVMIRParser::diCommonBlockField() {
  DiCommonBlockFieldContext *_localctx = _tracker.createInstance<DiCommonBlockFieldContext>(_ctx, getState());
  enterRule(_localctx, 584, LLVMIRParser::RuleDiCommonBlockField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3956);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__462: {
        enterOuterAlt(_localctx, 1);
        setState(3951);
        scopeField();
        break;
      }

      case LLVMIRParser::T__411: {
        enterOuterAlt(_localctx, 2);
        setState(3952);
        declarationField();
        break;
      }

      case LLVMIRParser::T__390: {
        enterOuterAlt(_localctx, 3);
        setState(3953);
        nameField();
        break;
      }

      case LLVMIRParser::T__429: {
        enterOuterAlt(_localctx, 4);
        setState(3954);
        fileField();
        break;
      }

      case LLVMIRParser::T__445: {
        enterOuterAlt(_localctx, 5);
        setState(3955);
        lineField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiBasicTypeFieldContext ------------------------------------------------------------------

LLVMIRParser::DiBasicTypeFieldContext::DiBasicTypeFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TagFieldContext* LLVMIRParser::DiBasicTypeFieldContext::tagField() {
  return getRuleContext<LLVMIRParser::TagFieldContext>(0);
}

LLVMIRParser::NameFieldContext* LLVMIRParser::DiBasicTypeFieldContext::nameField() {
  return getRuleContext<LLVMIRParser::NameFieldContext>(0);
}

LLVMIRParser::SizeFieldContext* LLVMIRParser::DiBasicTypeFieldContext::sizeField() {
  return getRuleContext<LLVMIRParser::SizeFieldContext>(0);
}

LLVMIRParser::AlignFieldContext* LLVMIRParser::DiBasicTypeFieldContext::alignField() {
  return getRuleContext<LLVMIRParser::AlignFieldContext>(0);
}

LLVMIRParser::EncodingFieldContext* LLVMIRParser::DiBasicTypeFieldContext::encodingField() {
  return getRuleContext<LLVMIRParser::EncodingFieldContext>(0);
}

LLVMIRParser::FlagsFieldContext* LLVMIRParser::DiBasicTypeFieldContext::flagsField() {
  return getRuleContext<LLVMIRParser::FlagsFieldContext>(0);
}


size_t LLVMIRParser::DiBasicTypeFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiBasicTypeField;
}


std::any LLVMIRParser::DiBasicTypeFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiBasicTypeField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiBasicTypeFieldContext* LLVMIRParser::diBasicTypeField() {
  DiBasicTypeFieldContext *_localctx = _tracker.createInstance<DiBasicTypeFieldContext>(_ctx, getState());
  enterRule(_localctx, 586, LLVMIRParser::RuleDiBasicTypeField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3964);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__387: {
        enterOuterAlt(_localctx, 1);
        setState(3958);
        tagField();
        break;
      }

      case LLVMIRParser::T__390: {
        enterOuterAlt(_localctx, 2);
        setState(3959);
        nameField();
        break;
      }

      case LLVMIRParser::T__466: {
        enterOuterAlt(_localctx, 3);
        setState(3960);
        sizeField();
        break;
      }

      case LLVMIRParser::T__397: {
        enterOuterAlt(_localctx, 4);
        setState(3961);
        alignField();
        break;
      }

      case LLVMIRParser::T__423: {
        enterOuterAlt(_localctx, 5);
        setState(3962);
        encodingField();
        break;
      }

      case LLVMIRParser::T__394: {
        enterOuterAlt(_localctx, 6);
        setState(3963);
        flagsField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenericDINodeFieldContext ------------------------------------------------------------------

LLVMIRParser::GenericDINodeFieldContext::GenericDINodeFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TagFieldContext* LLVMIRParser::GenericDINodeFieldContext::tagField() {
  return getRuleContext<LLVMIRParser::TagFieldContext>(0);
}

LLVMIRParser::HeaderFieldContext* LLVMIRParser::GenericDINodeFieldContext::headerField() {
  return getRuleContext<LLVMIRParser::HeaderFieldContext>(0);
}

LLVMIRParser::OperandsFieldContext* LLVMIRParser::GenericDINodeFieldContext::operandsField() {
  return getRuleContext<LLVMIRParser::OperandsFieldContext>(0);
}


size_t LLVMIRParser::GenericDINodeFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleGenericDINodeField;
}


std::any LLVMIRParser::GenericDINodeFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitGenericDINodeField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::GenericDINodeFieldContext* LLVMIRParser::genericDINodeField() {
  GenericDINodeFieldContext *_localctx = _tracker.createInstance<GenericDINodeFieldContext>(_ctx, getState());
  enterRule(_localctx, 588, LLVMIRParser::RuleGenericDINodeField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3969);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__387: {
        enterOuterAlt(_localctx, 1);
        setState(3966);
        tagField();
        break;
      }

      case LLVMIRParser::T__388: {
        enterOuterAlt(_localctx, 2);
        setState(3967);
        headerField();
        break;
      }

      case LLVMIRParser::T__389: {
        enterOuterAlt(_localctx, 3);
        setState(3968);
        operandsField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TagFieldContext ------------------------------------------------------------------

LLVMIRParser::TagFieldContext::TagFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::TagFieldContext::DwarfTag() {
  return getToken(LLVMIRParser::DwarfTag, 0);
}


size_t LLVMIRParser::TagFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleTagField;
}


std::any LLVMIRParser::TagFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitTagField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::TagFieldContext* LLVMIRParser::tagField() {
  TagFieldContext *_localctx = _tracker.createInstance<TagFieldContext>(_ctx, getState());
  enterRule(_localctx, 590, LLVMIRParser::RuleTagField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3971);
    match(LLVMIRParser::T__387);
    setState(3972);
    match(LLVMIRParser::DwarfTag);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HeaderFieldContext ------------------------------------------------------------------

LLVMIRParser::HeaderFieldContext::HeaderFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::HeaderFieldContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::HeaderFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleHeaderField;
}


std::any LLVMIRParser::HeaderFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitHeaderField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::HeaderFieldContext* LLVMIRParser::headerField() {
  HeaderFieldContext *_localctx = _tracker.createInstance<HeaderFieldContext>(_ctx, getState());
  enterRule(_localctx, 592, LLVMIRParser::RuleHeaderField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3974);
    match(LLVMIRParser::T__388);
    setState(3975);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OperandsFieldContext ------------------------------------------------------------------

LLVMIRParser::OperandsFieldContext::OperandsFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::MdFieldContext *> LLVMIRParser::OperandsFieldContext::mdField() {
  return getRuleContexts<LLVMIRParser::MdFieldContext>();
}

LLVMIRParser::MdFieldContext* LLVMIRParser::OperandsFieldContext::mdField(size_t i) {
  return getRuleContext<LLVMIRParser::MdFieldContext>(i);
}


size_t LLVMIRParser::OperandsFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleOperandsField;
}


std::any LLVMIRParser::OperandsFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitOperandsField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::OperandsFieldContext* LLVMIRParser::operandsField() {
  OperandsFieldContext *_localctx = _tracker.createInstance<OperandsFieldContext>(_ctx, getState());
  enterRule(_localctx, 594, LLVMIRParser::RuleOperandsField);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3977);
    match(LLVMIRParser::T__389);
    setState(3978);
    match(LLVMIRParser::T__20);
    setState(3987);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4622945172125122560) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 175640385467458049) != 0) || ((((_la - 354) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 354)) & 17179869183) != 0) || ((((_la - 494) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 494)) & 97) != 0)) {
      setState(3979);
      mdField();
      setState(3984);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LLVMIRParser::T__14) {
        setState(3980);
        match(LLVMIRParser::T__14);
        setState(3981);
        mdField();
        setState(3986);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3989);
    match(LLVMIRParser::T__21);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiTemplateValueParameterFieldContext ------------------------------------------------------------------

LLVMIRParser::DiTemplateValueParameterFieldContext::DiTemplateValueParameterFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::TagFieldContext* LLVMIRParser::DiTemplateValueParameterFieldContext::tagField() {
  return getRuleContext<LLVMIRParser::TagFieldContext>(0);
}

LLVMIRParser::NameFieldContext* LLVMIRParser::DiTemplateValueParameterFieldContext::nameField() {
  return getRuleContext<LLVMIRParser::NameFieldContext>(0);
}

LLVMIRParser::TypeFieldContext* LLVMIRParser::DiTemplateValueParameterFieldContext::typeField() {
  return getRuleContext<LLVMIRParser::TypeFieldContext>(0);
}

LLVMIRParser::DefaultedFieldContext* LLVMIRParser::DiTemplateValueParameterFieldContext::defaultedField() {
  return getRuleContext<LLVMIRParser::DefaultedFieldContext>(0);
}

LLVMIRParser::ValueFieldContext* LLVMIRParser::DiTemplateValueParameterFieldContext::valueField() {
  return getRuleContext<LLVMIRParser::ValueFieldContext>(0);
}


size_t LLVMIRParser::DiTemplateValueParameterFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiTemplateValueParameterField;
}


std::any LLVMIRParser::DiTemplateValueParameterFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiTemplateValueParameterField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiTemplateValueParameterFieldContext* LLVMIRParser::diTemplateValueParameterField() {
  DiTemplateValueParameterFieldContext *_localctx = _tracker.createInstance<DiTemplateValueParameterFieldContext>(_ctx, getState());
  enterRule(_localctx, 596, LLVMIRParser::RuleDiTemplateValueParameterField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3996);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__387: {
        enterOuterAlt(_localctx, 1);
        setState(3991);
        tagField();
        break;
      }

      case LLVMIRParser::T__390: {
        enterOuterAlt(_localctx, 2);
        setState(3992);
        nameField();
        break;
      }

      case LLVMIRParser::T__391: {
        enterOuterAlt(_localctx, 3);
        setState(3993);
        typeField();
        break;
      }

      case LLVMIRParser::T__392: {
        enterOuterAlt(_localctx, 4);
        setState(3994);
        defaultedField();
        break;
      }

      case LLVMIRParser::T__393: {
        enterOuterAlt(_localctx, 5);
        setState(3995);
        valueField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameFieldContext ------------------------------------------------------------------

LLVMIRParser::NameFieldContext::NameFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::NameFieldContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::NameFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleNameField;
}


std::any LLVMIRParser::NameFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitNameField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::NameFieldContext* LLVMIRParser::nameField() {
  NameFieldContext *_localctx = _tracker.createInstance<NameFieldContext>(_ctx, getState());
  enterRule(_localctx, 598, LLVMIRParser::RuleNameField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3998);
    match(LLVMIRParser::T__390);
    setState(3999);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeFieldContext ------------------------------------------------------------------

LLVMIRParser::TypeFieldContext::TypeFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::TypeFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::TypeFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleTypeField;
}


std::any LLVMIRParser::TypeFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitTypeField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::TypeFieldContext* LLVMIRParser::typeField() {
  TypeFieldContext *_localctx = _tracker.createInstance<TypeFieldContext>(_ctx, getState());
  enterRule(_localctx, 600, LLVMIRParser::RuleTypeField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4001);
    match(LLVMIRParser::T__391);
    setState(4002);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefaultedFieldContext ------------------------------------------------------------------

LLVMIRParser::DefaultedFieldContext::DefaultedFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::BoolConstContext* LLVMIRParser::DefaultedFieldContext::boolConst() {
  return getRuleContext<LLVMIRParser::BoolConstContext>(0);
}


size_t LLVMIRParser::DefaultedFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDefaultedField;
}


std::any LLVMIRParser::DefaultedFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDefaultedField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DefaultedFieldContext* LLVMIRParser::defaultedField() {
  DefaultedFieldContext *_localctx = _tracker.createInstance<DefaultedFieldContext>(_ctx, getState());
  enterRule(_localctx, 602, LLVMIRParser::RuleDefaultedField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4004);
    match(LLVMIRParser::T__392);
    setState(4005);
    boolConst();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueFieldContext ------------------------------------------------------------------

LLVMIRParser::ValueFieldContext::ValueFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::ValueFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::ValueFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleValueField;
}


std::any LLVMIRParser::ValueFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitValueField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ValueFieldContext* LLVMIRParser::valueField() {
  ValueFieldContext *_localctx = _tracker.createInstance<ValueFieldContext>(_ctx, getState());
  enterRule(_localctx, 604, LLVMIRParser::RuleValueField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4007);
    match(LLVMIRParser::T__393);
    setState(4008);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MdFieldContext ------------------------------------------------------------------

LLVMIRParser::MdFieldContext::MdFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::NullConstContext* LLVMIRParser::MdFieldContext::nullConst() {
  return getRuleContext<LLVMIRParser::NullConstContext>(0);
}

LLVMIRParser::MetadataContext* LLVMIRParser::MdFieldContext::metadata() {
  return getRuleContext<LLVMIRParser::MetadataContext>(0);
}


size_t LLVMIRParser::MdFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleMdField;
}


std::any LLVMIRParser::MdFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitMdField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::MdFieldContext* LLVMIRParser::mdField() {
  MdFieldContext *_localctx = _tracker.createInstance<MdFieldContext>(_ctx, getState());
  enterRule(_localctx, 606, LLVMIRParser::RuleMdField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4012);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__61: {
        enterOuterAlt(_localctx, 1);
        setState(4010);
        nullConst();
        break;
      }

      case LLVMIRParser::T__20:
      case LLVMIRParser::T__22:
      case LLVMIRParser::T__33:
      case LLVMIRParser::T__36:
      case LLVMIRParser::T__50:
      case LLVMIRParser::T__52:
      case LLVMIRParser::T__63:
      case LLVMIRParser::T__72:
      case LLVMIRParser::T__76:
      case LLVMIRParser::T__115:
      case LLVMIRParser::T__116:
      case LLVMIRParser::T__117:
      case LLVMIRParser::T__120:
      case LLVMIRParser::T__353:
      case LLVMIRParser::T__354:
      case LLVMIRParser::T__355:
      case LLVMIRParser::T__356:
      case LLVMIRParser::T__357:
      case LLVMIRParser::T__358:
      case LLVMIRParser::T__359:
      case LLVMIRParser::T__360:
      case LLVMIRParser::T__361:
      case LLVMIRParser::T__362:
      case LLVMIRParser::T__363:
      case LLVMIRParser::T__364:
      case LLVMIRParser::T__365:
      case LLVMIRParser::T__366:
      case LLVMIRParser::T__367:
      case LLVMIRParser::T__368:
      case LLVMIRParser::T__369:
      case LLVMIRParser::T__370:
      case LLVMIRParser::T__371:
      case LLVMIRParser::T__372:
      case LLVMIRParser::T__373:
      case LLVMIRParser::T__374:
      case LLVMIRParser::T__375:
      case LLVMIRParser::T__376:
      case LLVMIRParser::T__377:
      case LLVMIRParser::T__378:
      case LLVMIRParser::T__379:
      case LLVMIRParser::T__380:
      case LLVMIRParser::T__381:
      case LLVMIRParser::T__382:
      case LLVMIRParser::T__383:
      case LLVMIRParser::T__384:
      case LLVMIRParser::T__385:
      case LLVMIRParser::T__386:
      case LLVMIRParser::LocalIdent:
      case LLVMIRParser::MetadataId:
      case LLVMIRParser::IntType: {
        enterOuterAlt(_localctx, 2);
        setState(4011);
        metadata();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiSubroutineTypeFieldContext ------------------------------------------------------------------

LLVMIRParser::DiSubroutineTypeFieldContext::DiSubroutineTypeFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::FlagsFieldContext* LLVMIRParser::DiSubroutineTypeFieldContext::flagsField() {
  return getRuleContext<LLVMIRParser::FlagsFieldContext>(0);
}

LLVMIRParser::CcFieldContext* LLVMIRParser::DiSubroutineTypeFieldContext::ccField() {
  return getRuleContext<LLVMIRParser::CcFieldContext>(0);
}

LLVMIRParser::TypesFieldContext* LLVMIRParser::DiSubroutineTypeFieldContext::typesField() {
  return getRuleContext<LLVMIRParser::TypesFieldContext>(0);
}


size_t LLVMIRParser::DiSubroutineTypeFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiSubroutineTypeField;
}


std::any LLVMIRParser::DiSubroutineTypeFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiSubroutineTypeField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiSubroutineTypeFieldContext* LLVMIRParser::diSubroutineTypeField() {
  DiSubroutineTypeFieldContext *_localctx = _tracker.createInstance<DiSubroutineTypeFieldContext>(_ctx, getState());
  enterRule(_localctx, 608, LLVMIRParser::RuleDiSubroutineTypeField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4017);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__394: {
        enterOuterAlt(_localctx, 1);
        setState(4014);
        flagsField();
        break;
      }

      case LLVMIRParser::T__396:
      case LLVMIRParser::IntLit: {
        enterOuterAlt(_localctx, 2);
        setState(4015);
        ccField();
        break;
      }

      case LLVMIRParser::T__480: {
        enterOuterAlt(_localctx, 3);
        setState(4016);
        typesField();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FlagsFieldContext ------------------------------------------------------------------

LLVMIRParser::FlagsFieldContext::FlagsFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::DiFlagsContext* LLVMIRParser::FlagsFieldContext::diFlags() {
  return getRuleContext<LLVMIRParser::DiFlagsContext>(0);
}


size_t LLVMIRParser::FlagsFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleFlagsField;
}


std::any LLVMIRParser::FlagsFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFlagsField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FlagsFieldContext* LLVMIRParser::flagsField() {
  FlagsFieldContext *_localctx = _tracker.createInstance<FlagsFieldContext>(_ctx, getState());
  enterRule(_localctx, 610, LLVMIRParser::RuleFlagsField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4019);
    match(LLVMIRParser::T__394);
    setState(4020);
    diFlags();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiFlagsContext ------------------------------------------------------------------

LLVMIRParser::DiFlagsContext::DiFlagsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LLVMIRParser::DiFlagsContext::DiFlag() {
  return getTokens(LLVMIRParser::DiFlag);
}

tree::TerminalNode* LLVMIRParser::DiFlagsContext::DiFlag(size_t i) {
  return getToken(LLVMIRParser::DiFlag, i);
}


size_t LLVMIRParser::DiFlagsContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiFlags;
}


std::any LLVMIRParser::DiFlagsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiFlags(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiFlagsContext* LLVMIRParser::diFlags() {
  DiFlagsContext *_localctx = _tracker.createInstance<DiFlagsContext>(_ctx, getState());
  enterRule(_localctx, 612, LLVMIRParser::RuleDiFlags);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4022);
    match(LLVMIRParser::DiFlag);
    setState(4027);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__395) {
      setState(4023);
      match(LLVMIRParser::T__395);
      setState(4024);
      match(LLVMIRParser::DiFlag);
      setState(4029);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CcFieldContext ------------------------------------------------------------------

LLVMIRParser::CcFieldContext::CcFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::CcFieldContext::DwarfCc() {
  return getToken(LLVMIRParser::DwarfCc, 0);
}

tree::TerminalNode* LLVMIRParser::CcFieldContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::CcFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleCcField;
}


std::any LLVMIRParser::CcFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitCcField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::CcFieldContext* LLVMIRParser::ccField() {
  CcFieldContext *_localctx = _tracker.createInstance<CcFieldContext>(_ctx, getState());
  enterRule(_localctx, 614, LLVMIRParser::RuleCcField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4033);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LLVMIRParser::T__396: {
        enterOuterAlt(_localctx, 1);
        setState(4030);
        match(LLVMIRParser::T__396);
        setState(4031);
        match(LLVMIRParser::DwarfCc);
        break;
      }

      case LLVMIRParser::IntLit: {
        enterOuterAlt(_localctx, 2);
        setState(4032);
        match(LLVMIRParser::IntLit);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlignFieldContext ------------------------------------------------------------------

LLVMIRParser::AlignFieldContext::AlignFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::AlignFieldContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::AlignFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleAlignField;
}


std::any LLVMIRParser::AlignFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAlignField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AlignFieldContext* LLVMIRParser::alignField() {
  AlignFieldContext *_localctx = _tracker.createInstance<AlignFieldContext>(_ctx, getState());
  enterRule(_localctx, 616, LLVMIRParser::RuleAlignField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4035);
    match(LLVMIRParser::T__397);
    setState(4036);
    match(LLVMIRParser::IntLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AllocatedFieldContext ------------------------------------------------------------------

LLVMIRParser::AllocatedFieldContext::AllocatedFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::AllocatedFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::AllocatedFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleAllocatedField;
}


std::any LLVMIRParser::AllocatedFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAllocatedField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AllocatedFieldContext* LLVMIRParser::allocatedField() {
  AllocatedFieldContext *_localctx = _tracker.createInstance<AllocatedFieldContext>(_ctx, getState());
  enterRule(_localctx, 618, LLVMIRParser::RuleAllocatedField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4038);
    match(LLVMIRParser::T__398);
    setState(4039);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationsFieldContext ------------------------------------------------------------------

LLVMIRParser::AnnotationsFieldContext::AnnotationsFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::AnnotationsFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::AnnotationsFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleAnnotationsField;
}


std::any LLVMIRParser::AnnotationsFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAnnotationsField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AnnotationsFieldContext* LLVMIRParser::annotationsField() {
  AnnotationsFieldContext *_localctx = _tracker.createInstance<AnnotationsFieldContext>(_ctx, getState());
  enterRule(_localctx, 620, LLVMIRParser::RuleAnnotationsField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4041);
    match(LLVMIRParser::T__399);
    setState(4042);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgFieldContext ------------------------------------------------------------------

LLVMIRParser::ArgFieldContext::ArgFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::ArgFieldContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::ArgFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleArgField;
}


std::any LLVMIRParser::ArgFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitArgField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ArgFieldContext* LLVMIRParser::argField() {
  ArgFieldContext *_localctx = _tracker.createInstance<ArgFieldContext>(_ctx, getState());
  enterRule(_localctx, 622, LLVMIRParser::RuleArgField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4044);
    match(LLVMIRParser::T__400);
    setState(4045);
    match(LLVMIRParser::IntLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssociatedFieldContext ------------------------------------------------------------------

LLVMIRParser::AssociatedFieldContext::AssociatedFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::AssociatedFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::AssociatedFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleAssociatedField;
}


std::any LLVMIRParser::AssociatedFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAssociatedField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AssociatedFieldContext* LLVMIRParser::associatedField() {
  AssociatedFieldContext *_localctx = _tracker.createInstance<AssociatedFieldContext>(_ctx, getState());
  enterRule(_localctx, 624, LLVMIRParser::RuleAssociatedField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4047);
    match(LLVMIRParser::T__401);
    setState(4048);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributesFieldContext ------------------------------------------------------------------

LLVMIRParser::AttributesFieldContext::AttributesFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::AttributesFieldContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::AttributesFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleAttributesField;
}


std::any LLVMIRParser::AttributesFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitAttributesField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::AttributesFieldContext* LLVMIRParser::attributesField() {
  AttributesFieldContext *_localctx = _tracker.createInstance<AttributesFieldContext>(_ctx, getState());
  enterRule(_localctx, 626, LLVMIRParser::RuleAttributesField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4050);
    match(LLVMIRParser::T__402);
    setState(4051);
    match(LLVMIRParser::IntLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseTypeFieldContext ------------------------------------------------------------------

LLVMIRParser::BaseTypeFieldContext::BaseTypeFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::BaseTypeFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::BaseTypeFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleBaseTypeField;
}


std::any LLVMIRParser::BaseTypeFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitBaseTypeField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::BaseTypeFieldContext* LLVMIRParser::baseTypeField() {
  BaseTypeFieldContext *_localctx = _tracker.createInstance<BaseTypeFieldContext>(_ctx, getState());
  enterRule(_localctx, 628, LLVMIRParser::RuleBaseTypeField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4053);
    match(LLVMIRParser::T__403);
    setState(4054);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ChecksumFieldContext ------------------------------------------------------------------

LLVMIRParser::ChecksumFieldContext::ChecksumFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::ChecksumFieldContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::ChecksumFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleChecksumField;
}


std::any LLVMIRParser::ChecksumFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitChecksumField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ChecksumFieldContext* LLVMIRParser::checksumField() {
  ChecksumFieldContext *_localctx = _tracker.createInstance<ChecksumFieldContext>(_ctx, getState());
  enterRule(_localctx, 630, LLVMIRParser::RuleChecksumField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4056);
    match(LLVMIRParser::T__404);
    setState(4057);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ChecksumkindFieldContext ------------------------------------------------------------------

LLVMIRParser::ChecksumkindFieldContext::ChecksumkindFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::ChecksumkindFieldContext::ChecksumKind() {
  return getToken(LLVMIRParser::ChecksumKind, 0);
}


size_t LLVMIRParser::ChecksumkindFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleChecksumkindField;
}


std::any LLVMIRParser::ChecksumkindFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitChecksumkindField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ChecksumkindFieldContext* LLVMIRParser::checksumkindField() {
  ChecksumkindFieldContext *_localctx = _tracker.createInstance<ChecksumkindFieldContext>(_ctx, getState());
  enterRule(_localctx, 632, LLVMIRParser::RuleChecksumkindField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4059);
    match(LLVMIRParser::T__405);
    setState(4060);
    match(LLVMIRParser::ChecksumKind);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnFieldContext ------------------------------------------------------------------

LLVMIRParser::ColumnFieldContext::ColumnFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::ColumnFieldContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::ColumnFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleColumnField;
}


std::any LLVMIRParser::ColumnFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitColumnField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ColumnFieldContext* LLVMIRParser::columnField() {
  ColumnFieldContext *_localctx = _tracker.createInstance<ColumnFieldContext>(_ctx, getState());
  enterRule(_localctx, 634, LLVMIRParser::RuleColumnField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4062);
    match(LLVMIRParser::T__406);
    setState(4063);
    match(LLVMIRParser::IntLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConfigMacrosFieldContext ------------------------------------------------------------------

LLVMIRParser::ConfigMacrosFieldContext::ConfigMacrosFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::ConfigMacrosFieldContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::ConfigMacrosFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleConfigMacrosField;
}


std::any LLVMIRParser::ConfigMacrosFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitConfigMacrosField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ConfigMacrosFieldContext* LLVMIRParser::configMacrosField() {
  ConfigMacrosFieldContext *_localctx = _tracker.createInstance<ConfigMacrosFieldContext>(_ctx, getState());
  enterRule(_localctx, 636, LLVMIRParser::RuleConfigMacrosField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4065);
    match(LLVMIRParser::T__407);
    setState(4066);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ContainingTypeFieldContext ------------------------------------------------------------------

LLVMIRParser::ContainingTypeFieldContext::ContainingTypeFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::ContainingTypeFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::ContainingTypeFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleContainingTypeField;
}


std::any LLVMIRParser::ContainingTypeFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitContainingTypeField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ContainingTypeFieldContext* LLVMIRParser::containingTypeField() {
  ContainingTypeFieldContext *_localctx = _tracker.createInstance<ContainingTypeFieldContext>(_ctx, getState());
  enterRule(_localctx, 638, LLVMIRParser::RuleContainingTypeField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4068);
    match(LLVMIRParser::T__408);
    setState(4069);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CountFieldContext ------------------------------------------------------------------

LLVMIRParser::CountFieldContext::CountFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldOrIntContext* LLVMIRParser::CountFieldContext::mdFieldOrInt() {
  return getRuleContext<LLVMIRParser::MdFieldOrIntContext>(0);
}


size_t LLVMIRParser::CountFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleCountField;
}


std::any LLVMIRParser::CountFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitCountField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::CountFieldContext* LLVMIRParser::countField() {
  CountFieldContext *_localctx = _tracker.createInstance<CountFieldContext>(_ctx, getState());
  enterRule(_localctx, 640, LLVMIRParser::RuleCountField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4071);
    match(LLVMIRParser::T__409);
    setState(4072);
    mdFieldOrInt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DebugInfoForProfilingFieldContext ------------------------------------------------------------------

LLVMIRParser::DebugInfoForProfilingFieldContext::DebugInfoForProfilingFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::BoolConstContext* LLVMIRParser::DebugInfoForProfilingFieldContext::boolConst() {
  return getRuleContext<LLVMIRParser::BoolConstContext>(0);
}


size_t LLVMIRParser::DebugInfoForProfilingFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDebugInfoForProfilingField;
}


std::any LLVMIRParser::DebugInfoForProfilingFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDebugInfoForProfilingField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DebugInfoForProfilingFieldContext* LLVMIRParser::debugInfoForProfilingField() {
  DebugInfoForProfilingFieldContext *_localctx = _tracker.createInstance<DebugInfoForProfilingFieldContext>(_ctx, getState());
  enterRule(_localctx, 642, LLVMIRParser::RuleDebugInfoForProfilingField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4074);
    match(LLVMIRParser::T__410);
    setState(4075);
    boolConst();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationFieldContext ------------------------------------------------------------------

LLVMIRParser::DeclarationFieldContext::DeclarationFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::DeclarationFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::DeclarationFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDeclarationField;
}


std::any LLVMIRParser::DeclarationFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDeclarationField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DeclarationFieldContext* LLVMIRParser::declarationField() {
  DeclarationFieldContext *_localctx = _tracker.createInstance<DeclarationFieldContext>(_ctx, getState());
  enterRule(_localctx, 644, LLVMIRParser::RuleDeclarationField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4077);
    match(LLVMIRParser::T__411);
    setState(4078);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DirectoryFieldContext ------------------------------------------------------------------

LLVMIRParser::DirectoryFieldContext::DirectoryFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::DirectoryFieldContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::DirectoryFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDirectoryField;
}


std::any LLVMIRParser::DirectoryFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDirectoryField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DirectoryFieldContext* LLVMIRParser::directoryField() {
  DirectoryFieldContext *_localctx = _tracker.createInstance<DirectoryFieldContext>(_ctx, getState());
  enterRule(_localctx, 646, LLVMIRParser::RuleDirectoryField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4080);
    match(LLVMIRParser::T__412);
    setState(4081);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiscriminatorFieldContext ------------------------------------------------------------------

LLVMIRParser::DiscriminatorFieldContext::DiscriminatorFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::DiscriminatorFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::DiscriminatorFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiscriminatorField;
}


std::any LLVMIRParser::DiscriminatorFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiscriminatorField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiscriminatorFieldContext* LLVMIRParser::discriminatorField() {
  DiscriminatorFieldContext *_localctx = _tracker.createInstance<DiscriminatorFieldContext>(_ctx, getState());
  enterRule(_localctx, 648, LLVMIRParser::RuleDiscriminatorField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4083);
    match(LLVMIRParser::T__413);
    setState(4084);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataLocationFieldContext ------------------------------------------------------------------

LLVMIRParser::DataLocationFieldContext::DataLocationFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::DataLocationFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::DataLocationFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDataLocationField;
}


std::any LLVMIRParser::DataLocationFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDataLocationField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DataLocationFieldContext* LLVMIRParser::dataLocationField() {
  DataLocationFieldContext *_localctx = _tracker.createInstance<DataLocationFieldContext>(_ctx, getState());
  enterRule(_localctx, 650, LLVMIRParser::RuleDataLocationField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4086);
    match(LLVMIRParser::T__414);
    setState(4087);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiscriminatorIntFieldContext ------------------------------------------------------------------

LLVMIRParser::DiscriminatorIntFieldContext::DiscriminatorIntFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::DiscriminatorIntFieldContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::DiscriminatorIntFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDiscriminatorIntField;
}


std::any LLVMIRParser::DiscriminatorIntFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDiscriminatorIntField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DiscriminatorIntFieldContext* LLVMIRParser::discriminatorIntField() {
  DiscriminatorIntFieldContext *_localctx = _tracker.createInstance<DiscriminatorIntFieldContext>(_ctx, getState());
  enterRule(_localctx, 652, LLVMIRParser::RuleDiscriminatorIntField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4089);
    match(LLVMIRParser::T__413);
    setState(4090);
    match(LLVMIRParser::IntLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DwarfAddressSpaceFieldContext ------------------------------------------------------------------

LLVMIRParser::DwarfAddressSpaceFieldContext::DwarfAddressSpaceFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::DwarfAddressSpaceFieldContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::DwarfAddressSpaceFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDwarfAddressSpaceField;
}


std::any LLVMIRParser::DwarfAddressSpaceFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDwarfAddressSpaceField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DwarfAddressSpaceFieldContext* LLVMIRParser::dwarfAddressSpaceField() {
  DwarfAddressSpaceFieldContext *_localctx = _tracker.createInstance<DwarfAddressSpaceFieldContext>(_ctx, getState());
  enterRule(_localctx, 654, LLVMIRParser::RuleDwarfAddressSpaceField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4092);
    match(LLVMIRParser::T__415);
    setState(4093);
    match(LLVMIRParser::IntLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DwoIdFieldContext ------------------------------------------------------------------

LLVMIRParser::DwoIdFieldContext::DwoIdFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::DwoIdFieldContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::DwoIdFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleDwoIdField;
}


std::any LLVMIRParser::DwoIdFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitDwoIdField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::DwoIdFieldContext* LLVMIRParser::dwoIdField() {
  DwoIdFieldContext *_localctx = _tracker.createInstance<DwoIdFieldContext>(_ctx, getState());
  enterRule(_localctx, 656, LLVMIRParser::RuleDwoIdField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4095);
    match(LLVMIRParser::T__416);
    setState(4096);
    match(LLVMIRParser::IntLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementsFieldContext ------------------------------------------------------------------

LLVMIRParser::ElementsFieldContext::ElementsFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::ElementsFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::ElementsFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleElementsField;
}


std::any LLVMIRParser::ElementsFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitElementsField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ElementsFieldContext* LLVMIRParser::elementsField() {
  ElementsFieldContext *_localctx = _tracker.createInstance<ElementsFieldContext>(_ctx, getState());
  enterRule(_localctx, 658, LLVMIRParser::RuleElementsField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4098);
    match(LLVMIRParser::T__417);
    setState(4099);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmissionKindFieldContext ------------------------------------------------------------------

LLVMIRParser::EmissionKindFieldContext::EmissionKindFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::EmissionKindFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleEmissionKindField;
}


std::any LLVMIRParser::EmissionKindFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitEmissionKindField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::EmissionKindFieldContext* LLVMIRParser::emissionKindField() {
  EmissionKindFieldContext *_localctx = _tracker.createInstance<EmissionKindFieldContext>(_ctx, getState());
  enterRule(_localctx, 660, LLVMIRParser::RuleEmissionKindField);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4101);
    match(LLVMIRParser::T__418);
    setState(4102);
    antlrcpp::downCast<EmissionKindFieldContext *>(_localctx)->emissionKind = _input->LT(1);
    _la = _input->LA(1);
    if (!(((((_la - 420) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 420)) & 15) != 0))) {
      antlrcpp::downCast<EmissionKindFieldContext *>(_localctx)->emissionKind = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EncodingFieldContext ------------------------------------------------------------------

LLVMIRParser::EncodingFieldContext::EncodingFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::EncodingFieldContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}

tree::TerminalNode* LLVMIRParser::EncodingFieldContext::DwarfAttEncoding() {
  return getToken(LLVMIRParser::DwarfAttEncoding, 0);
}


size_t LLVMIRParser::EncodingFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleEncodingField;
}


std::any LLVMIRParser::EncodingFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitEncodingField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::EncodingFieldContext* LLVMIRParser::encodingField() {
  EncodingFieldContext *_localctx = _tracker.createInstance<EncodingFieldContext>(_ctx, getState());
  enterRule(_localctx, 662, LLVMIRParser::RuleEncodingField);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4104);
    match(LLVMIRParser::T__423);
    setState(4105);
    _la = _input->LA(1);
    if (!(_la == LLVMIRParser::IntLit

    || _la == LLVMIRParser::DwarfAttEncoding)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EntityFieldContext ------------------------------------------------------------------

LLVMIRParser::EntityFieldContext::EntityFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::EntityFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::EntityFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleEntityField;
}


std::any LLVMIRParser::EntityFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitEntityField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::EntityFieldContext* LLVMIRParser::entityField() {
  EntityFieldContext *_localctx = _tracker.createInstance<EntityFieldContext>(_ctx, getState());
  enterRule(_localctx, 664, LLVMIRParser::RuleEntityField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4107);
    match(LLVMIRParser::T__424);
    setState(4108);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumsFieldContext ------------------------------------------------------------------

LLVMIRParser::EnumsFieldContext::EnumsFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::EnumsFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::EnumsFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleEnumsField;
}


std::any LLVMIRParser::EnumsFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitEnumsField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::EnumsFieldContext* LLVMIRParser::enumsField() {
  EnumsFieldContext *_localctx = _tracker.createInstance<EnumsFieldContext>(_ctx, getState());
  enterRule(_localctx, 666, LLVMIRParser::RuleEnumsField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4110);
    match(LLVMIRParser::T__425);
    setState(4111);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportSymbolsFieldContext ------------------------------------------------------------------

LLVMIRParser::ExportSymbolsFieldContext::ExportSymbolsFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::BoolConstContext* LLVMIRParser::ExportSymbolsFieldContext::boolConst() {
  return getRuleContext<LLVMIRParser::BoolConstContext>(0);
}


size_t LLVMIRParser::ExportSymbolsFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleExportSymbolsField;
}


std::any LLVMIRParser::ExportSymbolsFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitExportSymbolsField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ExportSymbolsFieldContext* LLVMIRParser::exportSymbolsField() {
  ExportSymbolsFieldContext *_localctx = _tracker.createInstance<ExportSymbolsFieldContext>(_ctx, getState());
  enterRule(_localctx, 668, LLVMIRParser::RuleExportSymbolsField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4113);
    match(LLVMIRParser::T__426);
    setState(4114);
    boolConst();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprFieldContext ------------------------------------------------------------------

LLVMIRParser::ExprFieldContext::ExprFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::ExprFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::ExprFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleExprField;
}


std::any LLVMIRParser::ExprFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitExprField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ExprFieldContext* LLVMIRParser::exprField() {
  ExprFieldContext *_localctx = _tracker.createInstance<ExprFieldContext>(_ctx, getState());
  enterRule(_localctx, 670, LLVMIRParser::RuleExprField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4116);
    match(LLVMIRParser::T__427);
    setState(4117);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExtraDataFieldContext ------------------------------------------------------------------

LLVMIRParser::ExtraDataFieldContext::ExtraDataFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::ExtraDataFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::ExtraDataFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleExtraDataField;
}


std::any LLVMIRParser::ExtraDataFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitExtraDataField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ExtraDataFieldContext* LLVMIRParser::extraDataField() {
  ExtraDataFieldContext *_localctx = _tracker.createInstance<ExtraDataFieldContext>(_ctx, getState());
  enterRule(_localctx, 672, LLVMIRParser::RuleExtraDataField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4119);
    match(LLVMIRParser::T__428);
    setState(4120);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FileFieldContext ------------------------------------------------------------------

LLVMIRParser::FileFieldContext::FileFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::FileFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::FileFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleFileField;
}


std::any LLVMIRParser::FileFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFileField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FileFieldContext* LLVMIRParser::fileField() {
  FileFieldContext *_localctx = _tracker.createInstance<FileFieldContext>(_ctx, getState());
  enterRule(_localctx, 674, LLVMIRParser::RuleFileField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4122);
    match(LLVMIRParser::T__429);
    setState(4123);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FilenameFieldContext ------------------------------------------------------------------

LLVMIRParser::FilenameFieldContext::FilenameFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::FilenameFieldContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::FilenameFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleFilenameField;
}


std::any LLVMIRParser::FilenameFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFilenameField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FilenameFieldContext* LLVMIRParser::filenameField() {
  FilenameFieldContext *_localctx = _tracker.createInstance<FilenameFieldContext>(_ctx, getState());
  enterRule(_localctx, 676, LLVMIRParser::RuleFilenameField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4125);
    match(LLVMIRParser::T__430);
    setState(4126);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FlagsStringFieldContext ------------------------------------------------------------------

LLVMIRParser::FlagsStringFieldContext::FlagsStringFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::FlagsStringFieldContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::FlagsStringFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleFlagsStringField;
}


std::any LLVMIRParser::FlagsStringFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitFlagsStringField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::FlagsStringFieldContext* LLVMIRParser::flagsStringField() {
  FlagsStringFieldContext *_localctx = _tracker.createInstance<FlagsStringFieldContext>(_ctx, getState());
  enterRule(_localctx, 678, LLVMIRParser::RuleFlagsStringField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4128);
    match(LLVMIRParser::T__394);
    setState(4129);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GetterFieldContext ------------------------------------------------------------------

LLVMIRParser::GetterFieldContext::GetterFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::GetterFieldContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::GetterFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleGetterField;
}


std::any LLVMIRParser::GetterFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitGetterField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::GetterFieldContext* LLVMIRParser::getterField() {
  GetterFieldContext *_localctx = _tracker.createInstance<GetterFieldContext>(_ctx, getState());
  enterRule(_localctx, 680, LLVMIRParser::RuleGetterField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4131);
    match(LLVMIRParser::T__431);
    setState(4132);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlobalsFieldContext ------------------------------------------------------------------

LLVMIRParser::GlobalsFieldContext::GlobalsFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::GlobalsFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::GlobalsFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleGlobalsField;
}


std::any LLVMIRParser::GlobalsFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitGlobalsField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::GlobalsFieldContext* LLVMIRParser::globalsField() {
  GlobalsFieldContext *_localctx = _tracker.createInstance<GlobalsFieldContext>(_ctx, getState());
  enterRule(_localctx, 682, LLVMIRParser::RuleGlobalsField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4134);
    match(LLVMIRParser::T__432);
    setState(4135);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierFieldContext ------------------------------------------------------------------

LLVMIRParser::IdentifierFieldContext::IdentifierFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::IdentifierFieldContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::IdentifierFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleIdentifierField;
}


std::any LLVMIRParser::IdentifierFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitIdentifierField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::IdentifierFieldContext* LLVMIRParser::identifierField() {
  IdentifierFieldContext *_localctx = _tracker.createInstance<IdentifierFieldContext>(_ctx, getState());
  enterRule(_localctx, 684, LLVMIRParser::RuleIdentifierField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4137);
    match(LLVMIRParser::T__433);
    setState(4138);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportsFieldContext ------------------------------------------------------------------

LLVMIRParser::ImportsFieldContext::ImportsFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::ImportsFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::ImportsFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleImportsField;
}


std::any LLVMIRParser::ImportsFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitImportsField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ImportsFieldContext* LLVMIRParser::importsField() {
  ImportsFieldContext *_localctx = _tracker.createInstance<ImportsFieldContext>(_ctx, getState());
  enterRule(_localctx, 686, LLVMIRParser::RuleImportsField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4140);
    match(LLVMIRParser::T__434);
    setState(4141);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IncludePathFieldContext ------------------------------------------------------------------

LLVMIRParser::IncludePathFieldContext::IncludePathFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::IncludePathFieldContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::IncludePathFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleIncludePathField;
}


std::any LLVMIRParser::IncludePathFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitIncludePathField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::IncludePathFieldContext* LLVMIRParser::includePathField() {
  IncludePathFieldContext *_localctx = _tracker.createInstance<IncludePathFieldContext>(_ctx, getState());
  enterRule(_localctx, 688, LLVMIRParser::RuleIncludePathField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4143);
    match(LLVMIRParser::T__435);
    setState(4144);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InlinedAtFieldContext ------------------------------------------------------------------

LLVMIRParser::InlinedAtFieldContext::InlinedAtFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::InlinedAtFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::InlinedAtFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleInlinedAtField;
}


std::any LLVMIRParser::InlinedAtFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitInlinedAtField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::InlinedAtFieldContext* LLVMIRParser::inlinedAtField() {
  InlinedAtFieldContext *_localctx = _tracker.createInstance<InlinedAtFieldContext>(_ctx, getState());
  enterRule(_localctx, 690, LLVMIRParser::RuleInlinedAtField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4146);
    match(LLVMIRParser::T__436);
    setState(4147);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IsDeclFieldContext ------------------------------------------------------------------

LLVMIRParser::IsDeclFieldContext::IsDeclFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::BoolConstContext* LLVMIRParser::IsDeclFieldContext::boolConst() {
  return getRuleContext<LLVMIRParser::BoolConstContext>(0);
}


size_t LLVMIRParser::IsDeclFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleIsDeclField;
}


std::any LLVMIRParser::IsDeclFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitIsDeclField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::IsDeclFieldContext* LLVMIRParser::isDeclField() {
  IsDeclFieldContext *_localctx = _tracker.createInstance<IsDeclFieldContext>(_ctx, getState());
  enterRule(_localctx, 692, LLVMIRParser::RuleIsDeclField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4149);
    match(LLVMIRParser::T__437);
    setState(4150);
    boolConst();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IsDefinitionFieldContext ------------------------------------------------------------------

LLVMIRParser::IsDefinitionFieldContext::IsDefinitionFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::BoolConstContext* LLVMIRParser::IsDefinitionFieldContext::boolConst() {
  return getRuleContext<LLVMIRParser::BoolConstContext>(0);
}


size_t LLVMIRParser::IsDefinitionFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleIsDefinitionField;
}


std::any LLVMIRParser::IsDefinitionFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitIsDefinitionField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::IsDefinitionFieldContext* LLVMIRParser::isDefinitionField() {
  IsDefinitionFieldContext *_localctx = _tracker.createInstance<IsDefinitionFieldContext>(_ctx, getState());
  enterRule(_localctx, 694, LLVMIRParser::RuleIsDefinitionField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4152);
    match(LLVMIRParser::T__438);
    setState(4153);
    boolConst();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IsImplicitCodeFieldContext ------------------------------------------------------------------

LLVMIRParser::IsImplicitCodeFieldContext::IsImplicitCodeFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::BoolConstContext* LLVMIRParser::IsImplicitCodeFieldContext::boolConst() {
  return getRuleContext<LLVMIRParser::BoolConstContext>(0);
}


size_t LLVMIRParser::IsImplicitCodeFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleIsImplicitCodeField;
}


std::any LLVMIRParser::IsImplicitCodeFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitIsImplicitCodeField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::IsImplicitCodeFieldContext* LLVMIRParser::isImplicitCodeField() {
  IsImplicitCodeFieldContext *_localctx = _tracker.createInstance<IsImplicitCodeFieldContext>(_ctx, getState());
  enterRule(_localctx, 696, LLVMIRParser::RuleIsImplicitCodeField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4155);
    match(LLVMIRParser::T__439);
    setState(4156);
    boolConst();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IsLocalFieldContext ------------------------------------------------------------------

LLVMIRParser::IsLocalFieldContext::IsLocalFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::BoolConstContext* LLVMIRParser::IsLocalFieldContext::boolConst() {
  return getRuleContext<LLVMIRParser::BoolConstContext>(0);
}


size_t LLVMIRParser::IsLocalFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleIsLocalField;
}


std::any LLVMIRParser::IsLocalFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitIsLocalField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::IsLocalFieldContext* LLVMIRParser::isLocalField() {
  IsLocalFieldContext *_localctx = _tracker.createInstance<IsLocalFieldContext>(_ctx, getState());
  enterRule(_localctx, 698, LLVMIRParser::RuleIsLocalField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4158);
    match(LLVMIRParser::T__440);
    setState(4159);
    boolConst();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IsOptimizedFieldContext ------------------------------------------------------------------

LLVMIRParser::IsOptimizedFieldContext::IsOptimizedFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::BoolConstContext* LLVMIRParser::IsOptimizedFieldContext::boolConst() {
  return getRuleContext<LLVMIRParser::BoolConstContext>(0);
}


size_t LLVMIRParser::IsOptimizedFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleIsOptimizedField;
}


std::any LLVMIRParser::IsOptimizedFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitIsOptimizedField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::IsOptimizedFieldContext* LLVMIRParser::isOptimizedField() {
  IsOptimizedFieldContext *_localctx = _tracker.createInstance<IsOptimizedFieldContext>(_ctx, getState());
  enterRule(_localctx, 700, LLVMIRParser::RuleIsOptimizedField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4161);
    match(LLVMIRParser::T__441);
    setState(4162);
    boolConst();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IsUnsignedFieldContext ------------------------------------------------------------------

LLVMIRParser::IsUnsignedFieldContext::IsUnsignedFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::BoolConstContext* LLVMIRParser::IsUnsignedFieldContext::boolConst() {
  return getRuleContext<LLVMIRParser::BoolConstContext>(0);
}


size_t LLVMIRParser::IsUnsignedFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleIsUnsignedField;
}


std::any LLVMIRParser::IsUnsignedFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitIsUnsignedField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::IsUnsignedFieldContext* LLVMIRParser::isUnsignedField() {
  IsUnsignedFieldContext *_localctx = _tracker.createInstance<IsUnsignedFieldContext>(_ctx, getState());
  enterRule(_localctx, 702, LLVMIRParser::RuleIsUnsignedField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4164);
    match(LLVMIRParser::T__442);
    setState(4165);
    boolConst();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ApiNotesFieldContext ------------------------------------------------------------------

LLVMIRParser::ApiNotesFieldContext::ApiNotesFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::ApiNotesFieldContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::ApiNotesFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleApiNotesField;
}


std::any LLVMIRParser::ApiNotesFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitApiNotesField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ApiNotesFieldContext* LLVMIRParser::apiNotesField() {
  ApiNotesFieldContext *_localctx = _tracker.createInstance<ApiNotesFieldContext>(_ctx, getState());
  enterRule(_localctx, 704, LLVMIRParser::RuleApiNotesField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4167);
    match(LLVMIRParser::T__443);
    setState(4168);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LanguageFieldContext ------------------------------------------------------------------

LLVMIRParser::LanguageFieldContext::LanguageFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::LanguageFieldContext::DwarfLang() {
  return getToken(LLVMIRParser::DwarfLang, 0);
}


size_t LLVMIRParser::LanguageFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleLanguageField;
}


std::any LLVMIRParser::LanguageFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitLanguageField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::LanguageFieldContext* LLVMIRParser::languageField() {
  LanguageFieldContext *_localctx = _tracker.createInstance<LanguageFieldContext>(_ctx, getState());
  enterRule(_localctx, 706, LLVMIRParser::RuleLanguageField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4170);
    match(LLVMIRParser::T__444);
    setState(4171);
    match(LLVMIRParser::DwarfLang);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LineFieldContext ------------------------------------------------------------------

LLVMIRParser::LineFieldContext::LineFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::LineFieldContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::LineFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleLineField;
}


std::any LLVMIRParser::LineFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitLineField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::LineFieldContext* LLVMIRParser::lineField() {
  LineFieldContext *_localctx = _tracker.createInstance<LineFieldContext>(_ctx, getState());
  enterRule(_localctx, 708, LLVMIRParser::RuleLineField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4173);
    match(LLVMIRParser::T__445);
    setState(4174);
    match(LLVMIRParser::IntLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LinkageNameFieldContext ------------------------------------------------------------------

LLVMIRParser::LinkageNameFieldContext::LinkageNameFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::LinkageNameFieldContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::LinkageNameFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleLinkageNameField;
}


std::any LLVMIRParser::LinkageNameFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitLinkageNameField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::LinkageNameFieldContext* LLVMIRParser::linkageNameField() {
  LinkageNameFieldContext *_localctx = _tracker.createInstance<LinkageNameFieldContext>(_ctx, getState());
  enterRule(_localctx, 710, LLVMIRParser::RuleLinkageNameField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4176);
    match(LLVMIRParser::T__446);
    setState(4177);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LowerBoundFieldContext ------------------------------------------------------------------

LLVMIRParser::LowerBoundFieldContext::LowerBoundFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldOrIntContext* LLVMIRParser::LowerBoundFieldContext::mdFieldOrInt() {
  return getRuleContext<LLVMIRParser::MdFieldOrIntContext>(0);
}


size_t LLVMIRParser::LowerBoundFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleLowerBoundField;
}


std::any LLVMIRParser::LowerBoundFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitLowerBoundField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::LowerBoundFieldContext* LLVMIRParser::lowerBoundField() {
  LowerBoundFieldContext *_localctx = _tracker.createInstance<LowerBoundFieldContext>(_ctx, getState());
  enterRule(_localctx, 712, LLVMIRParser::RuleLowerBoundField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4179);
    match(LLVMIRParser::T__447);
    setState(4180);
    mdFieldOrInt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MacrosFieldContext ------------------------------------------------------------------

LLVMIRParser::MacrosFieldContext::MacrosFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::MacrosFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::MacrosFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleMacrosField;
}


std::any LLVMIRParser::MacrosFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitMacrosField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::MacrosFieldContext* LLVMIRParser::macrosField() {
  MacrosFieldContext *_localctx = _tracker.createInstance<MacrosFieldContext>(_ctx, getState());
  enterRule(_localctx, 714, LLVMIRParser::RuleMacrosField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4182);
    match(LLVMIRParser::T__448);
    setState(4183);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameTableKindFieldContext ------------------------------------------------------------------

LLVMIRParser::NameTableKindFieldContext::NameTableKindFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LLVMIRParser::NameTableKindFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleNameTableKindField;
}


std::any LLVMIRParser::NameTableKindFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitNameTableKindField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::NameTableKindFieldContext* LLVMIRParser::nameTableKindField() {
  NameTableKindFieldContext *_localctx = _tracker.createInstance<NameTableKindFieldContext>(_ctx, getState());
  enterRule(_localctx, 716, LLVMIRParser::RuleNameTableKindField);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4185);
    match(LLVMIRParser::T__449);
    setState(4186);
    antlrcpp::downCast<NameTableKindFieldContext *>(_localctx)->nameTableKind = _input->LT(1);
    _la = _input->LA(1);
    if (!(((((_la - 451) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 451)) & 7) != 0))) {
      antlrcpp::downCast<NameTableKindFieldContext *>(_localctx)->nameTableKind = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodesFieldContext ------------------------------------------------------------------

LLVMIRParser::NodesFieldContext::NodesFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::NodesFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::NodesFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleNodesField;
}


std::any LLVMIRParser::NodesFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitNodesField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::NodesFieldContext* LLVMIRParser::nodesField() {
  NodesFieldContext *_localctx = _tracker.createInstance<NodesFieldContext>(_ctx, getState());
  enterRule(_localctx, 718, LLVMIRParser::RuleNodesField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4188);
    match(LLVMIRParser::T__453);
    setState(4189);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OffsetFieldContext ------------------------------------------------------------------

LLVMIRParser::OffsetFieldContext::OffsetFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::OffsetFieldContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::OffsetFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleOffsetField;
}


std::any LLVMIRParser::OffsetFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitOffsetField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::OffsetFieldContext* LLVMIRParser::offsetField() {
  OffsetFieldContext *_localctx = _tracker.createInstance<OffsetFieldContext>(_ctx, getState());
  enterRule(_localctx, 720, LLVMIRParser::RuleOffsetField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4191);
    match(LLVMIRParser::T__454);
    setState(4192);
    match(LLVMIRParser::IntLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProducerFieldContext ------------------------------------------------------------------

LLVMIRParser::ProducerFieldContext::ProducerFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::ProducerFieldContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::ProducerFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleProducerField;
}


std::any LLVMIRParser::ProducerFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitProducerField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ProducerFieldContext* LLVMIRParser::producerField() {
  ProducerFieldContext *_localctx = _tracker.createInstance<ProducerFieldContext>(_ctx, getState());
  enterRule(_localctx, 722, LLVMIRParser::RuleProducerField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4194);
    match(LLVMIRParser::T__455);
    setState(4195);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RangesBaseAddressFieldContext ------------------------------------------------------------------

LLVMIRParser::RangesBaseAddressFieldContext::RangesBaseAddressFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::BoolConstContext* LLVMIRParser::RangesBaseAddressFieldContext::boolConst() {
  return getRuleContext<LLVMIRParser::BoolConstContext>(0);
}


size_t LLVMIRParser::RangesBaseAddressFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleRangesBaseAddressField;
}


std::any LLVMIRParser::RangesBaseAddressFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitRangesBaseAddressField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::RangesBaseAddressFieldContext* LLVMIRParser::rangesBaseAddressField() {
  RangesBaseAddressFieldContext *_localctx = _tracker.createInstance<RangesBaseAddressFieldContext>(_ctx, getState());
  enterRule(_localctx, 724, LLVMIRParser::RuleRangesBaseAddressField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4197);
    match(LLVMIRParser::T__456);
    setState(4198);
    boolConst();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RankFieldContext ------------------------------------------------------------------

LLVMIRParser::RankFieldContext::RankFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldOrIntContext* LLVMIRParser::RankFieldContext::mdFieldOrInt() {
  return getRuleContext<LLVMIRParser::MdFieldOrIntContext>(0);
}


size_t LLVMIRParser::RankFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleRankField;
}


std::any LLVMIRParser::RankFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitRankField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::RankFieldContext* LLVMIRParser::rankField() {
  RankFieldContext *_localctx = _tracker.createInstance<RankFieldContext>(_ctx, getState());
  enterRule(_localctx, 726, LLVMIRParser::RuleRankField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4200);
    match(LLVMIRParser::T__457);
    setState(4201);
    mdFieldOrInt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RetainedNodesFieldContext ------------------------------------------------------------------

LLVMIRParser::RetainedNodesFieldContext::RetainedNodesFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::RetainedNodesFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::RetainedNodesFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleRetainedNodesField;
}


std::any LLVMIRParser::RetainedNodesFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitRetainedNodesField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::RetainedNodesFieldContext* LLVMIRParser::retainedNodesField() {
  RetainedNodesFieldContext *_localctx = _tracker.createInstance<RetainedNodesFieldContext>(_ctx, getState());
  enterRule(_localctx, 728, LLVMIRParser::RuleRetainedNodesField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4203);
    match(LLVMIRParser::T__458);
    setState(4204);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RetainedTypesFieldContext ------------------------------------------------------------------

LLVMIRParser::RetainedTypesFieldContext::RetainedTypesFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::RetainedTypesFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::RetainedTypesFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleRetainedTypesField;
}


std::any LLVMIRParser::RetainedTypesFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitRetainedTypesField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::RetainedTypesFieldContext* LLVMIRParser::retainedTypesField() {
  RetainedTypesFieldContext *_localctx = _tracker.createInstance<RetainedTypesFieldContext>(_ctx, getState());
  enterRule(_localctx, 730, LLVMIRParser::RuleRetainedTypesField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4206);
    match(LLVMIRParser::T__459);
    setState(4207);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RuntimeLangFieldContext ------------------------------------------------------------------

LLVMIRParser::RuntimeLangFieldContext::RuntimeLangFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::RuntimeLangFieldContext::DwarfLang() {
  return getToken(LLVMIRParser::DwarfLang, 0);
}


size_t LLVMIRParser::RuntimeLangFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleRuntimeLangField;
}


std::any LLVMIRParser::RuntimeLangFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitRuntimeLangField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::RuntimeLangFieldContext* LLVMIRParser::runtimeLangField() {
  RuntimeLangFieldContext *_localctx = _tracker.createInstance<RuntimeLangFieldContext>(_ctx, getState());
  enterRule(_localctx, 732, LLVMIRParser::RuleRuntimeLangField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4209);
    match(LLVMIRParser::T__460);
    setState(4210);
    match(LLVMIRParser::DwarfLang);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RuntimeVersionFieldContext ------------------------------------------------------------------

LLVMIRParser::RuntimeVersionFieldContext::RuntimeVersionFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::RuntimeVersionFieldContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::RuntimeVersionFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleRuntimeVersionField;
}


std::any LLVMIRParser::RuntimeVersionFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitRuntimeVersionField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::RuntimeVersionFieldContext* LLVMIRParser::runtimeVersionField() {
  RuntimeVersionFieldContext *_localctx = _tracker.createInstance<RuntimeVersionFieldContext>(_ctx, getState());
  enterRule(_localctx, 734, LLVMIRParser::RuleRuntimeVersionField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4212);
    match(LLVMIRParser::T__461);
    setState(4213);
    match(LLVMIRParser::IntLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScopeFieldContext ------------------------------------------------------------------

LLVMIRParser::ScopeFieldContext::ScopeFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::ScopeFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::ScopeFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleScopeField;
}


std::any LLVMIRParser::ScopeFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitScopeField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ScopeFieldContext* LLVMIRParser::scopeField() {
  ScopeFieldContext *_localctx = _tracker.createInstance<ScopeFieldContext>(_ctx, getState());
  enterRule(_localctx, 736, LLVMIRParser::RuleScopeField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4215);
    match(LLVMIRParser::T__462);
    setState(4216);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScopeLineFieldContext ------------------------------------------------------------------

LLVMIRParser::ScopeLineFieldContext::ScopeLineFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::ScopeLineFieldContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::ScopeLineFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleScopeLineField;
}


std::any LLVMIRParser::ScopeLineFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitScopeLineField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ScopeLineFieldContext* LLVMIRParser::scopeLineField() {
  ScopeLineFieldContext *_localctx = _tracker.createInstance<ScopeLineFieldContext>(_ctx, getState());
  enterRule(_localctx, 738, LLVMIRParser::RuleScopeLineField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4218);
    match(LLVMIRParser::T__463);
    setState(4219);
    match(LLVMIRParser::IntLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SdkFieldContext ------------------------------------------------------------------

LLVMIRParser::SdkFieldContext::SdkFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::SdkFieldContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::SdkFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleSdkField;
}


std::any LLVMIRParser::SdkFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitSdkField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::SdkFieldContext* LLVMIRParser::sdkField() {
  SdkFieldContext *_localctx = _tracker.createInstance<SdkFieldContext>(_ctx, getState());
  enterRule(_localctx, 740, LLVMIRParser::RuleSdkField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4221);
    match(LLVMIRParser::T__464);
    setState(4222);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetterFieldContext ------------------------------------------------------------------

LLVMIRParser::SetterFieldContext::SetterFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::SetterFieldContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::SetterFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleSetterField;
}


std::any LLVMIRParser::SetterFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitSetterField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::SetterFieldContext* LLVMIRParser::setterField() {
  SetterFieldContext *_localctx = _tracker.createInstance<SetterFieldContext>(_ctx, getState());
  enterRule(_localctx, 742, LLVMIRParser::RuleSetterField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4224);
    match(LLVMIRParser::T__465);
    setState(4225);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SizeFieldContext ------------------------------------------------------------------

LLVMIRParser::SizeFieldContext::SizeFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::SizeFieldContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::SizeFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleSizeField;
}


std::any LLVMIRParser::SizeFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitSizeField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::SizeFieldContext* LLVMIRParser::sizeField() {
  SizeFieldContext *_localctx = _tracker.createInstance<SizeFieldContext>(_ctx, getState());
  enterRule(_localctx, 744, LLVMIRParser::RuleSizeField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4227);
    match(LLVMIRParser::T__466);
    setState(4228);
    match(LLVMIRParser::IntLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SourceFieldContext ------------------------------------------------------------------

LLVMIRParser::SourceFieldContext::SourceFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::SourceFieldContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::SourceFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleSourceField;
}


std::any LLVMIRParser::SourceFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitSourceField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::SourceFieldContext* LLVMIRParser::sourceField() {
  SourceFieldContext *_localctx = _tracker.createInstance<SourceFieldContext>(_ctx, getState());
  enterRule(_localctx, 746, LLVMIRParser::RuleSourceField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4230);
    match(LLVMIRParser::T__467);
    setState(4231);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SpFlagsFieldContext ------------------------------------------------------------------

LLVMIRParser::SpFlagsFieldContext::SpFlagsFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LLVMIRParser::DiSPFlagContext *> LLVMIRParser::SpFlagsFieldContext::diSPFlag() {
  return getRuleContexts<LLVMIRParser::DiSPFlagContext>();
}

LLVMIRParser::DiSPFlagContext* LLVMIRParser::SpFlagsFieldContext::diSPFlag(size_t i) {
  return getRuleContext<LLVMIRParser::DiSPFlagContext>(i);
}


size_t LLVMIRParser::SpFlagsFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleSpFlagsField;
}


std::any LLVMIRParser::SpFlagsFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitSpFlagsField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::SpFlagsFieldContext* LLVMIRParser::spFlagsField() {
  SpFlagsFieldContext *_localctx = _tracker.createInstance<SpFlagsFieldContext>(_ctx, getState());
  enterRule(_localctx, 748, LLVMIRParser::RuleSpFlagsField);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4233);
    match(LLVMIRParser::T__468);

    setState(4234);
    diSPFlag();
    setState(4239);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LLVMIRParser::T__395) {
      setState(4235);
      match(LLVMIRParser::T__395);
      setState(4236);
      diSPFlag();
      setState(4241);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SplitDebugFilenameFieldContext ------------------------------------------------------------------

LLVMIRParser::SplitDebugFilenameFieldContext::SplitDebugFilenameFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::SplitDebugFilenameFieldContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::SplitDebugFilenameFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleSplitDebugFilenameField;
}


std::any LLVMIRParser::SplitDebugFilenameFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitSplitDebugFilenameField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::SplitDebugFilenameFieldContext* LLVMIRParser::splitDebugFilenameField() {
  SplitDebugFilenameFieldContext *_localctx = _tracker.createInstance<SplitDebugFilenameFieldContext>(_ctx, getState());
  enterRule(_localctx, 750, LLVMIRParser::RuleSplitDebugFilenameField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4242);
    match(LLVMIRParser::T__469);
    setState(4243);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SplitDebugInliningFieldContext ------------------------------------------------------------------

LLVMIRParser::SplitDebugInliningFieldContext::SplitDebugInliningFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::BoolConstContext* LLVMIRParser::SplitDebugInliningFieldContext::boolConst() {
  return getRuleContext<LLVMIRParser::BoolConstContext>(0);
}


size_t LLVMIRParser::SplitDebugInliningFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleSplitDebugInliningField;
}


std::any LLVMIRParser::SplitDebugInliningFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitSplitDebugInliningField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::SplitDebugInliningFieldContext* LLVMIRParser::splitDebugInliningField() {
  SplitDebugInliningFieldContext *_localctx = _tracker.createInstance<SplitDebugInliningFieldContext>(_ctx, getState());
  enterRule(_localctx, 752, LLVMIRParser::RuleSplitDebugInliningField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4245);
    match(LLVMIRParser::T__470);
    setState(4246);
    boolConst();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StrideFieldContext ------------------------------------------------------------------

LLVMIRParser::StrideFieldContext::StrideFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldOrIntContext* LLVMIRParser::StrideFieldContext::mdFieldOrInt() {
  return getRuleContext<LLVMIRParser::MdFieldOrIntContext>(0);
}


size_t LLVMIRParser::StrideFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleStrideField;
}


std::any LLVMIRParser::StrideFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitStrideField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::StrideFieldContext* LLVMIRParser::strideField() {
  StrideFieldContext *_localctx = _tracker.createInstance<StrideFieldContext>(_ctx, getState());
  enterRule(_localctx, 754, LLVMIRParser::RuleStrideField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4248);
    match(LLVMIRParser::T__471);
    setState(4249);
    mdFieldOrInt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringLengthFieldContext ------------------------------------------------------------------

LLVMIRParser::StringLengthFieldContext::StringLengthFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::StringLengthFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::StringLengthFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleStringLengthField;
}


std::any LLVMIRParser::StringLengthFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitStringLengthField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::StringLengthFieldContext* LLVMIRParser::stringLengthField() {
  StringLengthFieldContext *_localctx = _tracker.createInstance<StringLengthFieldContext>(_ctx, getState());
  enterRule(_localctx, 756, LLVMIRParser::RuleStringLengthField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4251);
    match(LLVMIRParser::T__472);
    setState(4252);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringLengthExpressionFieldContext ------------------------------------------------------------------

LLVMIRParser::StringLengthExpressionFieldContext::StringLengthExpressionFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::StringLengthExpressionFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::StringLengthExpressionFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleStringLengthExpressionField;
}


std::any LLVMIRParser::StringLengthExpressionFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitStringLengthExpressionField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::StringLengthExpressionFieldContext* LLVMIRParser::stringLengthExpressionField() {
  StringLengthExpressionFieldContext *_localctx = _tracker.createInstance<StringLengthExpressionFieldContext>(_ctx, getState());
  enterRule(_localctx, 758, LLVMIRParser::RuleStringLengthExpressionField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4254);
    match(LLVMIRParser::T__473);
    setState(4255);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringLocationExpressionFieldContext ------------------------------------------------------------------

LLVMIRParser::StringLocationExpressionFieldContext::StringLocationExpressionFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::StringLocationExpressionFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::StringLocationExpressionFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleStringLocationExpressionField;
}


std::any LLVMIRParser::StringLocationExpressionFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitStringLocationExpressionField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::StringLocationExpressionFieldContext* LLVMIRParser::stringLocationExpressionField() {
  StringLocationExpressionFieldContext *_localctx = _tracker.createInstance<StringLocationExpressionFieldContext>(_ctx, getState());
  enterRule(_localctx, 760, LLVMIRParser::RuleStringLocationExpressionField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4257);
    match(LLVMIRParser::T__474);
    setState(4258);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SysrootFieldContext ------------------------------------------------------------------

LLVMIRParser::SysrootFieldContext::SysrootFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::SysrootFieldContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::SysrootFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleSysrootField;
}


std::any LLVMIRParser::SysrootFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitSysrootField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::SysrootFieldContext* LLVMIRParser::sysrootField() {
  SysrootFieldContext *_localctx = _tracker.createInstance<SysrootFieldContext>(_ctx, getState());
  enterRule(_localctx, 762, LLVMIRParser::RuleSysrootField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4260);
    match(LLVMIRParser::T__475);
    setState(4261);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TargetFuncNameFieldContext ------------------------------------------------------------------

LLVMIRParser::TargetFuncNameFieldContext::TargetFuncNameFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::TargetFuncNameFieldContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::TargetFuncNameFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleTargetFuncNameField;
}


std::any LLVMIRParser::TargetFuncNameFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitTargetFuncNameField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::TargetFuncNameFieldContext* LLVMIRParser::targetFuncNameField() {
  TargetFuncNameFieldContext *_localctx = _tracker.createInstance<TargetFuncNameFieldContext>(_ctx, getState());
  enterRule(_localctx, 764, LLVMIRParser::RuleTargetFuncNameField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4263);
    match(LLVMIRParser::T__476);
    setState(4264);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateParamsFieldContext ------------------------------------------------------------------

LLVMIRParser::TemplateParamsFieldContext::TemplateParamsFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::TemplateParamsFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::TemplateParamsFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleTemplateParamsField;
}


std::any LLVMIRParser::TemplateParamsFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitTemplateParamsField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::TemplateParamsFieldContext* LLVMIRParser::templateParamsField() {
  TemplateParamsFieldContext *_localctx = _tracker.createInstance<TemplateParamsFieldContext>(_ctx, getState());
  enterRule(_localctx, 766, LLVMIRParser::RuleTemplateParamsField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4266);
    match(LLVMIRParser::T__477);
    setState(4267);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThisAdjustmentFieldContext ------------------------------------------------------------------

LLVMIRParser::ThisAdjustmentFieldContext::ThisAdjustmentFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::ThisAdjustmentFieldContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::ThisAdjustmentFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleThisAdjustmentField;
}


std::any LLVMIRParser::ThisAdjustmentFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitThisAdjustmentField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ThisAdjustmentFieldContext* LLVMIRParser::thisAdjustmentField() {
  ThisAdjustmentFieldContext *_localctx = _tracker.createInstance<ThisAdjustmentFieldContext>(_ctx, getState());
  enterRule(_localctx, 768, LLVMIRParser::RuleThisAdjustmentField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4269);
    match(LLVMIRParser::T__478);
    setState(4270);
    match(LLVMIRParser::IntLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThrownTypesFieldContext ------------------------------------------------------------------

LLVMIRParser::ThrownTypesFieldContext::ThrownTypesFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::ThrownTypesFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::ThrownTypesFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleThrownTypesField;
}


std::any LLVMIRParser::ThrownTypesFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitThrownTypesField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ThrownTypesFieldContext* LLVMIRParser::thrownTypesField() {
  ThrownTypesFieldContext *_localctx = _tracker.createInstance<ThrownTypesFieldContext>(_ctx, getState());
  enterRule(_localctx, 770, LLVMIRParser::RuleThrownTypesField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4272);
    match(LLVMIRParser::T__479);
    setState(4273);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeMacinfoFieldContext ------------------------------------------------------------------

LLVMIRParser::TypeMacinfoFieldContext::TypeMacinfoFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::TypeMacinfoFieldContext::DwarfMacinfo() {
  return getToken(LLVMIRParser::DwarfMacinfo, 0);
}


size_t LLVMIRParser::TypeMacinfoFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleTypeMacinfoField;
}


std::any LLVMIRParser::TypeMacinfoFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitTypeMacinfoField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::TypeMacinfoFieldContext* LLVMIRParser::typeMacinfoField() {
  TypeMacinfoFieldContext *_localctx = _tracker.createInstance<TypeMacinfoFieldContext>(_ctx, getState());
  enterRule(_localctx, 772, LLVMIRParser::RuleTypeMacinfoField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4275);
    match(LLVMIRParser::T__391);
    setState(4276);
    match(LLVMIRParser::DwarfMacinfo);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypesFieldContext ------------------------------------------------------------------

LLVMIRParser::TypesFieldContext::TypesFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::TypesFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::TypesFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleTypesField;
}


std::any LLVMIRParser::TypesFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitTypesField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::TypesFieldContext* LLVMIRParser::typesField() {
  TypesFieldContext *_localctx = _tracker.createInstance<TypesFieldContext>(_ctx, getState());
  enterRule(_localctx, 774, LLVMIRParser::RuleTypesField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4278);
    match(LLVMIRParser::T__480);
    setState(4279);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnitFieldContext ------------------------------------------------------------------

LLVMIRParser::UnitFieldContext::UnitFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::UnitFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::UnitFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleUnitField;
}


std::any LLVMIRParser::UnitFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitUnitField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::UnitFieldContext* LLVMIRParser::unitField() {
  UnitFieldContext *_localctx = _tracker.createInstance<UnitFieldContext>(_ctx, getState());
  enterRule(_localctx, 776, LLVMIRParser::RuleUnitField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4281);
    match(LLVMIRParser::T__481);
    setState(4282);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UpperBoundFieldContext ------------------------------------------------------------------

LLVMIRParser::UpperBoundFieldContext::UpperBoundFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldOrIntContext* LLVMIRParser::UpperBoundFieldContext::mdFieldOrInt() {
  return getRuleContext<LLVMIRParser::MdFieldOrIntContext>(0);
}


size_t LLVMIRParser::UpperBoundFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleUpperBoundField;
}


std::any LLVMIRParser::UpperBoundFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitUpperBoundField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::UpperBoundFieldContext* LLVMIRParser::upperBoundField() {
  UpperBoundFieldContext *_localctx = _tracker.createInstance<UpperBoundFieldContext>(_ctx, getState());
  enterRule(_localctx, 778, LLVMIRParser::RuleUpperBoundField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4284);
    match(LLVMIRParser::T__482);
    setState(4285);
    mdFieldOrInt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueIntFieldContext ------------------------------------------------------------------

LLVMIRParser::ValueIntFieldContext::ValueIntFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::ValueIntFieldContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::ValueIntFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleValueIntField;
}


std::any LLVMIRParser::ValueIntFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitValueIntField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ValueIntFieldContext* LLVMIRParser::valueIntField() {
  ValueIntFieldContext *_localctx = _tracker.createInstance<ValueIntFieldContext>(_ctx, getState());
  enterRule(_localctx, 780, LLVMIRParser::RuleValueIntField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4287);
    match(LLVMIRParser::T__393);
    setState(4288);
    match(LLVMIRParser::IntLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueStringFieldContext ------------------------------------------------------------------

LLVMIRParser::ValueStringFieldContext::ValueStringFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::ValueStringFieldContext::StringLit() {
  return getToken(LLVMIRParser::StringLit, 0);
}


size_t LLVMIRParser::ValueStringFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleValueStringField;
}


std::any LLVMIRParser::ValueStringFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitValueStringField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::ValueStringFieldContext* LLVMIRParser::valueStringField() {
  ValueStringFieldContext *_localctx = _tracker.createInstance<ValueStringFieldContext>(_ctx, getState());
  enterRule(_localctx, 782, LLVMIRParser::RuleValueStringField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4290);
    match(LLVMIRParser::T__393);
    setState(4291);
    match(LLVMIRParser::StringLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarFieldContext ------------------------------------------------------------------

LLVMIRParser::VarFieldContext::VarFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::VarFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::VarFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleVarField;
}


std::any LLVMIRParser::VarFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitVarField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::VarFieldContext* LLVMIRParser::varField() {
  VarFieldContext *_localctx = _tracker.createInstance<VarFieldContext>(_ctx, getState());
  enterRule(_localctx, 784, LLVMIRParser::RuleVarField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4293);
    match(LLVMIRParser::T__483);
    setState(4294);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VirtualIndexFieldContext ------------------------------------------------------------------

LLVMIRParser::VirtualIndexFieldContext::VirtualIndexFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::VirtualIndexFieldContext::IntLit() {
  return getToken(LLVMIRParser::IntLit, 0);
}


size_t LLVMIRParser::VirtualIndexFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleVirtualIndexField;
}


std::any LLVMIRParser::VirtualIndexFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitVirtualIndexField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::VirtualIndexFieldContext* LLVMIRParser::virtualIndexField() {
  VirtualIndexFieldContext *_localctx = _tracker.createInstance<VirtualIndexFieldContext>(_ctx, getState());
  enterRule(_localctx, 786, LLVMIRParser::RuleVirtualIndexField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4296);
    match(LLVMIRParser::T__484);
    setState(4297);
    match(LLVMIRParser::IntLit);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VirtualityFieldContext ------------------------------------------------------------------

LLVMIRParser::VirtualityFieldContext::VirtualityFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LLVMIRParser::VirtualityFieldContext::DwarfVirtuality() {
  return getToken(LLVMIRParser::DwarfVirtuality, 0);
}


size_t LLVMIRParser::VirtualityFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleVirtualityField;
}


std::any LLVMIRParser::VirtualityFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitVirtualityField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::VirtualityFieldContext* LLVMIRParser::virtualityField() {
  VirtualityFieldContext *_localctx = _tracker.createInstance<VirtualityFieldContext>(_ctx, getState());
  enterRule(_localctx, 788, LLVMIRParser::RuleVirtualityField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4299);
    match(LLVMIRParser::T__485);
    setState(4300);
    match(LLVMIRParser::DwarfVirtuality);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VtableHolderFieldContext ------------------------------------------------------------------

LLVMIRParser::VtableHolderFieldContext::VtableHolderFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LLVMIRParser::MdFieldContext* LLVMIRParser::VtableHolderFieldContext::mdField() {
  return getRuleContext<LLVMIRParser::MdFieldContext>(0);
}


size_t LLVMIRParser::VtableHolderFieldContext::getRuleIndex() const {
  return LLVMIRParser::RuleVtableHolderField;
}


std::any LLVMIRParser::VtableHolderFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LLVMIRVisitor*>(visitor))
    return parserVisitor->visitVtableHolderField(this);
  else
    return visitor->visitChildren(this);
}

LLVMIRParser::VtableHolderFieldContext* LLVMIRParser::vtableHolderField() {
  VtableHolderFieldContext *_localctx = _tracker.createInstance<VtableHolderFieldContext>(_ctx, getState());
  enterRule(_localctx, 790, LLVMIRParser::RuleVtableHolderField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4302);
    match(LLVMIRParser::T__486);
    setState(4303);
    mdField();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool LLVMIRParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 87: return typeSempred(antlrcpp::downCast<TypeContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool LLVMIRParser::typeSempred(TypeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 13);
    case 1: return precpred(_ctx, 10);

  default:
    break;
  }
  return true;
}

void LLVMIRParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  llvmirParserInitialize();
#else
  ::antlr4::internal::call_once(llvmirParserOnceFlag, llvmirParserInitialize);
#endif
}
